#!/bin/zsh
# Generic bootiso binary package generator.

BOOTLOADER=$1
WITHCONTRIB=$2

CONFIGURE_OPTIONS=

TARGET=$BUILDTARGET
if [[ "$VARIANT" != "" ]]; then
    BUILDTARGET=$VARIANT-$TARGET
fi

source  $SP/setup

# The log-name MUST match the name of the package script
setl   bootiso-$BOOTLOADER-$BUILDTARGET.log

ARCHIVE_BASE=$ARCHIVE_BASE/Binaries

printi "Creating AROS/$BUILDTARGET bootiso binary packages (with $BOOTLOADER)..."

delete  $BUILD_BASE/AROS
copy    $SOURCE_AROS      $BUILD_BASE/AROS
if [[ "$WITHCONTRIB" != "no" ]]; then
    copy    $SOURCE_CONTRIB $BUILD_BASE/AROS/contrib
fi

CONFIGURE_OPTIONS="--target=$TARGET --enable-target-variant=$VARIANT $CONFIGUREEXTRA --enable-ccache"
if [[ ( "$AROSTOOLCHAININSTALLOPT" != "" ) && -e  $TOOLCHAIN_BASE/$BUILDCPU-aros-gcc ]]; then
     CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $AROSTOOLCHAININSTALLOPT $AROSTOOLCHAINOPT"
fi
CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS --with-bootloader=$BOOTLOADER --enable-build-type=nightly $PORTSSOURCESOPT"

cd      $BUILD_BASE/AROS
execute ./configure $CONFIGURE_OPTIONS
make    -j $MAKE_JOBS
if [[ "$WITHCONTRIB" != "no" ]]; then
    make    -j $MAKE_JOBS contrib
fi

ISOFILE=aros-$BUILDTARGET.iso
PACKAGE=$BASENAME-$BUILDTARGET-boot-iso
ARCHIVE=$ARCHIVE_BASE/$PACKAGE.zip

cd      $BUILD_BASE/AROS
make    -j $MAKE_JOBS bootiso
makedir $BUILD_BASE/$PACKAGE
copy    $BUILD_BASE/AROS/distfiles/$ISOFILE $BUILD_BASE/$PACKAGE
cd      $BUILD_BASE
copy    $SOURCE_AROS/LICENSE $PACKAGE
copy    $SOURCE_AROS/ACKNOWLEDGEMENTS $PACKAGE
ziparc  $ARCHIVE $PACKAGE
delete  $PACKAGE

cd      $ROOT
delete  $BUILD_BASE/AROS
resetl

