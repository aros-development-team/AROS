$Id$


                  Building AROS on the Amiga
                  ==========================

Here's some handy instructions to get started developing AROS
on the Amiga. Please address any comments and questions to
<bernardo.innocenti@usa.net> or post in the AROS mailing list.


1. System requirements
   -------------------

   Please understand that AROS is a huge project: developing
   for it requires a considerable amount of resources.
   Some minimum system requirements:

   a) A fast processor. Compiling AROS from scratch with a
      25MHz 68040 will take 1-2 hours.

   b) At least 40MB of free space to store the sources, the
      intermediate files and the generated binaries. This will
      probably increase in the future as the project grows.

      Consider some additional space (~15MB) for the GeekGadget
      tools if you don't have them already.

   c) At least 8MB of free memory: gcc, make, sh and friends
      are hogs.



2. Required Tools
   --------------

   Compiling AROS requires several GNU tools which have been
   ported to AmigaOS in the GeekGadgets developer environment.

   If you don't have a working GeekGadgets installation yet,
   you will have to get several packages and install them before
   you can build AROS. GeekGadgets tools are available from
   ftp.geekgadgets.org and its mirrors:

      ftp://ftp.geekgadgets.org/pub/geekgadgets/  (main site)
      ftp://ftp.unina.it/pub/Amiga/geekgadgets/   (full mirror)

   I recommend using ftp.unina.it because it's much faster
   and it's always up to date.

   Log into one of these ftp sites and cd to the subdirectory of
   the latest GeekGadgets binary snapshot:

      amiga/m68k/snapshots/current/bin


   This is a (perhaps partial) list of what you may need:

      GG-docs-0.7-bin.tgz      useful documentation
      GG-misc-bin.tgz          miscellaneous files
      ixemul-47.3-bin.tgz      the ixemul.library
      ixemul-47.3-env-bin.tgz  additional ixemul.library stuff
      ixemul-47.3-inc-bin.tgz  headers needed to compile programs
      binutils-2.8.1-bin.tgz   assembler, linker and other stuff
      make-3.76.1-bin.tgz      the GNU make utility
      pdksh-4.9-bin.tgz        the UNIX korn shell, used by makefiles
      fileutils-3.16-bin.tgz   miscellaneous shell commands
      sh-utils-1.16-bin.tgz    miscellaneous shell commands
      diffutils-2.7-bin.tgz    perhaps not needed but nice to have
      grep-2.1-bin.tgz         grep, used by several makefiles
      gawk-3.0.3-bin.tgz       awk, used by several makefiles
      sed-2.05-bin.tgz         sed, used by several makefiles
      cvs-1.9.26-bin.tgz       needed to access the AROS source repository
      autoconf-2.12-bin.tgz    needed by AROS configure script
      automake-1.2f-bin.tgz    needed by AROS configure script

   Additionally, get egcs-1.1b-bin020.tar.gz (egcs is the successor
   of gcc) from the amiga/m68k/alpha/misc/ subdirectory and install
   it in the same way.

   Install the packages by unpacking all archives in the same
   directory, as explained in the GeekGadgets documentation.

   If you don't have tar and gzip, you can get them from the
   BOOT.lha archive located in the amiga/m68k/snapshots/current/
   subdirectory.

   Now you should have a full working GG environment to compile most
   UNIX source code. Read the GeekGadgets documentation and try to
   become familiar with the developer tools before you go on.
   To check your installation, try compiling a small program with gcc.



3. Getting the source code
   -----------------------

   The AROS source code is kept in a shared repository managed by
   the Concurrent Version System (CVS). Read the CVS documentation
   to learn more on shared developement issues.

   Before you can get a copy of the latest source code, you need
   an accout for yourself. The anonymous login is currently
   disabled due to our status with Amiga Inc., which says that we
   must have a licence.

   Follow the instructions on http://www.aros.org to obtain your
   personal CVS account.

   Once you have a valid login and password, do the following to get
   a local copy of the full source tree:

      > set CVSROOT :pserver:<login>@cvs.aros.org:/home/cvs/aros
      > cvs login
         [enter your password at the prompt]
      > cvs update -d

   You might want to save these commands in a script that you run
   each time you want to update your source tree.

   When run for the first time, the update will take a lot of time.
   The good news is that you can safely break cvs at any time and
   continue later.

   The source tree lives in a directory called AROS/. Do not delete
   the CVS/ and CVSROOT/ subdirectories: they contain information used
   by cvs to keep your source tree in sync with the repository.



4. Setting up your AROS development environment
   ---------------------------------------------

   Before you begin, make sure your environment is set up correctly
   to build AROS.


   a) make sure that assigns required by the GeekGadgets are correct.
      The following commands are absolutely required:

         > assign gg:  <your_gg_dir>
         > assign bin: gg:bin
         > assign etc: gg:etc
         > assign tmp: T:

   b) make sure that the GeekGadgets utilities come in the shell path
      before other AmigaDOS utilities with the same name, otherwise
      you will spend hours trying to understand why sort does not work.

         > Path C: REMOVE
         > PATH BIN: ADD

   c) Make some of the most frequently used GeekGadgets utilities
      resident to improve speed when compiling AROS. WARNING: do not
      make resident any executable which isn't really pure!

         > Resident GG:bin/sh
         > Resident GG:bin/make
         > Resident GG:bin/true


   d) Use a big stack. Most (but not all!) of the GeekGadgets tools
      are compiled with automatic stack extension, but frequent stack
      extension will reduce the performance.

         > stack 262144

   e) assign AROS: to the AROS directory created by CVS.

         > assign AROS: <your_AROS_dir>

   f) to improve overall performance, store the AROS source code
      in a fast disk, perhaps using a good filesystem such as
      SmartFileSystem or PFS2. You can safely make the partition
      case sensitive: this way you'll catch upper/lower case
      typos which would break AROS when compiling on a UNIX OS.



5. Build all the tools used in the compilation process
   ---------------------------------------------------

   a) The MetaMake utility (mmake)

			> cd AROS:tools/MetaMake
			> sh ./configure -v --prefix=/gg
			> make
			> make install


		If configure doesn't work, try this:

			> copy Makefile.amiga Makefile
			> copy config.h.amiga config.h
			> make
			> copy mmake gg:bin/

		If this doesn't work either, your GeekGadgets
		installation is probably broken, but you can
		still try to compile mmake directly:

			> gcc mmake.c -o mmake
			> copy mmake gg:bin


	b) The Makefile-Generation tool (genmf)

			> cd AROS:tools/genmf
			> make

	c) The function-packer (cpak)

		This one should not be needed to be compiled first,
		because it will be generated "on the fly" (if needed),
		but the automatic generation does not work on Amiga.

			> cd AROS:tools/cpak
			> make

	d) The function archive utility (archtool)
		Should be generated automatically, but there are
		still problems with mixing system and AROS headers
		when archtool is made on the fly.

			> cd AROS:tools/archtools
			> make



6. Running configure
   -----------------

	Run 'autoconf' at the top dir to create configure from configure.in

	Use "sh ./configure --help" for all possible options, then
	type:

		> sh ./configure <options>

	The configure script will examine your system and create
	the necessary files for the build. It is very likely that
	configure will fail on your Amiga. Debugging configure is
	not easy. If it doesn't work, you can try using
	snoopdos and/or ixtrace to find out what is going wrong
	and fix it. Use "sh -v ./configure" to see what commands are run by sh.

	You can also look in the "config.log" file that configure will
	generate to see what exactly went wrong.


7. Configuring mmake
   -----------------

	mmake reads its configuration file from one of these locations:

		$MMAKE_CONFIG
		$HOME/.mmake.config
		<current_dir>/.mmake.config
		<current_dir>/mmake.config

	Copy AROS:mmake.config.in to your favourite location and either
	set MMAKE_CONFIG to it, or put it in your HOME: directory.

	Edit the mmake configuration file for your system.
	My HOME:.mmake.config looks like this:

		[AROS]
		top /AROS
		maketool make TOP=$(TOP) CURDIR=$(CURDIR) TARGET=$(TARGET)
		defaultmakefilename mmakefile
		defaulttarget AROS
		genmakefilescript $(TOP)/tools/genmf/genmf $(TOP)/config/make.tmpl < mmakefile.src > mmakefile
		genmakefiledeps $(TOP)/tools/genmf/genmf $(TOP)/config/make.tmpl
		globalvarfile $(TOP)/config/host.cfg
		genglobalvarfile sh $(TOP)/configure

		ignoredir CVS
		ignoredir bin
		#add compiler/include/makefile
		#add makefile



8. Configuring make.opts
   ---------------------

	all mmakefiles will read AROS:make.opts to get some additional
	configuration parameters. The contents of this file will override
	anything in AROS:make.defaults. My AROS:mmake.opts file looks like this:

		# Do we build the libraries shared (.so = yes) or static (.a = no)
		SHARED_EXEC = no
		SHARED_DOS = no
		SHARED_UTILITY = no
		SHARED_GRAPHICS = no
		SHARED_INTUITION = no
		SHARED_MATHFFP = no
		SHARED_MATHIEEESINGBAS = no
		SHARED_EXPANSION = no
		SHARED_BOOPSI = no
		SHARED_AROS = no
		SHARED_TIMER = no
		SHARED_BATTCLOCK = no
		SHARED_BOOT = no

		# Include debugging information (so you can use gdb or similar)
		DEBUG = no



9. Compiling the sources
   ---------------------

	to build all AROS stuff, just type:

		> mmake

	if you get any errors, try to fix the problem first,
	and ask in the mailing list if you can't guess yourself.

	- object files are placed in AROS:bin/amiga-m68k/gen/
	- binary files are placed in AROS:bin/amiga-m68k/AROS/



10. Joining the AROS mailing list
    -----------------------------

 Before you begin developing for AROS, you'd better join the mailing
list. You'll find information on how to do it on the AROS main site:

	http://www.aros.org/



11. AROSfA Frequently Asked Questions
    ---------------------------------

 This chapter answers to some (frequently) asked questions, and other
things to note when running AROSfA (AROS for Amiga).
 
 Q. How do I install AROSfA?
 A. After you extract the binary archive, you have a directory called "AROS".
    In this directory you will find system replacement modules, tools to boot
    and diagnose AROS, and AROS' current include files.
 
    If you "cd" to this directory, you can start AROS by running "boot".
    After you have reset your machine, AROS will be active.
 
 Q. I have all sorts of problems trying to use AROSfA. What gives?
 A. AROSfA is still in an alpha state. Currently we are trying to get some
    more diverse feedback about the configurations it runs on, and which
    configurations it causes problems with. Your error/bug reports are very
    welcome and help to improve AROS.
 
    If you have a problem, and you suspect one of the AROSfA modules is the
    cause of this, you can remove it from "boot.config", so it won't be
    loaded. Currently, the modules can be run independently from each other.
 
 Q. I have installed exec.strap, but now I get these weird blue and green
    stripes when booting.
 A. This is normal behaviour. Exec.strap uses these stripes to signal that it
    has started (blue stripes), and that is has patched exec.library (green
    stripes). It is a quick indication that AROS survived the reboot and is
    installing itself.
 
 Q. What should I expect to see if AROSfA works?
 A. Nothing out of the ordinary. If you install AROS, you should still be
    able to use your system as if AROS hadn't been installed. The goal of
    AROSfA is to be as transparently to the programs as possible. This
    binary compatibility makes it possible to run all of your old
    programs.
 
    If you have installed AROSfA, and some program of yours suddenly won't
    work anymore, then either that program is misbehaving and depending on
    quirks in the original OS, or there is something wrong in AROSfA. We
    would sure like to know about this.
 
 Q. Why is there no 68000 version?
 A. Some assembler-instructions that are in the 68020 and higher are not
    implemented on the 68000. Gcc, the c-compiler we use, uses small functions
    to implement this missing functionality on the 68000, but these functions
    are in a linker library. This linker library expects to be used together
    with one of the standard startup-files (*crt.o). We don't use these
    startup files, so the module cannot be successfully linked (unresolved
    references).
    If you know how to circumvent this, we would surely like to know! :)                             

 Q. I have Kickstart v37, and after I start AROS, the version is still v37!
    I thought AROS was supposed to completely mimick v39/v40?
 A. Unfortunately, the kickstart version is in ROM and there is no way for
    AROS to change it, so "version" still reports v37.
 
 Q. I've downloaded AROS, but I have some problems.
 A. We are continually improving AROS. Chances are your problem is already
    fixed. Binary updates for AROSfA modules used to be available at the
    following support webpage:
 
    http://www.xs4all.nl/~ldp/aros/

    Please note that this page is not being updated any longer.
 
    If the latest versions still have the problem, and there is no mention
    of it on the "known problems" list, we may not be aware that there is a
    problem. Why not tell us?
 
 Q. Why is there so little documentation?
 A. There actually is a lot more (technical) information in the sources, but
    since I'm a lousy doc writer (there, I admit it! :)), it hasn't been
    compiled into real docs.
 
 Q. So, what kind of system do you use to program AROS? Why does it work ok
    for you, but causes all kinds of problems for me?
 A. AROSfA is being developed on this system:
    - A1200/Blizzard A1230-IV/nofpu/2+8 meg RAM/maprom on
    - "setcpu cache burst"
    - "blizkick devs:kickstart localfast speedrom"
    - Kickstart 39.106, Workbench 40.42
    - setpatch 40.16 (14-02-1994)
    - muFS 40.11 (15-05-1994)
    - KingCON 68020+ 1.3 (31-05-1994) (completely replaces CON:/RAW:)
    - ToolManager 2.1 (16-05-1993)
    - MCP 1.22 wildstar/borderblank/noclick/formatprotect/rtpatch/assignprefs/
               promotor/cycletomenu
 
 Q. I have just run "boot", and now I use "printresmodules", but I can't spot
    the modules I have just loaded. Is something wrong?
 A. No, not at all. The "printresmodules" tool prints the system list of
    Resident Modules. The modules you have just installed will only be started
    during the next reset, so they won't show up in the list until then.
 
 Q. "boot" loads the modules into my chip ram! I'd rather have them in fast!
    What gives?
 A. AROS modules are loaded into RAM. The area of RAM they are loaded in has to
    be available very early during the system reset procedure. Some RAM boards
    that are not AutoConfig[tm] are late at adding their RAM to the system.
    Their RAM may not be available when some AROS modules want to be started,
    and the system may be jumping into nothingness, causing a crash.
    On OS39+, "boot" allocates memory of type MEMF_KICK. This attribute is given
    to memory that qualifies for this requirement. This may not help in all
    cases, but tools such as "blizkick localfast" may help.

    On OS37, this memory attribute was not implemented. "boot" has no way of
    knowing which memory it can use for the modules. For compatibility, it
    defaults to MEMF_CHIP, which is guaranteed to be available. You can force
    the modules to be loaded into fastmem by using "boot -f".
 
 Q. My viruskiller reports a possible virus when I'm running AROSfA.
 A. Your viruskiller is expressing a genuine concern. Viruses are known to use
    the same methods as AROS to be able to survive a reboot. To be more
    specific: AROS uses the KickTagPtr/KickMemPtr fields. If your viruskiller
    complains that something is using these fields, and you are running AROS,
    you can ignore the warning. Another type of program that uses these fields
    is the RAD:-drive.
 
 Q. I was using the RAD:-drive, but after I ran "boot -x" or "boot -X", it
    was no longer alive after a reset.
 A. Correct. RAD: uses these KickTagPtr/KickMemPtr fields of Execbase to
    survive a reboot, and "boot -x" and "boot -X" erase these fields in
    ExecBase. This causes RAD: to die during the reset.

