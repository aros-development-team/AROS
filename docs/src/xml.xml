<chapter title="XML Rules">

<p>These are rules for XML files for AROS. XML does not rule :-)
There are various reasons why XML sucks:
</p>

<ol>
<li>To process XML, you must have several MB worth of software installed
(parser with encodings, a processor and all must work together).</li>
<li>This huge software usually has bugs (encodings which don't
work, XPaths which work with one processor and not with another,
different versions of the standard, etc).</li>
<li>Writing DTDs (which define how a document must look like) is
simple but DTDs are not very powerful (Just try to simulate our
&lt;code&gt; element which is terminated by "&lt;/code&gt;" and
not by the next element which is usally part of an <code>if()</code>).</li>
<li>Exesise for the curious reader: Write a DTD which has an
element &lt;duration&gt;. The &lt;duration&gt; element has
an attribute time which can have the following values: 4, 8
and "One Day" (note the space).</li>
<li>Writing transformers with XSL T is clumsy and mistakes (frustration) are
common.</li>
<li>If XML is simple, why is it explained in a 800 page tome ?</li>
</ol>

<p>To make a long story short, Aaron "Optimizer" Digulla has defined
a subset of XML which is used in AROS to document things. The goal
was to have something which is close enough to XML to eventually allow
to convert it into full fledged XML (so XSL processing would be an
option if someone was insane enough to try) but flexible enough
to be used by humans (as opposed to XML which is meant to be created
by software and read by software without any human intervention).
This way, the best of both worlds should be available</p>

<section title="Basic markup rules">

<p>AROS' version of XML uses the same rules for elements as the
normal XML. Since XML needs &lt; and &gt; to delimit elements,
you must write "&amp;lt;" and "&amp;gt;" (without the quotes)
respectively. To get an &amp;, you must write "&amp;amp;".
And to complete things, the XML encoding for " (&amp;quot;)
is also supported. These things are called entities.</p>

<p>A tag is something between &lt; and &gt;. &lt;code&gt; is
a tag with the name "code". &lt;/code&gt; is also a tag as is
&lt;code/&gt;. They all have the same name but slightly different
meanings.</p>

<description>
<li><item>&lt;code&gt;</item>This is the beginning of an element.</li>
<li><item>&lt;/code&gt;</item>This is the end of an element.</li>
<li><item>&lt;code/&gt;</item>This is an empty element.</li>
</description>

<p>An element is something between two tags with the same name.
&lt;p&gt;Some text&lt;p&gt; is an element with the name "p" and
the contents "Some text". &lt;br/&gt; is an element with the name
"br" and no contents.</p>

<p>In addition to contents, an element can have attributes. Attributes
are added the the start tag of an element and look like this: name="value".
So &lt;p align="center"&gt;Some text&lt;p&gt; is an element with the
name "p", the attribute "align" and the contents "Some text". The attribute
"align" has the value "center". Note that the value of an attribute
<strong>must be quoted</strong>.</p>

<p>Unlike HTML, elements must always be complete. So you must either
write &lt;p&gt;&lt;/p&gt; or &lt;p/&gt; but you must not omit the
end tag.</p>

<p>Also note that every document must have exactly one element which
contains all other elements. This element is referred to as "root
element".</p>

<p>To put a comment in XML, use "&lt;!--". The comment is terminated
with "--&gt;". The XML parser looks exactly for this string and will
ignore anything else.</p>

</section>
<section title="User specific entities">

<p>An additon to &amp;lt;, &amp;gt;, &amp;amp; and &amp;quot;, one can
add other, user specific entities to AROS' XML parser. Basically,
an entity must be a piece of XML which will be inserted at the
current position. So defining an entity with the contents
".&lt;/p&gt;" does not work.</p>

</section>
<section title="AROS' DTD">

<p>Since AROS doesn't use a real DTD, parsing is much more flexible but
explaining what elements can be used where is more complicated :-)
Most elements can be used everywhere. Here is a table:</p>

<table>
<tr>
    <th>Element</th>
    <th>Explanation</th>
    <th>Usage info</th>
</tr>
<tr>
    <td valign="top">p</td>
    <td valign="top">Used for paragraphs.</td>
    <td valign="top">Can contain text and most other elements.</td>
</tr>
<tr>
    <td valign="top">ul</td>
    <td valign="top">Unordered list. Use &lt;li&gt; elements as children.</td>
    <td valign="top">Can only contain &lt;li&gt; elements.</td>
</tr>
<tr>
    <td valign="top">li</td>
    <td valign="top">This is a list item which is used in all types of lists.</td>
    <td valign="top">ul, ol, description</td>
</tr>
<tr>
    <td valign="top">strong</td>
    <td valign="top">Mark some text as important (bold)</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">i</td>
    <td valign="top">Italics</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">a</td>
    <td valign="top">A link (&lt;a href="url"&gt;text&lt;/a&gt;) or an anchor
	(&lt;a name="id"/&gt;).
    </td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">tt</td>
    <td valign="top">Use a typewriter font for the contents</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">img</td>
    <td valign="top">An inline image: &lt;img src="url" width="..." height="..." alt="..."/&gt;</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">ol</td>
    <td valign="top">A numbered (ordered) list</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">br</td>
    <td valign="top">An empty element which starts a new line (BReak).</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">chapter</td>
    <td valign="top">Usually the root element of the documentation files.
	It has one attribute "title" which is the title of the
	chapter.
    </td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">section</td>
    <td valign="top">This is a section of something larger. Usually used in
	a &lt;chapter&gt; element.
	It has one attribute "title" which is the title of the
	section.
    </td>
    <td valign="top">chapter</td>
</tr>
<tr>
    <td valign="top">subsection</td>
    <td valign="top">A part of a &lt;section&gt; element.
	It has one attribute "title" which is the title of the
	subsection.
    </td>
    <td valign="top">section</td>
</tr>
<tr>
    <td valign="top">email</td>
    <td valign="top">Describes an email address. Give the email address you want to
	describe as contents. It has the optional attribute "subject"
	which should be the subject of the mail sent to the address
	and "body" which should be the text in the email.
    </td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">example</td>
    <td valign="top">An example is an element which contains fixed lines of text
	which make up an example. The only valid children of an
	&lt;example&gt; element are &lt;line&gt; elements.
    </td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">user</td>
    <td valign="top">A &lt;user&gt; element contains something which the user must
	enter and possible modiy, for example: To copy a file,
	use "cp &lt;file1&gt; &lt;file2&gt;".
    </td>
    <td valign="top">Often used in &lt;example&gt; elements</td>
</tr>
<tr>
    <td valign="top">shell</td>
    <td valign="top">This is something which the computer will display, for example
	the prompt the the shell or output of a program which the user
	has run. It's usually used as a guideline for the user what
	he should see on the screen as the result of something he has
	done.
    </td>
    <td valign="top">Often used in &lt;example&gt; elements</td>
</tr>
<tr>
    <td valign="top">code</td>
    <td valign="top">The &lt;code&gt; element is used to mark source code (C source in this
	case). An HTML converter can use syntax highlighting on the
	contents, for example. The element can contain arbitrary text
	and must be terminated with a &lt;/code&gt; element. The
	XML parser will just look for the string "&lt;/code&gt;"
	ignoring everything else.
    </td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">filename</td>
    <td valign="top">Use to mark a path or a filename. An HTML converter could replace
	this with a link to the file.
    </td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">class</td>
    <td valign="top">The name of an OOP class</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">idea</td>
    <td valign="top">This is something like a section. It has an attribute "title"
	and an attribute "by" which should specify who had the idea
	(in case you want to ask specific questions).
    </td>
    <td valign="top">Besides all normal elements, you can use &lt;comment&gt;
	elements to add comments to an idea.
    </td>
</tr>
<tr>
    <td valign="top">comment</td>
    <td valign="top">This is a comment to an idea. It has an attribute "by" to
    specify who made that comment.</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">description</td>
    <td valign="top">A list of descriptions. Every description is a &lt;li&gt;
	element which must start with an &lt;item&gt;element.
    </td>
    <td valign="top">Can only contain &lt;li&gt; elements.</td>
</tr>
<tr>
    <td valign="top">insert</td>
    <td valign="top">Insert something here (for example, the list of developers).
	The contents of the element describe what to insert.
    </td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">tree</td>
    <td valign="top">A recursive tree of items. Can be used to describe a hierarchy
	of things. A tree can only contain &lt;item&gt; elements
	which can in turn contain &lt;tree&gt; elements and text
	which describes the item.
    </td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">item</td>
    <td valign="top">An item is used an several places. It can be used in a
	&lt;li&gt; element of a description list to specify what
	is described (contents of the &lt;item&gt; element).
	And it can be used in a &lt;tree&gt;
	element to describe a recursive tree. In a tree,
	an &lt;item&gt; element has an attribute "title".
    </td>
    <td valign="top">description, tree</td>
</tr>
<tr>
    <td valign="top">autodoc</td>
    <td valign="top">Contains an AutoDoc description if there is no source
	file from which one can be extracted.
    </td>
    <td valign="top">Must contain &lt;name&gt;, &lt;function&gt;, &lt;input&gt; and &lt;result&gt;. Can contain &lt;notes&gt;, &lt;bugs&gt; and &lt;seealso&gt;.</td>
</tr>
<tr>
    <td valign="top">name</td>
    <td valign="top">Describes what this &lt;autodoc&gt; element is about</td>
    <td valign="top">autodoc</td>
</tr>
<tr>
    <td valign="top">function</td>
    <td valign="top">Explain this &lt;autodoc&gt; element.</td>
    <td valign="top">autodoc</td>
</tr>
<tr>
    <td valign="top">input</td>
    <td valign="top">If this is a function, explain the input parameters with
	&lt;parameter&gt; elements.
    </td>
    <td valign="top">autodoc, can only contain &lt;parameter&gt; elements</td>
</tr>
<tr>
    <td valign="top">parameter</td>
    <td valign="top">Explain a parameter of a function in an &lt;autodoc&gt; element.
	The attribute "name" specifies the name of the parameter. The
	contents contain the explanation.
    </td>
    <td valign="top">input</td>
</tr>
<tr>
    <td valign="top">result</td>
    <td valign="top">Explains the result(s) of this &lt;autodoc&gt; element.</td>
    <td valign="top">autodoc</td>
</tr>
<tr>
    <td valign="top">seealso</td>
    <td valign="top">A list of items which are related to this &lt;autodoc&gt; element.
    </td>
    <td valign="top">autodoc, can only contain items</td>
</tr>
<tr>
    <td valign="top">table</td>
    <td valign="top">A HTML table</td>
    <td valign="top"></td>
</tr>
<tr>
    <td valign="top">tr</td>
    <td valign="top">A row of a &lt;table&gt; element</td>
    <td valign="top">table, can contain th and td</td>
</tr>
<tr>
    <td valign="top">th</td>
    <td valign="top">A heading for a table column</td>
    <td valign="top">tr</td>
</tr>
<tr>
    <td valign="top">td</td>
    <td valign="top">A cell of a table</td>
    <td valign="top">tr</td>
</tr>
<!--
<tr>
    <td valign="top"></td>
    <td valign="top"></td>
    <td valign="top"></td>
</tr>
-->
</table>

</section>

</chapter>
