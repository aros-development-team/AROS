<chapter title="One for all and all for one - CVS" id="CVS">

<section title="Introduction">

<p>CVS is a revision tool. It will maintain a database of the
sources of a project and of the changes made to these sources. It will
also merge any changes you make to the sources with the database.</p>

<p>CVS works with a server, called the repository (the main database), and
clients, called the 'working directory', 'collection of sources' or
'private source directory'. Both the repository and the working
directories can be on the same machine. AROS, however, uses a repository
that is accessible over the internet, so that people all over the world
can help make AROS.</p>

<p>CVS offers a list of commands to merge the most recent version of the
project with the local sources and to publish changes one has made over
the Internet.</p>

</section>
<section title="CVS on Un*x">

<p>If you have Linux or any other Un*x, then all you need is
CVS 1.9 or better.
Note that versions of CVS between 1.9.16 and 1.10 don't work because the
login protocol
has changed. Versions after (and including) 1.10 work again.</p>

<p>If it's not already on your system (type <shell>cvs</shell> to find out),
fetch CVS from one of the many GNU mirrors and install it in your
<filename>$HOME</filename>.</p>

<p>At the request of Amiga Inc, anonymous access has been disabled. You
must register to get a copy of the sources.
To do that,
download <a href="ftp://ftp.aros.org/pub/aros/crypt.c">crypt.c</a>
and follow the instructions in the file.
Think of a good password and use <filename>crypt</filename>
to encode it, like this:</p>

<example>
<line><prompt/><user>make crypt</user></line>
<line><prompt/><user>crypt my_password</user></line>
<line><shell>Encrypting my_password: cbEVHg0j9uNRs</shell></line>
</example>

<p>Now skip the next section and read on in <a href="access">How to get access to
the AROS CVS server</a>.</p>

</section>
<section title="CVS on Amiga">

<p>First, you have to get CVS from GeekGadgets and install it. Then create a
password as follows:</p>

<p>Get the demo for AmiTCP 4.0 (<filename>AmiTCP-demo-40.lha</filename>
in <filename>comm/tcp</filename>) from 
<a href="http://www.aminet.net/">AmiNET</a>
(no need to install AmiTCP; just get the archive and extract the file
<filename>AmiTCP</filename> from it).
You also must have
<filename>ixemul.library</filename> 48.0 (should come with GeekGadgets) and
<filename>ixnet.library</filename> in <filename>LIBS:</filename>.
Then you can create
your password with <filename>crypt</filename> out of the 
<filename>AROS-crypt.lha</filename>
archive from AmiNET (in <filename>dev/misc</filename>) like this:</p>

<example>
<line><prompt/><user>run amitcp:amitcp</user></line>
<line><shell>[CLI 8]</shell></line>
<line><prompt/><user>crypt my_password</user></line>
<line><shell>Encrypting my_password: cbEVHg0j9uNRs</shell></line>
</example>

<p>(you must have the directory where crypt is stored in, in your path or
you must do this in the same directory where crypt is).</p>

<p><strong>CVS doesn't work with Miami.</strong> Miami uses a different routine for
encrypting data than Un*x and therefore passwords generated with Miami
won't work. Sorry.
But you can use Miami with CVS to work on AROS after you have created
a password with AmiTCP.</p>

<p>Versions of AmiTCP greater than 4.3 don't work either; they have changed
the algorithm for encoding the password.</p>

</section>
<section title="How to get access to the AROS CVS server">

<p>Mail the password you have created to me:
<email subject="Access to AROS CVS Server"
    body="Please add [my_login] [password]">digulla@aros.org</email>.
Example:</p>

<example>
<line><user>Please add &lt;my_login&gt; &lt;password&gt;</user></line>
</example>

<p>like this:</p>

<example>
<line><user>Please add digulla xx1LtbDbOY4/E</user></line>
</example>

<p>To check: You should get <shell>xx1LtbDbOY4/E</shell> if you call crypt with
<shell>crypt test xx</shell>. If that doesn't work, download <a
href="pubkey.ask">my public PGP key</a> (Shift-Click on the link to download)
and send me a PGP encoded mail with your password and I'll encrypt and add it.</p>

<p>Wait until I confirm this. While you wait, look for CVS 1.10 or better if
you haven't already done so.</p>

</section>
<section title="Logging into the server">

<p>Before you can use any CVS commands, you must log into the server. To do this,
use the CVS command <shell>login</shell>:</p>

<example>
<line><prompt/><user>cvs -d :pserver:&lt;user&gt;@cvs.aros.org:/home/cvs/aros login</user></line>
</example>

<p>where <shell>user</shell> is your login, eg. digulla:</p>

<example>
<line><prompt/><user>cvs -d :pserver:digulla@cvs.aros.org:/home/cvs/aros login</user></line>
</example>

<p>On the Amiga, you must <shell>setenv HOME</shell> to a directory (eg.
<shell>setenv HOME SYS:Home</shell>). Setting it to a device or assign
doesn't work because CVS always adds a / after <shell>$HOME</shell> when
it looks for it's files. And don't forget to copy it to <filename>ENVARC:</filename>
(<shell>copy ENV:HOME ENVARC:</shell>) to make it permanent.</p>

<p>This should ask you for your password. Type it in and if there is no error
displayed, you are connected. If there is an error, try to omit the
<shell>pserver</shell>. If this still doesn't work, double check for
typos and if you really, really, really can't find anything, then you
can send me an e-mail.</p>

<p><strong>
It seems that the login command for CVS has changed. Version of CVS
upto 1.8.1 and earlier need not have <shell>:pserver:</shell> before the login name,
but later versions require it. If you have problems to login, try to omit
<shell>pserver</shell> or prepend it. If CVS wants it, you will get an error reading
<shell>cvs login: can only use pserver method with `login' command</shell>.
</strong></p>

<p>If the login has succeeded, then you can save you some typing by storing
the argument to the <shell>-d</shell> option in the environment
variable <shell>CVSROOT</shell>. Use</p>

<example>
<line><prompt/><user>setenv CVSROOT :pserver:user@cvs.aros.org:/home/cvs/aros</user></line>
</example>

<p>on Amiga or if you have a C shell (csh) and</p>

<example>
<line><prompt/><user>export CVSROOT=:pserver:<user>user</user>@cvs.aros.org:/home/cvs/aros</user></line>
</example>

<p>for Bourne/Korn shells (bash, ksh). <strong>Don't forget to replace
<i>user</i> by your login</strong>.</p>

<p>On Amiga, you can make this
permanent by <shell>copy env:CVSROOT envarc:</shell>, on Unix, you must add
this to the shell's startup file (<filename>.cshrc</filename>, <filename>.profile</filename>,
<filename>.bashrc</filename>, <filename>.tcshrc</filename>, etc. Read the manual of your
shell to find out). If you don't know what kind of shell you have,
just try <shell>echo $SHELL</shell> or <shell>echo $shell</shell>. This should
print the name of your shell.</p>

<p>If you haven't set this variable, you must add <shell>-d ...</shell>
right after cvs in the following examples.</p>

<p>Now you can use any CVS command to get a copy of all AROS sources, update
your sources or commit the changes you made.</p>

</section>
<section title="How to get a copy of all AROS sources">

<p>Use the CVS checkout command for this:</p>

<example>
<line><prompt/><user>cvs checkout AROS</user></line>
</example>

<p>This will create a
directory called AROS and populate it with all sources.</p>

</section>
<section title="How to get a copy of extra stuff">

<p>There is now a lot of stuff on the CVS server which is not directly
related to the core source (for example contributed source code,
screenshots, etc). You can get a list of all extra parts with</p>

<example>
<line><prompt/><user>cvs checkout -c</user></line>
</example>

<p>To checkout one of the extra parts, just do a <shell>cvs checkout</shell>
somewhere in the AROS tree (you could do it outside but then,
MetaMake would not find it and you would have to <shell>cvs update</shell>
it separately):</p>

<example>
<line><prompt/><user>cvs checkout Quake</user></line>
</example>

<p>To get a copy of the game Quake into the directory 
<filename>./contrib/Games/Quake</filename>. Unlike any other part of
AROS, a <shell>cvs update -dP</shell> will only get you an update of
Quake and not for the other games in <filename>contrib/Games</filename>
(you could <shell>cvs checkout Games</shell> to get a copy of all
games).</p>

</section>
<section title="How to update the sources">

<p>If you have some sources and just want to update them, you can use the
CVS update command. Change to the AROS directory and do this:</p>

<example>
<line><prompt/><user>cvs update</user></line>
</example>

<p>This should merge any changes that other users have made into your
sources and create all new directories and files. If you
and someone else has changed the same file, then CVS will try to merge
the changes. That is, if (s)he changed the first part and you the end of
the file, CVS will do all the work for you. If there are changes which CVS
can't resolve (eg. you said |x--;| and the other one |x=x-1;|), then
CVS will put <strong>both</strong> versions in the file. Search for <shell>&lt;&lt;&lt;&lt;</shell>
to find such problems.</p>

<p>You should do this before any commit in case this happens. So before
you commit, do an update, call <filename>make</filename> if any changes were
made, fix the problems and then commit.</p>

</section>
<section title="Committing changes">

<p>If you have changed a file, then you of course want to share your
work with the other guys. To do this, use the CVS commit command:</p>

<example>
<line><prompt/><user>cvs commit</user></line>
</example>

<p>You can specify a list of files after the <shell>commit</shell> or just do that in
the AROS directory to commit all changes. CVS will then ask you what you
did and send the changes to the CVS server for inclusion. Before you do
that, you should always make an update (see the previous section) to avoid
problems.</p>

</section>
<section title="Creating new files and directories">

<p>You can also add new files or directories with the CVS add command:</p>

<example>
<line><prompt/><user>cvs add file.c</user></line>
</example>

<p>or</p>

<example>
<line><prompt/><user>cvs add dir</user></line>
</example>

<p>Note that <shell>cvs add dir/file</shell> doesn't work. You can only add
files in the current directory.</p>

</section>
<section title="Some tips and tricks">

<p>You need to login only once. CVS will remember your password
and use it when you access the same repository next time.</p>

<p>After the checkout, CVS will remember where the source came
from. You don't have to set <shell>CVSROOT</shell> or specify <shell>-d ...</shell>
when you use CVS inside any directory created by CVS.</p>

<p>To save some more typing, you can put all usual options into the
file <filename>$HOME/.cvsrc</filename>. Here is mine:</p>

<example>
<line>cvs -z3</line>
<line>update -dP</line>
<line>diff -u</line>
</example>

<p>The first line says always to compress the communication between the
client and the CVS server. The next line says to delete empty
directories and create new ones when updating. The last line tells
<shell>cvs diff</shell> to use my favourite format.</p>

</section>
<section title="Importing sources into CVS">

<p>Sometimes, you want to add an existing software to the
CVS repository. Use <shell>cvs import</shell> for this.
Since the CVS import man page is quite poorly written, I'll
give you an example how it works.</p>

<ol>
<li>You extract the files whereever you like (it's 
probably best <strong>not</strong> to use the CVS tree for this)</li>

<li>Enter the new directory and run the import command:

<example>
<line><prompt/><user>cd name-1.2.3</user></line>
<line><prompt/><user>cvs -d :pserver:digulla@cvs.aros.org:/home/cvs/aros import -m "Explanation" contrib/name VENDOR NAME_1_2_3</user></line>
</example>

<p>All files (except some file like <filename>*.bak</filename>
which <shell>cvs import</shell> will automatically ignore)
in the current directory and below will be copied into the
repository <filename>contrib</filename> in the directory
<filename>name</filename>. The <shell>-m</shell> option should
give an explanation what this package is about.
</p>

<p><user>VENDOR</user> is the vendor tag which should give a hint where this
package comes from (for example, <shell>REDHAT_LINUX</shell>) and
the last item is a symbolic name for the version which is
imported. Usually, you will use the name of the package and the
version to generate this tag (as in the example).</p>

<p>You can use <shell>-I</shell> to ignore more files.</p>

</li>
</ol>

</section>
<section title="More infos about CVS">

<p>Well, CVS has man pages and info files and here is a nice
<a href="http://www.loria.fr/~molli/cvs-index.html">link</a>.</p>

</section>
</chapter>
