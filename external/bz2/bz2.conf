##begin config
basename BZ2
version 2.1
date 15.9.2014
copyright Copyright (C) 1996-2010 Julian R Seward, 2012-2014 The AROS Development Team
options pertaskbase
rellib posixc
rellib stdc
forcebase PosixCBase
##end config

##begin cdef
#include <bzlib.h>
#include <stdio.h> /* For FILE */
##end cdef

##begin cfunctionlist
const char *BZ2_bzlibVersion() ()
int BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity, int workFactor) (A0,D0,D1,D2)
int BZ2_bzCompress(bz_stream *strm, int action) (A0,D0)
int BZ2_bzCompressEnd(bz_stream *strm) (A0)
int BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) (A0,D0,D1)
int BZ2_bzDecompress(bz_stream *strm) (A0)
int BZ2_bzDecompressEnd(bz_stream *strm) (A0)
int BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor) (A0,A1,A2,D0,D1,D2,D3)
int BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity) (A0,A1,A2,D0,D1,D2)
int BZ2_bzCompressInit_SYSV(bz_stream *strm, int blockSize100k, int verbosity, int workFactor)
.function BZ2_bzCompressInit
int BZ2_bzCompress_SYSV(bz_stream *strm, int action)
.function BZ2_bzCompress
int BZ2_bzCompressEnd_SYSV(bz_stream *strm)
.function BZ2_bzCompressEnd
int BZ2_bzDecompressInit_SYSV(bz_stream *strm, int verbosity, int small)
.function BZ2_bzDecompressInit
int BZ2_bzDecompress_SYSV(bz_stream *strm)
.function BZ2_bzDecompress
int BZ2_bzDecompressEnd_SYSV(bz_stream *strm)
.function BZ2_bzDecompressEnd
.skip 4
int BZ2_bzBuffToBuffCompress_SYSV(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor)
.function BZ2_bzBuffToBuffCompress
int BZ2_bzBuffToBuffDecompress_SYSV(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity)
.function BZ2_bzBuffToBuffDecompress
.skip 4
BZFILE *BZ2_bzReadOpen(int* bzerror, FILE* f, int verbosity, int small, void *unused, int nUnused) (A0,A1,D0,D1,A2,D2)
void BZ2_bzReadClose(int *bzerror, BZFILE* b) (A0,A1)
void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) (A0,A1,A2,A3)
int BZ2_bzRead(int *bzerror, BZFILE* b, void *buf, int len) (A0,A1,A2,D0)
BZFILE *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor) (A0,A1,D0,D1,D2)
void BZ2_bzWrite(int *bzerror, BZFILE* b, void *buf, int len) (A0,A1,A2,D0)
void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out) (A0,A1,D0,A2,A3)
void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in_lo32, unsigned int * nbytes_in_hi32, unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32) (A0,A1,D0,A2,A3,A4,D1)
##end cfunctionlist
