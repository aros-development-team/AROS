/*
 * This file is needed for bootstrapping a new crosscompiler environment.
 * Copy it as env.h and replace 'i386' with your CPU if needed.
 * Then run 'make' right in this directory.
 * MinGW32 note: plain 'make' doesn't work, use make CC=gcc AROS_HOST_ARCH=mingw32
 *
 * You need to perform the following steps to create a new crosscompiler from scratch:
 * 1. Download patches from contrib/gnu/gcc and contrib/gnu/binutils
 * 2. Download corresponding binutils and gcc source archives. Note that for i386-aros target
 *    you may use the latest binutils because support for this target is already in mainstream.
 * 3. Download AROS SDK from AROS web site.
 * 4. Patch, configure, build and install binutils with --target=<cpu>-aros
 * 5. Extract include and lib directories from SDK into /usr/local/<cpu>-aros/ directory.
 *    This assumes that you didn't specify any --prefix while configuring your tools.
 *    Otherwise specify yor prefix instead of /usr/local. Rename 'include' to 'sys-include'.
 *    If you're on Windows, check also lib/libm.a and lib/libz.a. Originally they are symlinks
 *    to libarosm.a and libarosz.a respectively, and they are extracted as zero-length files,
 *    which cause linker to fail. Replace them with plain copies of libarosm.a and libarosz.a.
 * 6. Build collect-aros and install into <prefix>/<cpu>-aros/bin directory
 *    (/usr/local/i386-aros/bin for example). In theory you can put it into any directory in
 *    your path (like /usr/local/bin), but this will prevent multiple crosstoolchains from
 *    coexisting (i386-aros and ppc-aros for example).
 * 7. Patch, configure, build and install gcc. That's all.
 */

#ifndef _ENV_H_
#define _ENV_H_

#define LD_NAME      "i386-aros-ld"
#define STRIP_NAME   "i386-aros-strip"
#define NM_NAME      "i386-aros-nm"
#define OBJDUMP_NAME "i386-aros-objdump"
#define OBJECT_FORMAT "-melf_i386"

#endif /* !_ENV_H */
