diff -ruN llvm-3.9.0.src/include/llvm/ADT/Triple.h llvm-3.9.0.src.aros/include/llvm/ADT/Triple.h
--- llvm-3.9.0.src/include/llvm/ADT/Triple.h	2016-07-24 12:34:15.000000000 +0200
+++ llvm-3.9.0.src.aros/include/llvm/ADT/Triple.h	2016-11-20 21:47:37.000000000 +0100
@@ -140,6 +140,7 @@
   enum OSType {
     UnknownOS,
 
+    AROS,
     CloudABI,
     Darwin,
     DragonFly,
@@ -415,6 +416,11 @@
     return isOSVersionLT(Minor + 4, Micro, 0);
   }
 
+  /// 
+    bool isAROS() const {
+    return getOS() == Triple::AROS;
+  }
+  
   /// isMacOSX - Is this a Mac OS X triple. For legacy reasons, we support both
   /// "darwin" and "osx" as OS X triples.
   bool isMacOSX() const {
diff -ruN llvm-3.9.0.src/lib/Support/Triple.cpp llvm-3.9.0.src.aros/lib/Support/Triple.cpp
--- llvm-3.9.0.src/lib/Support/Triple.cpp	2016-07-24 12:34:15.000000000 +0200
+++ llvm-3.9.0.src.aros/lib/Support/Triple.cpp	2016-11-20 21:47:37.000000000 +0100
@@ -164,6 +164,7 @@
   switch (Kind) {
   case UnknownOS: return "unknown";
 
+  case AROS: return "aros";
   case CloudABI: return "cloudabi";
   case Darwin: return "darwin";
   case DragonFly: return "dragonfly";
@@ -433,6 +434,7 @@
 
 static Triple::OSType parseOS(StringRef OSName) {
   return StringSwitch<Triple::OSType>(OSName)
+    .StartsWith("aros", Triple::AROS)
     .StartsWith("cloudabi", Triple::CloudABI)
     .StartsWith("darwin", Triple::Darwin)
     .StartsWith("dragonfly", Triple::DragonFly)
