diff --git a/include/clang/Driver/Options.td b/include/clang/Driver/Options.td
index 809b28b9dd..b001f31e36 100644
--- a/include/clang/Driver/Options.td
+++ b/include/clang/Driver/Options.td
@@ -610,6 +610,7 @@ def dependency_dot : Separate<["-"], "dependency-dot">, Flags<[CC1Option]>,
   HelpText<"Filename to write DOT-formatted header dependencies to">;
 def module_dependency_dir : Separate<["-"], "module-dependency-dir">,
   Flags<[CC1Option]>, HelpText<"Directory to dump module dependencies to">;
+def detach : Flag<["-"], "detach">, Flags<[DriverOption,NoArgumentUnused]>;
 def dumpmachine : Flag<["-"], "dumpmachine">;
 def dumpspecs : Flag<["-"], "dumpspecs">, Flags<[Unsupported]>;
 def dumpversion : Flag<["-"], "dumpversion">;
@@ -2412,11 +2413,15 @@ def multi__module : Flag<["-"], "multi_module">;
 def multiply__defined__unused : Separate<["-"], "multiply_defined_unused">;
 def multiply__defined : Separate<["-"], "multiply_defined">;
 def mwarn_nonportable_cfstrings : Flag<["-"], "mwarn-nonportable-cfstrings">, Group<m_Group>;
+def nix : Flag<["-"], "nix">, Flags<[DriverOption,NoArgumentUnused]>;
 def no_canonical_prefixes : Flag<["-"], "no-canonical-prefixes">, Flags<[HelpHidden, CoreOption]>,
   HelpText<"Use relative instead of canonical paths">;
 def no_cpp_precomp : Flag<["-"], "no-cpp-precomp">, Group<clang_ignored_f_Group>;
 def no_integrated_cpp : Flag<["-", "--"], "no-integrated-cpp">, Flags<[DriverOption]>;
 def no_pedantic : Flag<["-", "--"], "no-pedantic">, Group<pedantic_Group>;
+def no_posixc : Flag<["-"], "no-posixc">, Flags<[DriverOption,NoArgumentUnused]>;
+def no_stdc : Flag<["-"], "no-stdc">, Flags<[DriverOption,NoArgumentUnused]>;
+def no_sysbase : Flag<["-"], "no_sysbase">, Flags<[DriverOption,NoArgumentUnused]>;
 def no__dead__strip__inits__and__terms : Flag<["-"], "no_dead_strip_inits_and_terms">;
 def nobuiltininc : Flag<["-"], "nobuiltininc">, Flags<[CC1Option, CoreOption]>,
   HelpText<"Disable builtin #include directories">;
@@ -2428,15 +2433,18 @@ def nolibc : Flag<["-"], "nolibc">;
 def nomultidefs : Flag<["-"], "nomultidefs">;
 def nopie : Flag<["-"], "nopie">;
 def no_pie : Flag<["-"], "no-pie">, Alias<nopie>;
+def noposixc : Flag<["-"], "noposixc">, Alias<no_posixc>;
 def noprebind : Flag<["-"], "noprebind">;
 def noseglinkedit : Flag<["-"], "noseglinkedit">;
 def nostartfiles : Flag<["-"], "nostartfiles">;
+def nostdc : Flag<["-"], "nostdc">, Alias<no_stdc>;
 def nostdinc : Flag<["-"], "nostdinc">, Flags<[CoreOption]>;
 def nostdlibinc : Flag<["-"], "nostdlibinc">;
 def nostdincxx : Flag<["-"], "nostdinc++">, Flags<[CC1Option]>,
   HelpText<"Disable standard #include directories for the C++ standard library">;
 def nostdlib : Flag<["-"], "nostdlib">;
 def nostdlibxx : Flag<["-"], "nostdlib++">;
+def nosysbase : Flag<["-"], "nosysbase">, Alias<no_sysbase>;
 def object : Flag<["-"], "object">;
 def o : JoinedOrSeparate<["-"], "o">, Flags<[DriverOption, RenderAsInput, CC1Option, CC1AsOption]>,
   HelpText<"Write output to <file>">, MetaVarName<"<file>">;
@@ -2447,6 +2455,7 @@ def pedantic : Flag<["-", "--"], "pedantic">, Group<pedantic_Group>, Flags<[CC1O
 def pg : Flag<["-"], "pg">, HelpText<"Enable mcount instrumentation">, Flags<[CC1Option]>;
 def pipe : Flag<["-", "--"], "pipe">,
   HelpText<"Use pipes between commands, when possible">;
+def posixc : Flag<["-"], "posixc">, Flags<[DriverOption,NoArgumentUnused]>;
 def prebind__all__twolevel__modules : Flag<["-"], "prebind_all_twolevel_modules">;
 def prebind : Flag<["-"], "prebind">;
 def preload : Flag<["-"], "preload">;
@@ -2533,6 +2542,7 @@ def specs : Separate<["-", "--"], "specs">, Flags<[Unsupported]>;
 def static_libgcc : Flag<["-"], "static-libgcc">;
 def static_libstdcxx : Flag<["-"], "static-libstdc++">;
 def static : Flag<["-", "--"], "static">, Flags<[NoArgumentUnused]>;
+def stdc : Flag<["-"], "stdc">, Flags<[DriverOption,NoArgumentUnused]>;
 def std_default_EQ : Joined<["-"], "std-default=">;
 def std_EQ : Joined<["-", "--"], "std=">, Flags<[CC1Option]>,
   Group<CompileOnly_Group>, HelpText<"Language standard to compile for">,
diff --git a/lib/Basic/Targets.cpp b/lib/Basic/Targets.cpp
index f79da4e576..45064b071d 100644
--- a/lib/Basic/Targets.cpp
+++ b/lib/Basic/Targets.cpp
@@ -140,8 +140,13 @@ TargetInfo *AllocateTarget(const llvm::Triple &Triple,
   case llvm::Triple::aarch64:
     if (Triple.isOSDarwin())
       return new DarwinAArch64TargetInfo(Triple, Opts);
-
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS AArch64
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<AArch64leTargetInfo>(Triple, Opts);
+
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::FreeBSD:
@@ -184,8 +189,13 @@ TargetInfo *AllocateTarget(const llvm::Triple &Triple,
   case llvm::Triple::thumb:
     if (Triple.isOSBinFormatMachO())
       return new DarwinARMTargetInfo(Triple, Opts);
-
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS ARMle
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<ARMleTargetInfo>(Triple, Opts);
+
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<ARMleTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
@@ -220,8 +230,13 @@ TargetInfo *AllocateTarget(const llvm::Triple &Triple,
   case llvm::Triple::thumbeb:
     if (Triple.isOSDarwin())
       return new DarwinARMTargetInfo(Triple, Opts);
-
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS ARMbe
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<ARMbeTargetInfo>(Triple, Opts);
+
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<ARMbeTargetInfo>(Triple, Opts);
     case llvm::Triple::FreeBSD:
@@ -326,7 +341,14 @@ TargetInfo *AllocateTarget(const llvm::Triple &Triple,
   case llvm::Triple::ppc:
     if (Triple.isOSDarwin())
       return new DarwinPPC32TargetInfo(Triple, Opts);
+
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS PPC32
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<PPC32TargetInfo>(Triple, Opts);
+
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<PPC32TargetInfo>(Triple, Opts);
     case llvm::Triple::FreeBSD:
@@ -344,7 +366,14 @@ TargetInfo *AllocateTarget(const llvm::Triple &Triple,
   case llvm::Triple::ppc64:
     if (Triple.isOSDarwin())
       return new DarwinPPC64TargetInfo(Triple, Opts);
+
     switch (os) {
+    //  FIXME:
+    //  Needs to be tested before inclusion!!!
+    //  New Target AROS PPC64
+    //  case llvm::Triple::AROS:
+    //    return new AROSTargetInfo<PPC64TargetInfo>(Triple, Opts);
+
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<PPC64TargetInfo>(Triple, Opts);
     case llvm::Triple::Lv2:
@@ -455,6 +484,12 @@ TargetInfo *AllocateTarget(const llvm::Triple &Triple,
     switch (os) {
     case llvm::Triple::Ananas:
       return new AnanasTargetInfo<X86_32TargetInfo>(Triple, Opts);
+    //  FIXME:
+    //  Needs to be tested!!!
+    // New Target AROS X86_32
+    case llvm::Triple::AROS:
+      return new AROSTargetInfo<X86_32TargetInfo>(Triple, Opts);
+
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::Linux: {
@@ -512,6 +547,12 @@ TargetInfo *AllocateTarget(const llvm::Triple &Triple,
     switch (os) {
     case llvm::Triple::Ananas:
       return new AnanasTargetInfo<X86_64TargetInfo>(Triple, Opts);
+    //  FIXME:
+    //  Needs to be tested!!!
+    //  New Target AROS X86_64
+    case llvm::Triple::AROS:
+      return new AROSTargetInfo<X86_64TargetInfo>(Triple, Opts);
+
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::Linux: {
diff --git a/lib/Basic/Targets/OSTargets.h b/lib/Basic/Targets/OSTargets.h
index 42ce89669f..1d1c9d41d2 100644
--- a/lib/Basic/Targets/OSTargets.h
+++ b/lib/Basic/Targets/OSTargets.h
@@ -71,6 +71,26 @@ public:
   AnanasTargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
       : OSTargetInfo<Target>(Triple, Opts) {}
 };
+// AROS target
+template <typename Target>
+class LLVM_LIBRARY_VISIBILITY AROSTargetInfo : public OSTargetInfo<Target> {
+protected:
+  void getOSDefines(const LangOptions &Opts, const llvm::Triple &Triple,
+                    MacroBuilder &Builder) const override {
+    // FIXME:
+    // Are these Macros correct ???
+    // AROS defines
+    Builder.defineMacro("__AROS__");
+    Builder.defineMacro("__ELF__");
+  }
+
+public:
+  // FIXME:
+  // Is this correct ???
+  AROSTargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
+      : OSTargetInfo<Target>(Triple, Opts) {}
+};
+
 
 void getDarwinDefines(MacroBuilder &Builder, const LangOptions &Opts,
                       const llvm::Triple &Triple, StringRef &PlatformName,
diff --git a/lib/Driver/CMakeLists.txt b/lib/Driver/CMakeLists.txt
index 084176b524..e893a1857b 100644
--- a/lib/Driver/CMakeLists.txt
+++ b/lib/Driver/CMakeLists.txt
@@ -32,6 +32,7 @@ add_clang_library(clangDriver
   ToolChains/Arch/X86.cpp
   ToolChains/Ananas.cpp
   ToolChains/AMDGPU.cpp
+  ToolChains/AROS.cpp
   ToolChains/AVR.cpp
   ToolChains/BareMetal.cpp
   ToolChains/Clang.cpp
diff --git a/lib/Driver/Driver.cpp b/lib/Driver/Driver.cpp
index dfc0faac7b..4630bc94ed 100644
--- a/lib/Driver/Driver.cpp
+++ b/lib/Driver/Driver.cpp
@@ -10,6 +10,7 @@
 #include "clang/Driver/Driver.h"
 #include "InputInfo.h"
 #include "ToolChains/AMDGPU.h"
+#include "ToolChains/AROS.h"
 #include "ToolChains/AVR.h"
 #include "ToolChains/Ananas.h"
 #include "ToolChains/BareMetal.h"
@@ -4497,6 +4498,9 @@ const ToolChain &Driver::getToolChain(const ArgList &Args,
     case llvm::Triple::Ananas:
       TC = llvm::make_unique<toolchains::Ananas>(*this, Target, Args);
       break;
+    case llvm::Triple::AROS:
+      TC = llvm::make_unique<toolchains::AROSToolChain>(*this, Target, Args);
+      break;
     case llvm::Triple::CloudABI:
       TC = llvm::make_unique<toolchains::CloudABI>(*this, Target, Args);
       break;
diff --git a/lib/Driver/ToolChains/AROS.cpp b/lib/Driver/ToolChains/AROS.cpp
new file mode 100644
index 0000000000..57cdd8fb33
--- /dev/null
+++ b/lib/Driver/ToolChains/AROS.cpp
@@ -0,0 +1,325 @@
+//===--- AROS.cpp - AROS Tool Chain -------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#include "AROS.h"
+#include "InputInfo.h"
+#include "CommonArgs.h"
+#include "clang/Config/config.h"
+#include "clang/Driver/Compilation.h"
+#include "clang/Driver/Driver.h"
+#include "clang/Driver/DriverDiagnostic.h"
+#include "clang/Driver/Options.h"
+#include "llvm/Option/ArgList.h"
+#include "llvm/Support/FileSystem.h"
+#include "llvm/Support/Path.h"
+
+using namespace clang::driver;
+using namespace clang::driver::tools;
+using namespace clang::driver::toolchains;
+using namespace clang;
+using namespace llvm::opt;
+
+
+void
+AROS::Assembler::ConstructJob(Compilation &C,
+                              const JobAction &JA,
+                              const InputInfo &Output,
+                              const InputInfoList &Inputs,
+                              const ArgList &Args,
+                              const char *LinkingOutput) const {
+  claimNoWarnArgs(Args);
+  ArgStringList CmdArgs;
+
+  Args.AddAllArgValues(CmdArgs,
+                       options::OPT_Wa_COMMA,
+                       options::OPT_Xassembler);
+
+  CmdArgs.push_back("-o");
+  CmdArgs.push_back(Output.getFilename());
+
+  for (const auto &II : Inputs)
+    CmdArgs.push_back(II.getFilename());
+
+  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("as"));
+  C.addCommand(llvm::make_unique<Command>(JA, *this, Exec, CmdArgs, Inputs));
+}
+
+void
+AROS::Linker::ConstructJob(Compilation &C,
+                           const JobAction &JA,
+                           const InputInfo &Output,
+                           const InputInfoList &Inputs,
+                           const ArgList &Args,
+                           const char *LinkingOutput) const {
+  const toolchains::AROSToolChain &AROSTC =
+      static_cast<const toolchains::AROSToolChain &>(getToolChain());
+  const char *Exec = Args.MakeArgString(AROSTC.GetLinkerPath());
+  const Driver &D = AROSTC.getDriver();
+  const std::string &SysRoot = D.SysRoot;
+  ArgStringList CmdArgs;
+
+  if (llvm::sys::path::filename(Exec) == "lld") {
+      CmdArgs.push_back("-flavor");
+      CmdArgs.push_back("gnu");
+      if (!D.SysRoot.empty())
+          CmdArgs.push_back(Args.MakeArgString("--sysroot=" + SysRoot));
+  }
+
+  // When building 32-bit code on AROS/pc64,
+  // we have to explicitly instruct ld in
+  // the base system to link 32-bit code.
+  if (AROSTC.getArch() == llvm::Triple::x86) {
+      CmdArgs.push_back("-m");
+      CmdArgs.push_back("elf_i386");
+  }
+
+  if (Output.isFilename()) {
+      CmdArgs.push_back("-o");
+      CmdArgs.push_back(Output.getFilename());
+  } else {
+      assert(Output.isNothing() && "Invalid output.");
+  }
+
+  AROSTC.addStartObjectFileArgs(Args, CmdArgs);
+
+  Args.AddAllArgs(CmdArgs,
+                  {options::OPT_L,
+                   options::OPT_T_Group,
+                   options::OPT_e});
+
+  AddLinkerInputs(AROSTC, Inputs, Args, CmdArgs, JA);
+
+  if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
+      SmallString<128> LibPath(SysRoot);
+      llvm::sys::path::append(LibPath, "lib");
+      CmdArgs.push_back(Args.MakeArgString(StringRef("-L") + LibPath));
+
+      if (D.CCCIsCXX()) {
+          AROSTC.AddCXXStdlibLibArgs(Args, CmdArgs);
+          CmdArgs.push_back("-lpthread");
+      }
+        CmdArgs.push_back("--start-group");
+        CmdArgs.push_back("-lmui");
+        CmdArgs.push_back("-larossupport");
+        CmdArgs.push_back("-lamiga");
+        if (!Args.hasArg(options::OPT_nostartfiles)) {
+            if (!Args.hasArg(options::OPT_static)) {
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    if (!Args.hasArg(options::OPT_no_posixc)) {
+                        CmdArgs.push_back("-lposixc");
+                    }
+
+                    CmdArgs.push_back("-lstdcio");
+                    CmdArgs.push_back("-lstdc");
+                }// OPT_no_stdc endif
+            } else {
+                if (!Args.hasArg(options::OPT_no_stdc)) {
+                    CmdArgs.push_back("-lstdc.static");
+                }
+            }// OPT_static endif
+        }// OPT_nostartfiles endif
+        CmdArgs.push_back("-lcodesets");
+        CmdArgs.push_back("-lkeymap");
+        CmdArgs.push_back("-lexpansion");
+        CmdArgs.push_back("-lcommodities");
+        CmdArgs.push_back("-ldiskfont");
+        CmdArgs.push_back("-lasl");
+        CmdArgs.push_back("-lmuimaster");
+        CmdArgs.push_back("-ldatatypes");
+        CmdArgs.push_back("-lcybergraphics");
+        CmdArgs.push_back("-lworkbench");
+        CmdArgs.push_back("-licon");
+        CmdArgs.push_back("-lintuition");
+        CmdArgs.push_back("-lgadtools");
+        CmdArgs.push_back("-llayers");
+        CmdArgs.push_back("-laros");
+        CmdArgs.push_back("-lpartition");
+        CmdArgs.push_back("-liffparse");
+        CmdArgs.push_back("-lgraphics");
+        CmdArgs.push_back("-llocale");
+        CmdArgs.push_back("-ldos");
+        CmdArgs.push_back("-lutility");
+        CmdArgs.push_back("-loop");
+        if (!Args.hasArg(options::OPT_nosysbase)) {
+            CmdArgs.push_back("-lexec");
+        }
+        CmdArgs.push_back("-lautoinit");
+        CmdArgs.push_back("-llibinit");
+        if (!Args.hasArg(options::OPT_nostartfiles)) {
+            if (!Args.hasArg(options::OPT_static)) {
+                CmdArgs.push_back("-lstdc.static");
+            }
+        }// 2nd OPT_nostartfiles endif
+        CmdArgs.push_back("--end-group");
+  }
+
+  C.addCommand(llvm::make_unique<Command>(JA, *this, Exec, CmdArgs, Inputs));
+}
+
+
+//------------------------------------------------------------------------------------------------------//
+
+
+AROSToolChain::AROSToolChain(const Driver &D,
+                             const llvm::Triple &Triple,
+                             const llvm::opt::ArgList &Args)
+    : Generic_ELF(D, Triple, Args) {
+  if (GetCXXStdlibType(Args) == ToolChain::CST_Libstdcxx) {
+
+  }
+
+  // FIXME:
+  // Now declared in AROS.h with the function getDefaultLinker() ???
+  // Is this the correct way to implement this ???
+  // This is an unused variable in clang 7 Driver. Delete this ???
+  // Use LLD by default.
+  // DefaultLinker = "collect-aros";
+
+
+}
+
+#if (0)
+bool AROSToolChain::IsUnwindTablesDefault() const {
+    // FIXME:
+
+    // all non-x86 targets need unwind tables, however,
+    // LLVM currently does not know how to emit them.
+
+    // FIXME:
+    // Is this the correct implementation of this function ???
+//  bool AROSToolChain::IsUnwindTablesDefault(const ArgList &Args) const {
+    //// Unwind tables are not emitted if -fno-exceptions
+    //// is supplied (except when targeting x86_64).
+    //return getArch() == llvm::Triple::x86_64 ||
+    //    (GetExceptionModel(Args) != llvm::ExceptionHandling::SjLj &&
+    //    Args.hasFlag(options::OPT_fexceptions,
+    //                 options::OPT_fno_exceptions,
+    //                 true));
+
+    return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPICDefault() const {
+    return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPIEDefault() const {
+    return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPICDefaultForced() const {
+    return getArch() == llvm::Triple::x86_64;
+}
+#endif
+
+void AROSToolChain::
+AddAROSSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                         llvm::opt::ArgStringList &CC1Args) const {
+  const Driver &D = getDriver();
+  const std::string &SysRoot = D.SysRoot;
+
+  if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+      addSystemInclude(DriverArgs, CC1Args, SysRoot + "/include");
+      if (!DriverArgs.hasArg(options::OPT_no_posixc)) {
+          SmallString<128> ResourceDir(SysRoot);
+          llvm::sys::path::append(ResourceDir, "include/aros/posixc");
+          addSystemInclude(DriverArgs, CC1Args, ResourceDir);
+      }// OPT_no_posixc endif
+      if (!DriverArgs.hasArg(options::OPT_no_stdc)) {
+          SmallString<128> ResourceDir(SysRoot);
+          llvm::sys::path::append(ResourceDir, "include/aros/stdc");
+          addSystemInclude(DriverArgs, CC1Args, ResourceDir);
+      }// OPT_no_stdc endif
+  }// OPT_nobuiltininc endif
+}
+
+void AROSToolChain::
+AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                          llvm::opt::ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc))
+      return;
+
+  AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+}
+
+void AROSToolChain::
+addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                      llvm::opt::ArgStringList &CC1Args,
+                      Action::OffloadKind DeviceOffloadingKind) const {
+  CC1Args.push_back("-D__AROS__");
+  CC1Args.push_back("-D__AROS");
+  CC1Args.push_back("-DAROS");
+  CC1Args.push_back("-D__AMIGA__");
+  CC1Args.push_back("-D_AMIGA");
+  CC1Args.push_back("-DAMIGA");
+  CC1Args.push_back("-D__ELF__");
+  CC1Args.push_back("-Dsystem=posix");
+}
+
+
+void AROSToolChain::
+AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx))
+      return;
+
+  switch (GetCXXStdlibType(DriverArgs)) {
+  case ToolChain::CST_Libcxx:
+    AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+    break;
+
+  case ToolChain::CST_Libstdcxx:
+    AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+    break;
+  }
+}
+
+void AROSToolChain::
+AddCXXStdlibLibArgs(const llvm::opt::ArgList &DriverArgs,
+                    llvm::opt::ArgStringList &CC1Args) const {
+  switch (GetCXXStdlibType(DriverArgs)) {
+  case ToolChain::CST_Libcxx:
+    CC1Args.push_back("-lc++");
+    break;
+  case ToolChain::CST_Libstdcxx:
+    CC1Args.push_back("-lstdc++");
+    break;
+  }
+}
+
+void AROSToolChain::
+addStartObjectFileArgs(const llvm::opt::ArgList &Args,
+                       llvm::opt::ArgStringList &CmdArgs) const {
+  if (Args.hasArg(options::OPT_nostartfiles))
+      return;
+
+  const Driver &D = getDriver();
+  const std::string &SysRoot = D.SysRoot;
+  SmallString<128> LibPath(SysRoot);
+  llvm::sys::path::append(LibPath, "lib/");
+
+  // Derived from startfile spec.
+  CmdArgs.push_back(Args.MakeArgString(LibPath + "startup.o"));
+  if (Args.hasArg(options::OPT_detach)) {
+      CmdArgs.push_back(Args.MakeArgString(LibPath + "detach.o"));
+  }
+  if (Args.hasArg(options::OPT_nix)) {
+      CmdArgs.push_back(Args.MakeArgString(LibPath + "nixmain.o"));
+  }
+}
+
+
+Tool *AROSToolChain::buildAssembler() const {
+    return new tools::AROS::Assembler(*this);
+}
+
+Tool *AROSToolChain::buildLinker() const {
+    return new tools::AROS::Linker(*this);
+}
diff --git a/lib/Driver/ToolChains/AROS.h b/lib/Driver/ToolChains/AROS.h
new file mode 100644
index 0000000000..c6f894635f
--- /dev/null
+++ b/lib/Driver/ToolChains/AROS.h
@@ -0,0 +1,98 @@
+//===--- AROS.h - AROS ToolChain Implementations ----------*- C -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
+#define LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
+
+#include "Gnu.h"
+#include "clang/Driver/Tool.h"
+#include "clang/Driver/ToolChain.h"
+
+namespace clang {
+namespace driver {
+namespace tools {
+
+/// AROS -- Directly call GNU Binutils assembler and linker
+namespace AROS {
+class LLVM_LIBRARY_VISIBILITY Assembler : public GnuTool {
+public:
+  Assembler(const ToolChain &TC)
+      : GnuTool("AROS::Assembler", "assembler", TC) {}
+
+  bool hasIntegratedCPP() const override { return false; }
+
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+
+class LLVM_LIBRARY_VISIBILITY Linker : public GnuTool {
+public:
+  Linker(const ToolChain &TC)
+      : GnuTool("AROS::Linker", "linker", TC) {}
+
+  bool hasIntegratedCPP() const override { return false; }
+  bool isLinkJob() const override { return true; }
+
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+} // end namespace AROS
+} // end namespace tools
+
+namespace toolchains {
+//  FIXME:
+//  AROS - The base AROS tool chain. I changed it from => (Generic_ELF)
+//  Should it be changed back to => Generic_GCC ???
+class LLVM_LIBRARY_VISIBILITY AROSToolChain : public Generic_ELF {
+public:
+  AROSToolChain(const Driver &D,
+                const llvm::Triple &Triple,
+                const llvm::opt::ArgList &Args);
+
+  void AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const override;
+
+  void addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args,
+                             Action::OffloadKind DeviceOffloadKind) const override;
+
+  void AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args) const override;
+
+  void AddCXXStdlibLibArgs(const llvm::opt::ArgList &Args,
+                           llvm::opt::ArgStringList &CmdArgs) const override;
+
+  void addStartObjectFileArgs(const llvm::opt::ArgList &Args,
+                              llvm::opt::ArgStringList &CmdArgs) const;
+  // FIXME:
+  // Is this the correct use of this function in this header?
+  // Moved from AROS.cpp as it was an unused variable "DefaultLinker=collect-aros"
+  // Should "ld.lld" be declare here ???
+  // Use LLD by default.? "ld.lld" ???
+  const char *getDefaultLinker() const override { return "collect-aros"; }
+
+private:
+  void AddAROSSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const;
+
+protected:
+  Tool *buildAssembler() const override;
+  Tool *buildLinker() const override;
+};
+
+
+} // end namespace toolchains
+} // end namespace driver
+} // end namespace clang
+
+#endif // LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AROS_H
diff --git a/lib/Frontend/InitHeaderSearch.cpp b/lib/Frontend/InitHeaderSearch.cpp
index ac3bb713dd..fa1dd4ad09 100644
--- a/lib/Frontend/InitHeaderSearch.cpp
+++ b/lib/Frontend/InitHeaderSearch.cpp
@@ -210,9 +210,9 @@ void InitHeaderSearch::AddMinGWCPlusPlusIncludePaths(StringRef Base,
 void InitHeaderSearch::AddDefaultCIncludePaths(const llvm::Triple &triple,
                                             const HeaderSearchOptions &HSOpts) {
   llvm::Triple::OSType os = triple.getOS();
-
   if (HSOpts.UseStandardSystemIncludes) {
     switch (os) {
+    case llvm::Triple::AROS:
     case llvm::Triple::CloudABI:
     case llvm::Triple::FreeBSD:
     case llvm::Triple::NetBSD:
@@ -322,8 +322,8 @@ void InitHeaderSearch::AddDefaultCIncludePaths(const llvm::Triple &triple,
   default:
     break;
   }
-
   switch (os) {
+  case llvm::Triple::AROS:
   case llvm::Triple::CloudABI:
   case llvm::Triple::RTEMS:
   case llvm::Triple::NaCl:
