include $(TOP)/config/make.cfg

BINUTILS_VERSION = 2.21.1
GMP_VERSION=5.0.1
MPFR_VERSION=3.0.1
MPC_VERSION=0.9

GCC_LANGUAGES = c,c++,objc

GCC_EXTRA_OPTS = \
  --target=$(AROS_TARGET_CPU)-aros --bindir=$(CROSSTOOLSDIR) --enable-languages=$(GCC_LANGUAGES) \
  --enable-long-long --enable-version-specific-runtime-libs

ifeq ($(AROS_TARGET_CPU), arm)
  # FIXME: Update patch to work with --with-sysroot then set GCC_INCLUDES and GCC_PATH for --enable-crosstools
  GCC_VERSION     = 4.4.2
  GCC_EXTRA_OPTS += --with-headers=$(AROS_DEVELOPMENT)/include --with-libs=$(AROS_DEVELOPMENT)/lib
else
ifeq ($(AROS_TARGET_CPU), m68k)
  GCC_VERSION     = 4.6.2
  GCC_EXTRA_OPTS += --with-sysroot=$(AROS_DEVELOPMENT) --with-build-sysroot=$(AROS_DEVELOPMENT)
  GCC_EXTRA_OPTS += --disable-bootstrap 
  GCC_EXTRA_OPTS += --with-headers=$(AROS_DEVELOPMENT)/include --with-libs=$(AROS_DEVELOPMENT)/lib
  GCC_EXTRA_OPTS += --enable-sjlj-exceptions=no --enable-tls=no
  GCC_INCLUDES    = $(CROSSTOOLSDIR)/lib/gcc/$(AROS_TARGET_CPU)-aros/$(GCC_VERSION)/include
  GCC_PATH        = `LANG=en_US $(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros-gcc -print-search-dirs | grep "programs: =" | cut -c 12-`
  GCC_UNUSED_BUT_SET_VARIABLE := -Wno-unused-but-set-variable
  GCC_ARRAY_BOUNDS            := -Wno-array-bounds
  GCC_ENUM_COMPARE            := -Wno-enum-compare
else
  GCC_VERSION     = 4.2.4
  GCC_EXTRA_OPTS += --with-sysroot=$(AROS_DEVELOPMENT)
  GCC_INCLUDES    = $(CROSSTOOLSDIR)/lib/gcc/$(AROS_TARGET_CPU)-aros/$(GCC_VERSION)/include
  GCC_PATH        = `LANG=en_US $(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros-gcc -print-search-dirs | grep "programs: =" | cut -c 12-`
endif
endif

GNU_REPOSITORY := gnu://
MPC_REPOSITORY := http://www.multiprecision.org/mpc/download/

binutils-installflag := $(CROSSTOOLSDIR)/.installflag-binutils-$(BINUTILS_VERSION)
gmp-installflag := $(CROSSTOOLSDIR)/.installflag-gmp-$(GMP_VERSION)
mpfr-installflag := $(CROSSTOOLSDIR)/.installflag-mpfr-$(MPFR_VERSION)
mpc-installflag := $(CROSSTOOLSDIR)/.installflag-mpc-$(MPC_VERSION)
gcc-installflag      := $(CROSSTOOLSDIR)/.installflag-gcc-$(GCC_VERSION)

#MM- tools-crosstools : tools-crosstools-$(AROS_TARGET_CPU)

#MM
sysinclude-gcc: $(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros/sys-include/math.h

#MM- sysinclude-gcc: includes-copy-mlib

$(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros/sys-include/math.h: $(AROS_DEVELOPMENT)/include/math.h
	@$(MKDIR) -p $(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros/sys-include
	@$(CP) $^ $@

#MM- tools-crosstools-m68k  : tools-crosstools-gcc sysinclude-gcc crosstools-gcc
#MM- tools-crosstools-i386   : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-x86_64 : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-ppc    : tools-crosstools-gcc crosstools-gcc
# arm still needs linklibs be build before, can be removed after patch is updated to work with --with-sysroot
#MM- tools-crosstools-arm    : core-linklibs tools-crosstools-gcc crosstools-gcc

#MM tools-crosstools-gcc : tools-crosstools-binutils tools-crosstools-collect-aros \
#MM                        compiler-includes compiler-clib-includes \
#MM                        tools-crosstools-gmp \
#MM                        tools-crosstools-mpfr \
#MM                        tools-crosstools-mpc

# We intentionally bypass the usual fetch_and_build macro below and call mmakefile and gcc makefile
# targets directly. This is in order to not build the core-linklibs target during binutils and gcc
# builds because we want these static linker libraries be generated by the cross tool chain we are building
# right here. Additionally, we also want to maintain our own install flag files inside the directory
# specified by --with-crosstools. This directory may even reside outside of the usual aros build directory
# and can be reused between complete rebuilds.

#MM
tools-crosstools-gmp :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(gmp-installflag) \
	    || $(TEST) "$(AROS_DEVELOPMENT)" != "$(shell $(CAT) 2>/dev/null $(gmp-installflag))" ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/gmp/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-gmp--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-gmp--build_and_install-quick \
	    && $(ECHO) $(AROS_DEVELOPMENT) > $(gmp-installflag) ; \
	fi


%fetch_and_build mmake=crosstools-gmp package=gmp version=$(GMP_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/gmp" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --disable-shared"

#MM
tools-crosstools-mpfr :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(mpfr-installflag) \
	    || $(TEST) "$(AROS_DEVELOPMENT)" != "$(shell $(CAT) 2>/dev/null $(mpfr-installflag))" ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/mpfr/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-mpfr--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-mpfr--build_and_install-quick \
	    && $(ECHO) $(AROS_DEVELOPMENT) > $(mpfr-installflag) ; \
	fi


%fetch_and_build mmake=crosstools-mpfr package=mpfr version=$(MPFR_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/mpfr" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --disable-shared"

#MM
tools-crosstools-mpc :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(mpc-installflag) \
	    || $(TEST) "$(AROS_DEVELOPMENT)" != "$(shell $(CAT) 2>/dev/null $(mpc-installflag))" ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/mpc/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-mpc--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-mpc--build_and_install-quick \
	    && $(ECHO) $(AROS_DEVELOPMENT) > $(mpc-installflag) ; \
	fi


%fetch_and_build mmake=crosstools-mpc package=mpc version=$(MPC_VERSION) compiler=host \
	package_repo="$(MPC_REPOSITORY)" suffixes="tar.gz" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --disable-shared"

#MM
tools-crosstools-binutils :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(binutils-installflag) \
	    || $(TEST) "$(AROS_DEVELOPMENT)" != "$(shell $(CAT) 2>/dev/null $(binutils-installflag))" ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/binutils/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-binutils--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-binutils--build_and_install-quick \
	    && $(ECHO) $(AROS_DEVELOPMENT) > $(binutils-installflag) ; \
	fi


%fetch_and_build mmake=crosstools-binutils package=binutils version=$(BINUTILS_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/binutils" \
	patch=yes \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--target=$(AROS_TARGET_CPU)-aros -bindir=$(CROSSTOOLSDIR) --with-sysroot=$(AROS_DEVELOPMENT) --disable-werror"

HOST_CFLAGS := $(HOST_CFLAGS) $(HOST_GNU89_INLINE)

#MM
tools-crosstools-gcc :
	@$(SED) -i -e "s|@aros_target_cc_includes@|$(GCC_INCLUDES)|g" $(GENDIR)/config/specs
	@$(SED) -i -e "s|@aros_target_cc_includes@|$(GCC_INCLUDES)|g" $(GENDIR)/config/elf-specs
	@$(IF) ! $(TEST) -f $(gcc-installflag) \
	    || $(TEST) "$(AROS_DEVELOPMENT)" != "$(shell $(CAT) 2>/dev/null $(gcc-installflag))" ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/gcc/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-gcc--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-gcc--configure \
	    && $(MAKE) -C $(HOSTGENDIR)/$(CURDIR)/gcc all-gcc \
	    && $(MAKE) -j1 -C $(HOSTGENDIR)/$(CURDIR)/gcc install-gcc \
	    && $(ECHO) $(AROS_DEVELOPMENT) > $(gcc-installflag) ; \
	fi
	@$(IF) $(TEST) -f $(gcc-installflag); then \
	    $(SED) -i -e "s|@aros_target_cc_path@|$(GCC_PATH)|g" $(TOOLDIR)/$(AROS_TARGET_CPU)-$(AROS_TARGET_ARCH)$(AROS_TARGET_SUFFIX)-aros-ld ; \
	    $(SED) -i -e "s|@aros_cflags_unused_but_set_variable@|$(GCC_UNUSED_BUT_SET_VARIABLE)|g" $(GENDIR)/config/target.cfg ; \
	    $(SED) -i -e "s|@aros_cflags_array_bounds@|$(GCC_ARRAY_BOUNDS)|g" $(GENDIR)/config/target.cfg ; \
	    $(SED) -i -e "s|@aros_cflags_enum_compare@|$(GCC_ENUM_COMPARE)|g" $(GENDIR)/config/target.cfg ; \
	    $(SED) -i -e "s|@aros_cflags_format_security@|-Wno-format-security|g" $(GENDIR)/config/target.cfg ; \
	    $(SED) -i -e "s|@aros_cflags_strict_overflow@|-Wno-strict-overflow|g" $(GENDIR)/config/target.cfg ; \
	fi

%fetch_and_build mmake=crosstools-gcc package=gcc version=$(GCC_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/gcc/gcc-$(GCC_VERSION)" \
	patch=yes \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="$(GCC_EXTRA_OPTS)"
