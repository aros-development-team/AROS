include $(SRCDIR)/config/aros.cfg
-include $(SRCDIR)/$(CURDIR)/$(AROS_TOOLCHAIN).cfg

LN ?= ln

ICU_VERSION := 4.2.1
ICU_PKGNAME := icu4c
ICU_PKGVERSION=$(subst .,_,$(ICU_VERSION))

ICU_EXTRA_OPTS = \
        --bindir=$(CROSSTOOLSDIR) \
        --sbindir=$(CROSSTOOLSDIR) \
        --enable-static \
        --disable-strict \
        --disable-dyload \
        --disable-shared \
        --disable-tests \
        --disable-samples \
        --disable-extras \
        --with-data-packaging=static

BINUTILS_VERSION = $(TARGET_BINUTILS_VER)

BINUTILS_EXTRA_OPTS := --target=$(AROS_TARGET_CPU)-aros
BINUTILS_EXTRA_OPTS += -bindir=$(CROSSTOOLSDIR)
BINUTILS_EXTRA_OPTS += --libdir=$(CROSSTOOLSDIR)/lib
BINUTILS_EXTRA_OPTS += --with-sysroot=$(AROS_DEVELOPER)
BINUTILS_EXTRA_OPTS += --disable-werror
BINUTILS_EXTRA_OPTS += --disable-nls
ifeq (yes, $(TARGET_LTO))
BINUTILS_EXTRA_OPTS += --enable-plugins --enable-lto
endif

GCC_VERSION     = $(TARGET_GCC_VER)
$(eval UNUSEDREMAINDER := $$$(GCC_VERSION))
GCC_VERSION_MAJOR := $(subst $(UNUSEDREMAINDER),,$(GCC_VERSION))

GCC_LANGUAGES:=c,c++
ifneq (no-objc,$(OBJC_TARGET))
GCC_LANGUAGES:=$(GCC_LANGUAGES),objc
endif
ifneq (no-java,$(JAVA_TARGET))
GCC_LANGUAGES:=$(GCC_LANGUAGES),java
endif

GCC_EXTRA_OPTS := --target=$(AROS_TARGET_CPU)-aros

# ARM requires additional flags to determine CPU type and FP model
ifneq (,$(findstring $(AROS_TARGET_CPU),arm))
GCC_EXTRA_OPTS += --with-arch=$(GCC_DEFAULT_CPU)
GCC_EXTRA_OPTS += --with-float=$(GCC_DEFAULT_FLOAT_ABI)
GCC_EXTRA_OPTS += --with-fpu=$(GCC_DEFAULT_FPU)
GCC_EXTRA_OPTS += --with-mode=$(GCC_DEFAULT_MODE)
GCC_EXTRA_OPTS += --disable-libunwind-exceptions
else
# If we are building GCC >= 5, for x86 targets, enable libmpx
# ifeq ($(shell test $(GCC_VERSION_MAJOR) -gt 4; echo $$?),0)
# ifeq ($(AROS_TARGET_CPU),i386)
# GCC_EXTRA_OPTS += --enable-libmpx
# endif
# ifeq ($(AROS_TARGET_CPU),x86_64)
# GCC_EXTRA_OPTS += --enable-libmpx
# endif
# endif
GCC_EXTRA_OPTS += --with-dwarf2
endif

GCC_EXTRA_OPTS += --with-sysroot=$(AROS_DEVELOPER)
GCC_EXTRA_OPTS += --with-native-system-header-dir=/include
GCC_EXTRA_OPTS += --bindir=$(CROSSTOOLSDIR)
GCC_EXTRA_OPTS += --libdir=$(CROSSTOOLSDIR)/lib
GCC_EXTRA_OPTS += --enable-languages=$(strip $(GCC_LANGUAGES))
GCC_EXTRA_OPTS += --enable-long-long
GCC_EXTRA_OPTS += --enable-version-specific-runtime-libs
GCC_EXTRA_OPTS += --enable-frame-pointer
GCC_EXTRA_OPTS += --with-isl=$(CROSSTOOLSDIR)
GCC_EXTRA_OPTS += --disable-isl-version-check
GCC_EXTRA_OPTS += --disable-bootstrap 
GCC_EXTRA_OPTS += --disable-sjlj-exceptions
GCC_EXTRA_OPTS += --disable-tls
ifneq (yes, $(TARGET_LTO))
GCC_EXTRA_OPTS += --disable-plugins
endif
GCC_EXTRA_OPTS += --disable-nls
GCC_EXTRA_OPTS += --disable-libssp
GCC_EXTRA_OPTS += --disable-libstdcxx-pch
GCC_EXTRA_OPTS += --disable-build-with-cxx
GCC_EXTRA_OPTS += --disable-build-poststage1-with-cxx

GCC_PATH = `LANG=en_US $(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros-gcc -print-search-dirs | grep "programs: =" | cut -c 12-`

GDB_VERSION=7.9

GDB_EXTRA_OPTS := --target=$(AROS_TARGET_CPU)-aros
GDB_EXTRA_OPTS += --bindir=$(CROSSTOOLSDIR)
GDB_EXTRA_OPTS += --libdir=$(CROSSTOOLSDIR)/lib

GNU_REPOSITORY := gnu://
ISL_REPOSITORY := ftp://gcc.gnu.org/pub/gcc/infrastructure
MPC_REPOSITORY := ftp://ftp.gnu.org/gnu/mpc http://ftp.vim.org/ftp/gnu/mpc
ICU_REPOSITORY := http://download.icu-project.org/files/$(ICU_PKGNAME)/$(ICU_VERSION)

binutils-installflag := $(CROSSTOOLSDIR)/.installflag-binutils-$(BINUTILS_VERSION)-$(AROS_TARGET_CPU)
gmp-installflag := $(CROSSTOOLSDIR)/.installflag-gmp-$(GMP_VERSION)
isl-installflag := $(CROSSTOOLSDIR)/.installflag-isl-$(ISL_VERSION)
mpfr-installflag := $(CROSSTOOLSDIR)/.installflag-mpfr-$(MPFR_VERSION)
mpc-installflag := $(CROSSTOOLSDIR)/.installflag-mpc-$(MPC_VERSION)
gcc-installflag := $(CROSSTOOLSDIR)/.installflag-gcc-$(GCC_VERSION)-$(AROS_TARGET_CPU)
icu-installflag := $(CROSSTOOLSDIR)/.installflag-icu-$(ICU_VERSION)
gdb-installflag := $(CROSSTOOLSDIR)/.installflag-gdb-$(GDB_VERSION)

#MM- tools-crosstools : tools-crosstools-$(AROS_TOOLCHAIN)-$(AROS_TARGET_CPU)

#MM- tools-crosstools-gnu-m68k     : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-gnu-i386     : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-gnu-x86_64   : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-gnu-ppc      : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-gnu-arm      : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-gnu-aarch64  : tools-crosstools-gcc crosstools-gcc

#MM tools-crosstools-gcc : tools-crosstools-binutils tools-crosstools-collect-aros \
#MM                        tools-crosstools-gmp \
#MM                        tools-crosstools-isl \
#MM                        tools-crosstools-mpfr \
#MM                        tools-crosstools-mpc

# We intentionally bypass the usual fetch_and_build macro below and call mmakefile and gcc makefile
# targets directly. This is in order to not build the core-linklibs target during binutils and gcc
# builds because we want these static linker libraries be generated by the cross tool chain we are building
# right here. Additionally, we also want to maintain our own install flag files inside the directory
# specified by --with-aros-toolchain-install. This directory may even reside outside of the usual aros
# build directory and can be reused between complete rebuilds.

#MM
tools-crosstools-gmp :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(gmp-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/gmp/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-gmp--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-gmp--build_and_install-quick \
	    && $(TOUCH) $(gmp-installflag) ; \
	fi

%fetch_and_build mmake=crosstools-gmp package=gmp version=$(GMP_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/gmp" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --libdir=$(CROSSTOOLSDIR)/lib --disable-shared"

#MM
tools-crosstools-isl :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(isl-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/isl/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-isl--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-isl--build_and_install-quick \
	    && $(TOUCH) $(isl-installflag) ; \
	fi

%fetch_and_build mmake=crosstools-isl package=isl version=$(ISL_VERSION) compiler=host \
	package_repo="$(ISL_REPOSITORY)" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --libdir=$(CROSSTOOLSDIR)/lib --without-piplib --disable-shared"

#MM
tools-crosstools-mpfr :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(mpfr-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/mpfr/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-mpfr--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-mpfr--build_and_install-quick \
	    && $(TOUCH) $(mpfr-installflag) ; \
	fi

%fetch_and_build mmake=crosstools-mpfr package=mpfr version=$(MPFR_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/mpfr" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --libdir=$(CROSSTOOLSDIR)/lib --disable-shared"

#MM
tools-crosstools-mpc :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(mpc-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/mpc/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-mpc--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-mpc--build_and_install-quick \
	    && $(TOUCH) $(mpc-installflag) ; \
	fi

%fetch_and_build mmake=crosstools-mpc package=mpc version=$(MPC_VERSION) compiler=host \
	package_repo="$(MPC_REPOSITORY)" suffixes="tar.gz" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --libdir=$(CROSSTOOLSDIR)/lib --disable-shared"

#MM
tools-crosstools-binutils :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(binutils-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/binutils/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-binutils--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-binutils--build_and_install-quick \
	    && $(TOUCH) $(binutils-installflag) ; \
	fi

%fetch_and_build mmake=crosstools-binutils package=binutils version=$(BINUTILS_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/binutils" \
	patch=yes \
	prefix="$(CROSSTOOLSDIR)" \
        extraoptions="$(BINUTILS_EXTRA_OPTS)"

HOST_CFLAGS := $(HOST_CFLAGS) $(HOST_GNU89_INLINE)

#MM
tools-crosstools-gcc :
	@$(IF) ! $(TEST) -f $(gcc-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/gcc/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-gcc--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-gcc--configure \
	    && $(MAKE) -C $(HOSTGENDIR)/$(CURDIR)/gcc all-gcc \
	    && $(MAKE) -j1 -C $(HOSTGENDIR)/$(CURDIR)/gcc install-gcc \
	    && $(TOUCH) $(gcc-installflag) ; \
	fi
	@$(IF) $(TEST) -f $(gcc-installflag); then \
	    $(SED) -i -e "s|@aros_target_cc_path@|$(GCC_PATH)|g" $(TOOLDIR)/$(AROS_TARGET_CPU)-$(AROS_TARGET_ARCH)$(AROS_TARGET_SUFFIX)-aros-ld ; \
	fi

%fetch_and_build mmake=crosstools-gcc package=gcc version=$(GCC_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/gcc/gcc-$(GCC_VERSION)" \
	patch=yes \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="$(GCC_EXTRA_OPTS)"

#MM
tools-crosstools-icu :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(icu-installflag) ; then \
	       $(RM) $(CROSSTOOLSDIR)/$(ICU_PKGNAME)/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-icu--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-icu--build_and_install-quick \
	    && $(TOUCH) $(icu-installflag) ; \
	fi

HOST_CXXFLAGS := $(subst -Wno-pointer-sign,, $(subst -Werror-implicit-function-declaration,, $(HOST_CXXFLAGS)))

# specify the gendir for icu to be in HOSTDIR so it ends up under CROSSTOOLSDIR, and can be reused
%fetch_and_build mmake=crosstools-icu package=$(ICU_PKGNAME) version=$(ICU_PKGVERSION)-src compiler=host \
	package_repo="$(ICU_REPOSITORY)" suffixes="tgz" \
	patch=yes srcdir=icu builddir=source gendir=$(CROSSTOOLSDIR) basedir= \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="$(ICU_EXTRA_OPTS)" extracflags=$(ICU_FLAGS)

#MM
tools-crosstools-gdb :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(gdb-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/gdb/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-gdb--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-gdb--build_and_install-quick \
	    && $(TOUCH) $(gdb-installflag) ; \
	fi

%fetch_and_build mmake=crosstools-gdb package=gdb version=$(GDB_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/gdb" \
	patch=yes \
	prefix="$(CROSSTOOLSDIR)" \
        extraoptions="$(GDB_EXTRA_OPTS)"


#
# LLVM toolchain
#

LLVM_REPOSITORY   := http://llvm.org/releases/$(LLVM_VERSION)
LLVM_ARCHBASE     := llvm-$(LLVM_VERSION).src
LLVMLLD_ARCHBASE  := lld-$(LLVM_VERSION).src
CLANG_ARCHBASE    := cfe-$(LLVM_VERSION).src

LLVM_TARGETS      := "X86;ARM;PowerPC"
LLVM_HOST         := "$(AROS_TARGET_CPU)"

LLVM_CMAKETARGET  :=
LLVM_CMAKEOPTIONS :=  \
    -DDEFAULT_SYSROOT="$(AROS_DEVELOPER)" \
    -DCMAKE_INSTALL_BINDIR="$(CROSSTOOLSDIR)" \
    -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH="$(HOSTDIR)/Ports/host/llvm-lld/$(LLVMLLD_ARCHBASE)" \
    -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH="$(HOSTDIR)/Ports/host/clang/$(CLANG_ARCHBASE)" \
    -DLLVM_TARGETS_TO_BUILD=$(LLVM_TARGETS) \
    -DLLVM_DEFAULT_TARGET_TRIPLE=$(AROS_TARGET_CPU)-unknown-aros \
    -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF
ifeq ($(AROS_HOST_ARCH),linux)
LLVM_CMAKEOPTIONS += -DBUILD_SHARED_LIBS=ON
# LLVM_CMAKEOPTIONS += -DLLVM_LINK_LLVM_DYLIB=ON
endif

%fetch mmake=crosstools-clang-fetch archive=$(CLANG_ARCHBASE)  \
    archive_origins=$(LLVM_REPOSITORY) suffixes="tar.xz" \
    location=$(PORTSSOURCEDIR) destination=$(HOSTDIR)/Ports/host/clang \
    patches_specs=$(CLANG_ARCHBASE)-aros.diff:$(CLANG_ARCHBASE):-p1

%create_patch mmake=crosstools-clang-create-patch \
    archive=$(CLANG_ARCHBASE) suffixes="tar.xz" \
    destination=$(HOSTDIR)/Ports/host/clang

%fetch mmake=crosstools-llvm-lld-fetch archive=$(LLVMLLD_ARCHBASE) \
    archive_origins=$(LLVM_REPOSITORY) suffixes="tar.xz" \
    location=$(PORTSSOURCEDIR) destination=$(HOSTDIR)/Ports/host/llvm-lld

%create_patch mmake=crosstools-llvm-lld-create-patch \
    archive=$(LLVMLLD_ARCHBASE) suffixes="tar.xz" \
    destination=$(HOSTDIR)/Ports/host/llvm-lld

%fetch mmake=crosstools-llvm-fetch archive=$(LLVM_ARCHBASE) \
    archive_origins=$(LLVM_REPOSITORY) suffixes="tar.xz" \
    location=$(PORTSSOURCEDIR) destination=$(HOSTDIR)/Ports/host/llvm \
    patches_specs=$(LLVM_ARCHBASE)-aros.diff:$(LLVM_ARCHBASE):-p1

%create_patch mmake=crosstools-llvm-create-patch \
    archive=$(LLVM_ARCHBASE) suffixes="tar.xz" \
    destination=$(HOSTDIR)/Ports/host/llvm

#MM crosstools-llvm-fetch : crosstools-clang-fetch crosstools-llvm-lld-fetch

#MM- tools-crosstools-llvm-i386   : crosstools-llvm-quick
#MM- tools-crosstools-llvm-x86_64 : crosstools-llvm-quick
#MM- tools-crosstools-llvm-ppc    : crosstools-llvm-quick
#MM- tools-crosstools-llvm-arm    : crosstools-llvm-quick

#MM- crosstools-llvm-quick : setup crosstools-llvm-fetch

%build_with_cmake mmake=crosstools-llvm package=llvm srcdir=$(HOSTDIR)/Ports/host/llvm/$(LLVM_ARCHBASE) \
    	prefix="$(CROSSTOOLSDIR)" maketarget=$(LLVM_CMAKETARGET) \
	extraoptions="$(LLVM_CMAKEOPTIONS)" compiler=host
