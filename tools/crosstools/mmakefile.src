include $(TOP)/config/make.cfg

BINUTILS_VERSION = 2.23.2
GMP_VERSION=5.1.2
MPFR_VERSION=3.1.2
MPC_VERSION=1.0.1
ICU_VERSION := 4.2.1
ICU_PKGNAME := icu4c
ICU_PKGVERSION=$(subst .,_,$(ICU_VERSION))

ICU_EXTRA_OPTS= \
        --bindir=$(CROSSTOOLSDIR) \
        --sbindir=$(CROSSTOOLSDIR) \
        --enable-static \
        --disable-dyload \
        --disable-shared \
        --disable-tests \
        --disable-samples \
        --disable-extras \
        --with-data-packaging=static

GCC_VERSION     = $(TARGET_GCC_VER)
GCC_LANGUAGES = c,c++,objc

# ARM requires additional flags to determine CPU type and FP model
ifneq (,$(findstring $(AROS_TARGET_CPU),arm))
GCC_EXTRA_OPTS = \
  --with-arch=$(GCC_DEFAULT_CPU) --with-float=$(GCC_DEFAULT_FLOAT_ABI) --with-fpu=$(GCC_DEFAULT_FPU) --with-mode=arm \
  --target=$(AROS_TARGET_CPU)-aros --bindir=$(CROSSTOOLSDIR) --enable-languages=$(GCC_LANGUAGES) \
  --enable-long-long --enable-version-specific-runtime-libs
else
GCC_EXTRA_OPTS = \
  --target=$(AROS_TARGET_CPU)-aros --bindir=$(CROSSTOOLSDIR) --enable-languages=$(GCC_LANGUAGES) \
  --enable-long-long --enable-version-specific-runtime-libs
endif

GCC_EXTRA_OPTS += --with-sysroot=$(AROS_DEVELOPMENT)
GCC_EXTRA_OPTS += --disable-bootstrap 
GCC_EXTRA_OPTS += --enable-sjlj-exceptions=no --enable-tls=no
GCC_EXTRA_OPTS += --with-dwarf2
GCC_EXTRA_OPTS += --enable-frame-pointer
GCC_EXTRA_OPTS += --libdir=$(CROSSTOOLSDIR)/lib
GCC_PATH        = `LANG=en_US $(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros-gcc -print-search-dirs | grep "programs: =" | cut -c 12-`
GCC_UNUSED_BUT_SET_VARIABLE := -Wno-unused-but-set-variable
GCC_ARRAY_BOUNDS            := -Wno-array-bounds
GCC_ENUM_COMPARE            := -Wno-enum-compare

GNU_REPOSITORY := gnu://
MPC_REPOSITORY := http://www.multiprecision.org/mpc/download http://ftp.osuosl.org/pub/lfs/lfs-packages/7.3
ICU_REPOSITORY := http://download.icu-project.org/files/$(ICU_PKGNAME)/$(ICU_VERSION)

binutils-installflag := $(CROSSTOOLSDIR)/.installflag-binutils-$(BINUTILS_VERSION)-$(AROS_TARGET_CPU)
gmp-installflag := $(CROSSTOOLSDIR)/.installflag-gmp-$(GMP_VERSION)
mpfr-installflag := $(CROSSTOOLSDIR)/.installflag-mpfr-$(MPFR_VERSION)
mpc-installflag := $(CROSSTOOLSDIR)/.installflag-mpc-$(MPC_VERSION)
gcc-installflag      := $(CROSSTOOLSDIR)/.installflag-gcc-$(GCC_VERSION)-$(AROS_TARGET_CPU)
icu-installflag := $(CROSSTOOLSDIR)/.installflag-icu-$(ICU_VERSION)

#MM- tools-crosstools : tools-crosstools-$(AROS_TARGET_CPU)

#MM- tools-crosstools-m68k   : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-i386   : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-x86_64 : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-ppc    : tools-crosstools-gcc crosstools-gcc
#MM- tools-crosstools-arm    : tools-crosstools-gcc crosstools-gcc

#MM- crosstools-gcc: core-linklibs

#MM tools-crosstools-gcc : tools-crosstools-binutils tools-crosstools-collect-aros \
#MM                        compiler-includes compiler-clib-includes \
#MM                        tools-crosstools-gmp \
#MM                        tools-crosstools-mpfr \
#MM                        tools-crosstools-mpc

# We intentionally bypass the usual fetch_and_build macro below and call mmakefile and gcc makefile
# targets directly. This is in order to not build the core-linklibs target during binutils and gcc
# builds because we want these static linker libraries be generated by the cross tool chain we are building
# right here. Additionally, we also want to maintain our own install flag files inside the directory
# specified by --with-aros-toolchain-install. This directory may even reside outside of the usual aros
# build directory and can be reused between complete rebuilds.

#MM
tools-crosstools-gmp :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(gmp-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/gmp/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-gmp--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-gmp--build_and_install-quick \
	    && $(TOUCH) $(gmp-installflag) ; \
	fi


%fetch_and_build mmake=crosstools-gmp package=gmp version=$(GMP_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/gmp" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --libdir=$(CROSSTOOLSDIR)/lib --disable-shared"

#MM
tools-crosstools-mpfr :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(mpfr-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/mpfr/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-mpfr--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-mpfr--build_and_install-quick \
	    && $(TOUCH) $(mpfr-installflag) ; \
	fi


%fetch_and_build mmake=crosstools-mpfr package=mpfr version=$(MPFR_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/mpfr" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --libdir=$(CROSSTOOLSDIR)/lib --disable-shared"

#MM
tools-crosstools-mpc :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(mpc-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/mpc/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-mpc--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-mpc--build_and_install-quick \
	    && $(TOUCH) $(mpc-installflag) ; \
	fi


%fetch_and_build mmake=crosstools-mpc package=mpc version=$(MPC_VERSION) compiler=host \
	package_repo="$(MPC_REPOSITORY)" suffixes="tar.gz" \
	patch=no \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--bindir=$(CROSSTOOLSDIR) --libdir=$(CROSSTOOLSDIR)/lib --disable-shared"

#MM
tools-crosstools-binutils :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(binutils-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/binutils/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-binutils--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-binutils--build_and_install-quick \
	    && $(TOUCH) $(binutils-installflag) ; \
	fi


%fetch_and_build mmake=crosstools-binutils package=binutils version=$(BINUTILS_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/binutils" \
	patch=yes \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="--target=$(AROS_TARGET_CPU)-aros -bindir=$(CROSSTOOLSDIR) --libdir=$(CROSSTOOLSDIR)/lib --with-sysroot=$(AROS_DEVELOPMENT) --disable-werror"

HOST_CFLAGS := $(HOST_CFLAGS) $(HOST_GNU89_INLINE)

#MM
tools-crosstools-gcc :
	@$(IF) ! $(TEST) -f $(gcc-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/gcc/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-gcc--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-gcc--configure \
	    && $(MAKE) -C $(HOSTGENDIR)/$(CURDIR)/gcc all-gcc \
	    && $(MAKE) -j1 -C $(HOSTGENDIR)/$(CURDIR)/gcc install-gcc \
	    && $(TOUCH) $(gcc-installflag) ; \
	fi
	@$(IF) $(TEST) -f $(gcc-installflag); then \
	    $(SED) -i -e "s|@aros_target_cc_path@|$(GCC_PATH)|g" $(TOOLDIR)/$(AROS_TARGET_CPU)-$(AROS_TARGET_ARCH)$(AROS_TARGET_SUFFIX)-aros-ld ; \
	    $(SED) -i -e "s|@aros_cflags_unused_but_set_variable@|$(GCC_UNUSED_BUT_SET_VARIABLE)|g" $(GENDIR)/config/target.cfg ; \
	    $(SED) -i -e "s|@aros_cflags_array_bounds@|$(GCC_ARRAY_BOUNDS)|g" $(GENDIR)/config/target.cfg ; \
	    $(SED) -i -e "s|@aros_cflags_enum_compare@|$(GCC_ENUM_COMPARE)|g" $(GENDIR)/config/target.cfg ; \
	    $(SED) -i -e "s|@aros_cflags_format_security@|-Wno-format-security|g" $(GENDIR)/config/target.cfg ; \
	    $(SED) -i -e "s|@aros_cflags_strict_overflow@|-Wno-strict-overflow|g" $(GENDIR)/config/target.cfg ; \
	fi

%fetch_and_build mmake=crosstools-gcc package=gcc version=$(GCC_VERSION) compiler=host \
	package_repo="$(GNU_REPOSITORY)/gcc/gcc-$(GCC_VERSION)" \
	patch=yes \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="$(GCC_EXTRA_OPTS)"

#MM
tools-crosstools-icu :
	@$(IF) ! $(TEST) -d $(CROSSTOOLSDIR) \
	    || ! $(TEST) -f $(icu-installflag) ; then \
	       $(RM) $(HOSTGENDIR)/$(CURDIR)/icu/.files-touched \
	    && $(MAKE) -f ./mmakefile crosstools-icu--fetch \
	    && $(MAKE) -f ./mmakefile crosstools-icu--build_and_install-quick \
	    && $(TOUCH) $(icu-installflag) ; \
	fi

HOST_CXXFLAGS := $(subst -Wno-pointer-sign,, $(subst -Werror-implicit-function-declaration,, $(HOST_CXXFLAGS)))

# specify the gendir for icu to be in the crosstools directory so it can be reused
%fetch_and_build mmake=crosstools-icu package=icu4c version=$(ICU_PKGVERSION)-src compiler=host \
	package_repo="$(ICU_REPOSITORY)" suffixes="tgz" \
	patch=yes srcdir=icu builddir=source gendir=$(CROSSTOOLSDIR) \
	prefix="$(CROSSTOOLSDIR)" \
	extraoptions="$(ICU_EXTRA_OPTS)"
