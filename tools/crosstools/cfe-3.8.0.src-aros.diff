diff -ruN cfe-3.8.0.src/include/clang/Driver/Options.td cfe-3.8.0.src.aros/include/clang/Driver/Options.td
--- cfe-3.8.0.src/include/clang/Driver/Options.td	2016-01-06 21:27:42.000000000 +0000
+++ cfe-3.8.0.src.aros/include/clang/Driver/Options.td	2016-03-27 04:40:25.813258567 +0100
@@ -1630,6 +1630,8 @@
 def no_cpp_precomp : Flag<["-"], "no-cpp-precomp">, Group<clang_ignored_f_Group>;
 def no_integrated_cpp : Flag<["-", "--"], "no-integrated-cpp">, Flags<[DriverOption]>;
 def no_pedantic : Flag<["-", "--"], "no-pedantic">, Group<pedantic_Group>;
+def no_posixc : Flag<["-"], "no-posixc">;
+def no_stdc : Flag<["-"], "no-stdc">;
 def no__dead__strip__inits__and__terms : Flag<["-"], "no_dead_strip_inits_and_terms">;
 def nobuiltininc : Flag<["-"], "nobuiltininc">, Flags<[CC1Option]>,
   HelpText<"Disable builtin #include directories">;
@@ -1660,6 +1662,7 @@
 def pg : Flag<["-"], "pg">, HelpText<"Enable mcount instrumentation">, Flags<[CC1Option]>;
 def pipe : Flag<["-", "--"], "pipe">,
   HelpText<"Use pipes between commands, when possible">;
+def posixc : Flag<["-"], "posixc">;
 def prebind__all__twolevel__modules : Flag<["-"], "prebind_all_twolevel_modules">;
 def prebind : Flag<["-"], "prebind">;
 def preload : Flag<["-"], "preload">;
@@ -1728,6 +1731,7 @@
 def static_libgcc : Flag<["-"], "static-libgcc">;
 def static_libstdcxx : Flag<["-"], "static-libstdc++">;
 def static : Flag<["-", "--"], "static">, Flags<[NoArgumentUnused]>;
+def stdc : Flag<["-"], "stdc">;
 def std_default_EQ : Joined<["-"], "std-default=">;
 def std_EQ : Joined<["-", "--"], "std=">, Flags<[CC1Option]>,
   Group<CompileOnly_Group>, HelpText<"Language standard to compile for">;
diff -ruN cfe-3.8.0.src/lib/Driver/AROSToolChain.cpp cfe-3.8.0.src.aros/lib/Driver/AROSToolChain.cpp
--- cfe-3.8.0.src/lib/Driver/AROSToolChain.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cfe-3.8.0.src.aros/lib/Driver/AROSToolChain.cpp	2016-03-27 18:30:04.259971623 +0100
@@ -0,0 +1,117 @@
+//===--- AROSToolChain.cpp - AROS Tool Chain -------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#include "ToolChains.h"
+#include "clang/Driver/Driver.h"
+#include "clang/Driver/Options.h"
+#include "llvm/Option/ArgList.h"
+
+using namespace clang::driver;
+using namespace clang::driver::toolchains;
+
+AROSToolChain::AROSToolChain(const Driver &D,
+                                             const llvm::Triple &T,
+                                             const llvm::opt::ArgList &Args)
+    : Generic_GCC(D, T, Args) {
+  if (GetCXXStdlibType(Args) == ToolChain::CST_Libstdcxx) {
+
+  }
+}
+
+#if (0)
+bool AROSToolChain::IsUnwindTablesDefault() const {
+  // FIXME: all non-x86 targets need unwind tables, however, LLVM currently does
+  // not know how to emit them.
+  return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPICDefault() const {
+  return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPIEDefault() const {
+  return getArch() == llvm::Triple::x86_64;
+}
+
+bool AROSToolChain::isPICDefaultForced() const {
+  return getArch() == llvm::Triple::x86_64;
+}
+#endif
+
+void AROSToolChain::
+AddAROSSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                          llvm::opt::ArgStringList &CC1Args) const {
+  const Driver &D = getDriver();
+  const std::string &SysRoot = D.SysRoot;
+
+  if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+    addSystemInclude(DriverArgs, CC1Args, SysRoot + "/include");
+    if (!DriverArgs.hasArg(options::OPT_no_posixc)) {
+      SmallString<128> ResourceDir(SysRoot);
+      llvm::sys::path::append(ResourceDir, "include/aros/posixc");
+      addSystemInclude(DriverArgs, CC1Args, ResourceDir);
+    }
+    if (!DriverArgs.hasArg(options::OPT_no_stdc)) {
+      SmallString<128> ResourceDir(SysRoot);
+      llvm::sys::path::append(ResourceDir, "include/aros/stdc");
+      addSystemInclude(DriverArgs, CC1Args, ResourceDir);
+    }
+  }
+}
+
+void AROSToolChain::
+AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                          llvm::opt::ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc))
+    return;
+
+  AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+}
+
+void AROSToolChain::
+addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                                     llvm::opt::ArgStringList &CC1Args) const {
+  CC1Args.push_back("-D__AROS__");
+  CC1Args.push_back("-D__AMIGA__");
+  CC1Args.push_back("-D_AMIGA");
+  CC1Args.push_back("-D__ELF__");
+  CC1Args.push_back("-Dsystem=posix");
+}
+
+
+void AROSToolChain::
+AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx))
+    return;
+
+  switch (GetCXXStdlibType(DriverArgs)) {
+  case ToolChain::CST_Libcxx:
+    AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+    break;
+
+  case ToolChain::CST_Libstdcxx:
+    AddAROSSystemIncludeArgs(DriverArgs, CC1Args);
+    break;
+  }
+}
+
+void AROSToolChain::
+AddCXXStdlibLibArgs(const llvm::opt::ArgList &DriverArgs,
+                    llvm::opt::ArgStringList &CC1Args) const {
+  switch (GetCXXStdlibType(DriverArgs)) {
+  case ToolChain::CST_Libcxx:
+//    CC1Args.push_back("-lc++");
+    break;
+  case ToolChain::CST_Libstdcxx:
+//    CC1Args.push_back("-lstdc++");
+    break;
+  }
+}
diff -ruN cfe-3.8.0.src/lib/Driver/CMakeLists.txt cfe-3.8.0.src.aros/lib/Driver/CMakeLists.txt
--- cfe-3.8.0.src/lib/Driver/CMakeLists.txt	2015-07-02 05:45:27.000000000 +0100
+++ cfe-3.8.0.src.aros/lib/Driver/CMakeLists.txt	2016-03-27 04:40:25.813258567 +0100
@@ -5,6 +5,7 @@
 
 add_clang_library(clangDriver
   Action.cpp
+  AROSToolChain.cpp
   Compilation.cpp
   CrossWindowsToolChain.cpp
   Driver.cpp
diff -ruN cfe-3.8.0.src/lib/Driver/Driver.cpp cfe-3.8.0.src.aros/lib/Driver/Driver.cpp
--- cfe-3.8.0.src/lib/Driver/Driver.cpp	2016-01-11 23:27:13.000000000 +0000
+++ cfe-3.8.0.src.aros/lib/Driver/Driver.cpp	2016-03-27 04:40:25.814258579 +0100
@@ -2206,6 +2206,9 @@
   ToolChain *&TC = ToolChains[Target.str()];
   if (!TC) {
     switch (Target.getOS()) {
+    case llvm::Triple::AROS:
+      TC = new toolchains::AROSToolChain(*this, Target, Args);
+      break;
     case llvm::Triple::CloudABI:
       TC = new toolchains::CloudABI(*this, Target, Args);
       break;
diff -ruN cfe-3.8.0.src/lib/Driver/ToolChains.h cfe-3.8.0.src.aros/lib/Driver/ToolChains.h
--- cfe-3.8.0.src/lib/Driver/ToolChains.h	2016-02-16 19:56:48.000000000 +0000
+++ cfe-3.8.0.src.aros/lib/Driver/ToolChains.h	2016-03-27 04:40:25.814258579 +0100
@@ -350,6 +350,31 @@
   /// }
 };
 
+/// AROS - The base AROS tool chain.
+class LLVM_LIBRARY_VISIBILITY AROSToolChain : public Generic_GCC {
+public:
+  AROSToolChain(const Driver &D, const llvm::Triple &T,
+                        const llvm::opt::ArgList &Args);
+
+  void
+  AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const override;
+  void addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args) const override;
+  void AddClangCXXStdlibIncludeArgs(
+      const llvm::opt::ArgList &DriverArgs,
+      llvm::opt::ArgStringList &CC1Args) const override;
+  void AddCXXStdlibLibArgs(const llvm::opt::ArgList &Args,
+                           llvm::opt::ArgStringList &CmdArgs) const override;
+
+private:
+  void
+  AddAROSSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const;
+
+};
+
+
 /// Darwin - The base Darwin tool chain.
 class LLVM_LIBRARY_VISIBILITY Darwin : public MachO {
 public:
diff -ruN cfe-3.8.0.src/lib/Frontend/InitHeaderSearch.cpp cfe-3.8.0.src.aros/lib/Frontend/InitHeaderSearch.cpp
--- cfe-3.8.0.src/lib/Frontend/InitHeaderSearch.cpp	2015-12-30 03:40:23.000000000 +0000
+++ cfe-3.8.0.src.aros/lib/Frontend/InitHeaderSearch.cpp	2016-03-27 04:40:25.815258591 +0100
@@ -210,6 +210,7 @@
 
   if (HSOpts.UseStandardSystemIncludes) {
     switch (os) {
+    case llvm::Triple::AROS:
     case llvm::Triple::CloudABI:
     case llvm::Triple::FreeBSD:
     case llvm::Triple::NetBSD:
@@ -317,6 +318,7 @@
   }
 
   switch (os) {
+  case llvm::Triple::AROS:
   case llvm::Triple::CloudABI:
   case llvm::Triple::RTEMS:
   case llvm::Triple::NaCl:
