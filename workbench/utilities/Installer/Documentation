Parsing the script
------------------
	Read in 'tokens' and braces and save into tree structure.
	Actually there is no "pre-compiling" done as stated in the
	original Installer docs.


Data Types
----------
<int>
	is an integer of type (long int)
	Its representation is a decimal number or
	$xxx will be considered as HEX and
	%xxxx as binary numbers.
	Boolean arguments are 0 for FALSE and non-0 for TRUE.
	Boolean functions return 1 as TRUE.

<string>
	is a quoted ("..." or '...') string

Arguments without quotes are considered to be variables
	Variables are typeless and converted to the functions needs
	(exception is ( <format-string> <arguments>... ) where the variable
	  is checked for a non-NULL string or the integer value will be
	  used which will be 0 for unset variables
	)
	and therefore being exchanged by their values at runtime
	( <string> is converted via atol( <string> );
	  <int> is converted via sprintf( string, "%ld", <int> );
	)
	Unset variables are NULL in string and 0 in integer value.
	Commands can be used as arguments, too, as the return value
	will be taken.
	Example: ( set sum ( + a b ) )


Executing the script
--------------------
Arguments in [...] are optional.

( (...)... )
  Blocks. If the first argument in brackets is a command (...) all
  others have to be commands, too.
  The return value is the return value of the last command in the block.
  Empty blocks are not allowed.

  If a command is not recognized an error SCRIPTERROR is produced.


( abort [<string>...] )
  Shows strings and executes trap or onerror statements if present and
  exits abnormally.
  This function never returns.


( and	<int> <int> )
( or	<int> <int> )
( xor	<int> <int> )
( bitand <int> <int> )
( bitor  <int> <int> )
( bitxor <int> <int> )
( <>	<int> <int> )
( <	<int> <int> )
( <=	<int> <int> )
( =	<int> <int> )
( >	<int> <int> )
( >=	<int> <int> )
( -	<int> <int> )
( /	<int> <int> )
( shiftleft <int> <int> )
( shiftrght <int> <int> )
  These functions return the result of the operations on the two integers.
  For logical operations 1 is returned as TRUE and 0 as FALSE.
  ( / <int> <int> ) checks 2nd arg == zero and produces an error BADPARAMETER.


( cat <any>... )
  Concatenates all args as strings. This function was intended to be the only
  valid function for converting <int> to <string>
  (Well, except ( "..." ... ), too )
  The return value is the quoted string.


( complete <int> )
  Tells the user how much ( in percent ) is already done.
  The return value is the percentage.
  NOTE: We do not check for percentage < 0 or > 100 !!!


( debug <any>... )
  If run from Shell and DEBUG was specified in the command line
  the arguments (strings, integers, variables) will be printf()'ed
  to the shell separated by spaces.
  The return value is the quoted string of all concatenated arguments.


( exit [(quiet)] [<string>...] )
  Shows the strings separated by a linefeed and exits normally.
  A summarizing message with information on where the app was installed
  and the log-file can be found will be displayed unless (quiet) is
  specified as a parameter.
  This function never returns.


( if <int> <then> [<else>] )
  <int> is checked for !=0 and returns <then> otherwise <else> or 0 if
  <else> is left out. If <then> is a string and <else> is omitted this
  function returns an empty string as the false value.
  <int>, <then> and <else> may be functions, too.


( in <base-int> <bit-int>... )
  This function returns <base-int>'s bits given in <bit-int>... (mask).


( not <int> )
( bitnot <int> )
  Returns logical/bitwise negation of argument.


( + <int>... )
  Returns the sum of all integers, 0 for no arguments.


( * <int>[...] )
  Returns the product of all integers. Needs at least one <int>


( procedure <name> [<arg>...] (...) )
  Procedures are defined during parsing. The name has to be a non-quoted
  string which must not begin with digits. Consider using a prefix like
  "P_" for your procedures to avoid a conflict with future extensions of
  Installer.
  <arg>... is an optional list of variables which will be set when calling
  the procedure. However, you can call the procedure with less than the
  specified arguments; in this case the unset variables retain their old
  values (example from original Installer docs):
  ( procedure P_ADDMUL arg1 arg2 arg3
      ( * ( + arg1 arg2 ) arg3 )
  )
  ( message ( P_ADDMUL 1 2 3 ) )	; shows 9
  ( message ( P_ADDMUL 4 5 ) )		; shows 27, arg3 stays the same

  Note that there are no local variables, so that a call
  ( P_ADDMUL 1 2 3 )
  is the same as
  ( set arg1 1 arg2 2 arg3 3 )
  ( P_ADDMUL )

  Though the ( procedure ... ) command is ignored at run-time it returns 0.


( select <int> [<any>...] )
  Returns the value of the <int>th <any>-item or 0 if <int> < 1 or
  <int> > number of <any>.


( strlen <string> )
  Returns the length of <string> or 0 if argument is an integer.


( until <int> (...) )
  Executes the block (post-checked) until <int> statement is TRUE.
  Returns the (last) value of the executed block.


( while <int> (...) )
  Executes the block (pre-checked) while <int> statement is TRUE.
  Returns the (last) value of the executed block or 0 if block has
  not been executed.


( set <var-name> <value> ... )
  Use (set ...) to set variables.
  Variable names have to be unquoted strings -- commands are not accepted
  Values can be anything.
  Consider using a prefix like '#' to avoid conflicts with future versions
  of Installer. The prefix '@' is reserved for internal variables. They
  can be set to other values, too.


( symbolset <var-name> <value> ... )
  With this functions you can use quoted strings as varnames (quotes will be
  stripped). This allows to have "dynamic" variables like ( "var%ld" n )
  Therefore commands as varnames will be executed.
  NOTE: sole integers as variables are not allowed, though ( "1" ) will
  work, but is not recommended to use.


( symbolval <var-name> )
  Use this functions to have access to "dynamic" variables set with
  ( symbolset ... )
  Same naming conventions as in symbolset apply here.


( askbool [( help <string>... )]
          [( prompt <string>... )]
          [( default <int> )]
          [( choices <yesstring> [<nostring>] )]
)
  Asks the user to select yes or no unless user is NOVICE
  (ie. @user-level = 0 ). Returns 0 for "No" and 1 for "Yes".
  Defaults to 0 = "No".


( asknumber [( help <string>... )]
            [( prompt <string>... )]
            [( default <int> )]
            [( range <min-int> <maxint>] )]
)
  Asks the user for a number unless user is NOVICE (ie. @user-level = 0 ).
  defaults to 0
  range defaults to non-negative numbers, unless default is negative which
  causes range to be extended to include the default number.


( askstring [( help <string>... )]
            [( prompt <string>... )]
            [( default <int> )]
)
  Asks the user for a string unless user is NOVICE (ie. @user-level = 0 ).
  defaults to ""


( askchoice [( help <string>... )]
            [( prompt <string>... )]
            [( default <int> )]
            ( choices <string>... )
)
  Asks the user to select one item out of N unless user is NOVICE
  (ie. @user-level = 0 ).
  defaults to 0
  choices is list of strings listed as items of the requester
  NULL strings will not be displayed.
  The Return value is the number of the selected item, starting with 0 as
  the first item.

  NOTE: Original Installer docs read:
  >>  return value is a bitmask [...] maximum of 32 items.
  Tests showed that the number is passed - not a bitmask, but choices are
  nevertheless limited to 32!

  >>  NOTE: "<ESC>[2p" sequence at beginning of one item leads to
  >>  proportional rendering (>V42)
  This is not implemented now!


( <format-string> <argument>... )
  This construct works like C printf() and returns the resulting string
  after substituting '%d' and '%s'. An 'sprintf(var,"format", args... )'
  can be achieved by '( set var ( "format" <args>... ) )'
  Installer uses RawDoFmt() and does not check correctness of arguments.


( substr <string> <start> [<count>] )
  Returns the substring of <string>, beginning with offset <start>
  (offset 0 is the first character) and including <count> characters.
  If <count> is omitted, then the rest of the string is returned.


( transcript [<string>...] )
  Concatenates all strings writes them to the logfile and appends a
  newline character.
  Returns the concatenated strings.


( user <int>|<"novice"|"average"|"expert"> )
  Changes the user level (@user-level) to the given value.
  Specify an integer 0 = novice 1 = average 2 = expert or the (quoted)
  strings "novice" "average" or "expert"
  Use this function only to debug your own scripts. In official releases
  this function shouldn't appear.
  Returns the new user-level.


( welcome <string>... )
  Displays the strings instead of
  "Welcome to <APPNAME> App installation utility."
  and asks for the user level.
  Without this function appearing in the script the user level is requested
  straight at the beginning.


( message <string>...
          [(help <string>... )]
          [(all)]
)
  Displays the strings and offers "Proceed", "Abort" and "Help" buttons.
  The message is not displayed in NOVICE mode unless (all) is specified.
  Please, do not confuse the novice user.


( working <string>... )
  Displays the concatenated strings under a standard line reading
  "Working on Installation". This can be used to tell the user what's
  going on when doing long operations except copying which has its own
  status display.


( execute <file>
      [(safe)]
)
Execute an AmigaDOS script.


( run <string>...
      [(prompt <string>... )]
      [(help <string>... )]
      [(confirm)]
      [(safe)]
)
  This function returns the primary result of the called program and
  the secondary is passed in '@ioerr'.


( textfile )
# tests with original Installer showed:
# ( append )s are collected
# ( include )s are replaced, i.e. only the last ( include ) is taken
# first (append)s are printed then last (include)
## Distinguish between overriding and appending parameters and introduce
## according functions to collect args. Or always append/collect as multiple
## strings and let function behave as desired.


( askdir )
 /* Ask user for a directory */


( askdisk )
 /* Ask user insert a disk */


( askfile )
 /* Ask user for a file */


( askoptions )
 /* Ask user to choose multiple items */


( database <feature> )
 /* Return information on the hardware Installer is running on */
 <feature> is one of:
 "vblank"
 "cpu"
   -> "68000" "68010" "68020" "68030" "68040" "68060"
      "80386" "80486"
      "Pentium" "PentiumPro" "Celeron" "PentiumII" "PentiumIII"
      "K6" "K6-II" "K6-III" "Athlon"
 "graphics-mem"
   -> Size of free CHIP RAM (via AvailMem(MEMF_CHIP))
 "total-mem"
   -> Total size of free RAM (via AvailMem(MEMF_TOTAL))
 "fpu"
   -> "68881" "68882" "FPU40" "80387" "80486" "NOFPU"
 "chiprev"
   -> "AA" "ECS" "AGNUS" "VGA"
 Return-type is always a string except for free RAM size.


( onerror (...) )
  Use this function to define code to be executed after an error occurred.
  This can be used to delete installed stuff if an error occurs or user
  aborted installation. This function is mutually exclusive with trap command.


( trap <trapflag> (...) )
  Use this function to set an error handling routine.
  When an error occurs and ( trap ... ) has been set before, the statements
  of the trap command are executed. Use this to clean up if an abnormal
  termination of the script occurs. If no trap is set for a specific errorcode
  the more general ( onerror ... ) statements are executed if declared before.
  Error codes:
    1 := User aborted
    2 := Ran out of memory
    3 := Error in script
    4 := DOS error (more infos in @ioerr , see below )
    5 := Bad parameter data


( startup <name-string>
      [(prompt <string>... )]
      [(help <string>... )]
      [(confirm)]
      (command <string>... )
)
  Inserts a section

;BEGIN <name-string>
...
;END <name-string>

  into S:User-Startup. If a section with this name already exists the section
  will be replaced by this new one.
  The commands between the markers are given in (command ...).
  The user will only be prompted to confirm this action if in Expert mode.


( delete <filename>
      [(prompt <string>... )]
      [(help <string>... )]
      [(confirm)]
      [(optional <option>... )]
      [(delopts <option>... )]
      [(delopts)]
      [(safe)]
)
  Delete a file. (only plain deletion is implemented by now!)
  options are:
    force   - unprotect file
    askuser - ask user if file should be unprotected,
              in novice the automatic answer is "no"


( exists <name>
      [(noreq)]
)
  Checks if a <name> exists.
  Returns 0 if non-existent, 1 for a file or 2 for a directory.
  If (noreq) is specified, then no requester will pop up if
  <name> should be on a not-mounted volume.


( makedir <name>
      [(prompt <string>... )]
      [(help <string>... )]
      [(infos)]
      [(confirm)]
      [(safe)]
)
  Create a directory.
  (infos) creates also an icon for the new directory (not yet implemented).


( rename <oldname> <newname>
      [(prompt <string>... )]
      [(help <string>... )]
      [(confirm)]
      [(disk)]
      [(safe)]
)
  Renames the file "oldname" to "newname". If the parameter (disk) is
  passed, then this command relabels the disk "oldname" to "newname".
  When relabeling disks *only* include a colon ":" in the oldname.
  The function proceeds silently unless (confirm) is passed where the
  (prompt) is shown and (help) is available. If (safe) is passed then
  the renaming will be done even when in PRETEND mode.
  This function returns 1 on success and 0 on failure.


( fileonly <pathname> )
  Returns the file part of <pathname>.
  Example:
    (fileonly "A:BC/def/gh") -> "gh"


( pathonly <pathname> )
  Returns the path part of <pathname>.
  Example:
    (pathonly "A:BC/def/gh") -> "A:BC/def"


( earlier <file1> <file2> )
  Returns TRUE if file1 is older (earlier) than file2.


( getdiskspace <pathname> )
  Returns the number free bytes on the device.  If the pathname is bad or
  no info could not be obtained, -1 is returned.


( getenv <name> )
  Returns the value of an ENV: variable (through DOS/GetVar(name,...))


( getsize <name> )
  Returns the size of file <name> in bytes or 0 if file does not exist.


( makeassign <assign> [<path>]
      [(safe)]
)
  Assigns assign to path. If path is not specified, the assign is removed.
  If (safe) is passed then the assign will be done even when in PRETEND mode.
  Returns 1 on success and 0 on failure.


( getassign <name> [<option>])
  Returns the path of <name>. The default is to return the logical assignments.
  <Option> can be one of:
	'a': match logical assignments only (default)
	'v': match volumes only
	'd': match devices only

  If <name> does not exist as the specified type, an empty string is returned.

  Note that you must specify the device/volume/assign without the trailing
  colon. The return value will be a true path, ie. with the colon.
  If <option> is device and <name> is a device, its volume name is reported,
  unless it doesn't exist in which case the device name is returned.


( getdevice <path> )
  Returns the volume name on which <path> exists or an empty string if
  <path> does not exist.


( tackon <path> <file> )
  Returns the combined pathname of <path>+<file>.

  NOTE: Currently DOS.library/AddPart() cannot cope with a leading '/' in the
  <file> parameter.


( expandpath <path> )
  Expands the <path>. For example "C:Mount" will become "System:C/Mount"


/* Unimplemented commands */
( copyfiles )
( copylib )
( foreach )
( getsum )
( getversion )
( patmatch )
( protect )
( rexx )
( tooltype )

/* Here are all tags, first the ones which have to be executed */
 
( delopts )
 /* unset copying/deleting options if we are called global */
 /* as parameter to a function we have got an ignore=1 before */
 "fail"
 "nofail"
 "oknodelete"
 /* These may be combined in any way */
 "force"
 "askuser"

( optional )
 /* set copying/deleting options if we are called global */
 /* as parameter to a function we have got an ignore=1 before */
 "fail"
 "nofail"
 "oknodelete"
 /* These may be combined in any way */
 "force"
 "askuser"


( all )
( append )
( assigns )
( choices )
( command )
( confirm )
( default )
( dest )
( disk )
( files )
( fonts )
( help )
( include )
( infos )
( newname )
( newpath )
( nogauge )
( noposition )
( pattern )
( prompt )
( range )
( safe )
( setdefaulttool )
( setstack )
( settooltype )
( source )
( swapcolors )
( quiet )

