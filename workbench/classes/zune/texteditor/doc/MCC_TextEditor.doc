TABLE OF CONTENTS

TextEditor.mcc/TextEditor.mcc
TextEditor.mcc/MUIA_TextEditor_ActiveObjectOnClick
TextEditor.mcc/MUIA_TextEditor_AreaMarked
TextEditor.mcc/MUIA_TextEditor_AutoClip
TextEditor.mcc/MUIA_TextEditor_ColorMap
TextEditor.mcc/MUIA_TextEditor_Columns
TextEditor.mcc/MUIA_TextEditor_Contents
TextEditor.mcc/MUIA_TextEditor_ConvertTabs
TextEditor.mcc/MUIA_TextEditor_CursorPosition
TextEditor.mcc/MUIA_TextEditor_CursorX
TextEditor.mcc/MUIA_TextEditor_CursorY
TextEditor.mcc/MUIA_TextEditor_DoubleClickHook
TextEditor.mcc/MUIA_TextEditor_ExportHook
TextEditor.mcc/MUIA_TextEditor_ExportWrap
TextEditor.mcc/MUIA_TextEditor_FixedFont
TextEditor.mcc/MUIA_TextEditor_Flow
TextEditor.mcc/MUIA_TextEditor_HasChanged
TextEditor.mcc/MUIA_TextEditor_ImportHook
TextEditor.mcc/MUIA_TextEditor_ImportWrap
TextEditor.mcc/MUIA_TextEditor_InsertMode         (not yet implemented...)
TextEditor.mcc/MUIA_TextEditor_InVirtualGroup
TextEditor.mcc/MUIA_TextEditor_KeyUpFocus
TextEditor.mcc/MUIA_TextEditor_Keywords
TextEditor.mcc/MUIA_TextEditor_MatchedKeyword
TextEditor.mcc/MUIA_TextEditor_PasteColors
TextEditor.mcc/MUIA_TextEditor_PasteStyles
TextEditor.mcc/MUIA_TextEditor_Pen
TextEditor.mcc/MUIA_TextEditor_Prop_DeltaFactor
TextEditor.mcc/MUIA_TextEditor_Prop_Entries
TextEditor.mcc/MUIA_TextEditor_Prop_First
TextEditor.mcc/MUIA_TextEditor_Prop_Visible
TextEditor.mcc/MUIA_TextEditor_Quiet
TextEditor.mcc/MUIA_TextEditor_ReadOnly
TextEditor.mcc/MUIA_TextEditor_RedoAvailable
TextEditor.mcc/MUIA_TextEditor_Rows
TextEditor.mcc/MUIA_TextEditor_Separator
TextEditor.mcc/MUIA_TextEditor_Slider
TextEditor.mcc/MUIA_TextEditor_StyleBold
TextEditor.mcc/MUIA_TextEditor_StyleItalic
TextEditor.mcc/MUIA_TextEditor_StyleUnderline
TextEditor.mcc/MUIA_TextEditor_TabSize
TextEditor.mcc/MUIA_TextEditor_TypeAndSpell
TextEditor.mcc/MUIA_TextEditor_UndoAvailable
TextEditor.mcc/MUIA_TextEditor_UndoLevels
TextEditor.mcc/MUIA_TextEditor_WrapBorder
TextEditor.mcc/MUIA_TextEditor_WrapMode
TextEditor.mcc/MUIA_TextEditor_WrapWords
TextEditor.mcc/MUIM_TextEditor_ARexxCmd
TextEditor.mcc/MUIM_TextEditor_BlockInfo
TextEditor.mcc/MUIM_TextEditor_ClearText
TextEditor.mcc/MUIM_TextEditor_SetBlock
TextEditor.mcc/MUIM_TextEditor_ExportBlock
TextEditor.mcc/MUIM_TextEditor_ExportText
TextEditor.mcc/MUIM_TextEditor_HandleError
TextEditor.mcc/MUIM_TextEditor_InsertText
TextEditor.mcc/MUIM_TextEditor_MacroBegin         (not yet implemented...)
TextEditor.mcc/MUIM_TextEditor_MacroEnd           (not yet implemented...)
TextEditor.mcc/MUIM_TextEditor_MacroExecute       (not yet implemented...)
TextEditor.mcc/MUIM_TextEditor_MarkText
TextEditor.mcc/MUIM_TextEditor_QueryKeyAction
TextEditor.mcc/MUIM_TextEditor_Replace
TextEditor.mcc/MUIM_TextEditor_Search
TextEditor.mcc/TextEditor.mcc

    *******************************************************************
    Copyright (C) 2005-2014 TextEditor.mcc Open Source Team
    $Id: MCC_TextEditor.doc 945 2014-01-26 09:03:06Z damato $

    TextEditor.mcc is a multiline string gadget which holds most of the
    functions of a normal text editor including some special function-
    ality for importing/exporting text from/to special formats.

    The gadget was originally written in 1997 by Allan Odgaard. As of
    version 15.10, released in April 2005, the gadget is maintained by
    the TextEditor.mcc Open Source team.

    It is released and distributed under the terms of the GNU Lesser
    General Public License (LGPL) and available free of charge.

    Please visit http://www.sf.net/projects/texteditor-mcc/ for
    the very latest version and information regarding TextEditor.mcc.
    *******************************************************************

TextEditor.mcc/MUIA_TextEditor_ActiveObjectOnClick

    NAME
        MUIA_TextEditor_ActiveObjectOnClick -- [ISG], BOOL

    FUNCTION
        This tag allows to set/get whether the texteditor object is
        automatically set the MUIA_Window_ActiveObject object of the
        window in case the user performs a mouse action (click/select)
        in the texteditor. As a consequence, the texteditor will then
        get the full keyboard focus and will eventually signal it's
        active status by highlighting a marked area with the active
        color rather than using the inactive marked color in inactive
        state.

    NOTE
        Please note that depending on the MUIA_TextEditor_ReadOnly
        setting, this attribute has different default values. In case
        the texteditor is set to ReadOnly while initialized (OM_NEW)
        this attribute will be set to FALSE as a default. In contrast,
        when the object is in full write mode it will be set to TRUE
        instead. However, during operation or in OM_NEW this behaviour
        can be overrided by setting this attribute to another value.

    SEE ALSO
        MUIA_TextEditor_ReadOnly

TextEditor.mcc/MUIA_TextEditor_AreaMarked

    NAME
        MUIA_TextEditor_AreaMarked -- [..G], BOOL

    FUNCTION
        This tag will be set to TRUE when text is marked, and back to
        FALSE when nothing is marked.  You can create a notify event
        with this tag and let your cut/copy buttons become ghosted
        when nothing is marked.

TextEditor.mcc/MUIA_TextEditor_AutoClip

    NAME
        MUIA_TextEditor_AutoClip -- [ISG], BOOL

    FUNCTION
        When the gadget is in read only mode and the user marks some text,
        then it will be automatically copied to the clipboard.  With this
        tag you can disable that behaviour, but think twice, because the
        configured 'copy' key (which the user normally uses to copy text)
        will only function when the gadget is active (or default) which
        it won't automatically become in read only mode (when clicked).

TextEditor.mcc/MUIA_TextEditor_ColorMap

    NAME
        MUIA_TextEditor_ColorMap -- [IS.], LONG *

    FUNCTION
        This is a map of allocated colors, which corresponds to the pen number
        you set with MUIA_TextEditor_Pen.  By default the map looks like this:

           0 = Normal (user configured text/highlight color)
           1 = Shine
           2 = Halfshine
           3 = Background
           4 = Halfshadow
           5 = Shadow
           6 = Text
           7 = Fill
           8 = Mark
           9 = Screen pen 0
          10 = Screen pen 1
          11 = Screen pen 3
          .. = ...
         255 = Screen pen 246

        If you supply your own colormap, then pen value 0 will still be
        "Normal", i.e. the first entry in your colormap has pen value 1.
        This may seem a bit illogical, suggest an alternative if you want!

        You are allowed to dynamically change the colormap; however, if you
        change an entry which is on-screen, then it won't have any immediate
        effect.  The idea is that you should e.g. supply a colormap with 16
        unused LONGs, allow the user to select a custom color, allocate that
        color and store the screen pen value into the colormap.  Now you can
        use that entry as argument for MUIA_TextEditor_Pen.

        Bear in mind that your application may change screen, so the best
        place to allocate/free colors is in the MUIM_Show and MUIM_Hide
        methods of the editor gadget.  An example of this can be found in
        TextEditor-Demo.c.

        Please keep in mind to convert pens allocated by MUI_ObtainPen() to
        values usable by any kind of graphic functions (i.e. SetAPen()) by
        using the MUIPEN() macro!

    EXAMPLE
        /*  Create a cycle gadget which allows the user
         *  to mark his text with red, green and blue.
         */

           static LONG editor_cmap[3];
           UBYTE *cycle_entries[] =
           {
             "Normal", "Red", "Green", "Blue", NULL
           };

        ...
           cycle = CycleObject,
                       MUIA_Cycle_Entries, cycle_entries,
                       End,
           ...
           editor = TextEditorObject,
                       MUIA_TextEditor_ColorMap, editor_cmap,
                       End,
        ...


        DoMethod(cycle, MUIM_Notify, MUIA_Cycle_Active, MUIV_EveryTime, editor, 3, MUIM_Set, MUIA_TextEditor_Pen, MUIV_TriggerValue);
        DoMethod(editor, MUIM_Notify, MUIA_TextEditor_Pen, MUIV_EveryTime, cycle, 3, MUIM_Set, MUIA_Cycle_Active, MUIV_TriggerValue);

        /* Subclass of TextEditor.mcc */

           switch(msg->MethodID)
           {
              case MUIM_Show:
                 editor_cmap[0] = ObtainBestPenA(cm, 0xffffffff, 0, 0, NULL);
                 editor_cmap[1] = ObtainBestPenA(cm, 0, 0xffffffff, 0, NULL);
                 editor_cmap[2] = ObtainBestPenA(cm, 0, 0, 0xffffffff, NULL);
                 break;

              case MUIM_Hide:
                 ReleasePen(cm, editor_cmap[0]);
                 ReleasePen(cm, editor_cmap[1]);
                 ReleasePen(cm, editor_cmap[2]);
                 break;
           }
           ...


    SEE ALSO
        MUIA_TextEditor_Pen

TextEditor.mcc/MUIA_TextEditor_Columns

    NAME
        MUIA_TextEditor_Columns -- [I..], ULONG

    FUNCTION
        Set the desired width, in characters.

    SEE ALSO
        MUIA_TextEditor_Rows

TextEditor.mcc/MUIA_TextEditor_Contents

    NAME
        MUIA_TextEditor_Contents -- [IS.], APTR

    FUNCTION
        Set the contents of this gadget.  This should normally be a pointer to
        a text buffer, but if you have supplied your own import hook, then you
        can set this to anything you like, e.g. a filehandle. Passing NULL as
        pointer will be treated as an empty text.

    NOTE
        Setting a text content BEFORE the class has executed the MUIM_Setup
        method will use the global default settings! This means that with active
        TAB conversion TAB characters within the text will be converted using the
        default TAB size of 4 spaces, no matter what the user has configured!
        The better solution is to wait until MUIM_Setup has successully returned
        and set the editor's initial content after that to ensure that the user
        gets what he/she is expecting.

    SEE ALSO
        MUIA_TextEditor_ConvertTabs, MUIA_TextEditor_ImportHook
        MUIM_TextEditor_InsertText

TextEditor.mcc/MUIA_TextEditor_ConvertTabs

    NAME
        MUIA_TextEditor_ConvertTabs -- [ISG], BOOL

    FUNCTION
        When TRUE (default) TextEditor will convert tabs (\t) to the number
        of spaces specified by the user configuration setting. If FALSE,
        TextEditor will instead put pure \t characters and just display
        spaces to the user.

    NOTE
        Change of this attribute from TRUE to FALSE will cause update of
        editor gadget (but cursor coordinates will be reset to zeroes).

    SEE ALSO


TextEditor.mcc/MUIA_TextEditor_CursorPosition

    NAME
        MUIA_TextEditor_CursorPosition -- [..G], struct Rectangle *

    FUNCTION
        If you need to open a window or similar, and want it to match the
        position and/or dimensions of the cursor, then you can use this
        tag to obtain the rectangle that the cursor is occupying.

    EXAMPLE
        struct Rectangle *crsr;
        if(GetAttr(MUIA_TextEditor_CursorPosition, obj, &rect))
           printf("Cursor at (%ldx%ld)\n", crsr->MinX, crsr->MinY);

    NOTES
        The values are relative to the top left corner of the window, not the
        gadget.

        You can't take notify on this tag.

    SEE ALSO
        MUIA_TextEditor_CursorX, MUIA_TextEditor_CursorY

TextEditor.mcc/MUIA_TextEditor_CursorX

    NAME
        MUIA_TextEditor_CursorX -- [ISG], ULONG

    FUNCTION
        You can get or set the cursor's X position with this tag.
        The first character on a line has position 0.
        The position is not affected by the gadget's `autowrap' feature.
        If you set a value higher than the length of the current line, then
        it will be automatically truncated.

    SEE ALSO
        MUIA_TextEditor_CursorY

TextEditor.mcc/MUIA_TextEditor_CursorY

    NAME
        MUIA_TextEditor_CursorY -- [ISG], ULONG

    FUNCTION
        You can get or set the cursor's Y position with this tag.
        The first line has position 0.
        The position is not affected by the gadget's `autowrap' feature.
        If you set a value higher than the number of lines, then it will
        be automatically truncated.

    SEE ALSO
        MUIA_TextEditor_CursorX

TextEditor.mcc/MUIA_TextEditor_DoubleClickHook

    NAME
        MUIA_TextEditor_DoubleClickHook -- [IS.], struct Hook *

    FUNCTION
        If you use the gadget in read only mode, you may want a special
        action to take place when the user double clicks certain words.
        For example, an e-mail or news client using this gadget to show
        mails might allow the user to click on an URL to lookup the link.

        The hook will be called with A1 pointing to a ClickMessage, and A0
        will point to the hook itself.  Your hook should return TRUE if it
        wants to stop the editor from blocking.

        From V15.26 on the ClickMessage also contains the qualifiers being
        pressed during the double click. Please note that SHIFT is not possible
        as a custom qualifier, because SHIFT + mouse click is already handled
        internally. However, all other qualifiers are of course possible.

    EXAMPLE
        /* This hook will test if the user double clicked an HTTP address */

        BOOL URLHookCode (register __a1 struct ClickMessage *clickmsg)
        {
           UWORD pos = clickmsg->ClickPosition;

           while(pos && *(clickmsg->LineContents+pos-1) != ' ' && *(clickmsg->LineContents+pos-1) != '<')
           {
              pos--;
           }

           if(strncmp(clickmsg->LineContents+pos, "http:", 5))
           {
              return(FALSE);
           }
           LookupURL(clickmsg->LineContents+pos);
           return(TRUE);
        }

    SEE ALSO
        MUIA_TextEditor_ReadOnly, mui/TextEditor_mcc.h

TextEditor.mcc/MUIA_TextEditor_ExportHook

    NAME
        MUIA_TextEditor_ExportHook -- [IS.], struct Hook *

    SPECIAL INPUTS
        MUIV_TextEditor_ExportHook_Plain (default)
        MUIV_TextEditor_ExportHook_EMail
        MUIV_TextEditor_ExportHook_NoStyle

    FUNCTION
        Depending on the inputs a different exporthook will be fired as soon
        as MUIM_TextEditor_ExportText is used. The default is to export the
        currently showed data as is. That means, that all text, including the
        escape sequences for showing soft styles will be exported.

          MUIV_TextEditor_ExportHook_Plain
            Export all text as displayed, including ESC (\033) sequences

          MUIV_TextEditor_ExportHook_EMail
            Export all text, but convert the soft-style escape sequences into
            the pseudo-standard text sequences like:

              *bold*      : for bold text
              /italic/    : for italic text
              _underline_ : for underlined text
              #colored#   : for colored/highlighted text
              <tsb>       : for a thick separator bar
              <sb>        : for a thin separator bar

          MUIV_TextEditor_ExportHook_NoStyle
            Export all text like the 'Plain' variant, but strip off all style
            relevant ESC (\033) sequences. Also converts the escape sequences
            for the thick and thin separator bar into <tsb> and <sb> like the
            'EMail' hook.

        See MUIA_TextEditor_ImportHook for more information.

    NOTE
        Even if this MUIA value seems to allow that you may specify your own
        private export hook implementation, this is currently NOT supported
        and should be considered highly experimental.

    SEE ALSO
        MUIA_TextEditor_ExportWrap
        MUIM_TextEditor_ExportText
        MUIA_TextEditor_ImportHook

TextEditor.mcc/MUIA_TextEditor_ExportWrap

    NAME
        MUIA_TextEditor_ExportWrap -- [ISG], ULONG

    FUNCTION
        This attribute allows the built-in export hooks to perform hard
        word wrapping while exporting text.

        Zero means no wrap (default value).

    NOTE
        Please note that MUIA_TextEditor_WrapMode doesn't have any effect
        on the way the export function works. That means, setting
        ExportWrap will always end up in hard word wrapping.

    SEE ALSO
        MUIA_TextEditor_ExportHook
        MUIA_TextEditor_WrapBorder
        MUIA_TextEditor_WrapMode

TextEditor.mcc/MUIA_TextEditor_FixedFont

    NAME
        MUIA_TextEditor_FixedFont -- [I.G], BOOL

    FUNCTION
        Set this if you would like the editor to use a fixed width font.

TextEditor.mcc/MUIA_TextEditor_Flow

    NAME
        MUIA_TextEditor_Flow -- [.SG], UWORD

    SPECIAL INPUTS
        MUIV_TextEditor_Flow_Left
        MUIV_TextEditor_Flow_Right
        MUIV_TextEditor_Flow_Center
        MUIV_TextEditor_Flow_Justified (not yet implemented)

    FUNCTION
        Set/get the current paragraph's alignment.

        If an area is marked while you set this attribute, then the new
        alignment will be set for the complete area.

TextEditor.mcc/MUIA_TextEditor_HasChanged

    NAME
        MUIA_TextEditor_HasChanged -- [ISG], BOOL

    FUNCTION
        This tag will show if the contents of the gadget have changed.
        You can take notify on this tag, so that you can connect it with
        a checkmark or text object.

        You should set this tag to FALSE whenever you export the contents
        of the gadget or overwrite them with something new.

        Even if you have set up notification on this tag, you should
        still get() it before you kill the text, because this makes it
        possible to do some advanced testing to see if the text has
        actually been modified, e.g. by checking the undo buffer, comparing
        checksums or checking whether or not the text buffer is empty
        (none of this is currently done, but it may be in the future).

        The tag is currently not affected by:
         MUIA_TextEditor_Contents, MUIM_TextEditor_ClearText
         MUIM_TextEditor_Export, MUIM_TextEditor_Import

        ... but comments are welcome :)

TextEditor.mcc/MUIA_TextEditor_ImportHook

    NAME
        MUIA_TextEditor_ImportHook -- [IS.], struct Hook *

    SPECIAL INPUTS
        MUIV_TextEditor_ImportHook_Plain (default)
        MUIV_TextEditor_ImportHook_EMail
        MUIV_TextEditor_ImportHook_MIME
        MUIV_TextEditor_ImportHook_MIMEQuoted

    FUNCTION
        Since this gadget allows different text styles, you can supply an
        import hook to parse the text correctly.

        The default import hook understands the following escape sequences.
        They may appear at any position within the line:

         <ESC> + u      Set the soft style to underline.
         <ESC> + b      Set the soft style to bold.
         <ESC> + i      Set the soft style to italic.
         <ESC> + n      Set the soft style back to normal.
         <ESC> + h      Highlight the current line.
         <ESC> + p[x]   Change to color x, where x is taken from the colormap.
                        0 means normal.  The color is reset for each new line.

        The following sequences are only valid at the beginning of a line.
        If they are placed elsewhere, the result is undefined (they might
        be ignored or not):

         <ESC> + l      Left justify current and following lines.
         <ESC> + r      Right justify current and following lines.
         <ESC> + c      Center current and following lines.
         <ESC> + [s:x]  Create a separator.  x is a bit combination of flags:
                         Placement (mutually exclusive):
                           1 = Top
                           2 = Middle
                           4 = Bottom
                         Cosmetical:
                           8 = StrikeThru   - Draw separator on top of text.
                          16 = Thick        - Make separator extra thick.


        MUIV_TextEditor_ImportHook_MIME:

        This built-in hook will convert quoted-printables (e.g. "=E5") to
        the ASCII representation, merge lines ending with a "=",  wordwrap
        the text (using the value set with MUIA_TextEditor_ImportWrap),
        highlight all lines that start with ">", make real *bold*, /italic/,
        _underline_ and #colored# text, and replace <sb> or <tsb> with a real
        separator bar.  It will stop parsing upon reaching a NULL byte.

        The color used for #colored# text is colormap entry 6, which defaults
        to MPEN_FILL.  To override it, just supply a colormap with entry 6
        set to whatever color you would like.

        MUIV_TextEditor_ImportHook_MIMEQuoted:

        Like the MIME import hook, but each line gets quoted and highlighted.


        MUIV_TextEditor_ImportHook_EMail:

        Like the MIME import hook, but it doesn't convert quoted printables.

        Note, that the last three hooks also evaluate the escape sequences
        described for the MUIV_TextEditor_ImportHook_Plain type. While it
        never was documented there are some programs insisting on this
        side effect of an old implementation. Hence starting with version
        51.13 this behaviour had to be official supported.


        You can of course create your own import hook - there is an external
        file which describes the procedure.

    NOTE
        Even if this MUIA value seems to allow that you may specify your own
        private import hook implementation, this is currently NOT supported
        and should be considered highly experimental.

    SEE ALSO
        MUIA_TextEditor_ColorMap,
        MUIA_TextEditor_ExportHook
        MUIA_TextEditor_ImportWrap

    EXAMPLE
        /*   Here is how you can `easily' allow the
         *   user to set the pen of #colored# text
         */

           static LONG editor_cmap[1];

        set(editor, MUIA_TextEditor_ColorMap, editor_cmap-6);
                                           /* This saves a little memory :) */


        /* Subclass of TextEditor.mcc */

           switch(msg->MethodID)
           {
              case MUIM_Show:
                 editor_cmap[0] = MUI_ObtainPen(muiRenderInfo(obj), spec, flags);
                 break;

              case MUIM_Hide:
                 MUI_ReleasePen(muiRenderInfo(obj), editor_cmap[0]);
                 break;
           }
           ...

TextEditor.mcc/MUIA_TextEditor_ImportWrap

    NAME
        MUIA_TextEditor_ImportWrap -- [ISG], ULONG

    FUNCTION
        This attribute allows the built-in import hooks to perform automatic
        word wrapping when importing text.

        The built-in hooks accept a value between 4 and 1024.
        Default is 1023.

    NOTE
        Please note that MUIA_TextEditor_WrapMode doesn't have any effect
        on the way the import function works. That means, setting
        ImportWrap will always end up in hard word wrapping.

    SEE ALSO
        MUIA_TextEditor_ImportHook
        MUIA_TextEditor_WrapBorder
        MUIA_TextEditor_WrapMode

TextEditor.mcc/MUIA_TextEditor_InsertMode

    NAME
        MUIA_TextEditor_InsertMode -- [ISG], BOOL

    FUNCTION
        Not yet implemented...

TextEditor.mcc/MUIA_TextEditor_InVirtualGroup

    NAME
        MUIA_TextEditor_InVirtualGroup -- [I..], BOOL

    FUNCTION
        Set this to TRUE when the gadget is inside a virtual group.
        The reason is cosmetical - the pattern will be relative to the
        gadget instead of the window, since the gadget can be "moved" around.

TextEditor.mcc/MUIA_TextEditor_KeyUpFocus

    NAME
        MUIA_TextEditor_KeyUpFocus -- [ISG], Object *

    FUNCTION
        Allows to specify a specific object that will be set as the new
        window's default object in case the user pressed the UP cursor key and
        the texteditor was already at the very first line.

TextEditor.mcc/MUIA_TextEditor_Keywords

    NAME
        MUIA_TextEditor_Keywords -- [IS.], STRPTR *

    FUNCTION
        Allows to specify a comma separated string of keywords to check for
        while the user is typing. If one of these keywords is found the
        attribute MUIA_TextEditor_MatchedKeyword will be triggered with the
        matched keyword as trigger value. The check will happen after typing
        either a space or TAB or RETURN after a word.

    EXAMPLE
        set(editorgad, MUIA_TextEditor_Keywords, "foo,bar,baz");

    SEE ALSO
        MUIA_TextEditor_MatchedKeyword

TextEditor.mcc/TextEditor.mcc/MUIA_TextEditor_MatchedKeyword

    NAME
        MUIA_TextEditor_MatchedKeyword -- [..G], STRPTR

    FUNCTION
        This attribute is used as a notification trigger only. It will be set to
        the keyword which was found in the list of keywords provided by the
        attribute MUIA_TextEditor_Keywords.

    SEE ALSO
        MUIA_TextEditor_Keywords

TextEditor.mcc/MUIA_TextEditor_PasteColors

    NAME
        MUIA_TextEditor_PasteColors -- [ISG], BOOL

    FUNCTION
        Setting this tag to FALSE will ignore any color information upon pasting
        a text clip from the clipboard.

    SEE ALSO
        MUIA_TextEditor_PasteStyles

TextEditor.mcc/MUIA_TextEditor_PasteStyles

    NAME
        MUIA_TextEditor_PasteStyles -- [ISG], BOOL

    FUNCTION
        Setting this tag to FALSE will ignore any style information upon pasting
        a text clip from the clipboard.

    SEE ALSO
        MUIA_TextEditor_PasteColors

TextEditor.mcc/MUIA_TextEditor_Pen

    NAME
        MUIA_TextEditor_Pen -- [.SG], UBYTE (do you need UWORD or ULONG?)

    FUNCTION
        The value of this tag reflects the current render pen.

    SEE ALSO
        MUIA_TextEditor_ColorMap

TextEditor.mcc/MUIA_TextEditor_Prop_DeltaFactor

    NAME
        MUIA_TextEditor_Prop_DeltaFactor -- [..G], ULONG (OBSOLETE)


    FUNCTION
        This tag can tell you how high a line is.  This is useful when you set
        the increment value of a slider, as MUIA_TextEditor_Prop_Entries holds
        the lines in pixels.

        You shouldn't use this.  Instead, use MUIA_TextEditor_Slider.

    EXAMPLE
        DoMethod(editorgad, MUIM_Notify,
                  MUIA_TextEditor_Prop_DeltaFactor, MUIV_EveryTime,
                  slider, 3, MUIM_Set, MUIA_Prop_DeltaFactor, MUIV_TriggerValue);

    SEE ALSO
        MUIA_TextEditor_Prop_Visible, MUIA_TextEditor_Slider
        MUIA_TextEditor_Prop_First, MUIA_TextEditor_Prop_Entries

TextEditor.mcc/MUIA_TextEditor_Prop_Entries

    NAME
        MUIA_TextEditor_Prop_Entries -- [..G], ULONG (OBSOLETE)


    FUNCTION
        This value is the total number of lines in the editor.
        If you want a slider attached to the gadget, you should create
        a notify on this attribute.

        You shouldn't use this. Instead, use MUIA_TextEditor_Slider.

    EXAMPLE
        DoMethod(editorgad, MUIM_Notify,
                  MUIA_TextEditor_Prop_Entries, MUIV_EveryTime,
                  slider, 3, MUIM_Set, MUIA_Prop_Entries, MUIV_TriggerValue);

    SEE ALSO
        MUIA_TextEditor_Prop_Visible, MUIA_TextEditor_Slider
        MUIA_TextEditor_Prop_First, MUIA_TextEditor_Prop_DeltaFactor

TextEditor.mcc/MUIA_TextEditor_Prop_First

    NAME
        MUIA_TextEditor_Prop_First -- [.SG], ULONG (OBSOLETE)

    FUNCTION
        Get or set the first displayed line.  The purpose of this attribute
        is to allow connection between the editor gadget and a scrollbar.

    EXAMPLE

        DoMethod(editor, MUIM_Notify,
                  MUIA_TextEditor_Prop_First, MUIV_EveryTime,
                  slider, 3, MUIM_Set, MUIA_Prop_First, MUIV_TriggerValue);

        DoMethod(slider, MUIM_Notify,
                  MUIA_Prop_First, MUIV_EveryTime,
                  editor, 3, MUIM_Set, MUIA_TextEditor_Prop_First, MUIV_TriggerValue);

    SEE ALSO
        MUIA_TextEditor_Prop_Visible, MUIA_TextEditor_Slider
        MUIA_TextEditor_Prop_Entries, MUIA_TextEditor_Prop_DeltaFactor

TextEditor.mcc/MUIA_TextEditor_Prop_Visible

    NAME
        MUIA_TextEditor_Prop_Visible -- [..G], ULONG (OBSOLETE)

    FUNCTION
        This value is the number of lines that currently fit in the window.
        If you want a slider attached to the gadget, you should create a
        notify on this attribute.

        You shouldn't use this.  Instead, use MUIA_TextEditor_Slider.

    EXAMPLE

        DoMethod(editorgad, MUIM_Notify,
                  MUIA_TextEditor_Prop_Visible, MUIV_EveryTime,
                  slider, 3, MUIM_Set, MUIA_Prop_Visible, MUIV_TriggerValue);

    SEE ALSO
        MUIA_TextEditor_Prop_Entries, MUIA_TextEditor_Slider
        MUIA_TextEditor_Prop_First, MUIA_TextEditor_Prop_DeltaFactor

TextEditor.mcc/MUIA_TextEditor_Quiet

    NAME
        MUIA_TextEditor_Quiet -- [ISG], BOOL

    FUNCTION
        If you need to insert a lot of text "line by line", you should
        set this tag to TRUE before starting, and then back to FALSE when
        you are done adding text.

    SEE ALSO
        MUIM_TextEditor_InsertText

TextEditor.mcc/MUIA_TextEditor_ReadOnly

    NAME
        MUIA_TextEditor_ReadOnly -- [ISG], BOOL

    FUNCTION
        Setting this tag to TRUE will make the text read-only.
        This is very similar to what FloatText.mui provides, except
        that this gadget offers blocking.

        In read-only mode:
          - there will be no cursor (only a normal TAB frame),
          - TAB will activate the next gadget (instead of RCOMMAND+TAB),
          - the frame will be set to a ReadListFrame (may change),
          - there is no ARexx support, except "Copy".

        However, the MUIA_TextEditor_StyleXXX tags are still
        usable. In addition, due to backward compatibility when
        setting the ReadOnly tag to TRUE via OM_SET,
        MUIA_TextEditor_ActiveObjectOnClick will be set to FALSE.
        This will prevent the object from getting the active object
        of the window in case a user presses a mouse button in front
        of a readonly texteditor object.

    SEE ALSO
        MUIA_TextEditor_StyleBold
        MUIA_TextEditor_StyleItalic
        MUIA_TextEditor_StyleUnderline
        MUIA_TextEditor_ActiveObjectOnClick

TextEditor.mcc/MUIA_TextEditor_RedoAvailable

    NAME
        MUIA_TextEditor_RedoAvailable -- [..G], BOOL

    FUNCTION
        This tag is set to TRUE when the user is able to redo his action(s)
        (normally after an undo).  You can create a notify on this tag and
        let your redo button be ghosted when there is nothing to redo.

    SEE ALSO
        MUIA_TextEditor_UndoAvailable

TextEditor.mcc/MUIA_TextEditor_Rows

    NAME
        MUIA_TextEditor_Rows -- [I..], ULONG

    FUNCTION
        Set the desired height, in lines.

    SEE ALSO
        MUIA_TextEditor_Columns

TextEditor.mcc/MUIA_TextEditor_Separator

    NAME
        MUIA_TextEditor_Separator -- [.SG], UWORD *

    FUNCTION
        Each line can act as a separator.

        A separator can be either thick or thin.  It can be rendered over
        the lines contents, or only on both sides of the contents.  The
        placement can be either top, middle or bottom.

        This tag reflects the current line.  See mui/TextEditor_mcc.h for
        definitions.

    EXAMPLE
        /* A simple way to let the user insert a separator is to create a
           button or menu item with the following notify.

                  Note: The import hook should be set to
                        MUIV_TextEditor_ImportHook_Plain
                        when the notify is executed.
        */

           DoMethod(button, MUIM_Notify,
                      MUIA_Pressed, FALSE,
                      editor, 2, MUIM_TextEditor_InsertText, "\n\33c\33[s:2]\n");

TextEditor.mcc/MUIA_TextEditor_Slider

    NAME
        MUIA_TextEditor_Slider -- [IS.], Object *

    FUNCTION
        You should give a pointer to a prop object to allow connection
        between the editor gadget and the prop object.

        The reason why you shouldn't set up notification yourself is that
        the gadget needs to set two undocumented tags for the prop object.

    SEE ALSO
        MUIA_TextEditor_Prop_DeltaFactor, MUIA_TextEditor_Prop_Entries
        MUIA_TextEditor_Prop_First, MUIA_TextEditor_Prop_Visible

TextEditor.mcc/MUIA_TextEditor_StyleBold

    NAME
        MUIA_TextEditor_StyleBold -- [.SG], BOOL

    FUNCTION
        This tag shows whether the cursor or block is over bolded text or not.
        You can set this tag to TRUE or FALSE if you want the style changed.

    EXAMPLE

        DoMethod(boldgad, MUIM_Notify,
                  MUIA_Selected, MUIV_EveryTime,
                  editor, 3, MUIM_NoNotifySet, MUIA_TextEditor_StyleBold, MUIV_TriggerValue);

        DoMethod(editor, MUIM_Notify,
                  MUIA_TextEditor_StyleBold, MUIV_EveryTime,
                  boldgad, 3, MUIM_NoNotifySet, MUIA_Selected, MUIV_TriggerValue);

    SEE ALSO
        MUIA_TextEditor_StyleItalic, MUIA_TextEditor_StyleUnderline

TextEditor.mcc/MUIA_TextEditor_StyleItalic

    NAME
        MUIA_TextEditor_StyleItalic -- [.SG], BOOL

    FUNCTION
        This tag shows whether the cursor or block is over text in italics
        or not.  You can set this tag to TRUE or FALSE if you want the
        style changed.

    EXAMPLE
        See MUIA_TextEditor_StyleBold

    SEE ALSO
        MUIA_TextEditor_StyleBold, MUIA_TextEditor_StyleUnderline

TextEditor.mcc/MUIA_TextEditor_StyleUnderline

    NAME
        MUIA_TextEditor_StyleUnderline -- [.SG], BOOL

    FUNCTION
        This tag shows whether the cursor or block is over underlined text
        or not.  You can set this tag to TRUE or FALSE if you want the
        style changed.

    EXAMPLE
        See MUIA_TextEditor_StyleBold

    SEE ALSO
        MUIA_TextEditor_StyleBold, MUIA_TextEditor_StyleItalic

TextEditor.mcc/MUIA_TextEditor_TabSize

    NAME
        MUIA_TextEditor_TabSize -- [ISG], ULONG

    SPECIAL INPUTS
        MUIV_TextEditor_TabSize_Default

    FUNCTION
        This tag overrides the global TAB size as configured by MUI prefs if
        a specific number of spaces per TAB needs to be enforced.
        Use MUIV_TextEditor_TabSize_Default to reset the value to the user
        configured value. Valid values range from 2 to 12 spaces per TAB
        character.
        Use this attribute with care as it contradicts the MUI philosophy to
        let the user choose the settings.

    SEE ALSO
        MUIA_TextEditor_ConvertTabs

TextEditor.mcc/MUIA_TextEditor_TypeAndSpell

    NAME
        MUIA_TextEditor_TypeAndSpell -- [.SG], BOOL

    FUNCTION
        This is a shortcut to the Type'n'spell switch that the user can
        set in the .mcp module.  NEVER integrate this into the settings
        of your preferences.

    EXAMPLE

        DoMethod(editor, MUIM_Notify,
                  MUIA_TextEditor_TypeAndSpell, MUIV_EveryTime,
                  toggle, 3, MUIM_Set, MUIA_Selected, MUIV_TriggerValue);
        DoMethod(toggle, MUIM_Notify,
                  MUIA_Selected, MUIV_EveryTime,
                  editor, 3, MUIM_Set, MUIA_TextEditor_TypeAndSpell, MUIV_TriggerValue);

TextEditor.mcc/MUIA_TextEditor_UndoAvailable

    NAME
        MUIA_TextEditor_UndoAvailable -- [..G], BOOL

    FUNCTION
        This tag is set to TRUE when the user is able to undo his action(s).
        You can create a notify on this tag and let your undo button be
        ghosted when there is nothing to undo.

    SEE ALSO
        MUIA_TextEditor_RedoAvailable

TextEditor.mcc/MUIA_TextEditor_UndoLevels

    NAME
        MUIA_TextEditor_UndoLevels -- [ISG], ULONG

    FUNCTION
        Using this tag an application is able to override the global undo level
        setting. A value of zero will disable undo/redo completely. Upon OM_GET
        the current number of undo levels will be returned.

    SEE ALSO
        MUIA_TextEditor_UndoAvailable
        MUIA_TextEditor_RedoAvailable

TextEditor.mcc/MUIA_TextEditor_WrapBorder

    NAME
        MUIA_TextEditor_WrapBorder -- [ISG], ULONG

    FUNCTION
        This attribute allows to define the number of characters in texteditor
        at which text should be wrapped to the next line (i.e. 'autowrap').

        However, the way wrapping is done depends on the actual 'WrapMode'
        that was specified by MUIA_TextEditor_WrapMode. In addition,
        MUIA_TextEditor_WrapWords will allow to set if TextEditor will wrap
        at word boundaries or not.

        Per default the WrapBorder is set to 0 which in fact disables the
        wrapping and depending on the set WrapMode, wrapping will either be
        completly ignored or wrapping will be done at the window limits,
        which is the default.

    SEE ALSO
        MUIA_TextEditor_WrapMode
        MUIA_TextEditor_WrapWords
        MUIA_TextEditor_ExportWrap
        MUIA_TextEditor_ImportWrap

TextEditor.mcc/MUIA_TextEditor_WrapMode

    NAME
        MUIA_TextEditor_WrapMode -- [ISG], ULONG

    FUNCTION
        With this attribute, the way text wrapping is performed can be directly
        controlled if MUIA_TextEditor_WrapBorder was set > 0. There are two
        major ways of how wrapping can be performed. 'soft wrapping' and
        'hard wrapping'. Whereas soft wrapping refers to the process where lines
        will just be graphically wrapped to the next line, but are still be
        considered a single line. Hard wrapping in turn immediately inserts a
        newline character as soon as the cursor passed the specified amount of
        characters in one line and therefore seperate them in a 'hard' direct
        way.

    INPUTS
        One of the following values:

          MUIV_TextEditor_WrapMode_NoWrap
            Wrapping is completly disabled, setting WrapBorder > 0 will
            have no effect. That means, the window will have to be resizes
            by the user to e.g. see or edit all text.

          MUIV_TextEditor_WrapMode_SoftWrap
            Enables soft wrapping of lines if WrapBorder > 0. That means,
            lines are being wrapped at the specified border in a way that
            they are still logically one line. This allows to e.g. dynamically
            reconcatenate lines. This should be considered the new preferred
            setting for new/revised applications. If WrapBorder == 0, soft
            wrapping will be performed at the current window limits.

          MUIV_TextEditor_WrapMode_HardWrap (default)
            Enables hard wrapping of lines if WrapBorder > 0. That means,
            lines are being wrapped at the specified border by directly
            inserting newline characters as soon as the cursor passes the
            specified border. While this mode is the default, due to
            historical reasons, it doesn't allow to directly reconcatenate
            lines if the user e.g. removes characters. If WrapBorder == 0,
            soft wrapping will be performed at the current window limits.

    NOTE
        Due to historical reasons the default is to hard wrap a line if the
        WrapBorder attribute is set > 0 and WrapMode is kept untouched.
        However, for new applications, soft wrapping should be considered the
        preferred setting as this mode is more intuitive and allows users of
        texteditor to directly concatenate lines if they e.g. remove
        characters while they are writing.

    SEE ALSO
        MUIA_TextEditro_WrapBorder
        MUIA_TextEditor_ExportWrap
        MUIA_TextEditor_ImportWrap


TextEditor.mcc/MUIA_TextEditor_WrapWords

    NAME
        MUIA_TextEditor_WrapWords -- [ISG], BOOL

    FUNCTION
        When set to TRUE (default), wrapping will occur at word boundaries
        (e.g. space or tab). If FALSE TextEditor.mcc will wrap at any
        character.

    NOTE
        Change of this attribute will cause update of
        editor gadget (but cursor coordinates will be reset to zeroes).

    SEE ALSO
        MUIA_TextEditor_WrapMode


TextEditor.mcc/MUIM_TextEditor_ARexxCmd

    NAME
        MUIM_TextEditor_ARexxCmd

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_ARexxCmd, STRPTR command);

    FUNCTION
        If the user spends much of his time in the TextEditor gadget, he
        may want to have the gadget's functions integrated in the ARexx
        command set supplied by the program.  This can easily be done with
        this method - simply call it with the command that the user has
        executed.  If the method returns something else than FALSE, then
        the command has been used by the gadget; if it does return FALSE,
        then you should parse the command yourself.

        This method can also be used by you, to communicate with the gadget.

        The following commands are currently supported:

           CLEAR
           CUT
           COPY
           PASTE
           ERASE
           GOTOLINE       Template: /N/A
           GOTOCOLUMN     Template: /N/A
           CURSOR         Template: Up/S,Down/S,Left/S,Right/S
           LINE           Template: /N/A
           COLUMN         Template: /N/A
           NEXT           Template: Word/S,Sentence/S,Paragraph/S,Page/S
           PREVIOUS       Template: Word/S,Sentence/S,Paragraph/S,Page/S
           POSITION       Template: SOF/S,EOF/S,SOL/S,EOL/S,SOW/S,EOW/S,SOV/S,EOV/S
           SETBOOKMARK    Template: /N/A
           GOTOBOOKMARK   Template: /N/A
           TEXT           Template: /F
           TOLOWER
           TOUPPER
           KILLLINE
           UNDO
           REDO
           GETLINE
           GETCURSOR      Template: Line/S,Column/S
           MARK           Template: On/S,Off/S
           DELETE
           BACKSPACE
           KILLLINE
           TOUPPER
           TOLOWER
           SELECTALL
           SELECTNONE

    RESULT
        The method will return FALSE if it couldn't use the command.
        It will return TRUE if it did use the command, but the command
        didn't give a result back.  It will return a pointer (STRPTR)
        when the command gives a result - you should return this pointer
        to the user (CreateArgString() it, and set it as the result, in
        the Rexx message).  You must free the result yourself with FreeVec().

TextEditor.mcc/MUIM_TextEditor_BlockInfo

    NAME
        MUIM_TextEditor_BlockInfo

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_BlockInfo, ULONG *startx, ULONG *starty,
                      ULONG *stopx, ULONG *stopy);

    FUNCTION
        This method fills out the ULONG pointers with the start and stop
        position of the currently marked block.

    RESULT
        The method will return FALSE if no text has been marked.

    EXAMPLE
        ULONG x1, y1, x2, y2;
        if(DoMethod(obj, MUIM_TextEditor_BlockInfo, &x1, &y1, &x2, &y2))
        {
           ...
        }

TextEditor.mcc/MUIM_TextEditor_ClearText

    NAME
        MUIM_TextEditor_ClearText

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_ClearText);

    FUNCTION
        This will clear all the text in the gadget.

TextEditor.mcc/MUIM_TextEditor_ExportBlock

    NAME
        MUIM_TextEditor_ExportBlock

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_ExportBlock, ULONG flags);

        DoMethod(obj, MUIM_TextEditor_ExportBlock,
                    MUIF_TextEditor_ExportBlock_TakeBlock,
                    ULONG startx, ULONG starty,
                    ULONG stopx, ULONG stopy);

    FUNCTION
        This method exports portions of the current text via the active
        export hook and returns it in an AllocVec() allocated string.
        Depending on the supplied flags the method acts a bit different
        in what text it should export and which it should skip:

          Default (no flags):
            Exports the currently marked text. If no text is marked, it
            will return an empty, but allocated string.
            (see MUIM_TextEditor_BlockInfo)

          MUIF_TextEditor_ExportBlock_FullLines:
            All complete lines with marked text will be exported, including
            non-marked characters as well. If no text is marked, then the
            line where the current cursor is on will be exported.

          MUIF_TextEditor_ExportBlock_TakeBlock:
            Passing this flag the method will accept 4 ULONG coordinates,
            startx, starty, stopx, stopy. Passing after this flag these
            coordinates permitts to retrieve a block of text without it is
            currently marked. useful to analize a block without user sees a
            similar behaviour marking a block.

    RESULT
        Depends on the export hook.  The built-in hooks will return
        a pointer to a NUL-terminated buffer containing all the text.
        You must free this buffer with FreeVec() when you are done using it.
        Returns a NULL pointer if something went wrong.

    SEE ALSO
        MUIA_TextEditor_ExportHook
        MUIM_TextEditor_InsertText
        MUIM_TextEditor_ExportText

 TextEditor.mcc/MUIM_TextEditor_SetBlock

    NAME
        MUIM_TextEditor_SetBlock (v15.29)

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_SetBlock,
                      ULONG startx, ULONG starty,
                      ULONG stopx, ULONG stopy,
                      ULONG operation, ULONG value);

    FUNCTION
        This method performs a specific operation on a text block that
        is defined by four coordinates (startx,starty,stopx,stopy)
        (see MUIM_TextEditor_BlockInfo). The types of operations that
        can be performed are supplied via a flag variable 'operation'
        and an optional value for all operations can be supplied via
        'value'.

        For the start/stop values these special values can be used
        together with normal integer values:

          MUIV_TextEditor_SetBlock_Min:
            The value of the start/stop parameter where this special
            value is used will be set to the minimum available (e.g.
            start of line for startx).

          MUIV_TextEditor_SetBlock_Max:
            The value of the start/stop parameter where this special
            value is used will be set to the maximum available (e.g.
            end of line for stopx).

        Possible flags for the 'operation' variable are:

          MUIF_TextEditor_SetBlock_Color:
            The text block will be assigned a text color in accordance
            to the supplied color number in parameter 'value'.
            (see MUIA_TextEditor_ColorMap and MUIA_TextEditor_Pen).

          MUIF_TextEditor_SetBlock_StyleBold:
            Depending on the content of the 'value' (TRUE/FALSE) the
            selected text block will get the bold style added or
            removed.

          MUIF_TextEditor_SetBlock_StyleItalic:
            Depending on the content of 'value' (TRUE/FALSE) the
            selected text block will get the italic style added or
            removed.

          MUIF_TextEditor_SetBlock_StyleUnderline:
            Depending on the content of 'value' (TRUE/FALSE) the
            selected text block will get the underline style added or
            removed.

          MUIF_TextEditor_SetBlock_Flow:
            Depending on the content of 'value' the selected text block
            will change it's alignment.
            (see MUIA_TextEditor_Flow for possible values)

    RESULT
        TRUE if operation succeeded, FALSE if it failed (e.g. invalid
        start or stop values have been specified)

    NOTE
        When combining multiple operations via flags, care have to be
        taken for the content of 'value'. E.g. it is not possible to
        have bold style added and italic style removed because of the
        global usage of the 'value' parameter. So for mutual exclusive
        operations you will have to call this method multiple times.

    SEE ALSO
        MUIA_TextEditor_ExportBlock
        MUIM_TextEditor_BlockInfo
        MUIA_TextEditor_ColorMap
        MUIA_TextEditor_Pen
        MUIA_TextEditor_Flow

TextEditor.mcc/MUIM_TextEditor_ExportText

    NAME
        MUIM_TextEditor_ExportText

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_ExportText);

    FUNCTION
        This will export the text using the current export hook.

    RESULT
        Depends on the export hook.  The built-in hooks will return
        a pointer to a NUL-terminated buffer containing all the text.
        You must free this buffer with FreeVec() when you are done using it.
        Returns a NULL pointer if something went wrong.

    SEE ALSO
        MUIA_TextEditor_ExportHook
        MUIM_TextEditor_InsertText
        MUIM_TextEditor_ExportBlock

TextEditor.mcc/MUIM_TextEditor_HandleError

    NAME
        MUIM_TextEditor_HandleError

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_HandleError, ULONG errorcode);

    FUNCTION
        This method is not supported by the editor gadget itself.  The idea
        is that you should subclass the gadget and implement your own error
        handler.  The handler should just bring up a requester or write the
        error in a status line.

        The different errors are:

        Error_ClipboardIsEmpty:        The clipboard doesn't hold any data.
        Error_ClipboardIsNotFTXT:      The clipboard doesn't hold any text.
        Error_MacroBufferIsFull:       Not yet used.
        Error_MemoryAllocationFailed:  Not yet used.
        Error_NoAreaMarked:            The user has tried to copy or cut, but
                                       hasn't marked anything.
        Error_NoMacroDefined:          Not yet used.
        Error_NothingToRedo:           There is nothing more to redo.
        Error_NothingToUndo:           There is nothing more to undo.
        Error_NotEnoughUndoMem:        The user has erased a block that is too
                                       big to be saved. This results in a lost
                                       undo buffer.
        Error_StringNotFound:          Not yet used.

    RESULT
        NONE

TextEditor.mcc/MUIM_TextEditor_InsertText

    NAME
        MUIM_TextEditor_InsertText

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_InsertText, STRPTR text, LONG pos);

    FUNCTION
        This will insert the given text using the current import hook.
        The position of the inserted text can be:

          MUIV_TextEditor_InsertText_Cursor
          MUIV_TextEditor_InsertText_Top
          MUIV_TextEditor_InsertText_Bottom

    RESULT
        NONE

    SEE ALSO
        MUIM_TextEditor_ExportText

TextEditor.mcc/MUIM_TextEditor_MacroBegin

    NAME
        MUIM_TextEditor_MacroBegin

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_MacroBegin);

    FUNCTION
        Not yet implemented...

    RESULT


    SEE ALSO
        MUIM_TextEditor_MacroEnd, MUIM_TextEditor_MacroExecute

TextEditor.mcc/MUIM_TextEditor_MacroEnd

    NAME
        MUIM_TextEditor_MacroEnd

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_MacroEnd);

    FUNCTION
        Not yet implemented...

    RESULT


    SEE ALSO
        MUIM_TextEditor_MacroBegin, MUIM_TextEditor_MacroExecute

TextEditor.mcc/MUIM_TextEditor_MacroExecute

    NAME
        MUIM_TextEditor_MacroExecute

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_MacroExecute);

    FUNCTION
        Not yet implemented...

    RESULT


    SEE ALSO
        MUIM_TextEditor_MacroBegin, MUIM_TextEditor_MacroEnd

TextEditor.mcc/MUIM_TextEditor_MarkText

    NAME
        MUIM_TextEditor_MarkText

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_MarkText, ULONG start_x,
                                                ULONG start_y,
                                                ULONG stop_x,
                                                ULONG stop_y);

    FUNCTION
        This method will mark (select) the given area specified by the
        start_x/stop_x,start_y/stop_y rectangular.

    NOTE
        - If start_y is set to MUIV_TextEditor_MarkText_None,
          then all previously marked text will be unmarked (Select None)

        - If stop_y is set to MUIV_TextEditor_MarkText_All,
          then all available text will be marked. (Select All)

    RESULT
        Not defined.

TextEditor.mcc/MUIM_TextEditor_QueryKeyAction

    NAME
        MUIM_TextEditor_QueryKeyAction

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_QueryKeyAction, ULONG keyAction);

    FUNCTION
        Searches through the internal key binding list of the texteditor
        object and returns the first found keybinding that satisfies the
        specified keyAction code.

    INPUT
        ULONG keyAction
          The action code (one of MUIV_TextEditor_KeyAction_#?) for which
          we search in the internal key bindings list.

    RESULT
        A pointer to a struct MUIP_TextEditor_KeyBinding which should NOT
        be modified and is for read-only purposes only.

    NOTE
        The 'code' member of the MUIP_TextEditor_KeyBinding structure
        is normally a direct RAWKEY value. However, to identify vanilla
        keys, an offset is added. This means that if the returned code
        value > 500, then the specified code is actually a vanilla key
        code and you have to substract 500 from the actual value to get
        the ASCII code of the character.

TextEditor.mcc/MUIM_TextEditor_Replace

    NAME
        MUIM_TextEditor_Replace

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_Replace, STRPTR newstring, ULONG flags);

    FUNCTION
        This method replacea the marked area with the given string.
        Currently no flags are defined, so pass 0L for now.

    RESULT
        TRUE if the string was replaced.  A failure is likely to be because
        nothing was marked when this method was invoked.

TextEditor.mcc/MUIM_TextEditor_Search

    NAME
        MUIM_TextEditor_Search

    SYNOPSIS
        DoMethod(obj, MUIM_TextEditor_Search, STRPTR string, ULONG flags);

    FUNCTION
        Search the text for the given string.  The string must not exceed 120
        characters.

        Flags can be:

         MUIF_TextEditor_Search_FromTop
          Normally the search starts at the cursor position - this flag will
          make it start at the beginning of the text.

         MUIF_TextEditor_Search_CaseSensitive
          If you want the search to be case sensitive, then set this flag.

         MUIF_TextEditor_Search_Backwards
          With this flag TextEditor will perform a backward search from
          cursor position.

    RESULT
        TRUE if the string was found, otherwise FALSE.

    NOTE
        If the string is found, it will be automatically marked.  Thus,
        in case you want to replace it, simply clear the marked string and
        insert the new one.


