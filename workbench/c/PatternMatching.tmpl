/*
    Copyright (C) 1995-2000 AROS - The Amiga Research OS
    $Id$

    Desc:
    Lang: english
*/

/*****************************************************************************

    NAME

    SYNOPSIS

    LOCATION

    FUNCTION

    INPUTS

    RESULT

    NOTES

    EXAMPLE

    BUGS

    SEE ALSO

    INTERNALS

    HISTORY

******************************************************************************/

#include <proto/dos.h>
#include <proto/exec.h>

#include <dos/dos.h>
#include <dos/dosasl.h>
#include <exec/memory.h>

#define ARG_TEMPLATE    ""
#define ARG_
#define TOTAL_ARGS      0

/* To define whether a command line switch was set or not.
 */
#define NOT_SET         0

/* Maximum file path length.
 */
#define MAX_PATH_LEN    512

static const char version[] = "$VER: <name> <version>.<revision> (<dd>.<mm>.<yyyy>)\n";

int Do_...(struct AnchorPath *, ...);

int main(int argc, char *argv[])
{
    struct RDArgs       * rda;
    struct AnchorPath   * apath;
    IPTR                * args[TOTAL_ARGS] = {};
    int                   Return_Value;

    Return_Value = RETURN_OK;

    apath = AllocVec(sizeof(struct AnchorPath) + MAX_PATH_LEN, MEMF_ANY | MEMF_CLEAR);
    if (apath) {
        /* This is ap_Strlen under AmigaOS.
         */
        apath->ap_Strlen = MAX_PATH_LEN;

        rda = ReadArgs(ARG_TEMPLATE, (IPTR *)args, NULL);
        if (rda) {
            /* If you pass an array of strings (i.e. FILE/M) then pass it as:
             * (STRPTR *)args[ARG_FILE].
             * If you pass a string pass like this:
             * (STRPTR *)&args[ARG_TO].
             */

            Return_Value = Do_...(apath, ...);
        } else {
            PrintFault(IoErr(), "...");
            Return_Value = RETURN_FAIL;
        }

        FreeArgs(rda);
    } else {
        Return_Value = RETURN_FAIL;
    }

    FreeVec(apath);

    return (Return_Value);

} /* main */

/* Defines whether MathFirst(), etc has matched a file.
 */
#define MATCHED_FILE    0

int Do_...(struct AnchorPath *a, ...)
{
    LONG Result;
    int  Return_Value;

    Return_Value = RETURN_OK;

    while (*<array of files> != NULL) {
        Result = MatchFirst((STRPTR)*<array of files to match>, a);

        do {
            if (Result == MATCHED_FILE) {
                <Put the action code here>
            } else {
                PrintFault(IoErr(), "...");
                Return_Value = RETURN_FAIL;
            }
        } while (((Result = MatchNext(a)) == MATCHED_FILE) && Return_Value == RETURN_OK);

        MatchEnd(a);

        <increment the pointer that points to the array of files>++;
    }    

    return (Return_Value);

} /* Do_... */
