####################################################################
####################################################################
############# THIS IS A GENERATED FILE ! DO NOT EDIT ###############
####################################################################
####################################################################
# $Id$
include $(TOP)/config/make.cfg

MODNAME := nil
MODTYPE := handler

INIT_FILE := nil_handler
FILES :=
FUNCS :=

USE_ROMLIB := yes
USE_AMIGALIB := yes
USE_LIBDEFS := no
USER_CFLAGS := -DDEBUG=0

#MM- workbench-fs-complete : workbench-fs-nil
#MM- workbench-fs-nil : setup includes linklibs workbench-fs-nil-module
.PHONY : workbench-fs-nil workbench-fs-nil-clean workbench-fs-nil-object-quick workbench-fs-nil-linklib-quick
#MM
workbench-fs-nil-clean : clean

ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif

ifndef CFLAGS
CFLAGS := $(USER_CFLAGS) $(TARGET_CFLAGS) $(INCLUDES) -I$(AROS_INCLUDES) -D__AROS__ -D__AROS
endif

ifndef AFLAGS
AFLAGS := $(USER_AFLAGS) $(TARGET_AFLAGS) $(INCLUDES) -I$(AROS_INCLUDES) -D__AROS__ -D__AROS
endif

ifndef LDFLAGS
LDFLAGS := $(USER_LDFLAGS) $(TARGET_LDFLAGS)
endif



ifndef MODULE
MODULE := $(MODNAME).$(MODTYPE)
endif

ifndef USE_FUNCTABLE
USE_FUNCTABLE := yes
endif

ifndef USE_CPAK
USE_CPAK := $(USE_CPAK_DEFAULT)
endif


# Depending upon the value of MODTYPE, much changes...
MOD_DIR := bollocks
ifeq ($(MODTYPE),library)
MOD_DIR := $(AROS_LIBS)
endif
ifeq ($(MODTYPE),device)
MOD_DIR := $(AROS_DEVS)
endif
ifeq ($(MODTYPE),resource)
MOD_DIR := $(AROS_MODULES)
endif
ifeq ($(MODTYPE),gadget)
MOD_DIR := $(AROS_GADGETS)
endif
ifeq ($(MODTYPE),class)
MOD_DIR := $(AROS_CLASSES)
endif
ifeq ($(MODTYPE),datatype)
MOD_DIR := $(AROS_DATATYPES)
endif
ifeq ($(MODTYPE),handler)
MOD_DIR := $(AROS_FS)
endif
ifeq ($(MODTYPE),language)
MOD_DIR := $(AROS_LOCALE)/Languages
endif
ifeq ($(MODTYPE),module)
MOD_DIR := $(AROS_MODULES)
endif
ifeq ($(MOD_DIR),bollocks)
$(error You have to set MODTYPE to something other than $(MODTYPE))
endif

# Save these because they may be changed later.
FILES_ALL := $(foreach f,$(FILES),$(f).c)
FUNCS_ALL := $(foreach f,$(FUNCS),$(f).c)

ifndef INIT_FILE
INIT_FILE := $(MODNAME)_init
endif

ifndef END_FILE
END_FILE := endtag
endif

ifndef USE_ENDTAG
USE_ENDTAG := yes
endif

ifndef USE_LIBDEFS
USE_LIBDEFS := yes
endif


#MM
workbench-fs-nil-module-quick : workbench-fs-nil-module
#MM
workbench-fs-nil-linklib-quick : workbench-fs-nil-linklib

#MM workbench-fs-nil-module : workbench-fs-nil
workbench-fs-nil-module : $(MOD_DIR)/$(MODULE)

#MM workbench-fs-nil-linklib : workbench-fs-nil
ifeq ($(MAKE_SHLIB),yes)
workbench-fs-nil-linklib : $(AROSDIR)/lib/lib$(MODNAME).so
else
workbench-fs-nil-linklib : $(AROSDIR)/lib/lib$(MODNAME).a
endif

# Munge the linklibs into something that is useful for linking. Don't put
# this before the inclusion of the config/ stuff. This is so that they
# can change the linklibs if necessary.
LIBS := -L$(LIBDIR) 
DEPLIBS :=
STARTUP := $(LIBDIR)/startup.o
ifdef USE_DETACH
STARTUP := $(LIBDIR)/detach.o $(STARTUP)
endif
DEPLIBS := $(STARTUP)
ifdef USE_AROSLIB
LIBS := $(LIBS) -larossupport
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarossupport.a
endif
ifdef USE_AMIGALIB
LIBS := $(LIBS) -lamiga
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libamiga.a
endif
ifdef USE_ZLIB
LIBS := $(LIBS) -larosz
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosz.a
endif
ifdef USE_COOLIMAGESLIB
LIBS := $(LIBS) -lcoolimages
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libcoolimages.a
endif
ifdef USE_BGUILIB
LIBS := $(LIBS) -lbgui
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libbgui.a
endif
ifdef USE_REQTOOLSLIB
LIBS := $(LIBS) -lreqtoolsstubs
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libreqtoolsstubs.a
endif
ifdef USE_HIDDSTUBS
LIBS := $(LIBS) -lhiddstubs
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libhiddstubs.a
endif

ifdef USE_CLIB
# uncomment this if you want to compile by default
# against the shared version of the clib
LIBS := $(LIBS) -larosc_shared
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosc_shared.a

# uncomment this if you want to compile by default
# against the static version of the clib
#LIBS := $(LIBS) -larosc
#DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosc.a
else
    ifdef USE_CLIB_SHARED
	LIBS := $(LIBS) -larosc_shared
	DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosc_shared.a
    else
	ifdef USE_CLIB_STATIC
	    LIBS := $(LIBS) -larosc
	    DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosc.a
	endif
    endif
endif

# USE_ROMLIB is a special one to say that this is a shared module, and it
# should use the restricted c.lib, this currently the same as the normal
# static c.lib - it may in the future have different functions from
# amiga.lib, c.lib, m.lib and arossuport.lib
ifdef USE_ROMLIB
LIBS := $(LIBS) -larosc
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosc.a
endif

# m.lib MUST come after c.lib in it's various incarnations.
ifdef USE_MLIB
LIBS := $(LIBS) -larosm
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libarosm.a
endif

# These must always be linked if we are NOT building a module,
# otherwise strange things might happen.
ifndef MODULE
LIBS := $(LIBS) -lautoinit
DEPLIBS := $(DEPLIBS) $(LIBDIR)/libautoinit.a
endif

LIBS := $(LIBS) 

ifeq ($(TARGET_ARCH),morphos)
LIBS := $(FORCE_LIBS)
DEPLIBS := $(FORCE_DEPLIBS)
endif


ifeq ($(USE_LIBDEFS),no)
USE_FUNCTABLE := no
USE_ENDTAG := no
endif

# Don't generate a functable if there is nothing there to do.
ifeq ($(FUNCS),)
   USE_FUNCTABLE := no
endif

# F_NAME might be set by make_module_cpak/make_module_archtool
# It should be set to $(FUNCS) otherwise
ifndef F_NAME
  F_NAME := $(FUNCS)
endif

DEPS := $(foreach f,$(INIT_FILE) $(FILES) $(F_NAME), $(OBJDIR)/$(f).d)
OBJS := $(foreach f,$(FILES) $(F_NAME), $(OBJDIR)/$(f).o)
SOBJS := $(foreach f,$(FILES) $(F_NAME), $(OBJDIR)/$(f).so)

INIT_OBJ := $(OBJDIR)/$(INIT_FILE).o
INIT_SOBJ := $(OBJDIR)/$(INIT_FILE).so

ifeq ($(USE_FUNCTABLE),yes)
FUNC_OBJ := $(OBJDIR)/functable.o
FUNC_SOBJ := $(OBJDIR)/functable.so
endif
ifeq ($(USE_ENDTAG),yes)
END_OBJ := $(OBJDIR)/endtag.o
END_SOBJ := $(OBJDIR)/endtag.so
endif

# Generate the module from the object files.
ifeq ($(NO_MODULE),yes)
$(MOD_DIR)/$(MODULE) :
	$(error You cannot make $(MODULE) into a module)
else
$(MOD_DIR)/$(MODULE) : $(INIT_OBJ) $(FUNC_OBJ) $(OBJS) $(END_OBJ) $(DEPLIBS)
		@$(ECHO) "Building $(notdir $@) ..."
	@$(STATIC_LD) $(STATIC_LDFLAGS) $(LDFLAGS) \
	    $(GENMAP) $(OBJDIR)/$(MODULE).map \
	    $(INIT_OBJ) $(FUNC_OBJ) $(OBJS) $(LIBS) $(END_OBJ) \
	    -o $@ 2>&1 | tee $(OBJDIR)/$(notdir $@).err
	@if $(TEST) ! -s $(OBJDIR)/$(notdir $@).err ; then $(RM) $(OBJDIR)/$(notdir $@).err ; fi
	@$(STRIP) $@

endif

# Make a library. Not sure about the RHS yet.
$(AROSDIR)/lib/lib$(MODNAME).a : $(INIT_OBJ) $(FUNC_OBJ) $(OBJS) $(END_OBJ)
		@$(ECHO) "Creating library $@..."
	@$(AR) $@ $^
	@$(RANLIB) $@


$(AROSDIR)/lib/lib$(MODNAME).so : $(INIT_SOBJ) $(FUNC_SOBJ) $(SOBJS) $(END_SOBJ)
	@$(ECHO) "Linking $(notdir $@)..."
	@$(SHARED_LD) $(SHARED_LDFLAGS) -o $@ $^

# Make a function table
ifeq ($(USE_FUNCTABLE),yes)
$(OBJDIR)/functable.c : $(FUNCS_ALL) $(BINDIR)/scripts/genfunctable.awk libdefs.h
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCS_ALL) > $@
endif

# Make the end tag if it is needed.
$(OBJDIR)/endtag.c : libdefs.h
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

.PHONY : asm
asm : $(foreach f,$(INIT_FILE) $(FILES) $(FUNCS),$(f).s) all

%.s : %.c
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(TARGET_CC) -S $(CFLAGS) $< -c -o $@


clean ::
	-@$(RM) $(AROS_MODULES)/$(MODULE) \
	    $(AROSDIR)/lib/lib$(MODNAME).a $(AROSDIR)/lib/lib$(MODNAME).so

# You need to put the $(OBJDIR) rules first, because they are more specific.
# and that affects the way that GNU Make binds its dependencies.
#
# Note that if you wish to use a $(OBJDIR)/%.c rather than $(ARCH)/blah/%.c
# or $(CPU)/blah/%.c then you will have to specify that manually. Shouldn't
# happen though.
$(OBJDIR)/%.o : $(OBJDIR)/%.c
		@$(ECHO) "Compiling $(CURDIR)/$(notdir $<)..."
	@$(IF) $(TARGET_CC) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(CURDIR)/$<: $(TARGET_CC) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TARGET_CC) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


$(OBJDIR)/%.so : $(OBJDIR)/%.c
		@$(ECHO) "Compiling $(CURDIR)/$(notdir $<)..."
	@$(IF) $(TARGET_CC) $(SHARED_CFLAGS) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(CURDIR)/$<: $(TARGET_CC) $(SHARED_CFLAGS) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TARGET_CC) $(SHARED_CFLAGS) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


$(OBJDIR)/%.d : $(OBJDIR)/%.c
		@$(IF) [ ! -d $(@D) ]; then $(MKDIR) $(@D) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(CFLAGS) $< -o $@


$(OBJDIR)/%.o : %.c
		@$(ECHO) "Compiling $(CURDIR)/$(notdir $<)..."
	@$(IF) $(TARGET_CC) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(CURDIR)/$<: $(TARGET_CC) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TARGET_CC) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


$(OBJDIR)/%.so : %.c
		@$(ECHO) "Compiling $(CURDIR)/$(notdir $<)..."
	@$(IF) $(TARGET_CC) $(SHARED_CFLAGS) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(CURDIR)/$<: $(TARGET_CC) $(SHARED_CFLAGS) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TARGET_CC) $(SHARED_CFLAGS) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


$(OBJDIR)/%.d : %.c
		@$(IF) [ ! -d $(@D) ]; then $(MKDIR) $(@D) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(CFLAGS) $< -o $@


ifeq ($(USE_LIBDEFS),yes)
LIBDEFS := libdefs.h
libdefs.h : lib.conf $(ARCHTOOL)
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(ARCHTOOL) -c

endif

#MM
setup :: $(LIBDEFS)
		@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(MOD_DIR) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done


#MM
setup-morphos :: $(LIBDEFS)
		@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(MOD_DIR) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done


clean ::
	-@$(RM) $(OBJDIR)



# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

# Include these files but only if the current target is neither
# setup nor clean.
ifeq (,$(filter clean% %clean %clean% setup% includes% ,$(TARGET)))
-include $(DEPS)
endif
