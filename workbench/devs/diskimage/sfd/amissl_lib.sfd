==id $Id: amissl_lib.sfd,v 1.0 2005/01/08 04:59:58 noname Exp $
==base _AmiSSLBase
==basetype struct Library *
==libname amissl.library
==bias 30
==public
==include <exec/types.h>
==include <amissl/amissl.h>
==private
void InternalInitAmiSSL(struct AmiSSLInitStruct * amisslinit) (a0)
==public
long InitAmiSSLA(struct TagItem * tagList) (a0)
==varargs
long InitAmiSSL(Tag tagList, ...) (a0)
long CleanupAmiSSLA(struct TagItem * tagList) (a0)
==varargs
long CleanupAmiSSL(Tag tagList, ...) (a0)
long IsCipherAvailable(long cipher) (d0)
==reserve 8
ASN1_TYPE * ASN1_TYPE_new() ()
void ASN1_TYPE_free(ASN1_TYPE * a) (a0)
ASN1_TYPE * d2i_ASN1_TYPE(ASN1_TYPE ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_TYPE(ASN1_TYPE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_ANY_it() ()
int ASN1_TYPE_get(ASN1_TYPE * a) (a0)
void ASN1_TYPE_set(ASN1_TYPE * a, int type, void * value) (a0,d0,a1)
ASN1_OBJECT * ASN1_OBJECT_new() ()
void ASN1_OBJECT_free(ASN1_OBJECT * a) (a0)
int i2d_ASN1_OBJECT(ASN1_OBJECT * a, unsigned char ** pp) (a0,a1)
ASN1_OBJECT * c2i_ASN1_OBJECT(ASN1_OBJECT ** a, unsigned char ** pp, long length) (a0,a1,d0)
ASN1_OBJECT * d2i_ASN1_OBJECT(ASN1_OBJECT ** a, unsigned char ** pp, long length) (a0,a1,d0)
const ASN1_ITEM * ASN1_OBJECT_it() ()
ASN1_STRING * ASN1_STRING_new() ()
void ASN1_STRING_free(ASN1_STRING * a) (a0)
ASN1_STRING * ASN1_STRING_dup(ASN1_STRING * a) (a0)
ASN1_STRING * ASN1_STRING_type_new(int type) (d0)
int ASN1_STRING_cmp(ASN1_STRING * a, ASN1_STRING * b) (a0,a1)
int ASN1_STRING_set(ASN1_STRING * str, const void * data, int len) (a0,a1,d0)
int ASN1_STRING_length(ASN1_STRING * x) (a0)
void ASN1_STRING_length_set(ASN1_STRING * x, int n) (a0,d0)
int ASN1_STRING_type(ASN1_STRING * x) (a0)
unsigned char * ASN1_STRING_data(ASN1_STRING * x) (a0)
ASN1_BIT_STRING * ASN1_BIT_STRING_new() ()
void ASN1_BIT_STRING_free(ASN1_BIT_STRING * a) (a0)
ASN1_BIT_STRING * d2i_ASN1_BIT_STRING(ASN1_BIT_STRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_BIT_STRING(ASN1_BIT_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_BIT_STRING_it() ()
int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING * a, unsigned char ** pp) (a0,a1)
ASN1_BIT_STRING * c2i_ASN1_BIT_STRING(ASN1_BIT_STRING ** a, unsigned char ** pp, long length) (a0,a1,d0)
int ASN1_BIT_STRING_set(ASN1_BIT_STRING * a, unsigned char * d, int length) (a0,a1,d0)
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING * a, int n, int value) (a0,d0,d1)
int ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING * a, int n) (a0,d0)
int ASN1_BIT_STRING_name_print(BIO * out, ASN1_BIT_STRING * bs, BIT_STRING_BITNAME * tbl, int indent) (a0,a1,a2,d0)
int ASN1_BIT_STRING_num_asc(char * name, BIT_STRING_BITNAME * tbl) (a0,a1)
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING * bs, char * name, int value, BIT_STRING_BITNAME * tbl) (a0,a1,d0,a2)
int i2d_ASN1_BOOLEAN(int a, unsigned char ** pp) (d0,a0)
int d2i_ASN1_BOOLEAN(int * a, unsigned char ** pp, long length) (a0,a1,d0)
ASN1_INTEGER * ASN1_INTEGER_new() ()
void ASN1_INTEGER_free(ASN1_INTEGER * a) (a0)
ASN1_INTEGER * d2i_ASN1_INTEGER(ASN1_INTEGER ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_INTEGER(ASN1_INTEGER * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_INTEGER_it() ()
int i2c_ASN1_INTEGER(ASN1_INTEGER * a, unsigned char ** pp) (a0,a1)
ASN1_INTEGER * c2i_ASN1_INTEGER(ASN1_INTEGER ** a, unsigned char ** pp, long length) (a0,a1,d0)
ASN1_INTEGER * d2i_ASN1_UINTEGER(ASN1_INTEGER ** a, unsigned char ** pp, long length) (a0,a1,d0)
ASN1_INTEGER * ASN1_INTEGER_dup(ASN1_INTEGER * x) (a0)
int ASN1_INTEGER_cmp(ASN1_INTEGER * x, ASN1_INTEGER * y) (a0,a1)
ASN1_ENUMERATED * ASN1_ENUMERATED_new() ()
void ASN1_ENUMERATED_free(ASN1_ENUMERATED * a) (a0)
ASN1_ENUMERATED * d2i_ASN1_ENUMERATED(ASN1_ENUMERATED ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_ENUMERATED(ASN1_ENUMERATED * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_ENUMERATED_it() ()
int ASN1_UTCTIME_check(ASN1_UTCTIME * a) (a0)
ASN1_UTCTIME * ASN1_UTCTIME_set(ASN1_UTCTIME * s, time_t t) (a0,d0)
int ASN1_UTCTIME_set_string(ASN1_UTCTIME * s, char * str) (a0,a1)
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME * s, time_t t) (a0,d0)
int ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME * a) (a0)
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME * s, time_t t) (a0,d0)
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME * s, char * str) (a0,a1)
ASN1_OCTET_STRING * ASN1_OCTET_STRING_new() ()
void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING * a) (a0)
ASN1_OCTET_STRING * d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_OCTET_STRING_it() ()
ASN1_OCTET_STRING * ASN1_OCTET_STRING_dup(ASN1_OCTET_STRING * a) (a0)
int ASN1_OCTET_STRING_cmp(ASN1_OCTET_STRING * a, ASN1_OCTET_STRING * b) (a0,a1)
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING * str, unsigned char * data, int len) (a0,a1,d0)
ASN1_VISIBLESTRING * ASN1_VISIBLESTRING_new() ()
void ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING * a) (a0)
ASN1_VISIBLESTRING * d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_VISIBLESTRING_it() ()
ASN1_UNIVERSALSTRING * ASN1_UNIVERSALSTRING_new() ()
void ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING * a) (a0)
ASN1_UNIVERSALSTRING * d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_UNIVERSALSTRING_it() ()
ASN1_UTF8STRING * ASN1_UTF8STRING_new() ()
void ASN1_UTF8STRING_free(ASN1_UTF8STRING * a) (a0)
ASN1_UTF8STRING * d2i_ASN1_UTF8STRING(ASN1_UTF8STRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_UTF8STRING(ASN1_UTF8STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_UTF8STRING_it() ()
ASN1_NULL * ASN1_NULL_new() ()
void ASN1_NULL_free(ASN1_NULL * a) (a0)
ASN1_NULL * d2i_ASN1_NULL(ASN1_NULL ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_NULL(ASN1_NULL * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_NULL_it() ()
ASN1_BMPSTRING * ASN1_BMPSTRING_new() ()
void ASN1_BMPSTRING_free(ASN1_BMPSTRING * a) (a0)
ASN1_BMPSTRING * d2i_ASN1_BMPSTRING(ASN1_BMPSTRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_BMPSTRING(ASN1_BMPSTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_BMPSTRING_it() ()
int UTF8_getc(const unsigned char * str, int len, unsigned long * val) (a0,d0,a1)
int UTF8_putc(unsigned char * str, int len, unsigned long value) (a0,d0,d1)
ASN1_STRING * ASN1_PRINTABLE_new() ()
void ASN1_PRINTABLE_free(ASN1_STRING * a) (a0)
ASN1_STRING * d2i_ASN1_PRINTABLE(ASN1_STRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_PRINTABLE(ASN1_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_PRINTABLE_it() ()
ASN1_STRING * DIRECTORYSTRING_new() ()
void DIRECTORYSTRING_free(ASN1_STRING * a) (a0)
ASN1_STRING * d2i_DIRECTORYSTRING(ASN1_STRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_DIRECTORYSTRING(ASN1_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * DIRECTORYSTRING_it() ()
ASN1_STRING * DISPLAYTEXT_new() ()
void DISPLAYTEXT_free(ASN1_STRING * a) (a0)
ASN1_STRING * d2i_DISPLAYTEXT(ASN1_STRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_DISPLAYTEXT(ASN1_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * DISPLAYTEXT_it() ()
ASN1_PRINTABLESTRING * ASN1_PRINTABLESTRING_new() ()
void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING * a) (a0)
ASN1_PRINTABLESTRING * d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_PRINTABLESTRING_it() ()
ASN1_T61STRING * ASN1_T61STRING_new() ()
void ASN1_T61STRING_free(ASN1_T61STRING * a) (a0)
ASN1_T61STRING * d2i_ASN1_T61STRING(ASN1_T61STRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_T61STRING(ASN1_T61STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_T61STRING_it() ()
ASN1_IA5STRING * ASN1_IA5STRING_new() ()
void ASN1_IA5STRING_free(ASN1_IA5STRING * a) (a0)
ASN1_IA5STRING * d2i_ASN1_IA5STRING(ASN1_IA5STRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_IA5STRING(ASN1_IA5STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_IA5STRING_it() ()
ASN1_GENERALSTRING * ASN1_GENERALSTRING_new() ()
void ASN1_GENERALSTRING_free(ASN1_GENERALSTRING * a) (a0)
ASN1_GENERALSTRING * d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_GENERALSTRING(ASN1_GENERALSTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_GENERALSTRING_it() ()
ASN1_UTCTIME * ASN1_UTCTIME_new() ()
void ASN1_UTCTIME_free(ASN1_UTCTIME * a) (a0)
ASN1_UTCTIME * d2i_ASN1_UTCTIME(ASN1_UTCTIME ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_UTCTIME(ASN1_UTCTIME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_UTCTIME_it() ()
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_new() ()
void ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME * a) (a0)
ASN1_GENERALIZEDTIME * d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_GENERALIZEDTIME_it() ()
ASN1_TIME * ASN1_TIME_new() ()
void ASN1_TIME_free(ASN1_TIME * a) (a0)
ASN1_TIME * d2i_ASN1_TIME(ASN1_TIME ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_TIME(ASN1_TIME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_TIME_it() ()
ASN1_TIME * ASN1_TIME_set(ASN1_TIME * s, time_t t) (a0,d0)
int ASN1_TIME_check(ASN1_TIME * t) (a0)
ASN1_GENERALIZEDTIME * ASN1_TIME_to_generalizedtime(ASN1_TIME * t, ASN1_GENERALIZEDTIME ** out) (a0,a1)
int i2d_ASN1_SET(STACK * a, unsigned char ** pp, int (*func)(), int ex_tag, int ex_class,
	int is_set) (a0,a1,a2,d0,d1,d2)
STACK * d2i_ASN1_SET(STACK ** a, unsigned char ** pp, long length, char * (*func)(),
	void (*free_func)(void *), int ex_tag, int ex_class) (a0,a1,d0,a2,a3,d1,d2)
int i2a_ASN1_INTEGER(BIO * bp, ASN1_INTEGER * a) (a0,a1)
int a2i_ASN1_INTEGER(BIO * bp, ASN1_INTEGER * bs, char * buf, int size) (a0,a1,a2,d0)
int i2a_ASN1_ENUMERATED(BIO * bp, ASN1_ENUMERATED * a) (a0,a1)
int a2i_ASN1_ENUMERATED(BIO * bp, ASN1_ENUMERATED * bs, char * buf, int size) (a0,a1,a2,d0)
int i2a_ASN1_OBJECT(BIO * bp, ASN1_OBJECT * a) (a0,a1)
int a2i_ASN1_STRING(BIO * bp, ASN1_STRING * bs, char * buf, int size) (a0,a1,a2,d0)
int i2a_ASN1_STRING(BIO * bp, ASN1_STRING * a, int type) (a0,a1,d0)
int i2t_ASN1_OBJECT(char * buf, int buf_len, ASN1_OBJECT * a) (a0,d0,a1)
int a2d_ASN1_OBJECT(unsigned char * out, int olen, const char * buf, int num) (a0,d0,a1,d1)
ASN1_OBJECT * ASN1_OBJECT_create(int nid, unsigned char * data, int len, const char * sn,
	const char * ln) (d0,a0,d1,a1,a2)
int ASN1_INTEGER_set(ASN1_INTEGER * a, long v) (a0,d0)
long ASN1_INTEGER_get(ASN1_INTEGER * a) (a0)
ASN1_INTEGER * BN_to_ASN1_INTEGER(BIGNUM * bn, ASN1_INTEGER * ai) (a0,a1)
BIGNUM * ASN1_INTEGER_to_BN(ASN1_INTEGER * ai, BIGNUM * bn) (a0,a1)
int ASN1_ENUMERATED_set(ASN1_ENUMERATED * a, long v) (a0,d0)
long ASN1_ENUMERATED_get(ASN1_ENUMERATED * a) (a0)
ASN1_ENUMERATED * BN_to_ASN1_ENUMERATED(BIGNUM * bn, ASN1_ENUMERATED * ai) (a0,a1)
BIGNUM * ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED * ai, BIGNUM * bn) (a0,a1)
int ASN1_PRINTABLE_type(const unsigned char * s, int max) (a0,d0)
int i2d_ASN1_bytes(ASN1_STRING * a, unsigned char ** pp, int t, int xclass) (a0,a1,d0,d1)
ASN1_STRING * d2i_ASN1_bytes(ASN1_STRING ** a, unsigned char ** pp, long length, int Ptag,
	int Pclass) (a0,a1,d0,d1,d2)
unsigned long ASN1_tag2bit(int t) (d0)
ASN1_STRING * d2i_ASN1_type_bytes(ASN1_STRING ** a, unsigned char ** pp, long length, int type) (a0,a1,d0,d1)
int asn1_Finish(ASN1_CTX * c) (a0)
int ASN1_get_object(unsigned char ** pp, long * plength, int * ptag, int * pclass, long omax) (a0,a1,a2,a3,d0)
int ASN1_check_infinite_end(unsigned char ** p, long len) (a0,d0)
void ASN1_put_object(unsigned char ** pp, int constructed, int length, int t, int xclass) (a0,d0,d1,d2,d3)
int ASN1_object_size(int constructed, int length, int t) (d0,d1,d2)
char * ASN1_dup(int (*i2d)(), char * (*d2i)(), char * x) (a0,a1,a2)
void * ASN1_item_dup(const ASN1_ITEM * it, void * x) (a0,a1)
int ASN1_STRING_to_UTF8(unsigned char ** out, ASN1_STRING * in) (a0,a1)
char * ASN1_d2i_bio(char * (*xnew)(), char * (*d2i)(), BIO * bp, unsigned char ** x) (a0,a1,a2,a3)
void * ASN1_item_d2i_bio(const ASN1_ITEM * it, BIO * in, void * x) (a0,a1,a2)
int ASN1_i2d_bio(int (*i2d)(), BIO * out, unsigned char * x) (a0,a1,a2)
int ASN1_item_i2d_bio(const ASN1_ITEM * it, BIO * out, void * x) (a0,a1,a2)
int ASN1_UTCTIME_print(BIO * fp, ASN1_UTCTIME * a) (a0,a1)
int ASN1_GENERALIZEDTIME_print(BIO * fp, ASN1_GENERALIZEDTIME * a) (a0,a1)
int ASN1_TIME_print(BIO * fp, ASN1_TIME * a) (a0,a1)
int ASN1_STRING_print(BIO * bp, ASN1_STRING * v) (a0,a1)
int ASN1_STRING_print_ex(BIO * out, ASN1_STRING * str, unsigned long flags) (a0,a1,d0)
int ASN1_parse(BIO * bp, unsigned char * pp, long len, int indent) (a0,a1,d0,d1)
int ASN1_parse_dump(BIO * bp, unsigned char * pp, long len, int indent, int dump) (a0,a1,d0,d1,d2)
const char * ASN1_tag2str(int t) (d0)
int i2d_ASN1_HEADER(ASN1_HEADER * a, unsigned char ** pp) (a0,a1)
ASN1_HEADER * d2i_ASN1_HEADER(ASN1_HEADER ** a, unsigned char ** pp, long length) (a0,a1,d0)
ASN1_HEADER * ASN1_HEADER_new() ()
void ASN1_HEADER_free(ASN1_HEADER * a) (a0)
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING * s) (a0)
ASN1_METHOD * X509_asn1_meth() ()
ASN1_METHOD * RSAPrivateKey_asn1_meth() ()
ASN1_METHOD * ASN1_IA5STRING_asn1_meth() ()
ASN1_METHOD * ASN1_BIT_STRING_asn1_meth() ()
int ASN1_TYPE_set_octetstring(ASN1_TYPE * a, unsigned char * data, int len) (a0,a1,d0)
int ASN1_TYPE_get_octetstring(ASN1_TYPE * a, unsigned char * data, int max_len) (a0,a1,d0)
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE * a, long num, unsigned char * data, int len) (a0,d0,a1,d1)
int ASN1_TYPE_get_int_octetstring(ASN1_TYPE * a, long * num, unsigned char * data, int max_len) (a0,a1,a2,d0)
STACK * ASN1_seq_unpack(unsigned char * buf, int len, char * (*d2i)(),
	void (*free_func)(void *)) (a0,d0,a1,a2)
unsigned char * ASN1_seq_pack(STACK * safes, int (*i2d)(), unsigned char ** buf, int * len) (a0,a1,a2,a3)
void * ASN1_unpack_string(ASN1_STRING * oct, char * (*d2i)()) (a0,a1)
void * ASN1_item_unpack(ASN1_STRING * oct, const ASN1_ITEM * it) (a0,a1)
ASN1_STRING * ASN1_pack_string(void * obj, int (*i2d)(), ASN1_OCTET_STRING ** oct) (a0,a1,a2)
ASN1_STRING * ASN1_item_pack(void * obj, const ASN1_ITEM * it, ASN1_OCTET_STRING ** oct) (a0,a1,a2)
void ASN1_STRING_set_default_mask(unsigned long mask) (d0)
int ASN1_STRING_set_default_mask_asc(char * p) (a0)
unsigned long ASN1_STRING_get_default_mask() ()
int ASN1_mbstring_copy(ASN1_STRING ** out, const unsigned char * in, int len, int inform,
	unsigned long mask) (a0,a1,d0,d1,d2)
int ASN1_mbstring_ncopy(ASN1_STRING ** out, const unsigned char * in, int len, int inform,
	unsigned long mask, long minsize, long maxsize) (a0,a1,d0,d1,d2,d3,d4)
ASN1_STRING * ASN1_STRING_set_by_NID(ASN1_STRING ** out, const unsigned char * in, int inlen,
	int inform, int nid) (a0,a1,d0,d1,d2)
ASN1_STRING_TABLE * ASN1_STRING_TABLE_get(int nid) (d0)
int ASN1_STRING_TABLE_add(int a, long b, long c, unsigned long d, unsigned long e) (d0,d1,d2,d3,d4)
void ASN1_STRING_TABLE_cleanup() ()
ASN1_VALUE * ASN1_item_new(const ASN1_ITEM * it) (a0)
void ASN1_item_free(ASN1_VALUE * val, const ASN1_ITEM * it) (a0,a1)
ASN1_VALUE * ASN1_item_d2i(ASN1_VALUE ** val, unsigned char ** in, long len,
	const ASN1_ITEM * it) (a0,a1,d0,a2)
int ASN1_item_i2d(ASN1_VALUE * val, unsigned char ** out, const ASN1_ITEM * it) (a0,a1,a2)
void ASN1_add_oid_module() ()
void ERR_load_ASN1_strings() ()
int asn1_GetSequence(ASN1_CTX * c, long * length) (a0,a1)
void asn1_add_error(unsigned char * address, int offset) (a0,d0)
const ASN1_ITEM * ASN1_BOOLEAN_it() ()
const ASN1_ITEM * ASN1_TBOOLEAN_it() ()
const ASN1_ITEM * ASN1_FBOOLEAN_it() ()
const ASN1_ITEM * ASN1_SEQUENCE_it() ()
const ASN1_ITEM * CBIGNUM_it() ()
const ASN1_ITEM * BIGNUM_it() ()
const ASN1_ITEM * LONG_it() ()
const ASN1_ITEM * ZLONG_it() ()
int ASN1_item_ex_new(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
void ASN1_item_ex_free(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
int ASN1_template_new(ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt) (a0,a1)
int ASN1_primitive_new(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
void ASN1_template_free(ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt) (a0,a1)
int ASN1_template_d2i(ASN1_VALUE ** pval, unsigned char ** in, long len,
	const ASN1_TEMPLATE * tt) (a0,a1,d0,a2)
int ASN1_item_ex_d2i(ASN1_VALUE ** pval, unsigned char ** in, long len, const ASN1_ITEM * it,
	int t, int aclass, char opt, ASN1_TLC * ctx) (a0,a1,d0,a2,d1,d2,d3,a3)
int ASN1_item_ex_i2d(ASN1_VALUE ** pval, unsigned char ** out, const ASN1_ITEM * it, int t,
	int aclass) (a0,a1,a2,d0,d1)
int ASN1_template_i2d(ASN1_VALUE ** pval, unsigned char ** out, const ASN1_TEMPLATE * tt) (a0,a1,a2)
void ASN1_primitive_free(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
int asn1_ex_i2c(ASN1_VALUE ** pval, unsigned char * cont, int * putype,
	const ASN1_ITEM * it) (a0,a1,a2,a3)
int asn1_ex_c2i(ASN1_VALUE ** pval, unsigned char * cont, int len, int utype,
	char * free_cont, const ASN1_ITEM * it) (a0,a1,d0,d1,a2,a3)
int asn1_get_choice_selector(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
int asn1_set_choice_selector(ASN1_VALUE ** pval, int value, const ASN1_ITEM * it) (a0,d0,a1)
ASN1_VALUE ** asn1_get_field_ptr(ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt) (a0,a1)
const ASN1_TEMPLATE * asn1_do_adb(ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt,
	int nullerr) (a0,a1,d0)
int asn1_do_lock(ASN1_VALUE ** pval, int op, const ASN1_ITEM * it) (a0,d0,a1)
void asn1_enc_init(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
void asn1_enc_free(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
int asn1_enc_restore(int * len, unsigned char ** out, ASN1_VALUE ** pval,
	const ASN1_ITEM * it) (a0,a1,a2,a3)
int asn1_enc_save(ASN1_VALUE ** pval, unsigned char * in, int inlen, const ASN1_ITEM * it) (a0,a1,d0,a2)
size_t BIO_ctrl_pending(BIO * b) (a0)
size_t BIO_ctrl_wpending(BIO * b) (a0)
size_t BIO_ctrl_get_write_guarantee(BIO * b) (a0)
size_t BIO_ctrl_get_read_request(BIO * b) (a0)
int BIO_ctrl_reset_read_request(BIO * b) (a0)
int BIO_set_ex_data(BIO * bio, int idx, void * data) (a0,d0,a1)
void * BIO_get_ex_data(BIO * bio, int idx) (a0,d0)
int BIO_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
unsigned long BIO_number_read(BIO * bio) (a0)
unsigned long BIO_number_written(BIO * bio) (a0)
BIO_METHOD * BIO_s_file() ()
BIO * BIO_new_file(const char * filename, const char * mode) (a0,a1)
BIO * BIO_new_fp_amiga(BPTR stream, int close_flag) (d0,d1)
BIO * BIO_new(BIO_METHOD * type) (a0)
int BIO_set(BIO * a, BIO_METHOD * type) (a0,a1)
int BIO_free(BIO * a) (a0)
void BIO_vfree(BIO * a) (a0)
int BIO_read(BIO * b, void * data, int len) (a0,a1,d0)
int BIO_gets(BIO * bp, char * buf, int size) (a0,a1,d0)
int BIO_write(BIO * b, const void * data, int len) (a0,a1,d0)
int BIO_puts(BIO * bp, const char * buf) (a0,a1)
int BIO_indent(BIO * b, int indent, int max) (a0,d0,d1)
long BIO_ctrl(BIO * bp, int cmd, long larg, void * parg) (a0,d0,d1,a1)
long BIO_callback_ctrl(BIO * b, int cmd,
	void (*fp)(struct bio_st *, int, const char *, int, long, long)) (a0,d0,a1)
char * BIO_ptr_ctrl(BIO * bp, int cmd, long larg) (a0,d0,d1)
long BIO_int_ctrl(BIO * bp, int cmd, long larg, int iarg) (a0,d0,d1,d2)
BIO * BIO_push(BIO * b, BIO * append) (a0,a1)
BIO * BIO_pop(BIO * b) (a0)
void BIO_free_all(BIO * a) (a0)
BIO * BIO_find_type(BIO * b, int bio_type) (a0,d0)
BIO * BIO_next(BIO * b) (a0)
BIO * BIO_get_retry_BIO(BIO * bio, int * reason) (a0,a1)
int BIO_get_retry_reason(BIO * bio) (a0)
BIO * BIO_dup_chain(BIO * in) (a0)
int BIO_nread0(BIO * bio, char ** buf) (a0,a1)
int BIO_nread(BIO * bio, char ** buf, int num) (a0,a1,d0)
int BIO_nwrite0(BIO * bio, char ** buf) (a0,a1)
int BIO_nwrite(BIO * bio, char ** buf, int num) (a0,a1,d0)
long BIO_debug_callback(BIO * bio, int cmd, const char * argp, int argi, long argl, long ret) (a0,d0,a1,d1,d2,d3)
BIO_METHOD * BIO_s_mem() ()
BIO * BIO_new_mem_buf(void * buf, int len) (a0,d0)
BIO_METHOD * BIO_s_socket() ()
BIO_METHOD * BIO_s_connect() ()
BIO_METHOD * BIO_s_accept() ()
BIO_METHOD * BIO_s_fd() ()
BIO_METHOD * BIO_s_log() ()
BIO_METHOD * BIO_s_bio() ()
BIO_METHOD * BIO_s_null() ()
BIO_METHOD * BIO_f_null() ()
BIO_METHOD * BIO_f_buffer() ()
BIO_METHOD * BIO_f_nbio_test() ()
int BIO_sock_should_retry(int i) (d0)
int BIO_sock_non_fatal_error(int error) (d0)
int BIO_fd_should_retry(int i) (d0)
int BIO_fd_non_fatal_error(int error) (d0)
int BIO_dump(BIO * b, const char * bytes, int len) (a0,a1,d0)
int BIO_dump_indent(BIO * b, const char * bytes, int len, int indent) (a0,a1,d0,d1)
struct hostent * BIO_gethostbyname(const char * name) (a0)
int BIO_sock_error(int sock) (d0)
int BIO_socket_ioctl(int fd, long type, void * arg) (d0,d1,a0)
int BIO_socket_nbio(int fd, int mode) (d0,d1)
int BIO_get_port(const char * str, unsigned short * port_ptr) (a0,a1)
int BIO_get_host_ip(const char * str, unsigned char * ip) (a0,a1)
int BIO_get_accept_socket(char * host_port, int mode) (a0,d0)
int BIO_accept(int sock, char ** ip_port) (d0,a0)
int BIO_sock_init() ()
void BIO_sock_cleanup() ()
int BIO_set_tcp_ndelay(int sock, int turn_on) (d0,d1)
BIO * BIO_new_socket(int sock, int close_flag) (d0,d1)
BIO * BIO_new_fd(int fd, int close_flag) (d0,d1)
BIO * BIO_new_connect(char * host_port) (a0)
BIO * BIO_new_accept(char * host_port) (a0)
int BIO_new_bio_pair(BIO ** bio1, size_t writebuf1, BIO ** bio2, size_t writebuf2) (a0,d0,a1,d1)
void BIO_copy_next_retry(BIO * b) (a0)
int BIO_vprintf(BIO * bio, const char * format, long *args) (a0,a1,d0)
==varargs
int BIO_printf(BIO * bio, const char * format, long dummy, ...) (a0,a1,d0)
int BIO_vsnprintf(char * buf, size_t n, const char * format, long *args) (a0,d0,a1,d1)
==varargs
int BIO_snprintf(char * buf, size_t n, const char * format, long dummy, ...) (a0,d0,a1,d1)
void ERR_load_BIO_strings() ()
const BIGNUM * BN_value_one() ()
char * BN_options() ()
BN_CTX * BN_CTX_new() ()
void BN_CTX_init(BN_CTX * c) (a0)
void BN_CTX_free(BN_CTX * c) (a0)
void BN_CTX_start(BN_CTX * ctx) (a0)
BIGNUM * BN_CTX_get(BN_CTX * ctx) (a0)
void BN_CTX_end(BN_CTX * ctx) (a0)
int BN_rand(BIGNUM * rnd, int bits, int top, int bottom) (a0,d0,d1,d2)
int BN_pseudo_rand(BIGNUM * rnd, int bits, int top, int bottom) (a0,d0,d1,d2)
int BN_rand_range(BIGNUM * rnd, BIGNUM * range) (a0,a1)
int BN_pseudo_rand_range(BIGNUM * rnd, BIGNUM * range) (a0,a1)
int BN_num_bits(const BIGNUM * a) (a0)
int BN_num_bits_word(BN_ULONG a) (d0)
BIGNUM * BN_new() ()
void BN_init(BIGNUM * a) (a0)
void BN_clear_free(BIGNUM * a) (a0)
BIGNUM * BN_copy(BIGNUM * a, const BIGNUM * b) (a0,a1)
void BN_swap(BIGNUM * a, BIGNUM * b) (a0,a1)
BIGNUM * BN_bin2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int BN_bn2bin(const BIGNUM * a, unsigned char * to) (a0,a1)
BIGNUM * BN_mpi2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int BN_bn2mpi(const BIGNUM * a, unsigned char * to) (a0,a1)
int BN_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_usub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_uadd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_sqr(BIGNUM * r, const BIGNUM * a, BN_CTX * ctx) (a0,a1,a2)
int BN_div(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, const BIGNUM * d,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_nnmod(BIGNUM * r, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_add_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m) (a0,a1,a2,a3)
int BN_mod_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_sub_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m) (a0,a1,a2,a3)
int BN_mod_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_sqr(BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_lshift1(BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_lshift1_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * m) (a0,a1,a2)
int BN_mod_lshift(BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m, BN_CTX * ctx) (a0,a1,d0,a2,a3)
int BN_mod_lshift_quick(BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m) (a0,a1,d0,a2)
BN_ULONG BN_mod_word(const BIGNUM * a, BN_ULONG w) (a0,d0)
BN_ULONG BN_div_word(BIGNUM * a, BN_ULONG w) (a0,d0)
int BN_mul_word(BIGNUM * a, BN_ULONG w) (a0,d0)
int BN_add_word(BIGNUM * a, BN_ULONG w) (a0,d0)
int BN_sub_word(BIGNUM * a, BN_ULONG w) (a0,d0)
int BN_set_word(BIGNUM * a, BN_ULONG w) (a0,d0)
BN_ULONG BN_get_word(const BIGNUM * a) (a0)
int BN_cmp(const BIGNUM * a, const BIGNUM * b) (a0,a1)
void BN_free(BIGNUM * a) (a0)
int BN_is_bit_set(const BIGNUM * a, int n) (a0,d0)
int BN_lshift(BIGNUM * r, const BIGNUM * a, int n) (a0,a1,d0)
int BN_lshift1(BIGNUM * r, const BIGNUM * a) (a0,a1)
int BN_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_exp_mont(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m,
	BN_CTX * ctx, BN_MONT_CTX * m_ctx) (a0,a1,a2,a3,d0,d1)
int BN_mod_exp_mont_word(BIGNUM * r, BN_ULONG a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx,
	BN_MONT_CTX * m_ctx) (a0,d0,a1,a2,a3,d1)
int BN_mod_exp2_mont(BIGNUM * r, const BIGNUM * a1, const BIGNUM * p1, const BIGNUM * a2,
	const BIGNUM * p2, const BIGNUM * m, BN_CTX * ctx,
	BN_MONT_CTX * m_ctx) (a0,a1,a2,a3,d0,d1,d2,d3)
int BN_mod_exp_simple(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mask_bits(BIGNUM * a, int n) (a0,d0)
int BN_print(BIO * fp, const BIGNUM * a) (a0,a1)
int BN_reciprocal(BIGNUM * r, const BIGNUM * m, int len, BN_CTX * ctx) (a0,a1,d0,a2)
int BN_rshift(BIGNUM * r, const BIGNUM * a, int n) (a0,a1,d0)
int BN_rshift1(BIGNUM * r, const BIGNUM * a) (a0,a1)
void BN_clear(BIGNUM * a) (a0)
BIGNUM * BN_dup(const BIGNUM * a) (a0)
int BN_ucmp(const BIGNUM * a, const BIGNUM * b) (a0,a1)
int BN_set_bit(BIGNUM * a, int n) (a0,d0)
int BN_clear_bit(BIGNUM * a, int n) (a0,d0)
char * BN_bn2hex(const BIGNUM * a) (a0)
char * BN_bn2dec(const BIGNUM * a) (a0)
int BN_hex2bn(BIGNUM ** a, const char * str) (a0,a1)
int BN_dec2bn(BIGNUM ** a, const char * str) (a0,a1)
int BN_gcd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_kronecker(const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2)
BIGNUM * BN_mod_inverse(BIGNUM * ret, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx) (a0,a1,a2,a3)
BIGNUM * BN_mod_sqrt(BIGNUM * ret, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx) (a0,a1,a2,a3)
BIGNUM * BN_generate_prime(BIGNUM * ret, int bits, int safe, const BIGNUM * add,
	const BIGNUM * rem, void (*callback)(int, int, void *),
	void * cb_arg) (a0,d0,d1,a1,a2,a3,d2)
int BN_is_prime(const BIGNUM * p, int nchecks, void (*callback)(int, int, void *),
	BN_CTX * ctx, void * cb_arg) (a0,d0,a1,a2,a3)
int BN_is_prime_fasttest(const BIGNUM * p, int nchecks, void (*callback)(int, int, void *),
	BN_CTX * ctx, void * cb_arg, int do_trial_division) (a0,d0,a1,a2,a3,d1)
BN_MONT_CTX * BN_MONT_CTX_new() ()
void BN_MONT_CTX_init(BN_MONT_CTX * ctx) (a0)
int BN_mod_mul_montgomery(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_MONT_CTX * mont,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_from_montgomery(BIGNUM * r, const BIGNUM * a, BN_MONT_CTX * mont, BN_CTX * ctx) (a0,a1,a2,a3)
void BN_MONT_CTX_free(BN_MONT_CTX * mont) (a0)
int BN_MONT_CTX_set(BN_MONT_CTX * mont, const BIGNUM * mod, BN_CTX * ctx) (a0,a1,a2)
BN_MONT_CTX * BN_MONT_CTX_copy(BN_MONT_CTX * to, BN_MONT_CTX * from) (a0,a1)
BN_BLINDING * BN_BLINDING_new(BIGNUM * A, BIGNUM * Ai, BIGNUM * mod) (a0,a1,a2)
void BN_BLINDING_free(BN_BLINDING * b) (a0)
int BN_BLINDING_update(BN_BLINDING * b, BN_CTX * ctx) (a0,a1)
int BN_BLINDING_convert(BIGNUM * n, BN_BLINDING * r, BN_CTX * ctx) (a0,a1,a2)
int BN_BLINDING_invert(BIGNUM * n, BN_BLINDING * b, BN_CTX * ctx) (a0,a1,a2)
void BN_set_params(int mul, int high, int low, int mont) (d0,d1,d2,d3)
int BN_get_params(int which) (d0)
void BN_RECP_CTX_init(BN_RECP_CTX * recp) (a0)
BN_RECP_CTX * BN_RECP_CTX_new() ()
void BN_RECP_CTX_free(BN_RECP_CTX * recp) (a0)
int BN_RECP_CTX_set(BN_RECP_CTX * recp, const BIGNUM * rdiv, BN_CTX * ctx) (a0,a1,a2)
int BN_mod_mul_reciprocal(BIGNUM * r, const BIGNUM * x, const BIGNUM * y, BN_RECP_CTX * recp,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_exp_recp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_div_recp(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, BN_RECP_CTX * recp,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
BIGNUM * bn_expand2(BIGNUM * a, int words) (a0,d0)
BIGNUM * bn_dup_expand(const BIGNUM * a, int words) (a0,d0)
BN_ULONG bn_mul_add_words(BN_ULONG * rp, const BN_ULONG * ap, int num, BN_ULONG w) (a0,a1,d0,d1)
BN_ULONG bn_mul_words(BN_ULONG * rp, const BN_ULONG * ap, int num, BN_ULONG w) (a0,a1,d0,d1)
void bn_sqr_words(BN_ULONG * rp, const BN_ULONG * ap, int num) (a0,a1,d0)
BN_ULONG bn_div_words(BN_ULONG h, BN_ULONG l, BN_ULONG d) (d0,d1,d2)
BN_ULONG bn_add_words(BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, int num) (a0,a1,a2,d0)
BN_ULONG bn_sub_words(BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, int num) (a0,a1,a2,d0)
int BN_bntest_rand(BIGNUM * rnd, int bits, int top, int bottom) (a0,d0,d1,d2)
void ERR_load_BN_strings() ()
BUF_MEM * BUF_MEM_new() ()
void BUF_MEM_free(BUF_MEM * a) (a0)
int BUF_MEM_grow(BUF_MEM * str, int len) (a0,d0)
int BUF_MEM_grow_clean(BUF_MEM * str, int len) (a0,d0)
char * BUF_strdup(const char * str) (a0)
size_t BUF_strlcpy(char * dst, const char * src, size_t siz) (a0,a1,d0)
size_t BUF_strlcat(char * dst, const char * src, size_t siz) (a0,a1,d0)
void ERR_load_BUF_strings() ()
COMP_CTX * COMP_CTX_new(COMP_METHOD * meth) (a0)
void COMP_CTX_free(COMP_CTX * ctx) (a0)
int COMP_compress_block(COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in,
	int ilen) (a0,a1,d0,a2,d1)
int COMP_expand_block(COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in,
	int ilen) (a0,a1,d0,a2,d1)
COMP_METHOD * COMP_rle() ()
COMP_METHOD * COMP_zlib() ()
void ERR_load_COMP_strings() ()
int CONF_set_default_method(CONF_METHOD * meth) (a0)
void CONF_set_nconf(CONF * conf, LHASH * hash) (a0,a1)
LHASH * CONF_load(LHASH * conf, const char * file, long * eline) (a0,a1,a2)
LHASH * CONF_load_bio(LHASH * conf, BIO * bp, long * eline) (a0,a1,a2)
STACK_OF_CONF_VALUE * CONF_get_section(LHASH * conf, const char * section) (a0,a1)
char * CONF_get_string(LHASH * conf, const char * group, const char * name) (a0,a1,a2)
long CONF_get_number(LHASH * conf, const char * group, const char * name) (a0,a1,a2)
void CONF_free(LHASH * conf) (a0)
int CONF_dump_bio(LHASH * conf, BIO * out) (a0,a1)
void OPENSSL_config(const char * config_name) (a0)
void OPENSSL_no_config() ()
CONF * NCONF_new(CONF_METHOD * meth) (a0)
CONF_METHOD * NCONF_default() ()
CONF_METHOD * NCONF_WIN32() ()
void NCONF_free(CONF * conf) (a0)
void NCONF_free_data(CONF * conf) (a0)
int NCONF_load(CONF * conf, const char * file, long * eline) (a0,a1,a2)
int NCONF_load_bio(CONF * conf, BIO * bp, long * eline) (a0,a1,a2)
STACK_OF_CONF_VALUE * NCONF_get_section(const CONF * conf, const char * section) (a0,a1)
char * NCONF_get_string(const CONF * conf, const char * group, const char * name) (a0,a1,a2)
int NCONF_get_number_e(const CONF * conf, const char * group, const char * name, long * result) (a0,a1,a2,a3)
int NCONF_dump_bio(const CONF * conf, BIO * out) (a0,a1)
int CONF_modules_load(const CONF * cnf, const char * appname, unsigned long flags) (a0,a1,d0)
int CONF_modules_load_file(const char * filename, const char * appname, unsigned long flags) (a0,a1,d0)
void CONF_modules_unload(int all) (d0)
void CONF_modules_finish() ()
void CONF_modules_free() ()
int CONF_module_add(const char * name, conf_init_func * (*ifunc)(),
	conf_finish_func * (*ffunc)()) (a0,a1,a2)
const char * CONF_imodule_get_name(const CONF_IMODULE * md) (a0)
const char * CONF_imodule_get_value(const CONF_IMODULE * md) (a0)
void * CONF_imodule_get_usr_data(const CONF_IMODULE * md) (a0)
void CONF_imodule_set_usr_data(CONF_IMODULE * md, void * usr_data) (a0,a1)
CONF_MODULE * CONF_imodule_get_module(const CONF_IMODULE * md) (a0)
unsigned long CONF_imodule_get_flags(const CONF_IMODULE * md) (a0)
void CONF_imodule_set_flags(CONF_IMODULE * md, unsigned long flags) (a0,d0)
void * CONF_module_get_usr_data(CONF_MODULE * pmod) (a0)
void CONF_module_set_usr_data(CONF_MODULE * pmod, void * usr_data) (a0,a1)
char * CONF_get1_default_config_file() ()
int CONF_parse_list(const char * list, int sep, int nospc,
	int (*list_cb)(const char *elem, int len, void *usr), void * arg) (a0,d0,d1,a1,a2)
void OPENSSL_load_builtin_modules() ()
void ERR_load_CONF_strings() ()
CONF_VALUE * _CONF_new_section(CONF * conf, const char * section) (a0,a1)
CONF_VALUE * _CONF_get_section(const CONF * conf, const char * section) (a0,a1)
STACK_OF_CONF_VALUE * _CONF_get_section_values(const CONF * conf, const char * section) (a0,a1)
int _CONF_add_string(CONF * conf, CONF_VALUE * section, CONF_VALUE * value) (a0,a1,a2)
char * _CONF_get_string(const CONF * conf, const char * section, const char * name) (a0,a1,a2)
int _CONF_new_data(CONF * conf) (a0)
void _CONF_free_data(CONF * conf) (a0)
int CRYPTO_mem_ctrl(int mode) (d0)
int CRYPTO_is_mem_check_on() ()
const char * SSLeay_version(int type) (d0)
unsigned long SSLeay() ()
int OPENSSL_issetugid() ()
const CRYPTO_EX_DATA_IMPL * CRYPTO_get_ex_data_implementation() ()
int CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL * i) (a0)
int CRYPTO_ex_data_new_class() ()
int CRYPTO_get_ex_new_index(int class_index, long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,d1,a0,a1,a2,a3)
int CRYPTO_new_ex_data(int class_index, void * obj, CRYPTO_EX_DATA * ad) (d0,a0,a1)
int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA * to, CRYPTO_EX_DATA * from) (d0,a0,a1)
void CRYPTO_free_ex_data(int class_index, void * obj, CRYPTO_EX_DATA * ad) (d0,a0,a1)
int CRYPTO_set_ex_data(CRYPTO_EX_DATA * ad, int idx, void * val) (a0,d0,a1)
void * CRYPTO_get_ex_data(const CRYPTO_EX_DATA * ad, int idx) (a0,d0)
void CRYPTO_cleanup_all_ex_data() ()
int CRYPTO_get_new_lockid(char * name) (a0)
int CRYPTO_num_locks() ()
void CRYPTO_lock(int mode, int type, const char * file, int line) (d0,d1,a0,d2)
void CRYPTO_set_locking_callback(void (*func)(int mode, int type, const char *file, int line)) (a0)
void (*)(int mode, int type, const char *file, int line) CRYPTO_get_locking_callback() ()
void CRYPTO_set_add_lock_callback(
	int (*func)(int *num, int mount, int type, const char *file, int line)) (a0)
int (*)(int *num, int mount, int type, const char *file, int line) CRYPTO_get_add_lock_callback() ()
void CRYPTO_set_id_callback(unsigned long (*func)(void)) (a0)
unsigned long (*)(void) CRYPTO_get_id_callback() ()
unsigned long CRYPTO_thread_id() ()
const char * CRYPTO_get_lock_name(int type) (d0)
int CRYPTO_add_lock(int * pointer, int amount, int type, const char * file, int line) (a0,d0,d1,a1,d2)
int CRYPTO_get_new_dynlockid() ()
void CRYPTO_destroy_dynlockid(int i) (d0)
struct CRYPTO_dynlock_value * CRYPTO_get_dynlock_value(int i) (d0)
void CRYPTO_set_dynlock_create_callback(
	struct CRYPTO_dynlock_value * (*dyn_create_function)(const char *file, int line)) (a0)
void CRYPTO_set_dynlock_lock_callback(
	void (*dyn_lock_function)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line)) (a0)
void CRYPTO_set_dynlock_destroy_callback(
	void (*dyn_destroy_function)(struct CRYPTO_dynlock_value *l, const char *file, int line)) (a0)
struct CRYPTO_dynlock_value * (*)(const char *file, int line) CRYPTO_get_dynlock_create_callback() ()
void (*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line) CRYPTO_get_dynlock_lock_callback() ()
void (*)(struct CRYPTO_dynlock_value *l, const char *file, int line) CRYPTO_get_dynlock_destroy_callback() ()
int CRYPTO_set_mem_functions(void * (*m)(size_t), void * (*r)(void *, size_t), void (*f)(void *)) (a0,a1,a2)
int CRYPTO_set_locked_mem_functions(void * (*m)(size_t), void (*free_func)(void *)) (a0,a1)
int CRYPTO_set_mem_ex_functions(void * (*m)(size_t, const char *, int),
	void * (*r)(void *, size_t, const char *, int), void (*f)(void *)) (a0,a1,a2)
int CRYPTO_set_locked_mem_ex_functions(void * (*m)(size_t, const char *, int), void (*free_func)(void *)) (a0,a1)
int CRYPTO_set_mem_debug_functions(void (*m)(void *, int, const char *, int, int),
	void (*r)(void *, void *, int, const char *, int, int),
	void (*f)(void *, int), void (*so)(long), long (*go)(void)) (a0,a1,a2,a3,d0)
void CRYPTO_get_mem_functions(void * (*m)(size_t), void * (*r)(void *, size_t), void (*f)(void *)) (a0,a1,a2)
void CRYPTO_get_locked_mem_functions(void * (*m)(size_t), void (*f)(void *)) (a0,a1)
void CRYPTO_get_mem_ex_functions(void * (*m)(size_t, const char *, int),
	void * (*r)(void *, size_t, const char *, int), void (*f)(void *)) (a0,a1,a2)
void CRYPTO_get_locked_mem_ex_functions(void * (*m)(size_t, const char *, int), void (*f)(void *)) (a0,a1)
void CRYPTO_get_mem_debug_functions(void (*m)(void *, int, const char *, int, int),
	void (*r)(void *, void *, int, const char *, int, int),
	void (*f)(void *, int), void (*so)(long), long (*go)(void)) (a0,a1,a2,a3,d0)
void * CRYPTO_malloc_locked(int num, const char * file, int line) (d0,a0,d1)
void CRYPTO_free_locked(void * a) (a0)
void * CRYPTO_malloc(int num, const char * file, int line) (d0,a0,d1)
void CRYPTO_free(void * a) (a0)
void * CRYPTO_realloc(void * addr, int num, const char * file, int line) (a0,d0,a1,d1)
void * CRYPTO_realloc_clean(void * addr, int old_num, int num, const char * file, int line) (a0,d0,d1,a1,d2)
void * CRYPTO_remalloc(void * addr, int num, const char * file, int line) (a0,d0,a1,d1)
void OPENSSL_cleanse(void * ptr, size_t len) (a0,d0)
void CRYPTO_set_mem_debug_options(long bits) (d0)
long CRYPTO_get_mem_debug_options() ()
int CRYPTO_push_info_(const char * info, const char * file, int line) (a0,a1,d0)
int CRYPTO_pop_info() ()
int CRYPTO_remove_all_info() ()
void CRYPTO_dbg_malloc(void * addr, int num, const char * file, int line, int before_p) (a0,d0,a1,d1,d2)
void CRYPTO_dbg_realloc(void * addr1, void * addr2, int num, const char * file, int line,
	int before_p) (a0,a1,d0,a2,d1,d2)
void CRYPTO_dbg_free(void * addr, int before_p) (a0,d0)
void CRYPTO_dbg_set_options(long bits) (d0)
long CRYPTO_dbg_get_options() ()
void CRYPTO_mem_leaks(struct bio_st * bio) (a0)
void CRYPTO_mem_leaks_cb(
	CRYPTO_MEM_LEAK_CB * (*cb)(unsigned long, const char *, int, int, void *)) (a0)
void OpenSSLDie(const char * file, int line, const char * assertion) (a0,d0,a1)
void ERR_load_CRYPTO_strings() ()
DSO * DSO_new() ()
DSO * DSO_new_method(DSO_METHOD * method) (a0)
int DSO_free(DSO * dso) (a0)
int DSO_flags(DSO * dso) (a0)
int DSO_up_ref(DSO * dso) (a0)
long DSO_ctrl(DSO * dso, int cmd, long larg, void * parg) (a0,d0,d1,a1)
int DSO_set_name_converter(DSO * dso, DSO_NAME_CONVERTER_FUNC cb, DSO_NAME_CONVERTER_FUNC * oldcb) (a0,d0,a1)
const char * DSO_get_filename(DSO * dso) (a0)
int DSO_set_filename(DSO * dso, const char * filename) (a0,a1)
char * DSO_convert_filename(DSO * dso, const char * filename) (a0,a1)
const char * DSO_get_loaded_filename(DSO * dso) (a0)
void DSO_set_default_method(DSO_METHOD * meth) (a0)
DSO_METHOD * DSO_get_default_method() ()
DSO_METHOD * DSO_get_method(DSO * dso) (a0)
DSO_METHOD * DSO_set_method(DSO * dso, DSO_METHOD * meth) (a0,a1)
DSO * DSO_load(DSO * dso, const char * filename, DSO_METHOD * meth, int flags) (a0,a1,a2,d0)
void * DSO_bind_var(DSO * dso, const char * symname) (a0,a1)
DSO_FUNC_TYPE DSO_bind_func(DSO * dso, const char * symname) (a0,a1)
DSO_METHOD * DSO_METHOD_openssl() ()
DSO_METHOD * DSO_METHOD_null() ()
DSO_METHOD * DSO_METHOD_dlfcn() ()
DSO_METHOD * DSO_METHOD_dl() ()
DSO_METHOD * DSO_METHOD_win32() ()
DSO_METHOD * DSO_METHOD_vms() ()
void ERR_load_DSO_strings() ()
const EC_METHOD * EC_GFp_simple_method() ()
const EC_METHOD * EC_GFp_mont_method() ()
EC_GROUP * EC_GROUP_new(const EC_METHOD * a) (a0)
void EC_GROUP_free(EC_GROUP * a) (a0)
void EC_GROUP_clear_free(EC_GROUP * a) (a0)
int EC_GROUP_copy(EC_GROUP * a, const EC_GROUP * b) (a0,a1)
const EC_METHOD * EC_GROUP_method_of(const EC_GROUP * a) (a0)
int EC_GROUP_set_curve_GFp(EC_GROUP * a1, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b,
	BN_CTX * a2) (a0,a1,a2,a3,d0)
int EC_GROUP_get_curve_GFp(const EC_GROUP * a1, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * a2) (a0,a1,a2,a3,d0)
EC_GROUP * EC_GROUP_new_curve_GFp(const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * a1) (a0,a1,a2,a3)
int EC_GROUP_set_generator(EC_GROUP * a1, const EC_POINT * generator, const BIGNUM * order,
	const BIGNUM * cofactor) (a0,a1,a2,a3)
EC_POINT * EC_GROUP_get0_generator(const EC_GROUP * a1) (a0)
int EC_GROUP_get_order(const EC_GROUP * a1, BIGNUM * order, BN_CTX * a2) (a0,a1,a2)
int EC_GROUP_get_cofactor(const EC_GROUP * a1, BIGNUM * cofactor, BN_CTX * a2) (a0,a1,a2)
EC_POINT * EC_POINT_new(const EC_GROUP * a) (a0)
void EC_POINT_free(EC_POINT * a) (a0)
void EC_POINT_clear_free(EC_POINT * a) (a0)
int EC_POINT_copy(EC_POINT * a, const EC_POINT * b) (a0,a1)
const EC_METHOD * EC_POINT_method_of(const EC_POINT * a) (a0)
int EC_POINT_set_to_infinity(const EC_GROUP * a, EC_POINT * b) (a0,a1)
int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, const BIGNUM * y,
	const BIGNUM * z, BN_CTX * a3) (a0,a1,a2,a3,d0,d1)
int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP * a1, const EC_POINT * a2, BIGNUM * x, BIGNUM * y,
	BIGNUM * z, BN_CTX * a3) (a0,a1,a2,a3,d0,d1)
int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, const BIGNUM * y,
	BN_CTX * a3) (a0,a1,a2,a3,d0)
int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP * a1, const EC_POINT * a2, BIGNUM * x, BIGNUM * y,
	BN_CTX * a3) (a0,a1,a2,a3,d0)
int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, int y_bit,
	BN_CTX * a3) (a0,a1,a2,d0,a3)
size_t EC_POINT_point2oct(const EC_GROUP * a1, const EC_POINT * a2,
	point_conversion_form_t form, unsigned char * buf, size_t len,
	BN_CTX * a3) (a0,a1,d0,a2,d1,a3)
int EC_POINT_oct2point(const EC_GROUP * a1, EC_POINT * a2, const unsigned char * buf,
	size_t len, BN_CTX * a3) (a0,a1,a2,d0,a3)
int EC_POINT_add(const EC_GROUP * a1, EC_POINT * r, const EC_POINT * a,
	const EC_POINT * b, BN_CTX * a2) (a0,a1,a2,a3,d0)
int EC_POINT_dbl(const EC_GROUP * a1, EC_POINT * r, const EC_POINT * a, BN_CTX * a2) (a0,a1,a2,a3)
int EC_POINT_invert(const EC_GROUP * a1, EC_POINT * a2, BN_CTX * a3) (a0,a1,a2)
int EC_POINT_is_at_infinity(const EC_GROUP * a, const EC_POINT * b) (a0,a1)
int EC_POINT_is_on_curve(const EC_GROUP * a, const EC_POINT * b, BN_CTX * c) (a0,a1,a2)
int EC_POINT_cmp(const EC_GROUP * a1, const EC_POINT * a, const EC_POINT * b, BN_CTX * a2) (a0,a1,a2,a3)
int EC_POINT_make_affine(const EC_GROUP * a, EC_POINT * b, BN_CTX * c) (a0,a1,a2)
int EC_POINTs_make_affine(const EC_GROUP * a1, size_t num, EC_POINT ** a2, BN_CTX * a3) (a0,d0,a1,a2)
int EC_POINTs_mul(const EC_GROUP * a1, EC_POINT * r, const BIGNUM * a2, size_t num,
	const EC_POINT ** a3, const BIGNUM ** a4, BN_CTX * a5) (a0,a1,a2,d0,a3,d1,d2)
int EC_POINT_mul(const EC_GROUP * a1, EC_POINT * r, const BIGNUM * a2,
	const EC_POINT * a3, const BIGNUM * a4, BN_CTX * a5) (a0,a1,a2,a3,d0,d1)
int EC_GROUP_precompute_mult(EC_GROUP * a, BN_CTX * b) (a0,a1)
void ERR_load_EC_strings() ()
void ERR_put_error(int lib, int func, int reason, const char * file, int line) (d0,d1,d2,a0,d3)
void ERR_set_error_data(char * data, int flags) (a0,d0)
unsigned long ERR_get_error() ()
unsigned long ERR_get_error_line(const char ** file, int * line) (a0,a1)
unsigned long ERR_get_error_line_data(const char ** file, int * line, const char ** data,
	int * flags) (a0,a1,a2,a3)
unsigned long ERR_peek_error() ()
unsigned long ERR_peek_error_line(const char ** file, int * line) (a0,a1)
unsigned long ERR_peek_error_line_data(const char ** file, int * line, const char ** data,
	int * flags) (a0,a1,a2,a3)
unsigned long ERR_peek_last_error() ()
unsigned long ERR_peek_last_error_line(const char ** file, int * line) (a0,a1)
unsigned long ERR_peek_last_error_line_data(const char ** file, int * line, const char ** data,
	int * flags) (a0,a1,a2,a3)
void ERR_clear_error() ()
char * ERR_error_string(unsigned long e, char * buf) (d0,a0)
void ERR_error_string_n(unsigned long e, char * buf, size_t len) (d0,a0,d1)
const char * ERR_lib_error_string(unsigned long e) (d0)
const char * ERR_func_error_string(unsigned long e) (d0)
const char * ERR_reason_error_string(unsigned long e) (d0)
void ERR_print_errors_cb(int (*cb)(const char *str, size_t len, void *u), void * u) (a0,a1)
void ERR_print_errors(BIO * bp) (a0)
void ERR_add_error_dataA(int num, long *args) (d0,d1)
==varargs
void ERR_add_error_data(int num, long dummy, ...) (d0,d1)
void ERR_load_strings(int lib, ERR_STRING_DATA * str) (d0,a0)
void ERR_unload_strings(int lib, ERR_STRING_DATA * str) (d0,a0)
void ERR_load_ERR_strings() ()
void ERR_load_crypto_strings() ()
void ERR_free_strings() ()
void ERR_remove_state(unsigned long pid) (d0)
ERR_STATE * ERR_get_state() ()
LHASH * ERR_get_string_table() ()
LHASH * ERR_get_err_state_table() ()
void ERR_release_err_state_table(LHASH ** hash) (a0)
int ERR_get_next_error_library() ()
const ERR_FNS * ERR_get_implementation() ()
int ERR_set_implementation(const ERR_FNS * fns) (a0)
void EVP_MD_CTX_init(EVP_MD_CTX * ctx) (a0)
int EVP_MD_CTX_cleanup(EVP_MD_CTX * ctx) (a0)
EVP_MD_CTX * EVP_MD_CTX_create() ()
void EVP_MD_CTX_destroy(EVP_MD_CTX * ctx) (a0)
int EVP_MD_CTX_copy_ex(EVP_MD_CTX * out, const EVP_MD_CTX * in) (a0,a1)
int EVP_DigestInit_ex(EVP_MD_CTX * ctx, const EVP_MD * type, ENGINE * impl) (a0,a1,a2)
int EVP_DigestUpdate(EVP_MD_CTX * ctx, const void * d, unsigned int cnt) (a0,a1,d0)
int EVP_DigestFinal_ex(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s) (a0,a1,a2)
int EVP_Digest(void * data, unsigned int count, unsigned char * md, unsigned int * size,
	const EVP_MD * type, ENGINE * impl) (a0,d0,a1,a2,a3,d1)
int EVP_MD_CTX_copy(EVP_MD_CTX * out, const EVP_MD_CTX * in) (a0,a1)
int EVP_DigestInit(EVP_MD_CTX * ctx, const EVP_MD * type) (a0,a1)
int EVP_DigestFinal(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s) (a0,a1,a2)
int EVP_read_pw_string(char * buf, int length, const char * prompt, int verify) (a0,d0,a1,d1)
void EVP_set_pw_prompt(char * prompt) (a0)
char * EVP_get_pw_prompt() ()
int EVP_BytesToKey(const EVP_CIPHER * type, const EVP_MD * md, const unsigned char * salt,
	const unsigned char * data, int datal, int count,
	unsigned char * key, unsigned char * iv) (a0,a1,a2,a3,d0,d1,d2,d3)
int EVP_EncryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher,
	const unsigned char * key, const unsigned char * iv) (a0,a1,a2,a3)
int EVP_EncryptInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl,
	const unsigned char * key, const unsigned char * iv) (a0,a1,a2,a3,d0)
int EVP_EncryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl,
	const unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_EncryptFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_EncryptFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_DecryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher,
	const unsigned char * key, const unsigned char * iv) (a0,a1,a2,a3)
int EVP_DecryptInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl,
	const unsigned char * key, const unsigned char * iv) (a0,a1,a2,a3,d0)
int EVP_DecryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl,
	const unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_DecryptFinal(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_DecryptFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_CipherInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher,
	const unsigned char * key, const unsigned char * iv, int enc) (a0,a1,a2,a3,d0)
int EVP_CipherInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl,
	const unsigned char * key, const unsigned char * iv, int enc) (a0,a1,a2,a3,d0,d1)
int EVP_CipherUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl,
	const unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_CipherFinal(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_CipherFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_SignFinal(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s, EVP_PKEY * pkey) (a0,a1,a2,a3)
int EVP_VerifyFinal(EVP_MD_CTX * ctx, unsigned char * sigbuf, unsigned int siglen,
	EVP_PKEY * pkey) (a0,a1,d0,a2)
int EVP_OpenInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char * ek,
	int ekl, unsigned char * iv, EVP_PKEY * priv) (a0,a1,a2,d0,a3,d1)
int EVP_OpenFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_SealInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char ** ek,
	int * ekl, unsigned char * iv, EVP_PKEY ** pubk, int npubk) (a0,a1,a2,a3,d0,d1,d2)
int EVP_SealFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
void EVP_EncodeInit(EVP_ENCODE_CTX * ctx) (a0)
void EVP_EncodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
void EVP_EncodeFinal(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_EncodeBlock(unsigned char * t, const unsigned char * f, int n) (a0,a1,d0)
void EVP_DecodeInit(EVP_ENCODE_CTX * ctx) (a0)
int EVP_DecodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_DecodeFinal(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_DecodeBlock(unsigned char * t, const unsigned char * f, int n) (a0,a1,d0)
void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX * a) (a0)
int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX * a) (a0)
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX * x, int keylen) (a0,d0)
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX * c, int pad) (a0,d0)
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX * ctx, int type, int arg, void * ptr) (a0,d0,d1,a1)
BIO_METHOD * BIO_f_md() ()
BIO_METHOD * BIO_f_base64() ()
BIO_METHOD * BIO_f_cipher() ()
BIO_METHOD * BIO_f_reliable() ()
void BIO_set_cipher(BIO * b, const EVP_CIPHER * c, unsigned char * k, unsigned char * i,
	int enc) (a0,a1,a2,a3,d0)
const EVP_MD * EVP_md_null() ()
const EVP_MD * EVP_md2() ()
const EVP_MD * EVP_md4() ()
const EVP_MD * EVP_md5() ()
const EVP_MD * EVP_sha() ()
const EVP_MD * EVP_sha1() ()
const EVP_MD * EVP_dss() ()
const EVP_MD * EVP_dss1() ()
const EVP_MD * EVP_mdc2() ()
const EVP_MD * EVP_ripemd160() ()
const EVP_CIPHER * EVP_enc_null() ()
const EVP_CIPHER * EVP_des_ecb() ()
const EVP_CIPHER * EVP_des_ede() ()
const EVP_CIPHER * EVP_des_ede3() ()
const EVP_CIPHER * EVP_des_ede_ecb() ()
const EVP_CIPHER * EVP_des_ede3_ecb() ()
const EVP_CIPHER * EVP_des_cfb64() ()
const EVP_CIPHER * EVP_des_cfb1() ()
const EVP_CIPHER * EVP_des_cfb8() ()
const EVP_CIPHER * EVP_des_ede_cfb64() ()
const EVP_CIPHER * EVP_des_ede3_cfb64() ()
const EVP_CIPHER * EVP_des_ede3_cfb1() ()
const EVP_CIPHER * EVP_des_ede3_cfb8() ()
const EVP_CIPHER * EVP_des_ofb() ()
const EVP_CIPHER * EVP_des_ede_ofb() ()
const EVP_CIPHER * EVP_des_ede3_ofb() ()
const EVP_CIPHER * EVP_des_cbc() ()
const EVP_CIPHER * EVP_des_ede_cbc() ()
const EVP_CIPHER * EVP_des_ede3_cbc() ()
const EVP_CIPHER * EVP_desx_cbc() ()
const EVP_CIPHER * EVP_rc4() ()
const EVP_CIPHER * EVP_rc4_40() ()
const EVP_CIPHER * EVP_idea_ecb() ()
const EVP_CIPHER * EVP_idea_cfb64() ()
const EVP_CIPHER * EVP_idea_ofb() ()
const EVP_CIPHER * EVP_idea_cbc() ()
const EVP_CIPHER * EVP_rc2_ecb() ()
const EVP_CIPHER * EVP_rc2_cbc() ()
const EVP_CIPHER * EVP_rc2_40_cbc() ()
const EVP_CIPHER * EVP_rc2_64_cbc() ()
const EVP_CIPHER * EVP_rc2_cfb64() ()
const EVP_CIPHER * EVP_rc2_ofb() ()
const EVP_CIPHER * EVP_bf_ecb() ()
const EVP_CIPHER * EVP_bf_cbc() ()
const EVP_CIPHER * EVP_bf_cfb64() ()
const EVP_CIPHER * EVP_bf_ofb() ()
const EVP_CIPHER * EVP_cast5_ecb() ()
const EVP_CIPHER * EVP_cast5_cbc() ()
const EVP_CIPHER * EVP_cast5_cfb64() ()
const EVP_CIPHER * EVP_cast5_ofb() ()
const EVP_CIPHER * EVP_rc5_32_12_16_cbc() ()
const EVP_CIPHER * EVP_rc5_32_12_16_ecb() ()
const EVP_CIPHER * EVP_rc5_32_12_16_cfb64() ()
const EVP_CIPHER * EVP_rc5_32_12_16_ofb() ()
const EVP_CIPHER * EVP_aes_128_ecb() ()
const EVP_CIPHER * EVP_aes_128_cbc() ()
const EVP_CIPHER * EVP_aes_128_cfb1() ()
const EVP_CIPHER * EVP_aes_128_cfb8() ()
const EVP_CIPHER * EVP_aes_128_cfb128() ()
const EVP_CIPHER * EVP_aes_128_ofb() ()
const EVP_CIPHER * EVP_aes_192_ecb() ()
const EVP_CIPHER * EVP_aes_192_cbc() ()
const EVP_CIPHER * EVP_aes_192_cfb1() ()
const EVP_CIPHER * EVP_aes_192_cfb8() ()
const EVP_CIPHER * EVP_aes_192_cfb128() ()
const EVP_CIPHER * EVP_aes_192_ofb() ()
const EVP_CIPHER * EVP_aes_256_ecb() ()
const EVP_CIPHER * EVP_aes_256_cbc() ()
const EVP_CIPHER * EVP_aes_256_cfb1() ()
const EVP_CIPHER * EVP_aes_256_cfb8() ()
const EVP_CIPHER * EVP_aes_256_cfb128() ()
const EVP_CIPHER * EVP_aes_256_ofb() ()
void OPENSSL_add_all_algorithms_noconf() ()
void OPENSSL_add_all_algorithms_conf() ()
void OpenSSL_add_all_ciphers() ()
void OpenSSL_add_all_digests() ()
int EVP_add_cipher(const EVP_CIPHER * cipher) (a0)
int EVP_add_digest(const EVP_MD * digest) (a0)
const EVP_CIPHER * EVP_get_cipherbyname(const char * name) (a0)
const EVP_MD * EVP_get_digestbyname(const char * name) (a0)
void EVP_cleanup() ()
int EVP_PKEY_decrypt(unsigned char * dec_key, unsigned char * enc_key, int enc_key_len,
	EVP_PKEY * private_key) (a0,a1,d0,a2)
int EVP_PKEY_encrypt(unsigned char * enc_key, unsigned char * key, int key_len,
	EVP_PKEY * pub_key) (a0,a1,d0,a2)
int EVP_PKEY_type(int type) (d0)
int EVP_PKEY_bits(EVP_PKEY * pkey) (a0)
int EVP_PKEY_size(EVP_PKEY * pkey) (a0)
int EVP_PKEY_assign(EVP_PKEY * pkey, int type, char * key) (a0,d0,a1)
int EVP_PKEY_set1_RSA(EVP_PKEY * pkey, struct rsa_st * key) (a0,a1)
struct rsa_st * EVP_PKEY_get1_RSA(EVP_PKEY * pkey) (a0)
int EVP_PKEY_set1_DSA(EVP_PKEY * pkey, struct dsa_st * key) (a0,a1)
struct dsa_st * EVP_PKEY_get1_DSA(EVP_PKEY * pkey) (a0)
int EVP_PKEY_set1_DH(EVP_PKEY * pkey, struct dh_st * key) (a0,a1)
struct dh_st * EVP_PKEY_get1_DH(EVP_PKEY * pkey) (a0)
EVP_PKEY * EVP_PKEY_new() ()
void EVP_PKEY_free(EVP_PKEY * pkey) (a0)
EVP_PKEY * d2i_PublicKey(int type, EVP_PKEY ** a, unsigned char ** pp, long length) (d0,a0,a1,d1)
int i2d_PublicKey(EVP_PKEY * a, unsigned char ** pp) (a0,a1)
EVP_PKEY * d2i_PrivateKey(int type, EVP_PKEY ** a, unsigned char ** pp, long length) (d0,a0,a1,d1)
EVP_PKEY * d2i_AutoPrivateKey(EVP_PKEY ** a, unsigned char ** pp, long length) (a0,a1,d0)
int i2d_PrivateKey(EVP_PKEY * a, unsigned char ** pp) (a0,a1)
int EVP_PKEY_copy_parameters(EVP_PKEY * to, EVP_PKEY * from) (a0,a1)
int EVP_PKEY_missing_parameters(EVP_PKEY * pkey) (a0)
int EVP_PKEY_save_parameters(EVP_PKEY * pkey, int mode) (a0,d0)
int EVP_PKEY_cmp_parameters(EVP_PKEY * a, EVP_PKEY * b) (a0,a1)
int EVP_CIPHER_type(const EVP_CIPHER * ctx) (a0)
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param,
	const EVP_CIPHER * cipher, const EVP_MD * md, int en_de) (a0,a1,d0,a2,a3,d1,d2)
int PKCS5_PBKDF2_HMAC_SHA1(const char * pass, int passlen, unsigned char * salt, int saltlen,
	int iter, int keylen, unsigned char * out) (a0,d0,a1,d1,d2,d3,a2)
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param,
	const EVP_CIPHER * cipher, const EVP_MD * md, int en_de) (a0,a1,d0,a2,a3,d1,d2)
void PKCS5_PBE_add() ()
int EVP_PBE_CipherInit(ASN1_OBJECT * pbe_obj, const char * pass, int passlen, ASN1_TYPE * param,
	EVP_CIPHER_CTX * ctx, int en_de) (a0,a1,d0,a2,a3,d1)
int EVP_PBE_alg_add(int nid, const EVP_CIPHER * cipher, const EVP_MD * md,
	EVP_PBE_KEYGEN * (*keygen)(struct evp_cipher_ctx_st *ctx, const char *pass, int passlen, struct asn1_type_st *param, struct evp_cipher_st *cipher, struct env_md_st *md, int en_de)) (d0,a0,a1,a2)
void EVP_PBE_cleanup() ()
void ERR_load_EVP_strings() ()
void HMAC_CTX_init(HMAC_CTX * ctx) (a0)
void HMAC_CTX_cleanup(HMAC_CTX * ctx) (a0)
void HMAC_Init(HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md) (a0,a1,d0,a2)
void HMAC_Init_ex(HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md,
	ENGINE * impl) (a0,a1,d0,a2,a3)
void HMAC_Update(HMAC_CTX * ctx, const unsigned char * data, int len) (a0,a1,d0)
void HMAC_Final(HMAC_CTX * ctx, unsigned char * md, unsigned int * len) (a0,a1,a2)
unsigned char * HMAC(const EVP_MD * evp_md, const void * key, int key_len,
	const unsigned char * d, int n, unsigned char * md,
	unsigned int * md_len) (a0,a1,d0,a2,d1,a3,d2)
KRB5_ENCDATA * KRB5_ENCDATA_new() ()
void KRB5_ENCDATA_free(KRB5_ENCDATA * a) (a0)
KRB5_ENCDATA * d2i_KRB5_ENCDATA(KRB5_ENCDATA ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_ENCDATA(KRB5_ENCDATA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_ENCDATA_it() ()
KRB5_PRINCNAME * KRB5_PRINCNAME_new() ()
void KRB5_PRINCNAME_free(KRB5_PRINCNAME * a) (a0)
KRB5_PRINCNAME * d2i_KRB5_PRINCNAME(KRB5_PRINCNAME ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_PRINCNAME(KRB5_PRINCNAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_PRINCNAME_it() ()
KRB5_TKTBODY * KRB5_TKTBODY_new() ()
void KRB5_TKTBODY_free(KRB5_TKTBODY * a) (a0)
KRB5_TKTBODY * d2i_KRB5_TKTBODY(KRB5_TKTBODY ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_TKTBODY(KRB5_TKTBODY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_TKTBODY_it() ()
KRB5_APREQBODY * KRB5_APREQBODY_new() ()
void KRB5_APREQBODY_free(KRB5_APREQBODY * a) (a0)
KRB5_APREQBODY * d2i_KRB5_APREQBODY(KRB5_APREQBODY ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_APREQBODY(KRB5_APREQBODY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_APREQBODY_it() ()
KRB5_TICKET * KRB5_TICKET_new() ()
void KRB5_TICKET_free(KRB5_TICKET * a) (a0)
KRB5_TICKET * d2i_KRB5_TICKET(KRB5_TICKET ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_TICKET(KRB5_TICKET * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_TICKET_it() ()
KRB5_APREQ * KRB5_APREQ_new() ()
void KRB5_APREQ_free(KRB5_APREQ * a) (a0)
KRB5_APREQ * d2i_KRB5_APREQ(KRB5_APREQ ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_APREQ(KRB5_APREQ * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_APREQ_it() ()
KRB5_CHECKSUM * KRB5_CHECKSUM_new() ()
void KRB5_CHECKSUM_free(KRB5_CHECKSUM * a) (a0)
KRB5_CHECKSUM * d2i_KRB5_CHECKSUM(KRB5_CHECKSUM ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_CHECKSUM(KRB5_CHECKSUM * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_CHECKSUM_it() ()
KRB5_ENCKEY * KRB5_ENCKEY_new() ()
void KRB5_ENCKEY_free(KRB5_ENCKEY * a) (a0)
KRB5_ENCKEY * d2i_KRB5_ENCKEY(KRB5_ENCKEY ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_ENCKEY(KRB5_ENCKEY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_ENCKEY_it() ()
KRB5_AUTHDATA * KRB5_AUTHDATA_new() ()
void KRB5_AUTHDATA_free(KRB5_AUTHDATA * a) (a0)
KRB5_AUTHDATA * d2i_KRB5_AUTHDATA(KRB5_AUTHDATA ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_AUTHDATA(KRB5_AUTHDATA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_AUTHDATA_it() ()
KRB5_AUTHENTBODY * KRB5_AUTHENTBODY_new() ()
void KRB5_AUTHENTBODY_free(KRB5_AUTHENTBODY * a) (a0)
KRB5_AUTHENTBODY * d2i_KRB5_AUTHENTBODY(KRB5_AUTHENTBODY ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_AUTHENTBODY(KRB5_AUTHENTBODY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_AUTHENTBODY_it() ()
KRB5_AUTHENT * KRB5_AUTHENT_new() ()
void KRB5_AUTHENT_free(KRB5_AUTHENT * a) (a0)
KRB5_AUTHENT * d2i_KRB5_AUTHENT(KRB5_AUTHENT ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_KRB5_AUTHENT(KRB5_AUTHENT * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * KRB5_AUTHENT_it() ()
LHASH * lh_new(LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c) (d0,d1)
void lh_free(LHASH * lh) (a0)
void * lh_insert(LHASH * lh, const void * data) (a0,a1)
void * lh_delete(LHASH * lh, const void * data) (a0,a1)
void * lh_retrieve(LHASH * lh, const void * data) (a0,a1)
void lh_doall(LHASH * lh, LHASH_DOALL_FN_TYPE func) (a0,d0)
void lh_doall_arg(LHASH * lh, LHASH_DOALL_ARG_FN_TYPE func, void * arg) (a0,d0,a1)
unsigned long lh_strhash(const char * c) (a0)
unsigned long lh_num_items(const LHASH * lh) (a0)
void lh_stats_bio(const LHASH * lh, BIO * out) (a0,a1)
void lh_node_stats_bio(const LHASH * lh, BIO * out) (a0,a1)
void lh_node_usage_stats_bio(const LHASH * lh, BIO * out) (a0,a1)
int OBJ_NAME_init() ()
int OBJ_NAME_new_index(unsigned long (*hash_func)(const char *),
	int (*cmp_func)(const char *, const char *),
	void (*free_func)(const char *, int, const char *)) (a0,a1,a2)
const char * OBJ_NAME_get(const char * name, int type) (a0,d0)
int OBJ_NAME_add(const char * name, int type, const char * data) (a0,d0,a1)
int OBJ_NAME_remove(const char * name, int type) (a0,d0)
void OBJ_NAME_cleanup(int type) (d0)
void OBJ_NAME_do_all(int type, void (*fn)(const OBJ_NAME *, void *arg), void * arg) (d0,a0,a1)
void OBJ_NAME_do_all_sorted(int type, void (*fn)(const OBJ_NAME *, void *arg), void * arg) (d0,a0,a1)
ASN1_OBJECT * OBJ_dup(const ASN1_OBJECT * o) (a0)
ASN1_OBJECT * OBJ_nid2obj(int n) (d0)
const char * OBJ_nid2ln(int n) (d0)
const char * OBJ_nid2sn(int n) (d0)
int OBJ_obj2nid(const ASN1_OBJECT * o) (a0)
ASN1_OBJECT * OBJ_txt2obj(const char * s, int no_name) (a0,d0)
int OBJ_obj2txt(char * buf, int buf_len, const ASN1_OBJECT * a, int no_name) (a0,d0,a1,d1)
int OBJ_txt2nid(const char * s) (a0)
int OBJ_ln2nid(const char * s) (a0)
int OBJ_sn2nid(const char * s) (a0)
int OBJ_cmp(const ASN1_OBJECT * a, const ASN1_OBJECT * b) (a0,a1)
const char * OBJ_bsearch(const char * key, const char * base, int num, int size,
	int (*cmp)(const void *, const void *)) (a0,a1,d0,d1,a2)
int OBJ_new_nid(int num) (d0)
int OBJ_add_object(const ASN1_OBJECT * obj) (a0)
int OBJ_create(const char * oid, const char * sn, const char * ln) (a0,a1,a2)
void OBJ_cleanup() ()
int OBJ_create_objects(BIO * in) (a0)
void ERR_load_OBJ_strings() ()
OCSP_RESPONSE * OCSP_sendreq_bio(BIO * b, char * path, OCSP_REQUEST * req) (a0,a1,a2)
OCSP_CERTID * OCSP_cert_to_id(const EVP_MD * dgst, X509 * subject, X509 * issuer) (a0,a1,a2)
OCSP_CERTID * OCSP_cert_id_new(const EVP_MD * dgst, X509_NAME * issuerName,
	ASN1_BIT_STRING* issuerKey, ASN1_INTEGER * serialNumber) (a0,a1,a2,a3)
OCSP_ONEREQ * OCSP_request_add0_id(OCSP_REQUEST * req, OCSP_CERTID * cid) (a0,a1)
int OCSP_request_add1_nonce(OCSP_REQUEST * req, unsigned char * val, int len) (a0,a1,d0)
int OCSP_basic_add1_nonce(OCSP_BASICRESP * resp, unsigned char * val, int len) (a0,a1,d0)
int OCSP_check_nonce(OCSP_REQUEST * req, OCSP_BASICRESP * bs) (a0,a1)
int OCSP_copy_nonce(OCSP_BASICRESP * resp, OCSP_REQUEST * req) (a0,a1)
int OCSP_request_set1_name(OCSP_REQUEST * req, X509_NAME * nm) (a0,a1)
int OCSP_request_add1_cert(OCSP_REQUEST * req, X509 * cert) (a0,a1)
int OCSP_request_sign(OCSP_REQUEST * req, X509 * signer, EVP_PKEY * key, const EVP_MD * dgst,
	STACK_OF_X509 * certs, unsigned long flags) (a0,a1,a2,a3,d0,d1)
int OCSP_response_status(OCSP_RESPONSE * resp) (a0)
OCSP_BASICRESP * OCSP_response_get1_basic(OCSP_RESPONSE * resp) (a0)
int OCSP_resp_count(OCSP_BASICRESP * bs) (a0)
OCSP_SINGLERESP * OCSP_resp_get0(OCSP_BASICRESP * bs, int idx) (a0,d0)
int OCSP_resp_find(OCSP_BASICRESP * bs, OCSP_CERTID * id, int last) (a0,a1,d0)
int OCSP_single_get0_status(OCSP_SINGLERESP * single, int * reason, ASN1_GENERALIZEDTIME ** revtime,
	ASN1_GENERALIZEDTIME ** thisupd, ASN1_GENERALIZEDTIME ** nextupd) (a0,a1,a2,a3,d0)
int OCSP_resp_find_status(OCSP_BASICRESP * bs, OCSP_CERTID * id, int * status, int * reason,
	ASN1_GENERALIZEDTIME ** revtime, ASN1_GENERALIZEDTIME ** thisupd,
	ASN1_GENERALIZEDTIME ** nextupd) (a0,a1,a2,a3,d0,d1,d2)
int OCSP_check_validity(ASN1_GENERALIZEDTIME * thisupd, ASN1_GENERALIZEDTIME * nextupd, long sec,
	long maxsec) (a0,a1,d0,d1)
int OCSP_request_verify(OCSP_REQUEST * req, STACK_OF_X509 * certs, X509_STORE * store,
	unsigned long flags) (a0,a1,a2,d0)
int OCSP_parse_url(char * url, char ** phost, char ** pport, char ** ppath, int * pssl) (a0,a1,a2,a3,d0)
int OCSP_id_issuer_cmp(OCSP_CERTID * a, OCSP_CERTID * b) (a0,a1)
int OCSP_id_cmp(OCSP_CERTID * a, OCSP_CERTID * b) (a0,a1)
int OCSP_request_onereq_count(OCSP_REQUEST * req) (a0)
OCSP_ONEREQ * OCSP_request_onereq_get0(OCSP_REQUEST * req, int i) (a0,d0)
OCSP_CERTID * OCSP_onereq_get0_id(OCSP_ONEREQ * one) (a0)
int OCSP_id_get0_info(ASN1_OCTET_STRING ** piNameHash, ASN1_OBJECT ** pmd,
	ASN1_OCTET_STRING ** pikeyHash, ASN1_INTEGER ** pserial,
	OCSP_CERTID * cid) (a0,a1,a2,a3,d0)
int OCSP_request_is_signed(OCSP_REQUEST * req) (a0)
OCSP_RESPONSE * OCSP_response_create(int status, OCSP_BASICRESP * bs) (d0,a0)
OCSP_SINGLERESP * OCSP_basic_add1_status(OCSP_BASICRESP * rsp, OCSP_CERTID * cid, int status,
	int reason, ASN1_TIME * revtime, ASN1_TIME * thisupd,
	ASN1_TIME * nextupd) (a0,a1,d0,d1,a2,a3,d2)
int OCSP_basic_add1_cert(OCSP_BASICRESP * resp, X509 * cert) (a0,a1)
int OCSP_basic_sign(OCSP_BASICRESP * brsp, X509 * signer, EVP_PKEY * key,
	const EVP_MD * dgst, STACK_OF_X509 * certs, unsigned long flags) (a0,a1,a2,a3,d0,d1)
ASN1_STRING * ASN1_STRING_encode(ASN1_STRING * s, int (*i2d)(), char * data,
	STACK_OF_ASN1_OBJECT * sk) (a0,a1,a2,a3)
X509_EXTENSION * OCSP_crlID_new(char * url, long * n, char * tim) (a0,a1,a2)
X509_EXTENSION * OCSP_accept_responses_new(char ** oids) (a0)
X509_EXTENSION * OCSP_archive_cutoff_new(char* tim) (a0)
X509_EXTENSION * OCSP_url_svcloc_new(X509_NAME* issuer, char ** urls) (a0,a1)
int OCSP_REQUEST_get_ext_count(OCSP_REQUEST * x) (a0)
int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST * x, int nid, int lastpos) (a0,d0,d1)
int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * OCSP_REQUEST_get_ext(OCSP_REQUEST * x, int loc) (a0,d0)
X509_EXTENSION * OCSP_REQUEST_delete_ext(OCSP_REQUEST * x, int loc) (a0,d0)
void * OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int OCSP_REQUEST_add_ext(OCSP_REQUEST * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ * x) (a0)
int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ * x, int nid, int lastpos) (a0,d0,d1)
int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * OCSP_ONEREQ_get_ext(OCSP_ONEREQ * x, int loc) (a0,d0)
X509_EXTENSION * OCSP_ONEREQ_delete_ext(OCSP_ONEREQ * x, int loc) (a0,d0)
void * OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int OCSP_ONEREQ_add_ext(OCSP_ONEREQ * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP * x) (a0)
int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP * x, int nid, int lastpos) (a0,d0,d1)
int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * OCSP_BASICRESP_get_ext(OCSP_BASICRESP * x, int loc) (a0,d0)
X509_EXTENSION * OCSP_BASICRESP_delete_ext(OCSP_BASICRESP * x, int loc) (a0,d0)
void * OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int OCSP_BASICRESP_add_ext(OCSP_BASICRESP * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP * x) (a0)
int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP * x, int nid, int lastpos) (a0,d0,d1)
int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP * x, int loc) (a0,d0)
X509_EXTENSION * OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP * x, int loc) (a0,d0)
void * OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP * x, int nid, void * value, int crit,
	unsigned long flags) (a0,d0,a1,d1,d2)
int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
OCSP_SINGLERESP * OCSP_SINGLERESP_new() ()
void OCSP_SINGLERESP_free(OCSP_SINGLERESP * a) (a0)
OCSP_SINGLERESP * d2i_OCSP_SINGLERESP(OCSP_SINGLERESP ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_SINGLERESP(OCSP_SINGLERESP * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_SINGLERESP_it() ()
OCSP_CERTSTATUS * OCSP_CERTSTATUS_new() ()
void OCSP_CERTSTATUS_free(OCSP_CERTSTATUS * a) (a0)
OCSP_CERTSTATUS * d2i_OCSP_CERTSTATUS(OCSP_CERTSTATUS ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_CERTSTATUS(OCSP_CERTSTATUS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_CERTSTATUS_it() ()
OCSP_REVOKEDINFO * OCSP_REVOKEDINFO_new() ()
void OCSP_REVOKEDINFO_free(OCSP_REVOKEDINFO * a) (a0)
OCSP_REVOKEDINFO * d2i_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_REVOKEDINFO_it() ()
OCSP_BASICRESP * OCSP_BASICRESP_new() ()
void OCSP_BASICRESP_free(OCSP_BASICRESP * a) (a0)
OCSP_BASICRESP * d2i_OCSP_BASICRESP(OCSP_BASICRESP ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_BASICRESP(OCSP_BASICRESP * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_BASICRESP_it() ()
OCSP_RESPDATA * OCSP_RESPDATA_new() ()
void OCSP_RESPDATA_free(OCSP_RESPDATA * a) (a0)
OCSP_RESPDATA * d2i_OCSP_RESPDATA(OCSP_RESPDATA ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_RESPDATA(OCSP_RESPDATA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_RESPDATA_it() ()
OCSP_RESPID * OCSP_RESPID_new() ()
void OCSP_RESPID_free(OCSP_RESPID * a) (a0)
OCSP_RESPID * d2i_OCSP_RESPID(OCSP_RESPID ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_RESPID(OCSP_RESPID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_RESPID_it() ()
OCSP_RESPONSE * OCSP_RESPONSE_new() ()
void OCSP_RESPONSE_free(OCSP_RESPONSE * a) (a0)
OCSP_RESPONSE * d2i_OCSP_RESPONSE(OCSP_RESPONSE ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_RESPONSE(OCSP_RESPONSE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_RESPONSE_it() ()
OCSP_RESPBYTES * OCSP_RESPBYTES_new() ()
void OCSP_RESPBYTES_free(OCSP_RESPBYTES * a) (a0)
OCSP_RESPBYTES * d2i_OCSP_RESPBYTES(OCSP_RESPBYTES ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_RESPBYTES(OCSP_RESPBYTES * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_RESPBYTES_it() ()
OCSP_ONEREQ * OCSP_ONEREQ_new() ()
void OCSP_ONEREQ_free(OCSP_ONEREQ * a) (a0)
OCSP_ONEREQ * d2i_OCSP_ONEREQ(OCSP_ONEREQ ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_ONEREQ(OCSP_ONEREQ * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_ONEREQ_it() ()
OCSP_CERTID * OCSP_CERTID_new() ()
void OCSP_CERTID_free(OCSP_CERTID * a) (a0)
OCSP_CERTID * d2i_OCSP_CERTID(OCSP_CERTID ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_CERTID(OCSP_CERTID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_CERTID_it() ()
OCSP_REQUEST * OCSP_REQUEST_new() ()
void OCSP_REQUEST_free(OCSP_REQUEST * a) (a0)
OCSP_REQUEST * d2i_OCSP_REQUEST(OCSP_REQUEST ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_REQUEST(OCSP_REQUEST * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_REQUEST_it() ()
OCSP_SIGNATURE * OCSP_SIGNATURE_new() ()
void OCSP_SIGNATURE_free(OCSP_SIGNATURE * a) (a0)
OCSP_SIGNATURE * d2i_OCSP_SIGNATURE(OCSP_SIGNATURE ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_SIGNATURE(OCSP_SIGNATURE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_SIGNATURE_it() ()
OCSP_REQINFO * OCSP_REQINFO_new() ()
void OCSP_REQINFO_free(OCSP_REQINFO * a) (a0)
OCSP_REQINFO * d2i_OCSP_REQINFO(OCSP_REQINFO ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_REQINFO(OCSP_REQINFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_REQINFO_it() ()
OCSP_CRLID * OCSP_CRLID_new() ()
void OCSP_CRLID_free(OCSP_CRLID * a) (a0)
OCSP_CRLID * d2i_OCSP_CRLID(OCSP_CRLID ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_CRLID(OCSP_CRLID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_CRLID_it() ()
OCSP_SERVICELOC * OCSP_SERVICELOC_new() ()
void OCSP_SERVICELOC_free(OCSP_SERVICELOC * a) (a0)
OCSP_SERVICELOC * d2i_OCSP_SERVICELOC(OCSP_SERVICELOC ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_SERVICELOC(OCSP_SERVICELOC * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_SERVICELOC_it() ()
char * OCSP_response_status_str(long s) (d0)
char * OCSP_cert_status_str(long s) (d0)
char * OCSP_crl_reason_str(long s) (d0)
int OCSP_REQUEST_print(BIO * bp, OCSP_REQUEST* a, unsigned long flags) (a0,a1,d0)
int OCSP_RESPONSE_print(BIO * bp, OCSP_RESPONSE* o, unsigned long flags) (a0,a1,d0)
int OCSP_basic_verify(OCSP_BASICRESP * bs, STACK_OF_X509 * certs, X509_STORE * st,
	unsigned long flags) (a0,a1,a2,d0)
void ERR_load_OCSP_strings() ()
int PEM_get_EVP_CIPHER_INFO(char * header, EVP_CIPHER_INFO * cipher) (a0,a1)
int PEM_do_header(EVP_CIPHER_INFO * cipher, unsigned char * data, long * len,
	pem_password_cb * (*callback)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0)
int PEM_read_bio(BIO * bp, char ** name, char ** header, unsigned char ** data,
	long * len) (a0,a1,a2,a3,d0)
int PEM_write_bio(BIO * bp, const char * name, char * hdr, unsigned char * data, long len) (a0,a1,a2,a3,d0)
int PEM_bytes_read_bio(unsigned char ** pdata, long * plen, char ** pnm, const char * name,
	BIO * bp,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
char * PEM_ASN1_read_bio(char * (*d2i)(), const char * name, BIO * bp, char ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1)
int PEM_ASN1_write_bio(int (*i2d)(), const char * name, BIO * bp, char * x,
	const EVP_CIPHER * enc, unsigned char * kstr, int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
STACK_OF_X509_INFO * PEM_X509_INFO_read_bio(BIO * bp, STACK_OF_X509_INFO * sk,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_X509_INFO_write_bio(BIO * bp, X509_INFO * xi, EVP_CIPHER * enc, unsigned char * kstr,
	int klen,
	pem_password_cb * (*cd)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
int PEM_SealInit(PEM_ENCODE_SEAL_CTX * ctx, EVP_CIPHER * type, EVP_MD * md_type,
	unsigned char ** ek, int * ekl, unsigned char * iv,
	EVP_PKEY ** pubk, int npubk) (a0,a1,a2,a3,d0,d1,d2,d3)
void PEM_SealUpdate(PEM_ENCODE_SEAL_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int PEM_SealFinal(PEM_ENCODE_SEAL_CTX * ctx, unsigned char * sig, int * sigl,
	unsigned char * out, int * outl, EVP_PKEY * priv) (a0,a1,a2,a3,d0,d1)
void PEM_SignInit(EVP_MD_CTX * ctx, EVP_MD * type) (a0,a1)
void PEM_SignUpdate(EVP_MD_CTX * ctx, unsigned char * d, unsigned int cnt) (a0,a1,d0)
int PEM_SignFinal(EVP_MD_CTX * ctx, unsigned char * sigret, unsigned int * siglen,
	EVP_PKEY * pkey) (a0,a1,a2,a3)
int PEM_def_callback(char * buf, int num, int w, void * key) (a0,d0,d1,a1)
void PEM_proc_type(char * buf, int type) (a0,d0)
void PEM_dek_info(char * buf, const char * type, int len, char * str) (a0,a1,d0,a2)
X509 * PEM_read_bio_X509(BIO * bp, X509 ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509(BIO * bp, X509 * x) (a0,a1)
X509 * PEM_read_bio_X509_AUX(BIO * bp, X509 ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509_AUX(BIO * bp, X509 * x) (a0,a1)
X509_REQ * PEM_read_bio_X509_REQ(BIO * bp, X509_REQ ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509_REQ(BIO * bp, X509_REQ * x) (a0,a1)
int PEM_write_bio_X509_REQ_NEW(BIO * bp, X509_REQ * x) (a0,a1)
X509_CRL * PEM_read_bio_X509_CRL(BIO * bp, X509_CRL ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509_CRL(BIO * bp, X509_CRL * x) (a0,a1)
PKCS7 * PEM_read_bio_PKCS7(BIO * bp, PKCS7 ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_PKCS7(BIO * bp, PKCS7 * x) (a0,a1)
NETSCAPE_CERT_SEQUENCE * PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO * bp, NETSCAPE_CERT_SEQUENCE ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO * bp, NETSCAPE_CERT_SEQUENCE * x) (a0,a1)
X509_SIG * PEM_read_bio_PKCS8(BIO * bp, X509_SIG ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_PKCS8(BIO * bp, X509_SIG * x) (a0,a1)
PKCS8_PRIV_KEY_INFO * PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO * bp, PKCS8_PRIV_KEY_INFO ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO * bp, PKCS8_PRIV_KEY_INFO * x) (a0,a1)
RSA * PEM_read_bio_RSAPrivateKey(BIO * bp, RSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_RSAPrivateKey(BIO * bp, RSA * x, const EVP_CIPHER * enc, unsigned char * kstr,
	int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
RSA * PEM_read_bio_RSAPublicKey(BIO * bp, RSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_RSAPublicKey(BIO * bp, RSA * x) (a0,a1)
RSA * PEM_read_bio_RSA_PUBKEY(BIO * bp, RSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_RSA_PUBKEY(BIO * bp, RSA * x) (a0,a1)
DSA * PEM_read_bio_DSAPrivateKey(BIO * bp, DSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_DSAPrivateKey(BIO * bp, DSA * x, const EVP_CIPHER * enc, unsigned char * kstr,
	int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
DSA * PEM_read_bio_DSA_PUBKEY(BIO * bp, DSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_DSA_PUBKEY(BIO * bp, DSA * x) (a0,a1)
DSA * PEM_read_bio_DSAparams(BIO * bp, DSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_DSAparams(BIO * bp, DSA * x) (a0,a1)
DH * PEM_read_bio_DHparams(BIO * bp, DH ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_DHparams(BIO * bp, DH * x) (a0,a1)
EVP_PKEY * PEM_read_bio_PrivateKey(BIO * bp, EVP_PKEY ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_PrivateKey(BIO * bp, EVP_PKEY * x, const EVP_CIPHER * enc, unsigned char * kstr,
	int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
EVP_PKEY * PEM_read_bio_PUBKEY(BIO * bp, EVP_PKEY ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_PUBKEY(BIO * bp, EVP_PKEY * x) (a0,a1)
int PEM_write_bio_PKCS8PrivateKey_nid(BIO * bp, EVP_PKEY * x, int nid, char * kstr, int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,d0,a2,d1,a3,d2)
int PEM_write_bio_PKCS8PrivateKey(BIO * a, EVP_PKEY * b, const EVP_CIPHER * c, char * d, int a1,
	pem_password_cb * (*e)(char *buf, int size, int rwflag, void *userdata),
	void * f) (a0,a1,a2,a3,d0,d1,d2)
int i2d_PKCS8PrivateKey_bio(BIO * bp, EVP_PKEY * x, const EVP_CIPHER * enc, char * kstr, int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
int i2d_PKCS8PrivateKey_nid_bio(BIO * bp, EVP_PKEY * x, int nid, char * kstr, int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,d0,a2,d1,a3,d2)
EVP_PKEY * d2i_PKCS8PrivateKey_bio(BIO * bp, EVP_PKEY ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
void ERR_load_PEM_strings() ()
PKCS12_SAFEBAG * PKCS12_x5092certbag(X509 * x509) (a0)
PKCS12_SAFEBAG * PKCS12_x509crl2certbag(X509_CRL * crl) (a0)
X509 * PKCS12_certbag2x509(PKCS12_SAFEBAG * bag) (a0)
X509_CRL * PKCS12_certbag2x509crl(PKCS12_SAFEBAG * bag) (a0)
PKCS12_SAFEBAG * PKCS12_item_pack_safebag(void * obj, const ASN1_ITEM * it, int nid1, int nid2) (a0,a1,d0,d1)
PKCS12_SAFEBAG * PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO * p8) (a0)
PKCS8_PRIV_KEY_INFO * PKCS8_decrypt(X509_SIG * p8, const char * pass, int passlen) (a0,a1,d0)
PKCS8_PRIV_KEY_INFO * PKCS12_decrypt_skey(PKCS12_SAFEBAG * bag, const char * pass, int passlen) (a0,a1,d0)
X509_SIG * PKCS8_encrypt(int pbe_nid, const EVP_CIPHER * cipher, const char * pass,
	int passlen, unsigned char * salt, int saltlen, int iter,
	PKCS8_PRIV_KEY_INFO * p8) (d0,a0,a1,d1,a2,d2,d3,a3)
PKCS12_SAFEBAG * PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char * pass, int passlen,
	unsigned char * salt, int saltlen, int iter,
	PKCS8_PRIV_KEY_INFO * p8) (d0,a0,d1,a1,d2,d3,a2)
PKCS7 * PKCS12_pack_p7data(STACK_OF_PKCS12_SAFEBAG * sk) (a0)
STACK_OF_PKCS12_SAFEBAG * PKCS12_unpack_p7data(PKCS7 * p7) (a0)
PKCS7 * PKCS12_pack_p7encdata(int pbe_nid, const char * pass, int passlen, unsigned char * salt,
	int saltlen, int iter, STACK_OF_PKCS12_SAFEBAG * bags) (d0,a0,d1,a1,d2,d3,a2)
STACK_OF_PKCS12_SAFEBAG * PKCS12_unpack_p7encdata(PKCS7 * p7, const char * pass, int passlen) (a0,a1,d0)
int PKCS12_pack_authsafes(PKCS12 * p12, STACK_OF_PKCS7 * safes) (a0,a1)
STACK_OF_PKCS7 * PKCS12_unpack_authsafes(PKCS12 * p12) (a0)
int PKCS12_add_localkeyid(PKCS12_SAFEBAG * bag, unsigned char * name, int namelen) (a0,a1,d0)
int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG * bag, const char * name, int namelen) (a0,a1,d0)
int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG * bag, const char * name, int namelen) (a0,a1,d0)
int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG * bag, const unsigned char * name, int namelen) (a0,a1,d0)
int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO * p8, int usage) (a0,d0)
ASN1_TYPE * PKCS12_get_attr_gen(STACK_OF_X509_ATTRIBUTE * attrs, int attr_nid) (a0,d0)
char * PKCS12_get_friendlyname(PKCS12_SAFEBAG * bag) (a0)
unsigned char * PKCS12_pbe_crypt(X509_ALGOR * algor, const char * pass, int passlen,
	unsigned char * in, int inlen, unsigned char ** data, int * datalen,
	int en_de) (a0,a1,d0,a2,d1,a3,d2,d3)
void * PKCS12_item_decrypt_d2i(X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass,
	int passlen, ASN1_OCTET_STRING * oct, int zbuf) (a0,a1,a2,d0,a3,d1)
ASN1_OCTET_STRING * PKCS12_item_i2d_encrypt(X509_ALGOR * algor, const ASN1_ITEM * it,
	const char * pass, int passlen, void * obj, int zbuf) (a0,a1,a2,d0,a3,d1)
PKCS12 * PKCS12_init(int mode) (d0)
int PKCS12_key_gen_asc(const char * pass, int passlen, unsigned char * salt, int saltlen,
	int id, int iter, int n, unsigned char * out,
	const EVP_MD * md_type) (a0,d0,a1,d1,d2,d3,d4,a2,a3)
int PKCS12_key_gen_uni(unsigned char * pass, int passlen, unsigned char * salt, int saltlen,
	int id, int iter, int n, unsigned char * out,
	const EVP_MD * md_type) (a0,d0,a1,d1,d2,d3,d4,a2,a3)
int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param,
	const EVP_CIPHER * cipher, const EVP_MD * md_type, int en_de) (a0,a1,d0,a2,a3,d1,d2)
int PKCS12_gen_mac(PKCS12 * p12, const char * pass, int passlen, unsigned char * mac,
	unsigned int * maclen) (a0,a1,d0,a2,a3)
int PKCS12_verify_mac(PKCS12 * p12, const char * pass, int passlen) (a0,a1,d0)
int PKCS12_set_mac(PKCS12 * p12, const char * pass, int passlen, unsigned char * salt,
	int saltlen, int iter, const EVP_MD * md_type) (a0,a1,d0,a2,d1,d2,a3)
int PKCS12_setup_mac(PKCS12 * p12, int iter, unsigned char * salt, int saltlen,
	const EVP_MD * md_type) (a0,d0,a1,d1,a2)
unsigned char * asc2uni(const char * asc, int asclen, unsigned char ** uni,
	int * unilen) (a0,d0,a1,a2)
char * uni2asc(unsigned char * uni, int unilen) (a0,d0)
PKCS12 * PKCS12_new() ()
void PKCS12_free(PKCS12 * a) (a0)
PKCS12 * d2i_PKCS12(PKCS12 ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS12(PKCS12 * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS12_it() ()
PKCS12_MAC_DATA * PKCS12_MAC_DATA_new() ()
void PKCS12_MAC_DATA_free(PKCS12_MAC_DATA * a) (a0)
PKCS12_MAC_DATA * d2i_PKCS12_MAC_DATA(PKCS12_MAC_DATA ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS12_MAC_DATA(PKCS12_MAC_DATA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS12_MAC_DATA_it() ()
PKCS12_SAFEBAG * PKCS12_SAFEBAG_new() ()
void PKCS12_SAFEBAG_free(PKCS12_SAFEBAG * a) (a0)
PKCS12_SAFEBAG * d2i_PKCS12_SAFEBAG(PKCS12_SAFEBAG ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS12_SAFEBAG(PKCS12_SAFEBAG * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS12_SAFEBAG_it() ()
PKCS12_BAGS * PKCS12_BAGS_new() ()
void PKCS12_BAGS_free(PKCS12_BAGS * a) (a0)
PKCS12_BAGS * d2i_PKCS12_BAGS(PKCS12_BAGS ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS12_BAGS(PKCS12_BAGS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS12_BAGS_it() ()
const ASN1_ITEM * PKCS12_SAFEBAGS_it() ()
const ASN1_ITEM * PKCS12_AUTHSAFES_it() ()
void PKCS12_PBE_add() ()
int PKCS12_parse(PKCS12 * p12, const char * pass, EVP_PKEY ** pkey, X509 ** cert,
	STACK_OF_X509 ** ca) (a0,a1,a2,a3,d0)
PKCS12 * PKCS12_create(char * pass, char * name, EVP_PKEY * pkey, X509 * cert,
	STACK_OF_X509 * ca, int nid_key, int nid_cert, int iter,
	int mac_iter, int keytype) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5)
int i2d_PKCS12_bio(BIO * bp, PKCS12 * p12) (a0,a1)
PKCS12 * d2i_PKCS12_bio(BIO * bp, PKCS12 ** p12) (a0,a1)
int PKCS12_newpass(PKCS12 * p12, char * oldpass, char * newpass) (a0,a1,a2)
void ERR_load_PKCS12_strings() ()
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL * data, const EVP_MD * type, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3)
PKCS7 * PKCS7_dup(PKCS7 * p7) (a0)
PKCS7 * d2i_PKCS7_bio(BIO * bp, PKCS7 ** p7) (a0,a1)
int i2d_PKCS7_bio(BIO * bp, PKCS7 * p7) (a0,a1)
PKCS7_ISSUER_AND_SERIAL * PKCS7_ISSUER_AND_SERIAL_new() ()
void PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL * a) (a0)
PKCS7_ISSUER_AND_SERIAL * d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_ISSUER_AND_SERIAL_it() ()
PKCS7_SIGNER_INFO * PKCS7_SIGNER_INFO_new() ()
void PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO * a) (a0)
PKCS7_SIGNER_INFO * d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_SIGNER_INFO_it() ()
PKCS7_RECIP_INFO * PKCS7_RECIP_INFO_new() ()
void PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO * a) (a0)
PKCS7_RECIP_INFO * d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_RECIP_INFO_it() ()
PKCS7_SIGNED * PKCS7_SIGNED_new() ()
void PKCS7_SIGNED_free(PKCS7_SIGNED * a) (a0)
PKCS7_SIGNED * d2i_PKCS7_SIGNED(PKCS7_SIGNED ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_SIGNED(PKCS7_SIGNED * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_SIGNED_it() ()
PKCS7_ENC_CONTENT * PKCS7_ENC_CONTENT_new() ()
void PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT * a) (a0)
PKCS7_ENC_CONTENT * d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_ENC_CONTENT_it() ()
PKCS7_ENVELOPE * PKCS7_ENVELOPE_new() ()
void PKCS7_ENVELOPE_free(PKCS7_ENVELOPE * a) (a0)
PKCS7_ENVELOPE * d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_ENVELOPE(PKCS7_ENVELOPE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_ENVELOPE_it() ()
PKCS7_SIGN_ENVELOPE * PKCS7_SIGN_ENVELOPE_new() ()
void PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE * a) (a0)
PKCS7_SIGN_ENVELOPE * d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_SIGN_ENVELOPE_it() ()
PKCS7_DIGEST * PKCS7_DIGEST_new() ()
void PKCS7_DIGEST_free(PKCS7_DIGEST * a) (a0)
PKCS7_DIGEST * d2i_PKCS7_DIGEST(PKCS7_DIGEST ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_DIGEST(PKCS7_DIGEST * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_DIGEST_it() ()
PKCS7_ENCRYPT * PKCS7_ENCRYPT_new() ()
void PKCS7_ENCRYPT_free(PKCS7_ENCRYPT * a) (a0)
PKCS7_ENCRYPT * d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_ENCRYPT(PKCS7_ENCRYPT * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_ENCRYPT_it() ()
PKCS7 * PKCS7_new() ()
void PKCS7_free(PKCS7 * a) (a0)
PKCS7 * d2i_PKCS7(PKCS7 ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7(PKCS7 * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_it() ()
const ASN1_ITEM * PKCS7_ATTR_SIGN_it() ()
const ASN1_ITEM * PKCS7_ATTR_VERIFY_it() ()
long PKCS7_ctrl(PKCS7 * p7, int cmd, long larg, char * parg) (a0,d0,d1,a1)
int PKCS7_set_type(PKCS7 * p7, int type) (a0,d0)
int PKCS7_set_content(PKCS7 * p7, PKCS7 * p7_data) (a0,a1)
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO * p7i, X509 * x509, EVP_PKEY * pkey,
	const EVP_MD * dgst) (a0,a1,a2,a3)
int PKCS7_add_signer(PKCS7 * p7, PKCS7_SIGNER_INFO * p7i) (a0,a1)
int PKCS7_add_certificate(PKCS7 * p7, X509 * x509) (a0,a1)
int PKCS7_add_crl(PKCS7 * p7, X509_CRL * x509) (a0,a1)
int PKCS7_content_new(PKCS7 * p7, int nid) (a0,d0)
int PKCS7_dataVerify(X509_STORE * cert_store, X509_STORE_CTX * ctx, BIO * bio, PKCS7 * p7,
	PKCS7_SIGNER_INFO * si) (a0,a1,a2,a3,d0)
int PKCS7_signatureVerify(BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si, X509 * x509) (a0,a1,a2,a3)
BIO * PKCS7_dataInit(PKCS7 * p7, BIO * bio) (a0,a1)
int PKCS7_dataFinal(PKCS7 * p7, BIO * bio) (a0,a1)
BIO * PKCS7_dataDecode(PKCS7 * p7, EVP_PKEY * pkey, BIO * in_bio, X509 * pcert) (a0,a1,a2,a3)
PKCS7_SIGNER_INFO * PKCS7_add_signature(PKCS7 * p7, X509 * x509, EVP_PKEY * pkey,
	const EVP_MD * dgst) (a0,a1,a2,a3)
X509 * PKCS7_cert_from_signer_info(PKCS7 * p7, PKCS7_SIGNER_INFO * si) (a0,a1)
STACK_OF_PKCS7_SIGNER_INFO * PKCS7_get_signer_info(PKCS7 * p7) (a0)
PKCS7_RECIP_INFO * PKCS7_add_recipient(PKCS7 * p7, X509 * x509) (a0,a1)
int PKCS7_add_recipient_info(PKCS7 * p7, PKCS7_RECIP_INFO * ri) (a0,a1)
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO * p7i, X509 * x509) (a0,a1)
int PKCS7_set_cipher(PKCS7 * p7, const EVP_CIPHER * cipher) (a0,a1)
PKCS7_ISSUER_AND_SERIAL * PKCS7_get_issuer_and_serial(PKCS7 * p7, int idx) (a0,d0)
ASN1_OCTET_STRING * PKCS7_digest_from_attributes(STACK_OF_X509_ATTRIBUTE * sk) (a0)
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int type, void * data) (a0,d0,d1,a1)
int PKCS7_add_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int atrtype, void * value) (a0,d0,d1,a1)
ASN1_TYPE * PKCS7_get_attribute(PKCS7_SIGNER_INFO * si, int nid) (a0,d0)
ASN1_TYPE * PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO * si, int nid) (a0,d0)
int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO * p7si, STACK_OF_X509_ATTRIBUTE * sk) (a0,a1)
int PKCS7_set_attributes(PKCS7_SIGNER_INFO * p7si, STACK_OF_X509_ATTRIBUTE * sk) (a0,a1)
PKCS7 * PKCS7_sign(X509 * signcert, EVP_PKEY * pkey, STACK_OF_X509 * certs, BIO * data,
	int flags) (a0,a1,a2,a3,d0)
int PKCS7_verify(PKCS7 * p7, STACK_OF_X509 * certs, X509_STORE * store, BIO * indata,
	BIO * out, int flags) (a0,a1,a2,a3,d0,d1)
STACK_OF_X509 * PKCS7_get0_signers(PKCS7 * p7, STACK_OF_X509 * certs, int flags) (a0,a1,d0)
PKCS7 * PKCS7_encrypt(STACK_OF_X509 * certs, BIO * in, const EVP_CIPHER * cipher,
	int flags) (a0,a1,a2,d0)
int PKCS7_decrypt(PKCS7 * p7, EVP_PKEY * pkey, X509 * cert, BIO * data, int flags) (a0,a1,a2,a3,d0)
int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO * si, STACK_OF_X509_ALGOR * cap) (a0,a1)
STACK_OF_X509_ALGOR * PKCS7_get_smimecap(PKCS7_SIGNER_INFO * si) (a0)
int PKCS7_simple_smimecap(STACK_OF_X509_ALGOR * sk, int nid, int arg) (a0,d0,d1)
int SMIME_write_PKCS7(BIO * bio, PKCS7 * p7, BIO * data, int flags) (a0,a1,a2,d0)
PKCS7 * SMIME_read_PKCS7(BIO * bio, BIO ** bcont) (a0,a1)
int SMIME_crlf_copy(BIO * in, BIO * out, int flags) (a0,a1,d0)
int SMIME_text(BIO * in, BIO * out) (a0,a1)
void ERR_load_PKCS7_strings() ()
int RAND_set_rand_method(const RAND_METHOD * meth) (a0)
const RAND_METHOD * RAND_get_rand_method() ()
RAND_METHOD * RAND_SSLeay() ()
void RAND_cleanup() ()
int RAND_bytes(unsigned char * buf, int num) (a0,d0)
int RAND_pseudo_bytes(unsigned char * buf, int num) (a0,d0)
void RAND_seed(const void * buf, int num) (a0,d0)
void RAND_add(const void * buf, int num, float entropy) (a0,d0,d1)
int RAND_load_file(const char * file, long max_bytes) (a0,d0)
int RAND_write_file(const char * file) (a0)
const char * RAND_file_name(char * file, size_t num) (a0,d0)
int RAND_status() ()
int RAND_query_egd_bytes(const char * path, unsigned char * buf, int bytes) (a0,a1,d0)
int RAND_egd(const char * path) (a0)
int RAND_egd_bytes(const char * path, int bytes) (a0,d0)
int RAND_poll() ()
void ERR_load_RAND_strings() ()
void SSL_CTX_set_msg_callback(SSL_CTX * ctx,
	void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)) (a0,a1)
void SSL_set_msg_callback(SSL * ssl,
	void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)) (a0,a1)
struct lhash_st * SSL_CTX_sessions(SSL_CTX * ctx) (a0)
size_t SSL_get_finished(const SSL * s, void * buf, size_t count) (a0,a1,d0)
size_t SSL_get_peer_finished(const SSL * s, void * buf, size_t count) (a0,a1,d0)
BIO_METHOD * BIO_f_ssl() ()
BIO * BIO_new_ssl(SSL_CTX * ctx, int client) (a0,d0)
BIO * BIO_new_ssl_connect(SSL_CTX * ctx) (a0)
BIO * BIO_new_buffer_ssl_connect(SSL_CTX * ctx) (a0)
int BIO_ssl_copy_session_id(BIO * to, BIO * from) (a0,a1)
void BIO_ssl_shutdown(BIO * ssl_bio) (a0)
int SSL_CTX_set_cipher_list(SSL_CTX * a1, const char * str) (a0,a1)
SSL_CTX * SSL_CTX_new(SSL_METHOD * meth) (a0)
void SSL_CTX_free(SSL_CTX * a) (a0)
long SSL_CTX_set_timeout(SSL_CTX * ctx, long t) (a0,d0)
long SSL_CTX_get_timeout(const SSL_CTX * ctx) (a0)
X509_STORE * SSL_CTX_get_cert_store(const SSL_CTX * a) (a0)
void SSL_CTX_set_cert_store(SSL_CTX * a, X509_STORE * b) (a0,a1)
int SSL_want(const SSL * s) (a0)
int SSL_clear(SSL * s) (a0)
void SSL_CTX_flush_sessions(SSL_CTX * ctx, long tm) (a0,d0)
SSL_CIPHER * SSL_get_current_cipher(const SSL * s) (a0)
int SSL_CIPHER_get_bits(const SSL_CIPHER * c, int * alg_bits) (a0,a1)
char * SSL_CIPHER_get_version(const SSL_CIPHER * c) (a0)
const char * SSL_CIPHER_get_name(const SSL_CIPHER * c) (a0)
const char * SSL_CIPHER_get_mac(SSL_CIPHER * cipher) (a0)
const char * SSL_CIPHER_get_encryption(SSL_CIPHER * cipher) (a0)
const char * SSL_CIPHER_get_authentication(SSL_CIPHER * cipher) (a0)
const char * SSL_CIPHER_get_key_exchange(SSL_CIPHER * cipher) (a0)
const char * SSL_CIPHER_get_export(SSL_CIPHER * cipher) (a0)
int SSL_get_fd(const SSL * s) (a0)
int SSL_get_rfd(const SSL * s) (a0)
int SSL_get_wfd(const SSL * s) (a0)
const char * SSL_get_cipher_list(const SSL * s, int n) (a0,d0)
char * SSL_get_shared_ciphers(const SSL * s, char * buf, int len) (a0,a1,d0)
int SSL_get_read_ahead(const SSL * s) (a0)
int SSL_pending(const SSL * s) (a0)
int SSL_set_fd(SSL * s, int fd) (a0,d0)
int SSL_set_rfd(SSL * s, int fd) (a0,d0)
int SSL_set_wfd(SSL * s, int fd) (a0,d0)
void SSL_set_bio(SSL * s, BIO * rbio, BIO * wbio) (a0,a1,a2)
BIO * SSL_get_rbio(const SSL * s) (a0)
BIO * SSL_get_wbio(const SSL * s) (a0)
int SSL_set_cipher_list(SSL * s, const char * str) (a0,a1)
void SSL_set_read_ahead(SSL * s, int yes) (a0,d0)
int SSL_get_verify_mode(const SSL * s) (a0)
int SSL_get_verify_depth(const SSL * s) (a0)
int (*)(int, X509_STORE_CTX *) SSL_get_verify_callback(const SSL * s) (a0)
void SSL_set_verify(SSL * s, int mode, int (*callback)(int ok, X509_STORE_CTX *ctx)) (a0,d0,a1)
void SSL_set_verify_depth(SSL * s, int depth) (a0,d0)
int SSL_use_RSAPrivateKey(SSL * ssl, RSA * rsa) (a0,a1)
int SSL_use_RSAPrivateKey_ASN1(SSL * ssl, unsigned char * d, long len) (a0,a1,d0)
int SSL_use_PrivateKey(SSL * ssl, EVP_PKEY * pkey) (a0,a1)
int SSL_use_PrivateKey_ASN1(int pk, SSL * ssl, unsigned char * d, long len) (d0,a0,a1,d1)
int SSL_use_certificate(SSL * ssl, X509 * x) (a0,a1)
int SSL_use_certificate_ASN1(SSL * ssl, unsigned char * d, int len) (a0,a1,d0)
int SSL_use_RSAPrivateKey_file(SSL * ssl, const char * file, int type) (a0,a1,d0)
int SSL_use_PrivateKey_file(SSL * ssl, const char * file, int type) (a0,a1,d0)
int SSL_use_certificate_file(SSL * ssl, const char * file, int type) (a0,a1,d0)
int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,d0)
int SSL_CTX_use_PrivateKey_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,d0)
int SSL_CTX_use_certificate_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,d0)
int SSL_CTX_use_certificate_chain_file(SSL_CTX * ctx, const char * file) (a0,a1)
STACK_OF_X509_NAME * SSL_load_client_CA_file(const char * file) (a0)
int SSL_add_file_cert_subjects_to_stack(STACK_OF_X509_NAME * stackCAs, const char * file) (a0,a1)
int SSL_add_dir_cert_subjects_to_stack(STACK_OF_X509_NAME * stackCAs, const char * dir) (a0,a1)
void SSL_load_error_strings() ()
const char * SSL_state_string(const SSL * s) (a0)
const char * SSL_rstate_string(const SSL * s) (a0)
const char * SSL_state_string_long(const SSL * s) (a0)
const char * SSL_rstate_string_long(const SSL * s) (a0)
long SSL_SESSION_get_time(const SSL_SESSION * s) (a0)
long SSL_SESSION_set_time(SSL_SESSION * s, long t) (a0,d0)
long SSL_SESSION_get_timeout(const SSL_SESSION * s) (a0)
long SSL_SESSION_set_timeout(SSL_SESSION * s, long t) (a0,d0)
void SSL_copy_session_id(SSL * to, const SSL * from) (a0,a1)
SSL_SESSION * SSL_SESSION_new() ()
unsigned long SSL_SESSION_hash(const SSL_SESSION * a) (a0)
int SSL_SESSION_cmp(const SSL_SESSION * a, const SSL_SESSION * b) (a0,a1)
int SSL_SESSION_print(BIO * fp, const SSL_SESSION * ses) (a0,a1)
void SSL_SESSION_free(SSL_SESSION * ses) (a0)
int i2d_SSL_SESSION(SSL_SESSION * in, unsigned char ** pp) (a0,a1)
int SSL_set_session(SSL * to, SSL_SESSION * session) (a0,a1)
int SSL_CTX_add_session(SSL_CTX * s, SSL_SESSION * c) (a0,a1)
int SSL_CTX_remove_session(SSL_CTX * a1, SSL_SESSION * c) (a0,a1)
int SSL_CTX_set_generate_session_id(SSL_CTX * a, GEN_SESSION_CB b) (a0,d0)
int SSL_set_generate_session_id(SSL * a, GEN_SESSION_CB b) (a0,d0)
int SSL_has_matching_session_id(const SSL * ssl, const unsigned char * id, unsigned int id_len) (a0,a1,d0)
SSL_SESSION * d2i_SSL_SESSION(SSL_SESSION ** a, const unsigned char *const * pp, long length) (a0,a1,d0)
X509 * SSL_get_peer_certificate(const SSL * s) (a0)
STACK_OF_X509 * SSL_get_peer_cert_chain(const SSL * s) (a0)
int SSL_CTX_get_verify_mode(const SSL_CTX * ctx) (a0)
int SSL_CTX_get_verify_depth(const SSL_CTX * ctx) (a0)
int (*)(int, X509_STORE_CTX *) SSL_CTX_get_verify_callback(const SSL_CTX * ctx) (a0)
void SSL_CTX_set_verify(SSL_CTX * ctx, int mode, int (*callback)(int, X509_STORE_CTX *)) (a0,d0,a1)
void SSL_CTX_set_verify_depth(SSL_CTX * ctx, int depth) (a0,d0)
void SSL_CTX_set_cert_verify_callback(SSL_CTX * ctx, int (*cb)(X509_STORE_CTX *, void *), void * arg) (a0,a1,a2)
int SSL_CTX_use_RSAPrivateKey(SSL_CTX * ctx, RSA * rsa) (a0,a1)
int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX * ctx, unsigned char * d, long len) (a0,a1,d0)
int SSL_CTX_use_PrivateKey(SSL_CTX * ctx, EVP_PKEY * pkey) (a0,a1)
int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX * ctx, unsigned char * d, long len) (d0,a0,a1,d1)
int SSL_CTX_use_certificate(SSL_CTX * ctx, X509 * x) (a0,a1)
int SSL_CTX_use_certificate_ASN1(SSL_CTX * ctx, int len, unsigned char * d) (a0,d0,a1)
void SSL_CTX_set_default_passwd_cb(SSL_CTX * ctx,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata)) (a0,a1)
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX * ctx, void * u) (a0,a1)
int SSL_CTX_check_private_key(const SSL_CTX * ctx) (a0)
int SSL_check_private_key(const SSL * ctx) (a0)
int SSL_CTX_set_session_id_context(SSL_CTX * ctx, const unsigned char * sid_ctx, unsigned int sid_ctx_len) (a0,a1,d0)
SSL * SSL_new(SSL_CTX * ctx) (a0)
int SSL_set_session_id_context(SSL * ssl, const unsigned char * sid_ctx, unsigned int sid_ctx_len) (a0,a1,d0)
int SSL_CTX_set_purpose(SSL_CTX * s, int purpose) (a0,d0)
int SSL_set_purpose(SSL * s, int purpose) (a0,d0)
int SSL_CTX_set_trust(SSL_CTX * s, int trust) (a0,d0)
int SSL_set_trust(SSL * s, int trust) (a0,d0)
void SSL_free(SSL * ssl) (a0)
int SSL_accept(SSL * ssl) (a0)
int SSL_connect(SSL * ssl) (a0)
int SSL_read(SSL * ssl, void * buf, int num) (a0,a1,d0)
int SSL_peek(SSL * ssl, void * buf, int num) (a0,a1,d0)
int SSL_write(SSL * ssl, const void * buf, int num) (a0,a1,d0)
long SSL_ctrl(SSL * ssl, int cmd, long larg, void * parg) (a0,d0,d1,a1)
long SSL_callback_ctrl(SSL * a, int a1, void (*b)()) (a0,d0,a1)
long SSL_CTX_ctrl(SSL_CTX * ctx, int cmd, long larg, void * parg) (a0,d0,d1,a1)
long SSL_CTX_callback_ctrl(SSL_CTX * a1, int a2, void (*a3)()) (a0,d0,a1)
int SSL_get_error(const SSL * s, int ret_code) (a0,d0)
const char * SSL_get_version(const SSL * s) (a0)
int SSL_CTX_set_ssl_version(SSL_CTX * ctx, SSL_METHOD * meth) (a0,a1)
SSL_METHOD * SSLv2_method() ()
SSL_METHOD * SSLv2_server_method() ()
SSL_METHOD * SSLv2_client_method() ()
SSL_METHOD * SSLv3_method() ()
SSL_METHOD * SSLv3_server_method() ()
SSL_METHOD * SSLv3_client_method() ()
SSL_METHOD * SSLv23_method() ()
SSL_METHOD * SSLv23_server_method() ()
SSL_METHOD * SSLv23_client_method() ()
SSL_METHOD * TLSv1_method() ()
SSL_METHOD * TLSv1_server_method() ()
SSL_METHOD * TLSv1_client_method() ()
STACK_OF_SSL_CIPHER * SSL_get_ciphers(const SSL * s) (a0)
int SSL_do_handshake(SSL * s) (a0)
int SSL_renegotiate(SSL * s) (a0)
int SSL_renegotiate_pending(SSL * s) (a0)
int SSL_shutdown(SSL * s) (a0)
SSL_METHOD * SSL_get_ssl_method(SSL * s) (a0)
int SSL_set_ssl_method(SSL * s, SSL_METHOD * method) (a0,a1)
const char * SSL_alert_type_string_long(int value) (d0)
const char * SSL_alert_type_string(int value) (d0)
const char * SSL_alert_desc_string_long(int value) (d0)
const char * SSL_alert_desc_string(int value) (d0)
void SSL_set_client_CA_list(SSL * s, STACK_OF_X509_NAME * name_list) (a0,a1)
void SSL_CTX_set_client_CA_list(SSL_CTX * ctx, STACK_OF_X509_NAME * name_list) (a0,a1)
STACK_OF_X509_NAME * SSL_get_client_CA_list(const SSL * s) (a0)
STACK_OF_X509_NAME * SSL_CTX_get_client_CA_list(const SSL_CTX * s) (a0)
int SSL_add_client_CA(SSL * ssl, X509 * x) (a0,a1)
int SSL_CTX_add_client_CA(SSL_CTX * ctx, X509 * x) (a0,a1)
void SSL_set_connect_state(SSL * s) (a0)
void SSL_set_accept_state(SSL * s) (a0)
long SSL_get_default_timeout(const SSL * s) (a0)
int SSL_library_init() ()
char * SSL_CIPHER_description(SSL_CIPHER * a1, char * buf, int size) (a0,a1,d0)
STACK_OF_X509_NAME * SSL_dup_CA_list(STACK_OF_X509_NAME * sk) (a0)
SSL * SSL_dup(SSL * ssl) (a0)
X509 * SSL_get_certificate(const SSL * ssl) (a0)
struct evp_pkey_st * SSL_get_privatekey(SSL * ssl) (a0)
void SSL_CTX_set_quiet_shutdown(SSL_CTX * ctx, int mode) (a0,d0)
int SSL_CTX_get_quiet_shutdown(const SSL_CTX * ctx) (a0)
void SSL_set_quiet_shutdown(SSL * ssl, int mode) (a0,d0)
int SSL_get_quiet_shutdown(const SSL * ssl) (a0)
void SSL_set_shutdown(SSL * ssl, int mode) (a0,d0)
int SSL_get_shutdown(const SSL * ssl) (a0)
int SSL_version(const SSL * ssl) (a0)
int SSL_CTX_set_default_verify_paths(SSL_CTX * ctx) (a0)
int SSL_CTX_load_verify_locations(SSL_CTX * ctx, const char * CAfile, const char * CApath) (a0,a1,a2)
SSL_SESSION * SSL_get_session(const SSL * ssl) (a0)
SSL_SESSION * SSL_get1_session(SSL * ssl) (a0)
SSL_CTX * SSL_get_SSL_CTX(const SSL * ssl) (a0)
void SSL_set_info_callback(SSL * ssl, void (*cb)(const SSL *ssl, int type, int val)) (a0,a1)
void (*)(const SSL *ssl, int type, int val) SSL_get_info_callback(const SSL * ssl) (a0)
int SSL_state(const SSL * ssl) (a0)
void SSL_set_verify_result(SSL * ssl, long v) (a0,d0)
long SSL_get_verify_result(const SSL * ssl) (a0)
int SSL_set_ex_data(SSL * ssl, int idx, void * data) (a0,d0,a1)
void * SSL_get_ex_data(const SSL * ssl, int idx) (a0,d0)
int SSL_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int SSL_SESSION_set_ex_data(SSL_SESSION * ss, int idx, void * data) (a0,d0,a1)
void * SSL_SESSION_get_ex_data(const SSL_SESSION * ss, int idx) (a0,d0)
int SSL_SESSION_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int SSL_CTX_set_ex_data(SSL_CTX * ssl, int idx, void * data) (a0,d0,a1)
void * SSL_CTX_get_ex_data(const SSL_CTX * ssl, int idx) (a0,d0)
int SSL_CTX_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int SSL_get_ex_data_X509_STORE_CTX_idx() ()
void SSL_CTX_set_tmp_rsa_callback(SSL_CTX * ctx, RSA * (*cb)(SSL *ssl, int is_export, int keylength)) (a0,a1)
void SSL_set_tmp_rsa_callback(SSL * ssl, RSA * (*cb)(SSL *ssl, int is_export, int keylength)) (a0,a1)
void SSL_CTX_set_tmp_dh_callback(SSL_CTX * ctx, DH * (*dh)(SSL *ssl, int is_export, int keylength)) (a0,a1)
void SSL_set_tmp_dh_callback(SSL * ssl, DH * (*dh)(SSL *ssl, int is_export, int keylength)) (a0,a1)
int SSL_COMP_add_compression_method(int id, COMP_METHOD * cm) (d0,a0)
void ERR_load_SSL_strings() ()
int sk_num(const STACK * a) (a0)
char * sk_value(const STACK * a, int b) (a0,d0)
char * sk_set(STACK * a, int b, char * c) (a0,d0,a1)
STACK * sk_new(int (*cmp)(const char *const *, const char *const *)) (a0)
STACK * sk_new_null() ()
void sk_free(STACK * a) (a0)
void sk_pop_free(STACK * st, void (*func)(void *)) (a0,a1)
int sk_insert(STACK * sk, char * data, int where) (a0,a1,d0)
char * sk_delete(STACK * st, int loc) (a0,d0)
char * sk_delete_ptr(STACK * st, char * p) (a0,a1)
int sk_find(STACK * st, char * data) (a0,a1)
int sk_push(STACK * st, char * data) (a0,a1)
int sk_unshift(STACK * st, char * data) (a0,a1)
char * sk_shift(STACK * st) (a0)
char * sk_pop(STACK * st) (a0)
void sk_zero(STACK * st) (a0)
int (*)(const char *const *, const char *const *) sk_set_cmp_func(STACK * sk,	int (*c)(const char *const *, const char *const *)) (a0,a1)
STACK * sk_dup(STACK * st) (a0)
void sk_sort(STACK * st) (a0)
int sk_is_sorted(const STACK * st) (a0)
char * ms_time_new() ()
void ms_time_free(char * a) (a0)
void ms_time_get(char * a) (a0)
double ms_time_diff(char * start, char * end) (a0,a1)
int ms_time_cmp(char * ap, char * bp) (a0,a1)
TXT_DB * TXT_DB_read(BIO * in, int num) (a0,d0)
long TXT_DB_write(BIO * out, TXT_DB * db) (a0,a1)
int TXT_DB_create_index(TXT_DB * db, int field, int (*qual)(), LHASH_HASH_FN_TYPE hash,
	LHASH_COMP_FN_TYPE cmp) (a0,d0,a1,d1,d2)
void TXT_DB_free(TXT_DB * db) (a0)
char ** TXT_DB_get_by_index(TXT_DB * db, int idx, char ** value) (a0,d0,a1)
int TXT_DB_insert(TXT_DB * db, char ** value) (a0,a1)
UI * UI_new() ()
UI * UI_new_method(const UI_METHOD * method) (a0)
void UI_free(UI * ui) (a0)
int UI_add_input_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize,
	int maxsize) (a0,a1,d0,a2,d1,d2)
int UI_dup_input_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize,
	int maxsize) (a0,a1,d0,a2,d1,d2)
int UI_add_verify_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize,
	int maxsize, const char * test_buf) (a0,a1,d0,a2,d1,d2,a3)
int UI_dup_verify_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize,
	int maxsize, const char * test_buf) (a0,a1,d0,a2,d1,d2,a3)
int UI_add_input_boolean(UI * ui, const char * prompt, const char * action_desc,
	const char * ok_chars, const char * cancel_chars, int flags,
	char * result_buf) (a0,a1,a2,a3,d0,d1,d2)
int UI_dup_input_boolean(UI * ui, const char * prompt, const char * action_desc,
	const char * ok_chars, const char * cancel_chars, int flags,
	char * result_buf) (a0,a1,a2,a3,d0,d1,d2)
int UI_add_info_string(UI * ui, const char * text) (a0,a1)
int UI_dup_info_string(UI * ui, const char * text) (a0,a1)
int UI_add_error_string(UI * ui, const char * text) (a0,a1)
int UI_dup_error_string(UI * ui, const char * text) (a0,a1)
char * UI_construct_prompt(UI * ui_method, const char * object_desc, const char * object_name) (a0,a1,a2)
void * UI_add_user_data(UI * ui, void * user_data) (a0,a1)
void * UI_get0_user_data(UI * ui) (a0)
const char * UI_get0_result(UI * ui, int i) (a0,d0)
int UI_process(UI * ui) (a0)
int UI_ctrl(UI * ui, int cmd, long i, void * p, void (*f)()) (a0,d0,d1,a1,a2)
int UI_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int UI_set_ex_data(UI * r, int idx, void * arg) (a0,d0,a1)
void * UI_get_ex_data(UI * r, int idx) (a0,d0)
void UI_set_default_method(const UI_METHOD * meth) (a0)
const UI_METHOD * UI_get_default_method() ()
const UI_METHOD * UI_get_method(UI * ui) (a0)
const UI_METHOD * UI_set_method(UI * ui, const UI_METHOD * meth) (a0,a1)
UI_METHOD * UI_OpenSSL() ()
UI_METHOD * UI_create_method(char * name) (a0)
void UI_destroy_method(UI_METHOD * ui_method) (a0)
int UI_method_set_opener(UI_METHOD * method, int (*opener)(UI *ui)) (a0,a1)
int UI_method_set_writer(UI_METHOD * method, int (*writer)(UI *ui, UI_STRING *uis)) (a0,a1)
int UI_method_set_flusher(UI_METHOD * method, int (*flusher)(UI *ui)) (a0,a1)
int UI_method_set_reader(UI_METHOD * method, int (*reader)(UI *ui, UI_STRING *uis)) (a0,a1)
int UI_method_set_closer(UI_METHOD * method, int (*closer)(UI *ui)) (a0,a1)
int (*)(UI*) UI_method_get_opener(UI_METHOD * method) (a0)
int (*)(UI*, UI_STRING*) UI_method_get_writer(UI_METHOD * method) (a0)
int (*)(UI*) UI_method_get_flusher(UI_METHOD * method) (a0)
int (*)(UI*, UI_STRING*) UI_method_get_reader(UI_METHOD * method) (a0)
int (*)(UI*) UI_method_get_closer(UI_METHOD * method) (a0)
enum UI_string_types UI_get_string_type(UI_STRING * uis) (a0)
int UI_get_input_flags(UI_STRING * uis) (a0)
const char * UI_get0_output_string(UI_STRING * uis) (a0)
const char * UI_get0_action_string(UI_STRING * uis) (a0)
const char * UI_get0_result_string(UI_STRING * uis) (a0)
const char * UI_get0_test_string(UI_STRING * uis) (a0)
int UI_get_result_minsize(UI_STRING * uis) (a0)
int UI_get_result_maxsize(UI_STRING * uis) (a0)
int UI_set_result(UI * ui, UI_STRING * uis, const char * result) (a0,a1,a2)
int UI_UTIL_read_pw_string(char * buf, int length, const char * prompt, int verify) (a0,d0,a1,d1)
int UI_UTIL_read_pw(char * buf, char * buff, int size, const char * prompt, int verify) (a0,a1,d0,a2,d1)
void ERR_load_UI_strings() ()
int _ossl_old_des_read_pw_string(char * buf, int length, const char * prompt, int verify) (a0,d0,a1,d1)
int _ossl_old_des_read_pw(char * buf, char * buff, int size, const char * prompt, int verify) (a0,a1,d0,a2,d1)
const char * X509_verify_cert_error_string(long n) (d0)
int X509_verify(X509 * a, EVP_PKEY * r) (a0,a1)
int X509_REQ_verify(X509_REQ * a, EVP_PKEY * r) (a0,a1)
int X509_CRL_verify(X509_CRL * a, EVP_PKEY * r) (a0,a1)
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI * a, EVP_PKEY * r) (a0,a1)
NETSCAPE_SPKI * NETSCAPE_SPKI_b64_decode(const char * str, int len) (a0,d0)
char * NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI * x) (a0)
EVP_PKEY * NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI * x) (a0)
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI * x, EVP_PKEY * pkey) (a0,a1)
int NETSCAPE_SPKI_print(BIO * out, NETSCAPE_SPKI * spki) (a0,a1)
int X509_signature_print(BIO * bp, X509_ALGOR * alg, ASN1_STRING * sig) (a0,a1,a2)
int X509_sign(X509 * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_REQ_sign(X509_REQ * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_CRL_sign(X509_CRL * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_pubkey_digest(const X509 * data, const EVP_MD * type, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3)
int X509_digest(const X509 * data, const EVP_MD * type, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3)
int X509_CRL_digest(const X509_CRL * data, const EVP_MD * type, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3)
int X509_REQ_digest(const X509_REQ * data, const EVP_MD * type, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3)
int X509_NAME_digest(const X509_NAME * data, const EVP_MD * type, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3)
X509 * d2i_X509_bio(BIO * bp, X509 ** x509) (a0,a1)
int i2d_X509_bio(BIO * bp, X509 * x509) (a0,a1)
X509_CRL * d2i_X509_CRL_bio(BIO * bp, X509_CRL ** crl) (a0,a1)
int i2d_X509_CRL_bio(BIO * bp, X509_CRL * crl) (a0,a1)
X509_REQ * d2i_X509_REQ_bio(BIO * bp, X509_REQ ** req) (a0,a1)
int i2d_X509_REQ_bio(BIO * bp, X509_REQ * req) (a0,a1)
RSA * d2i_RSAPrivateKey_bio(BIO * bp, RSA ** rsa) (a0,a1)
int i2d_RSAPrivateKey_bio(BIO * bp, RSA * rsa) (a0,a1)
RSA * d2i_RSAPublicKey_bio(BIO * bp, RSA ** rsa) (a0,a1)
int i2d_RSAPublicKey_bio(BIO * bp, RSA * rsa) (a0,a1)
RSA * d2i_RSA_PUBKEY_bio(BIO * bp, RSA ** rsa) (a0,a1)
int i2d_RSA_PUBKEY_bio(BIO * bp, RSA * rsa) (a0,a1)
DSA * d2i_DSA_PUBKEY_bio(BIO * bp, DSA ** dsa) (a0,a1)
int i2d_DSA_PUBKEY_bio(BIO * bp, DSA * dsa) (a0,a1)
DSA * d2i_DSAPrivateKey_bio(BIO * bp, DSA ** dsa) (a0,a1)
int i2d_DSAPrivateKey_bio(BIO * bp, DSA * dsa) (a0,a1)
X509_SIG * d2i_PKCS8_bio(BIO * bp, X509_SIG ** p8) (a0,a1)
int i2d_PKCS8_bio(BIO * bp, X509_SIG * p8) (a0,a1)
PKCS8_PRIV_KEY_INFO * d2i_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, PKCS8_PRIV_KEY_INFO ** p8inf) (a0,a1)
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, PKCS8_PRIV_KEY_INFO * p8inf) (a0,a1)
int i2d_PKCS8PrivateKeyInfo_bio(BIO * bp, EVP_PKEY * key) (a0,a1)
int i2d_PrivateKey_bio(BIO * bp, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * d2i_PrivateKey_bio(BIO * bp, EVP_PKEY ** a) (a0,a1)
int i2d_PUBKEY_bio(BIO * bp, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * d2i_PUBKEY_bio(BIO * bp, EVP_PKEY ** a) (a0,a1)
X509 * X509_dup(X509 * x509) (a0)
X509_ATTRIBUTE * X509_ATTRIBUTE_dup(X509_ATTRIBUTE * xa) (a0)
X509_EXTENSION * X509_EXTENSION_dup(X509_EXTENSION * ex) (a0)
X509_CRL * X509_CRL_dup(X509_CRL * crl) (a0)
X509_REQ * X509_REQ_dup(X509_REQ * req) (a0)
X509_ALGOR * X509_ALGOR_dup(X509_ALGOR * xn) (a0)
X509_NAME * X509_NAME_dup(X509_NAME * xn) (a0)
X509_NAME_ENTRY * X509_NAME_ENTRY_dup(X509_NAME_ENTRY * ne) (a0)
int X509_cmp_time(ASN1_TIME * s, time_t * t) (a0,a1)
int X509_cmp_current_time(ASN1_TIME * s) (a0)
ASN1_TIME * X509_time_adj(ASN1_TIME * s, long adj, time_t * t) (a0,d0,a1)
ASN1_TIME * X509_gmtime_adj(ASN1_TIME * s, long adj) (a0,d0)
const char * X509_get_default_cert_area() ()
const char * X509_get_default_cert_dir() ()
const char * X509_get_default_cert_file() ()
const char * X509_get_default_cert_dir_env() ()
const char * X509_get_default_cert_file_env() ()
const char * X509_get_default_private_dir() ()
X509_REQ * X509_to_X509_REQ(X509 * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
X509 * X509_REQ_to_X509(X509_REQ * r, int days, EVP_PKEY * pkey) (a0,d0,a1)
X509_ALGOR * X509_ALGOR_new() ()
void X509_ALGOR_free(X509_ALGOR * a) (a0)
X509_ALGOR * d2i_X509_ALGOR(X509_ALGOR ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_ALGOR(X509_ALGOR * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_ALGOR_it() ()
X509_VAL * X509_VAL_new() ()
void X509_VAL_free(X509_VAL * a) (a0)
X509_VAL * d2i_X509_VAL(X509_VAL ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_VAL(X509_VAL * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_VAL_it() ()
X509_PUBKEY * X509_PUBKEY_new() ()
void X509_PUBKEY_free(X509_PUBKEY * a) (a0)
X509_PUBKEY * d2i_X509_PUBKEY(X509_PUBKEY ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_PUBKEY(X509_PUBKEY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_PUBKEY_it() ()
int X509_PUBKEY_set(X509_PUBKEY ** x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_PUBKEY_get(X509_PUBKEY * key) (a0)
int X509_get_pubkey_parameters(EVP_PKEY * pkey, STACK_OF_X509 * chain) (a0,a1)
int i2d_PUBKEY(EVP_PKEY * a, unsigned char ** pp) (a0,a1)
EVP_PKEY * d2i_PUBKEY(EVP_PKEY ** a, unsigned char ** pp, long length) (a0,a1,d0)
int i2d_RSA_PUBKEY(RSA * a, unsigned char ** pp) (a0,a1)
RSA * d2i_RSA_PUBKEY(RSA ** a, unsigned char ** pp, long length) (a0,a1,d0)
int i2d_DSA_PUBKEY(DSA * a, unsigned char ** pp) (a0,a1)
DSA * d2i_DSA_PUBKEY(DSA ** a, unsigned char ** pp, long length) (a0,a1,d0)
X509_SIG * X509_SIG_new() ()
void X509_SIG_free(X509_SIG * a) (a0)
X509_SIG * d2i_X509_SIG(X509_SIG ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_SIG(X509_SIG * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_SIG_it() ()
X509_REQ_INFO * X509_REQ_INFO_new() ()
void X509_REQ_INFO_free(X509_REQ_INFO * a) (a0)
X509_REQ_INFO * d2i_X509_REQ_INFO(X509_REQ_INFO ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_REQ_INFO(X509_REQ_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_REQ_INFO_it() ()
X509_REQ * X509_REQ_new() ()
void X509_REQ_free(X509_REQ * a) (a0)
X509_REQ * d2i_X509_REQ(X509_REQ ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_REQ(X509_REQ * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_REQ_it() ()
X509_ATTRIBUTE * X509_ATTRIBUTE_new() ()
void X509_ATTRIBUTE_free(X509_ATTRIBUTE * a) (a0)
X509_ATTRIBUTE * d2i_X509_ATTRIBUTE(X509_ATTRIBUTE ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_ATTRIBUTE(X509_ATTRIBUTE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_ATTRIBUTE_it() ()
X509_ATTRIBUTE * X509_ATTRIBUTE_create(int nid, int atrtype, void * value) (d0,d1,a0)
X509_EXTENSION * X509_EXTENSION_new() ()
void X509_EXTENSION_free(X509_EXTENSION * a) (a0)
X509_EXTENSION * d2i_X509_EXTENSION(X509_EXTENSION ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_EXTENSION(X509_EXTENSION * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_EXTENSION_it() ()
X509_NAME_ENTRY * X509_NAME_ENTRY_new() ()
void X509_NAME_ENTRY_free(X509_NAME_ENTRY * a) (a0)
X509_NAME_ENTRY * d2i_X509_NAME_ENTRY(X509_NAME_ENTRY ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_NAME_ENTRY(X509_NAME_ENTRY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_NAME_ENTRY_it() ()
X509_NAME * X509_NAME_new() ()
void X509_NAME_free(X509_NAME * a) (a0)
X509_NAME * d2i_X509_NAME(X509_NAME ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_NAME(X509_NAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_NAME_it() ()
int X509_NAME_set(X509_NAME ** xn, X509_NAME * name) (a0,a1)
X509_CINF * X509_CINF_new() ()
void X509_CINF_free(X509_CINF * a) (a0)
X509_CINF * d2i_X509_CINF(X509_CINF ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_CINF(X509_CINF * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_CINF_it() ()
X509 * X509_new() ()
void X509_free(X509 * a) (a0)
X509 * d2i_X509(X509 ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509(X509 * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_it() ()
X509_CERT_AUX * X509_CERT_AUX_new() ()
void X509_CERT_AUX_free(X509_CERT_AUX * a) (a0)
X509_CERT_AUX * d2i_X509_CERT_AUX(X509_CERT_AUX ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_CERT_AUX(X509_CERT_AUX * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_CERT_AUX_it() ()
int X509_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int X509_set_ex_data(X509 * r, int idx, void * arg) (a0,d0,a1)
void * X509_get_ex_data(X509 * r, int idx) (a0,d0)
int i2d_X509_AUX(X509 * a, unsigned char ** pp) (a0,a1)
X509 * d2i_X509_AUX(X509 ** a, unsigned char ** pp, long length) (a0,a1,d0)
int X509_alias_set1(X509 * x, unsigned char * name, int len) (a0,a1,d0)
int X509_keyid_set1(X509 * x, unsigned char * id, int len) (a0,a1,d0)
unsigned char * X509_alias_get0(X509 * x, int * len) (a0,a1)
int (*)(int, X509 *, int) X509_TRUST_set_default(int (*trust)(int, X509 *, int)) (a0)
int X509_TRUST_set(int * t, int trust) (a0,d0)
int X509_add1_trust_object(X509 * x, ASN1_OBJECT * obj) (a0,a1)
int X509_add1_reject_object(X509 * x, ASN1_OBJECT * obj) (a0,a1)
void X509_trust_clear(X509 * x) (a0)
void X509_reject_clear(X509 * x) (a0)
X509_REVOKED * X509_REVOKED_new() ()
void X509_REVOKED_free(X509_REVOKED * a) (a0)
X509_REVOKED * d2i_X509_REVOKED(X509_REVOKED ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_REVOKED(X509_REVOKED * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_REVOKED_it() ()
X509_CRL_INFO * X509_CRL_INFO_new() ()
void X509_CRL_INFO_free(X509_CRL_INFO * a) (a0)
X509_CRL_INFO * d2i_X509_CRL_INFO(X509_CRL_INFO ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_CRL_INFO(X509_CRL_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_CRL_INFO_it() ()
X509_CRL * X509_CRL_new() ()
void X509_CRL_free(X509_CRL * a) (a0)
X509_CRL * d2i_X509_CRL(X509_CRL ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_CRL(X509_CRL * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_CRL_it() ()
int X509_CRL_add0_revoked(X509_CRL * crl, X509_REVOKED * rev) (a0,a1)
X509_PKEY * X509_PKEY_new() ()
void X509_PKEY_free(X509_PKEY * a) (a0)
int i2d_X509_PKEY(X509_PKEY * a, unsigned char ** pp) (a0,a1)
X509_PKEY * d2i_X509_PKEY(X509_PKEY ** a, unsigned char ** pp, long length) (a0,a1,d0)
NETSCAPE_SPKI * NETSCAPE_SPKI_new() ()
void NETSCAPE_SPKI_free(NETSCAPE_SPKI * a) (a0)
NETSCAPE_SPKI * d2i_NETSCAPE_SPKI(NETSCAPE_SPKI ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_NETSCAPE_SPKI(NETSCAPE_SPKI * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * NETSCAPE_SPKI_it() ()
NETSCAPE_SPKAC * NETSCAPE_SPKAC_new() ()
void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC * a) (a0)
NETSCAPE_SPKAC * d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * NETSCAPE_SPKAC_it() ()
NETSCAPE_CERT_SEQUENCE * NETSCAPE_CERT_SEQUENCE_new() ()
void NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE * a) (a0)
NETSCAPE_CERT_SEQUENCE * d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * NETSCAPE_CERT_SEQUENCE_it() ()
X509_INFO * X509_INFO_new() ()
void X509_INFO_free(X509_INFO * a) (a0)
char * X509_NAME_oneline(X509_NAME * a, char * buf, int size) (a0,a1,d0)
int ASN1_verify(int (*i2d)(), X509_ALGOR * algor1, ASN1_BIT_STRING * signature,
	char * data, EVP_PKEY * pkey) (a0,a1,a2,a3,d0)
int ASN1_digest(int (*i2d)(), const EVP_MD * type, char * data, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3,d0)
int ASN1_sign(int (*i2d)(), X509_ALGOR * algor1, X509_ALGOR * algor2,
	ASN1_BIT_STRING * signature, char * data, EVP_PKEY * pkey,
	const EVP_MD * type) (a0,a1,a2,a3,d0,d1,d2)
int ASN1_item_digest(const ASN1_ITEM * it, const EVP_MD * type, void * data,
	unsigned char * md, unsigned int * len) (a0,a1,a2,a3,d0)
int ASN1_item_verify(const ASN1_ITEM * it, X509_ALGOR * algor1, ASN1_BIT_STRING * signature,
	void * data, EVP_PKEY * pkey) (a0,a1,a2,a3,d0)
int ASN1_item_sign(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2,
	ASN1_BIT_STRING * signature, void * data, EVP_PKEY * pkey,
	const EVP_MD * type) (a0,a1,a2,a3,d0,d1,d2)
int X509_set_version(X509 * x, long version) (a0,d0)
int X509_set_serialNumber(X509 * x, ASN1_INTEGER * serial) (a0,a1)
ASN1_INTEGER * X509_get_serialNumber(X509 * x) (a0)
int X509_set_issuer_name(X509 * x, X509_NAME * name) (a0,a1)
X509_NAME * X509_get_issuer_name(X509 * a) (a0)
int X509_set_subject_name(X509 * x, X509_NAME * name) (a0,a1)
X509_NAME * X509_get_subject_name(X509 * a) (a0)
int X509_set_notBefore(X509 * x, ASN1_TIME * tm) (a0,a1)
int X509_set_notAfter(X509 * x, ASN1_TIME * tm) (a0,a1)
int X509_set_pubkey(X509 * x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_get_pubkey(X509 * x) (a0)
ASN1_BIT_STRING * X509_get0_pubkey_bitstr(const X509 * x) (a0)
int X509_certificate_type(X509 * x, EVP_PKEY * pubkey) (a0,a1)
int X509_REQ_set_version(X509_REQ * x, long version) (a0,d0)
int X509_REQ_set_subject_name(X509_REQ * req, X509_NAME * name) (a0,a1)
int X509_REQ_set_pubkey(X509_REQ * x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_REQ_get_pubkey(X509_REQ * req) (a0)
int X509_REQ_extension_nid(int nid) (d0)
int * X509_REQ_get_extension_nids() ()
void X509_REQ_set_extension_nids(int * nids) (a0)
STACK_OF_X509_EXTENSION * X509_REQ_get_extensions(X509_REQ * req) (a0)
int X509_REQ_add_extensions_nid(X509_REQ * req, STACK_OF_X509_EXTENSION * exts, int nid) (a0,a1,d0)
int X509_REQ_add_extensions(X509_REQ * req, STACK_OF_X509_EXTENSION * exts) (a0,a1)
int X509_REQ_get_attr_count(const X509_REQ * req) (a0)
int X509_REQ_get_attr_by_NID(const X509_REQ * req, int nid, int lastpos) (a0,d0,d1)
int X509_REQ_get_attr_by_OBJ(const X509_REQ * req, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
X509_ATTRIBUTE * X509_REQ_get_attr(const X509_REQ * req, int loc) (a0,d0)
X509_ATTRIBUTE * X509_REQ_delete_attr(X509_REQ * req, int loc) (a0,d0)
int X509_REQ_add1_attr(X509_REQ * req, X509_ATTRIBUTE * attr) (a0,a1)
int X509_REQ_add1_attr_by_OBJ(X509_REQ * req, const ASN1_OBJECT * obj, int type,
	const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_REQ_add1_attr_by_NID(X509_REQ * req, int nid, int type, const unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
int X509_REQ_add1_attr_by_txt(X509_REQ * req, const char * attrname, int type,
	const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_CRL_set_version(X509_CRL * x, long version) (a0,d0)
int X509_CRL_set_issuer_name(X509_CRL * x, X509_NAME * name) (a0,a1)
int X509_CRL_set_lastUpdate(X509_CRL * x, ASN1_TIME * tm) (a0,a1)
int X509_CRL_set_nextUpdate(X509_CRL * x, ASN1_TIME * tm) (a0,a1)
int X509_CRL_sort(X509_CRL * crl) (a0)
int X509_REVOKED_set_serialNumber(X509_REVOKED * x, ASN1_INTEGER * serial) (a0,a1)
int X509_REVOKED_set_revocationDate(X509_REVOKED * r, ASN1_TIME * tm) (a0,a1)
int X509_check_private_key(X509 * x509, EVP_PKEY * pkey) (a0,a1)
int X509_issuer_and_serial_cmp(const X509 * a, const X509 * b) (a0,a1)
unsigned long X509_issuer_and_serial_hash(X509 * a) (a0)
int X509_issuer_name_cmp(const X509 * a, const X509 * b) (a0,a1)
unsigned long X509_issuer_name_hash(X509 * a) (a0)
int X509_subject_name_cmp(const X509 * a, const X509 * b) (a0,a1)
unsigned long X509_subject_name_hash(X509 * x) (a0)
int X509_cmp(const X509 * a, const X509 * b) (a0,a1)
int X509_NAME_cmp(const X509_NAME * a, const X509_NAME * b) (a0,a1)
unsigned long X509_NAME_hash(X509_NAME * x) (a0)
int X509_CRL_cmp(const X509_CRL * a, const X509_CRL * b) (a0,a1)
int X509_NAME_print(BIO * bp, X509_NAME * name, int obase) (a0,a1,d0)
int X509_NAME_print_ex(BIO * out, X509_NAME * nm, int indent, unsigned long flags) (a0,a1,d0,d1)
int X509_print_ex(BIO * bp, X509 * x, unsigned long nmflag, unsigned long cflag) (a0,a1,d0,d1)
int X509_print(BIO * bp, X509 * x) (a0,a1)
int X509_ocspid_print(BIO * bp, X509 * x) (a0,a1)
int X509_CERT_AUX_print(BIO * bp, X509_CERT_AUX * x, int indent) (a0,a1,d0)
int X509_CRL_print(BIO * bp, X509_CRL * x) (a0,a1)
int X509_REQ_print_ex(BIO * bp, X509_REQ * x, unsigned long nmflag, unsigned long cflag) (a0,a1,d0,d1)
int X509_REQ_print(BIO * bp, X509_REQ * req) (a0,a1)
int X509_NAME_entry_count(X509_NAME * name) (a0)
int X509_NAME_get_text_by_NID(X509_NAME * name, int nid, char * buf, int len) (a0,d0,a1,d1)
int X509_NAME_get_text_by_OBJ(X509_NAME * name, ASN1_OBJECT * obj, char * buf, int len) (a0,a1,a2,d0)
int X509_NAME_get_index_by_NID(X509_NAME * name, int nid, int lastpos) (a0,d0,d1)
int X509_NAME_get_index_by_OBJ(X509_NAME * name, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
X509_NAME_ENTRY * X509_NAME_get_entry(X509_NAME * name, int loc) (a0,d0)
X509_NAME_ENTRY * X509_NAME_delete_entry(X509_NAME * name, int loc) (a0,d0)
int X509_NAME_add_entry(X509_NAME * name, X509_NAME_ENTRY * ne, int loc, int set) (a0,a1,d0,d1)
int X509_NAME_add_entry_by_OBJ(X509_NAME * name, ASN1_OBJECT * obj, int type, unsigned char * bytes,
	int len, int loc, int set) (a0,a1,d0,a2,d1,d2,d3)
int X509_NAME_add_entry_by_NID(X509_NAME * name, int nid, int type, unsigned char * bytes, int len,
	int loc, int set) (a0,d0,d1,a1,d2,d3,d4)
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY ** ne, const char * field, int type,
	const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY ** ne, int nid, int type,
	unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
int X509_NAME_add_entry_by_txt(X509_NAME * name, const char * field, int type,
	const unsigned char * bytes, int len, int loc, int set) (a0,a1,d0,a2,d1,d2,d3)
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY ** ne, ASN1_OBJECT * obj, int type,
	const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY * ne, ASN1_OBJECT * obj) (a0,a1)
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY * ne, int type, const unsigned char * bytes, int len) (a0,d0,a1,d1)
ASN1_OBJECT * X509_NAME_ENTRY_get_object(X509_NAME_ENTRY * ne) (a0)
ASN1_STRING * X509_NAME_ENTRY_get_data(X509_NAME_ENTRY * ne) (a0)
int X509v3_get_ext_count(const STACK_OF_X509_EXTENSION * x) (a0)
int X509v3_get_ext_by_NID(const STACK_OF_X509_EXTENSION * x, int nid, int lastpos) (a0,d0,d1)
int X509v3_get_ext_by_OBJ(const STACK_OF_X509_EXTENSION * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int X509v3_get_ext_by_critical(const STACK_OF_X509_EXTENSION * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * X509v3_get_ext(const STACK_OF_X509_EXTENSION * x, int loc) (a0,d0)
X509_EXTENSION * X509v3_delete_ext(STACK_OF_X509_EXTENSION * x, int loc) (a0,d0)
STACK_OF_X509_EXTENSION * X509v3_add_ext(STACK_OF_X509_EXTENSION ** x,
	X509_EXTENSION * ex, int loc) (a0,a1,d0)
int X509_get_ext_count(X509 * x) (a0)
int X509_get_ext_by_NID(X509 * x, int nid, int lastpos) (a0,d0,d1)
int X509_get_ext_by_OBJ(X509 * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int X509_get_ext_by_critical(X509 * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * X509_get_ext(X509 * x, int loc) (a0,d0)
X509_EXTENSION * X509_delete_ext(X509 * x, int loc) (a0,d0)
int X509_add_ext(X509 * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
void * X509_get_ext_d2i(X509 * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int X509_add1_ext_i2d(X509 * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int X509_CRL_get_ext_count(X509_CRL * x) (a0)
int X509_CRL_get_ext_by_NID(X509_CRL * x, int nid, int lastpos) (a0,d0,d1)
int X509_CRL_get_ext_by_OBJ(X509_CRL * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int X509_CRL_get_ext_by_critical(X509_CRL * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * X509_CRL_get_ext(X509_CRL * x, int loc) (a0,d0)
X509_EXTENSION * X509_CRL_delete_ext(X509_CRL * x, int loc) (a0,d0)
int X509_CRL_add_ext(X509_CRL * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
void * X509_CRL_get_ext_d2i(X509_CRL * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int X509_CRL_add1_ext_i2d(X509_CRL * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int X509_REVOKED_get_ext_count(X509_REVOKED * x) (a0)
int X509_REVOKED_get_ext_by_NID(X509_REVOKED * x, int nid, int lastpos) (a0,d0,d1)
int X509_REVOKED_get_ext_by_OBJ(X509_REVOKED * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int X509_REVOKED_get_ext_by_critical(X509_REVOKED * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * X509_REVOKED_get_ext(X509_REVOKED * x, int loc) (a0,d0)
X509_EXTENSION * X509_REVOKED_delete_ext(X509_REVOKED * x, int loc) (a0,d0)
int X509_REVOKED_add_ext(X509_REVOKED * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
void * X509_REVOKED_get_ext_d2i(X509_REVOKED * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int X509_REVOKED_add1_ext_i2d(X509_REVOKED * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
X509_EXTENSION * X509_EXTENSION_create_by_NID(X509_EXTENSION ** ex, int nid, int crit,
	ASN1_OCTET_STRING * data) (a0,d0,d1,a1)
X509_EXTENSION * X509_EXTENSION_create_by_OBJ(X509_EXTENSION ** ex, ASN1_OBJECT * obj, int crit,
	ASN1_OCTET_STRING * data) (a0,a1,d0,a2)
int X509_EXTENSION_set_object(X509_EXTENSION * ex, ASN1_OBJECT * obj) (a0,a1)
int X509_EXTENSION_set_critical(X509_EXTENSION * ex, int crit) (a0,d0)
int X509_EXTENSION_set_data(X509_EXTENSION * ex, ASN1_OCTET_STRING * data) (a0,a1)
ASN1_OBJECT * X509_EXTENSION_get_object(X509_EXTENSION * ex) (a0)
ASN1_OCTET_STRING * X509_EXTENSION_get_data(X509_EXTENSION * ne) (a0)
int X509_EXTENSION_get_critical(X509_EXTENSION * ex) (a0)
int X509at_get_attr_count(const STACK_OF_X509_ATTRIBUTE * x) (a0)
int X509at_get_attr_by_NID(const STACK_OF_X509_ATTRIBUTE * x, int nid, int lastpos) (a0,d0,d1)
int X509at_get_attr_by_OBJ(const STACK_OF_X509_ATTRIBUTE * sk, ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
X509_ATTRIBUTE * X509at_get_attr(const STACK_OF_X509_ATTRIBUTE * x, int loc) (a0,d0)
X509_ATTRIBUTE * X509at_delete_attr(STACK_OF_X509_ATTRIBUTE * x, int loc) (a0,d0)
STACK_OF_X509_ATTRIBUTE * X509at_add1_attr(STACK_OF_X509_ATTRIBUTE ** x,
	X509_ATTRIBUTE * attr) (a0,a1)
STACK_OF_X509_ATTRIBUTE * X509at_add1_attr_by_OBJ(STACK_OF_X509_ATTRIBUTE ** x,
	const ASN1_OBJECT * obj, int type, const unsigned char * bytes,
	int len) (a0,a1,d0,a2,d1)
STACK_OF_X509_ATTRIBUTE * X509at_add1_attr_by_NID(STACK_OF_X509_ATTRIBUTE ** x, int nid, int type,
	const unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
STACK_OF_X509_ATTRIBUTE * X509at_add1_attr_by_txt(STACK_OF_X509_ATTRIBUTE ** x,
	const char * attrname, int type, const unsigned char * bytes,
	int len) (a0,a1,d0,a2,d1)
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE ** attr, int nid, int atrtype,
	const void * data, int len) (a0,d0,d1,a1,d2)
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE ** attr, const ASN1_OBJECT * obj,
	int atrtype, const void * data, int len) (a0,a1,d0,a2,d1)
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE ** attr, const char * atrname, int type,
	const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE * attr, const ASN1_OBJECT * obj) (a0,a1)
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE * attr, int attrtype, const void * data, int len) (a0,d0,a1,d1)
void * X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE * attr, int idx, int atrtype, void * data) (a0,d0,d1,a1)
int X509_ATTRIBUTE_count(X509_ATTRIBUTE * attr) (a0)
ASN1_OBJECT * X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE * attr) (a0)
ASN1_TYPE * X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE * attr, int idx) (a0,d0)
int X509_verify_cert(X509_STORE_CTX * ctx) (a0)
X509 * X509_find_by_issuer_and_serial(STACK_OF_X509 * sk, X509_NAME * name, ASN1_INTEGER * serial) (a0,a1,a2)
X509 * X509_find_by_subject(STACK_OF_X509 * sk, X509_NAME * name) (a0,a1)
PBEPARAM * PBEPARAM_new() ()
void PBEPARAM_free(PBEPARAM * a) (a0)
PBEPARAM * d2i_PBEPARAM(PBEPARAM ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PBEPARAM(PBEPARAM * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PBEPARAM_it() ()
PBE2PARAM * PBE2PARAM_new() ()
void PBE2PARAM_free(PBE2PARAM * a) (a0)
PBE2PARAM * d2i_PBE2PARAM(PBE2PARAM ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PBE2PARAM(PBE2PARAM * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PBE2PARAM_it() ()
PBKDF2PARAM * PBKDF2PARAM_new() ()
void PBKDF2PARAM_free(PBKDF2PARAM * a) (a0)
PBKDF2PARAM * d2i_PBKDF2PARAM(PBKDF2PARAM ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PBKDF2PARAM(PBKDF2PARAM * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PBKDF2PARAM_it() ()
X509_ALGOR * PKCS5_pbe_set(int alg, int iter, unsigned char * salt, int saltlen) (d0,d1,a0,d2)
X509_ALGOR * PKCS5_pbe2_set(const EVP_CIPHER * cipher, int iter, unsigned char * salt,
	int saltlen) (a0,d0,a1,d1)
PKCS8_PRIV_KEY_INFO * PKCS8_PRIV_KEY_INFO_new() ()
void PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO * a) (a0)
PKCS8_PRIV_KEY_INFO * d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS8_PRIV_KEY_INFO_it() ()
EVP_PKEY * EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO * p8) (a0)
PKCS8_PRIV_KEY_INFO * EVP_PKEY2PKCS8(EVP_PKEY * pkey) (a0)
PKCS8_PRIV_KEY_INFO * EVP_PKEY2PKCS8_broken(EVP_PKEY * pkey, int broken) (a0,d0)
PKCS8_PRIV_KEY_INFO * PKCS8_set_broken(PKCS8_PRIV_KEY_INFO * p8, int broken) (a0,d0)
int X509_check_trust(X509 * x, int id, int flags) (a0,d0,d1)
int X509_TRUST_get_count() ()
X509_TRUST * X509_TRUST_get0(int idx) (d0)
int X509_TRUST_get_by_id(int id) (d0)
int X509_TRUST_add(int id, int flags, int (*ck)(X509_TRUST *, X509 *, int), char * name,
	int arg1, void * arg2) (d0,d1,a0,a1,d2,a2)
void X509_TRUST_cleanup() ()
int X509_TRUST_get_flags(X509_TRUST * xp) (a0)
char * X509_TRUST_get0_name(X509_TRUST * xp) (a0)
int X509_TRUST_get_trust(X509_TRUST * xp) (a0)
void ERR_load_X509_strings() ()
int X509_OBJECT_idx_by_subject(STACK_OF_X509_OBJECT * h, int type, X509_NAME * name) (a0,d0,a1)
X509_OBJECT * X509_OBJECT_retrieve_by_subject(STACK_OF_X509_OBJECT * h, int type, X509_NAME * name) (a0,d0,a1)
X509_OBJECT * X509_OBJECT_retrieve_match(STACK_OF_X509_OBJECT * h, X509_OBJECT * x) (a0,a1)
void X509_OBJECT_up_ref_count(X509_OBJECT * a) (a0)
void X509_OBJECT_free_contents(X509_OBJECT * a) (a0)
X509_STORE * X509_STORE_new() ()
void X509_STORE_free(X509_STORE * v) (a0)
void X509_STORE_set_flags(X509_STORE * ctx, long flags) (a0,d0)
int X509_STORE_set_purpose(X509_STORE * ctx, int purpose) (a0,d0)
int X509_STORE_set_trust(X509_STORE * ctx, int trust) (a0,d0)
X509_STORE_CTX * X509_STORE_CTX_new() ()
int X509_STORE_CTX_get1_issuer(X509 ** issuer, X509_STORE_CTX * ctx, X509 * x) (a0,a1,a2)
void X509_STORE_CTX_free(X509_STORE_CTX * ctx) (a0)
int X509_STORE_CTX_init(X509_STORE_CTX * ctx, X509_STORE * store, X509 * x509,
	STACK_OF_X509 * chain) (a0,a1,a2,a3)
void X509_STORE_CTX_trusted_stack(X509_STORE_CTX * ctx, STACK_OF_X509 * sk) (a0,a1)
void X509_STORE_CTX_cleanup(X509_STORE_CTX * ctx) (a0)
X509_LOOKUP * X509_STORE_add_lookup(X509_STORE * v, X509_LOOKUP_METHOD * m) (a0,a1)
X509_LOOKUP_METHOD * X509_LOOKUP_hash_dir() ()
X509_LOOKUP_METHOD * X509_LOOKUP_file() ()
int X509_STORE_add_cert(X509_STORE * ctx, X509 * x) (a0,a1)
int X509_STORE_add_crl(X509_STORE * ctx, X509_CRL * x) (a0,a1)
int X509_STORE_get_by_subject(X509_STORE_CTX * vs, int type, X509_NAME * name, X509_OBJECT * ret) (a0,d0,a1,a2)
int X509_LOOKUP_ctrl(X509_LOOKUP * ctx, int cmd, const char * argc, long argl, char ** ret) (a0,d0,a1,d1,a2)
int X509_load_cert_file(X509_LOOKUP * ctx, const char * file, int type) (a0,a1,d0)
int X509_load_crl_file(X509_LOOKUP * ctx, const char * file, int type) (a0,a1,d0)
int X509_load_cert_crl_file(X509_LOOKUP * ctx, const char * file, int type) (a0,a1,d0)
X509_LOOKUP * X509_LOOKUP_new(X509_LOOKUP_METHOD * method) (a0)
void X509_LOOKUP_free(X509_LOOKUP * ctx) (a0)
int X509_LOOKUP_init(X509_LOOKUP * ctx) (a0)
int X509_LOOKUP_by_subject(X509_LOOKUP * ctx, int type, X509_NAME * name, X509_OBJECT * ret) (a0,d0,a1,a2)
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP * ctx, int type, X509_NAME * name, ASN1_INTEGER * serial,
	X509_OBJECT * ret) (a0,d0,a1,a2,a3)
int X509_LOOKUP_by_fingerprint(X509_LOOKUP * ctx, int type, unsigned char * bytes, int len,
	X509_OBJECT * ret) (a0,d0,a1,d1,a2)
int X509_LOOKUP_by_alias(X509_LOOKUP * ctx, int type, char * str, int len, X509_OBJECT * ret) (a0,d0,a1,d1,a2)
int X509_LOOKUP_shutdown(X509_LOOKUP * ctx) (a0)
int X509_STORE_load_locations(X509_STORE * ctx, const char * file, const char * dir) (a0,a1,a2)
int X509_STORE_set_default_paths(X509_STORE * ctx) (a0)
int X509_STORE_CTX_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX * ctx, int idx, void * data) (a0,d0,a1)
void * X509_STORE_CTX_get_ex_data(X509_STORE_CTX * ctx, int idx) (a0,d0)
int X509_STORE_CTX_get_error(X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set_error(X509_STORE_CTX * ctx, int s) (a0,d0)
int X509_STORE_CTX_get_error_depth(X509_STORE_CTX * ctx) (a0)
X509 * X509_STORE_CTX_get_current_cert(X509_STORE_CTX * ctx) (a0)
STACK_OF_X509 * X509_STORE_CTX_get_chain(X509_STORE_CTX * ctx) (a0)
STACK_OF_X509 * X509_STORE_CTX_get1_chain(X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set_cert(X509_STORE_CTX * c, X509 * x) (a0,a1)
void X509_STORE_CTX_set_chain(X509_STORE_CTX * c, STACK_OF_X509 * sk) (a0,a1)
int X509_STORE_CTX_set_purpose(X509_STORE_CTX * ctx, int purpose) (a0,d0)
int X509_STORE_CTX_set_trust(X509_STORE_CTX * ctx, int trust) (a0,d0)
int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX * ctx, int def_purpose, int purpose, int trust) (a0,d0,d1,d2)
void X509_STORE_CTX_set_flags(X509_STORE_CTX * ctx, long flags) (a0,d0)
void X509_STORE_CTX_set_time(X509_STORE_CTX * ctx, long flags, time_t t) (a0,d0,d1)
void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX * ctx, int (*verify_cb)(int, X509_STORE_CTX *)) (a0,a1)
BASIC_CONSTRAINTS * BASIC_CONSTRAINTS_new() ()
void BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS * a) (a0)
BASIC_CONSTRAINTS * d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * BASIC_CONSTRAINTS_it() ()
SXNET * SXNET_new() ()
void SXNET_free(SXNET * a) (a0)
SXNET * d2i_SXNET(SXNET ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_SXNET(SXNET * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * SXNET_it() ()
SXNETID * SXNETID_new() ()
void SXNETID_free(SXNETID * a) (a0)
SXNETID * d2i_SXNETID(SXNETID ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_SXNETID(SXNETID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * SXNETID_it() ()
int SXNET_add_id_asc(SXNET ** psx, char * zone, char * user, int userlen) (a0,a1,a2,d0)
int SXNET_add_id_ulong(SXNET ** psx, unsigned long lzone, char * user, int userlen) (a0,d0,a1,d1)
int SXNET_add_id_INTEGER(SXNET ** psx, ASN1_INTEGER * izone, char * user, int userlen) (a0,a1,a2,d0)
ASN1_OCTET_STRING * SXNET_get_id_asc(SXNET * sx, char * zone) (a0,a1)
ASN1_OCTET_STRING * SXNET_get_id_ulong(SXNET * sx, unsigned long lzone) (a0,d0)
ASN1_OCTET_STRING * SXNET_get_id_INTEGER(SXNET * sx, ASN1_INTEGER * zone) (a0,a1)
AUTHORITY_KEYID * AUTHORITY_KEYID_new() ()
void AUTHORITY_KEYID_free(AUTHORITY_KEYID * a) (a0)
AUTHORITY_KEYID * d2i_AUTHORITY_KEYID(AUTHORITY_KEYID ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_AUTHORITY_KEYID(AUTHORITY_KEYID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * AUTHORITY_KEYID_it() ()
PKEY_USAGE_PERIOD * PKEY_USAGE_PERIOD_new() ()
void PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD * a) (a0)
PKEY_USAGE_PERIOD * d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKEY_USAGE_PERIOD_it() ()
GENERAL_NAME * GENERAL_NAME_new() ()
void GENERAL_NAME_free(GENERAL_NAME * a) (a0)
GENERAL_NAME * d2i_GENERAL_NAME(GENERAL_NAME ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_GENERAL_NAME(GENERAL_NAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * GENERAL_NAME_it() ()
STACK_OF_CONF_VALUE * i2v_GENERAL_NAME(X509V3_EXT_METHOD * method, GENERAL_NAME * gen,
	STACK_OF_CONF_VALUE * ret) (a0,a1,a2)
int GENERAL_NAME_print(BIO * out, GENERAL_NAME * gen) (a0,a1)
GENERAL_NAMES * GENERAL_NAMES_new() ()
void GENERAL_NAMES_free(GENERAL_NAMES * a) (a0)
GENERAL_NAMES * d2i_GENERAL_NAMES(GENERAL_NAMES ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_GENERAL_NAMES(GENERAL_NAMES * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * GENERAL_NAMES_it() ()
STACK_OF_CONF_VALUE * i2v_GENERAL_NAMES(X509V3_EXT_METHOD * method, GENERAL_NAMES * gen,
	STACK_OF_CONF_VALUE * extlist) (a0,a1,a2)
GENERAL_NAMES * v2i_GENERAL_NAMES(X509V3_EXT_METHOD * method, X509V3_CTX * ctx,
	STACK_OF_CONF_VALUE * nval) (a0,a1,a2)
OTHERNAME * OTHERNAME_new() ()
void OTHERNAME_free(OTHERNAME * a) (a0)
OTHERNAME * d2i_OTHERNAME(OTHERNAME ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_OTHERNAME(OTHERNAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OTHERNAME_it() ()
EDIPARTYNAME * EDIPARTYNAME_new() ()
void EDIPARTYNAME_free(EDIPARTYNAME * a) (a0)
EDIPARTYNAME * d2i_EDIPARTYNAME(EDIPARTYNAME ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_EDIPARTYNAME(EDIPARTYNAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * EDIPARTYNAME_it() ()
char * i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD * method, ASN1_OCTET_STRING * ia5) (a0,a1)
ASN1_OCTET_STRING * s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, char * str) (a0,a1,a2)
EXTENDED_KEY_USAGE * EXTENDED_KEY_USAGE_new() ()
void EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE * a) (a0)
EXTENDED_KEY_USAGE * d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * EXTENDED_KEY_USAGE_it() ()
int i2a_ACCESS_DESCRIPTION(BIO * bp, ACCESS_DESCRIPTION* a) (a0,a1)
CERTIFICATEPOLICIES * CERTIFICATEPOLICIES_new() ()
void CERTIFICATEPOLICIES_free(CERTIFICATEPOLICIES * a) (a0)
CERTIFICATEPOLICIES * d2i_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * CERTIFICATEPOLICIES_it() ()
POLICYINFO * POLICYINFO_new() ()
void POLICYINFO_free(POLICYINFO * a) (a0)
POLICYINFO * d2i_POLICYINFO(POLICYINFO ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_POLICYINFO(POLICYINFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * POLICYINFO_it() ()
POLICYQUALINFO * POLICYQUALINFO_new() ()
void POLICYQUALINFO_free(POLICYQUALINFO * a) (a0)
POLICYQUALINFO * d2i_POLICYQUALINFO(POLICYQUALINFO ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_POLICYQUALINFO(POLICYQUALINFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * POLICYQUALINFO_it() ()
USERNOTICE * USERNOTICE_new() ()
void USERNOTICE_free(USERNOTICE * a) (a0)
USERNOTICE * d2i_USERNOTICE(USERNOTICE ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_USERNOTICE(USERNOTICE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * USERNOTICE_it() ()
NOTICEREF * NOTICEREF_new() ()
void NOTICEREF_free(NOTICEREF * a) (a0)
NOTICEREF * d2i_NOTICEREF(NOTICEREF ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_NOTICEREF(NOTICEREF * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * NOTICEREF_it() ()
CRL_DIST_POINTS * CRL_DIST_POINTS_new() ()
void CRL_DIST_POINTS_free(CRL_DIST_POINTS * a) (a0)
CRL_DIST_POINTS * d2i_CRL_DIST_POINTS(CRL_DIST_POINTS ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_CRL_DIST_POINTS(CRL_DIST_POINTS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * CRL_DIST_POINTS_it() ()
DIST_POINT * DIST_POINT_new() ()
void DIST_POINT_free(DIST_POINT * a) (a0)
DIST_POINT * d2i_DIST_POINT(DIST_POINT ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_DIST_POINT(DIST_POINT * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * DIST_POINT_it() ()
DIST_POINT_NAME * DIST_POINT_NAME_new() ()
void DIST_POINT_NAME_free(DIST_POINT_NAME * a) (a0)
DIST_POINT_NAME * d2i_DIST_POINT_NAME(DIST_POINT_NAME ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_DIST_POINT_NAME(DIST_POINT_NAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * DIST_POINT_NAME_it() ()
ACCESS_DESCRIPTION * ACCESS_DESCRIPTION_new() ()
void ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION * a) (a0)
ACCESS_DESCRIPTION * d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ACCESS_DESCRIPTION_it() ()
AUTHORITY_INFO_ACCESS * AUTHORITY_INFO_ACCESS_new() ()
void AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS * a) (a0)
AUTHORITY_INFO_ACCESS * d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS ** a, unsigned char ** in,
	long len) (a0,a1,d0)
int i2d_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * AUTHORITY_INFO_ACCESS_it() ()
GENERAL_NAME * v2i_GENERAL_NAME(X509V3_EXT_METHOD * method, X509V3_CTX * ctx,
	CONF_VALUE * cnf) (a0,a1,a2)
void X509V3_conf_free(CONF_VALUE * val) (a0)
X509_EXTENSION * X509V3_EXT_nconf_nid(CONF * conf, X509V3_CTX * ctx, int ext_nid, char * value) (a0,a1,d0,a2)
X509_EXTENSION * X509V3_EXT_nconf(CONF * conf, X509V3_CTX * ctx, char * name, char * value) (a0,a1,a2,a3)
int X509V3_EXT_add_nconf_sk(CONF * conf, X509V3_CTX * ctx, char * section,
	STACK_OF_X509_EXTENSION ** sk) (a0,a1,a2,a3)
int X509V3_EXT_add_nconf(CONF * conf, X509V3_CTX * ctx, char * section, X509 * cert) (a0,a1,a2,a3)
int X509V3_EXT_REQ_add_nconf(CONF * conf, X509V3_CTX * ctx, char * section, X509_REQ * req) (a0,a1,a2,a3)
int X509V3_EXT_CRL_add_nconf(CONF * conf, X509V3_CTX * ctx, char * section, X509_CRL * crl) (a0,a1,a2,a3)
X509_EXTENSION * X509V3_EXT_conf_nid(LHASH * conf, X509V3_CTX * ctx, int ext_nid, char * value) (a0,a1,d0,a2)
X509_EXTENSION * X509V3_EXT_conf(LHASH * conf, X509V3_CTX * ctx, char * name, char * value) (a0,a1,a2,a3)
int X509V3_EXT_add_conf(LHASH * conf, X509V3_CTX * ctx, char * section, X509 * cert) (a0,a1,a2,a3)
int X509V3_EXT_REQ_add_conf(LHASH * conf, X509V3_CTX * ctx, char * section, X509_REQ * req) (a0,a1,a2,a3)
int X509V3_EXT_CRL_add_conf(LHASH * conf, X509V3_CTX * ctx, char * section, X509_CRL * crl) (a0,a1,a2,a3)
int X509V3_add_value_bool_nf(char * name, int asn1_bool, STACK_OF_CONF_VALUE ** extlist) (a0,d0,a1)
int X509V3_get_value_bool(CONF_VALUE * value, int * asn1_bool) (a0,a1)
int X509V3_get_value_int(CONF_VALUE * value, ASN1_INTEGER ** aint) (a0,a1)
void X509V3_set_nconf(X509V3_CTX * ctx, CONF * conf) (a0,a1)
void X509V3_set_conf_lhash(X509V3_CTX * ctx, LHASH * lhash) (a0,a1)
char * X509V3_get_string(X509V3_CTX * ctx, char * name, char * section) (a0,a1,a2)
STACK_OF_CONF_VALUE * X509V3_get_section(X509V3_CTX * ctx, char * section) (a0,a1)
void X509V3_string_free(X509V3_CTX * ctx, char * str) (a0,a1)
void X509V3_section_free(X509V3_CTX * ctx, STACK_OF_CONF_VALUE * section) (a0,a1)
void X509V3_set_ctx(X509V3_CTX * ctx, X509 * issuer, X509 * subject, X509_REQ * req,
	X509_CRL * crl, int flags) (a0,a1,a2,a3,d0,d1)
int X509V3_add_value(const char * name, const char * value, STACK_OF_CONF_VALUE ** extlist) (a0,a1,a2)
int X509V3_add_value_uchar(const char * name, const unsigned char * value,
	STACK_OF_CONF_VALUE ** extlist) (a0,a1,a2)
int X509V3_add_value_bool(const char * name, int asn1_bool, STACK_OF_CONF_VALUE ** extlist) (a0,d0,a1)
int X509V3_add_value_int(const char * name, ASN1_INTEGER * aint, STACK_OF_CONF_VALUE ** extlist) (a0,a1,a2)
char * i2s_ASN1_INTEGER(X509V3_EXT_METHOD * meth, ASN1_INTEGER * aint) (a0,a1)
ASN1_INTEGER * s2i_ASN1_INTEGER(X509V3_EXT_METHOD * meth, char * value) (a0,a1)
char * i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD * meth, ASN1_ENUMERATED * aint) (a0,a1)
char * i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD * meth, ASN1_ENUMERATED * aint) (a0,a1)
int X509V3_EXT_add(X509V3_EXT_METHOD * ext) (a0)
int X509V3_EXT_add_list(X509V3_EXT_METHOD * extlist) (a0)
int X509V3_EXT_add_alias(int nid_to, int nid_from) (d0,d1)
void X509V3_EXT_cleanup() ()
X509V3_EXT_METHOD * X509V3_EXT_get(X509_EXTENSION * ext) (a0)
X509V3_EXT_METHOD * X509V3_EXT_get_nid(int nid) (d0)
int X509V3_add_standard_extensions() ()
STACK_OF_CONF_VALUE * X509V3_parse_list(const char * line) (a0)
void * X509V3_EXT_d2i(X509_EXTENSION * ext) (a0)
void * X509V3_get_d2i(STACK_OF_X509_EXTENSION * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
X509_EXTENSION * X509V3_EXT_i2d(int ext_nid, int crit, void * ext_struc) (d0,d1,a0)
int X509V3_add1_i2d(STACK_OF_X509_EXTENSION ** x, int nid, void * value, int crit,
	unsigned long flags) (a0,d0,a1,d1,d2)
char * hex_to_string(unsigned char * buffer, long len) (a0,d0)
unsigned char * string_to_hex(char * str, long * len) (a0,a1)
int name_cmp(const char * name, const char * cmp) (a0,a1)
void X509V3_EXT_val_prn(BIO * out, STACK_OF_CONF_VALUE * val, int indent, int ml) (a0,a1,d0,d1)
int X509V3_EXT_print(BIO * out, X509_EXTENSION * ext, unsigned long flag, int indent) (a0,a1,d0,d1)
int X509V3_extensions_print(BIO * out, char * title, STACK_OF_X509_EXTENSION * exts,
	unsigned long flag, int indent) (a0,a1,a2,d0,d1)
int X509_check_purpose(X509 * x, int id, int ca) (a0,d0,d1)
int X509_supported_extension(X509_EXTENSION * ex) (a0)
int X509_PURPOSE_set(int * p, int purpose) (a0,d0)
int X509_check_issued(X509 * issuer, X509 * subject) (a0,a1)
int X509_PURPOSE_get_count() ()
X509_PURPOSE * X509_PURPOSE_get0(int idx) (d0)
int X509_PURPOSE_get_by_sname(char * sname) (a0)
int X509_PURPOSE_get_by_id(int id) (d0)
int X509_PURPOSE_add(int id, int trust, int flags,
	int (*ck)(const X509_PURPOSE *, const X509 *, int), char * name,
	char * sname, void * arg) (d0,d1,d2,a0,a1,a2,a3)
char * X509_PURPOSE_get0_name(X509_PURPOSE * xp) (a0)
char * X509_PURPOSE_get0_sname(X509_PURPOSE * xp) (a0)
int X509_PURPOSE_get_trust(X509_PURPOSE * xp) (a0)
void X509_PURPOSE_cleanup() ()
int X509_PURPOSE_get_id(X509_PURPOSE * a) (a0)
STACK * X509_get1_email(X509 * x) (a0)
STACK * X509_REQ_get1_email(X509_REQ * x) (a0)
void X509_email_free(STACK * sk) (a0)
void ERR_load_X509V3_strings() ()
const char * AES_options() ()
int AES_set_encrypt_key(const unsigned char * userKey, const int bits, AES_KEY * key) (a0,d0,a1)
int AES_set_decrypt_key(const unsigned char * userKey, const int bits, AES_KEY * key) (a0,d0,a1)
void AES_encrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key) (a0,a1,a2)
void AES_decrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key) (a0,a1,a2)
void AES_ecb_encrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key,
	const int enc) (a0,a1,a2,d0)
void AES_cbc_encrypt(const unsigned char * in, unsigned char * out,
	const unsigned long length, const AES_KEY * key,
	unsigned char * ivec, const int enc) (a0,a1,d0,a2,a3,d1)
void AES_cfb128_encrypt(const unsigned char * in, unsigned char * out,
	const unsigned long length, const AES_KEY * key,
	unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void AES_cfb1_encrypt(const unsigned char * in, unsigned char * out,
	const unsigned long length, const AES_KEY * key,
	unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void AES_cfb8_encrypt(const unsigned char * in, unsigned char * out,
	const unsigned long length, const AES_KEY * key,
	unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void AES_cfbr_encrypt_block(const unsigned char * in, unsigned char * out, const int nbits,
	const AES_KEY * key, unsigned char * ivec, const int enc) (a0,a1,d0,a2,a3,d1)
void AES_ofb128_encrypt(const unsigned char * in, unsigned char * out,
	const unsigned long length, const AES_KEY * key,
	unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
void AES_ctr128_encrypt(const unsigned char * in, unsigned char * out,
	const unsigned long length, const AES_KEY * key, unsigned char ivec,
	unsigned char ecount_buf, unsigned int * num) (a0,a1,d0,a2,d1,d2,a3)
void BF_set_key(BF_KEY * key, int len, const unsigned char * data) (a0,d0,a1)
void BF_encrypt(BF_LONG * data, const BF_KEY * key) (a0,a1)
void BF_decrypt(BF_LONG * data, const BF_KEY * key) (a0,a1)
void BF_ecb_encrypt(const unsigned char * in, unsigned char * out, const BF_KEY * key,
	int enc) (a0,a1,a2,d0)
void BF_cbc_encrypt(const unsigned char * in, unsigned char * out, long length,
	const BF_KEY * schedule, unsigned char * ivec, int enc) (a0,a1,d0,a2,a3,d1)
void BF_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	const BF_KEY * schedule, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void BF_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	const BF_KEY * schedule, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
const char * BF_options() ()
void CAST_set_key(CAST_KEY * key, int len, const unsigned char * data) (a0,d0,a1)
void CAST_ecb_encrypt(const unsigned char * in, unsigned char * out, CAST_KEY * key, int enc) (a0,a1,a2,d0)
void CAST_encrypt(CAST_LONG * data, CAST_KEY * key) (a0,a1)
void CAST_decrypt(CAST_LONG * data, CAST_KEY * key) (a0,a1)
void CAST_cbc_encrypt(const unsigned char * in, unsigned char * out, long length,
	CAST_KEY * ks, unsigned char * iv, int enc) (a0,a1,d0,a2,a3,d1)
void CAST_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	CAST_KEY * schedule, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void CAST_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	CAST_KEY * schedule, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
int * _shadow_DES_check_key() ()
int * _shadow_DES_rw_mode() ()
const char * DES_options() ()
void DES_ecb3_encrypt(const unsigned char * input, unsigned char * output,
	DES_key_schedule * ks1, DES_key_schedule * ks2,
	DES_key_schedule * ks3, int enc) (a0,a1,a2,a3,d0,d1)
DES_LONG DES_cbc_cksum(const unsigned char * input, DES_cblock * output, long length,
	DES_key_schedule * schedule, const_DES_cblock * ivec) (a0,a1,d0,a2,a3)
void DES_cbc_encrypt(const unsigned char * input, unsigned char * output, long length,
	DES_key_schedule * schedule, DES_cblock * ivec, int enc) (a0,a1,d0,a2,a3,d1)
void DES_ncbc_encrypt(const unsigned char * input, unsigned char * output, long length,
	DES_key_schedule * schedule, DES_cblock * ivec, int enc) (a0,a1,d0,a2,a3,d1)
void DES_xcbc_encrypt(const unsigned char * input, unsigned char * output, long length,
	DES_key_schedule * schedule, DES_cblock * ivec,
	const_DES_cblock * inw, const_DES_cblock * outw, int enc) (a0,a1,d0,a2,a3,d1,d2,d3)
void DES_cfb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length,
	DES_key_schedule * schedule, DES_cblock * ivec, int enc) (a0,a1,d0,d1,a2,a3,d2)
void DES_ecb_encrypt(const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks,
	int enc) (a0,a1,a2,d0)
void DES_encrypt1(DES_LONG * data, DES_key_schedule * ks, int enc) (a0,a1,d0)
void DES_encrypt2(DES_LONG * data, DES_key_schedule * ks, int enc) (a0,a1,d0)
void DES_encrypt3(DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2,
	DES_key_schedule * ks3) (a0,a1,a2,a3)
void DES_decrypt3(DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2,
	DES_key_schedule * ks3) (a0,a1,a2,a3)
void DES_ede3_cbc_encrypt(const unsigned char * input, unsigned char * output, long length,
	DES_key_schedule * ks1, DES_key_schedule * ks2,
	DES_key_schedule * ks3, DES_cblock * ivec, int enc) (a0,a1,d0,a2,a3,d1,d2,d3)
void DES_ede3_cbcm_encrypt(const unsigned char * in, unsigned char * out, long length,
	DES_key_schedule * ks1, DES_key_schedule * ks2,
	DES_key_schedule * ks3, DES_cblock * ivec1, DES_cblock * ivec2,
	int enc) (a0,a1,d0,a2,a3,d1,d2,d3,d4)
void DES_ede3_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	DES_key_schedule * ks1, DES_key_schedule * ks2,
	DES_key_schedule * ks3, DES_cblock * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2,d3,d4)
void DES_ede3_cfb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length,
	DES_key_schedule * ks1, DES_key_schedule * ks2,
	DES_key_schedule * ks3, DES_cblock * ivec, int enc) (a0,a1,d0,d1,a2,a3,d2,d3,d4)
void DES_ede3_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	DES_key_schedule * ks1, DES_key_schedule * ks2,
	DES_key_schedule * ks3, DES_cblock * ivec, int * num) (a0,a1,d0,a2,a3,d1,d2,d3)
void DES_xwhite_in2out(const_DES_cblock * DES_key, const_DES_cblock * in_white,
	DES_cblock * out_white) (a0,a1,a2)
int DES_enc_read(int fd, void * buf, int len, DES_key_schedule * sched, DES_cblock * iv) (d0,a0,d1,a1,a2)
int DES_enc_write(int fd, const void * buf, int len, DES_key_schedule * sched,
	DES_cblock * iv) (d0,a0,d1,a1,a2)
char * DES_fcrypt(const char * buf, const char * salt, char * ret) (a0,a1,a2)
char * DES_crypt(const char * buf, const char * salt) (a0,a1)
void DES_ofb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length,
	DES_key_schedule * schedule, DES_cblock * ivec) (a0,a1,d0,d1,a2,a3)
void DES_pcbc_encrypt(const unsigned char * input, unsigned char * output, long length,
	DES_key_schedule * schedule, DES_cblock * ivec, int enc) (a0,a1,d0,a2,a3,d1)
DES_LONG DES_quad_cksum(const unsigned char * input, DES_cblock * output, long length,
	int out_count, DES_cblock * seed) (a0,a1,d0,d1,a2)
int DES_random_key(DES_cblock * ret) (a0)
void DES_set_odd_parity(DES_cblock * key) (a0)
int DES_check_key_parity(const_DES_cblock * key) (a0)
int DES_is_weak_key(const_DES_cblock * key) (a0)
int DES_set_key(const_DES_cblock * key, DES_key_schedule * schedule) (a0,a1)
int DES_key_sched(const_DES_cblock * key, DES_key_schedule * schedule) (a0,a1)
int DES_set_key_checked(const_DES_cblock * key, DES_key_schedule * schedule) (a0,a1)
void DES_set_key_unchecked(const_DES_cblock * key, DES_key_schedule * schedule) (a0,a1)
void DES_string_to_key(const char * str, DES_cblock * key) (a0,a1)
void DES_string_to_2keys(const char * str, DES_cblock * key1, DES_cblock * key2) (a0,a1,a2)
void DES_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	DES_key_schedule * schedule, DES_cblock * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void DES_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	DES_key_schedule * schedule, DES_cblock * ivec, int * num) (a0,a1,d0,a2,a3,d1)
int DES_read_password(DES_cblock * key, const char * prompt, int verify) (a0,a1,d0)
int DES_read_2passwords(DES_cblock * key1, DES_cblock * key2, const char * prompt, int verify) (a0,a1,a2,d0)
const char * _ossl_old_des_options() ()
void _ossl_old_des_ecb3_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	_ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2,
	_ossl_old_des_key_schedule ks3, int enc) (a0,a1,d0,d1,d2,d3)
DES_LONG _ossl_old_des_cbc_cksum(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	long length, _ossl_old_des_key_schedule schedule,
	_ossl_old_des_cblock * ivec) (a0,a1,d0,d1,a2)
void _ossl_old_des_cbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	long length, _ossl_old_des_key_schedule schedule,
	_ossl_old_des_cblock * ivec, int enc) (a0,a1,d0,d1,a2,d2)
void _ossl_old_des_ncbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	long length, _ossl_old_des_key_schedule schedule,
	_ossl_old_des_cblock * ivec, int enc) (a0,a1,d0,d1,a2,d2)
void _ossl_old_des_xcbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	long length, _ossl_old_des_key_schedule schedule,
	_ossl_old_des_cblock * ivec, _ossl_old_des_cblock * inw,
	_ossl_old_des_cblock * outw, int enc) (a0,a1,d0,d1,a2,a3,d2,d3)
void _ossl_old_des_cfb_encrypt(unsigned char * in, unsigned char * out, int numbits, long length,
	_ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec,
	int enc) (a0,a1,d0,d1,d2,a2,d3)
void _ossl_old_des_ecb_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	_ossl_old_des_key_schedule ks, int enc) (a0,a1,d0,d1)
void _ossl_old_des_encrypt(DES_LONG * data, _ossl_old_des_key_schedule ks, int enc) (a0,d0,d1)
void _ossl_old_des_encrypt2(DES_LONG * data, _ossl_old_des_key_schedule ks, int enc) (a0,d0,d1)
void _ossl_old_des_encrypt3(DES_LONG * data, _ossl_old_des_key_schedule ks1,
	_ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3) (a0,d0,d1,d2)
void _ossl_old_des_decrypt3(DES_LONG * data, _ossl_old_des_key_schedule ks1,
	_ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3) (a0,d0,d1,d2)
void _ossl_old_des_ede3_cbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	long length, _ossl_old_des_key_schedule ks1,
	_ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3,
	_ossl_old_des_cblock * ivec, int enc) (a0,a1,d0,d1,d2,d3,a2,d4)
void _ossl_old_des_ede3_cfb64_encrypt(unsigned char * in, unsigned char * out, long length,
	_ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2,
	_ossl_old_des_key_schedule ks3, _ossl_old_des_cblock * ivec,
	int * num, int enc) (a0,a1,d0,d1,d2,d3,a2,a3,d4)
void _ossl_old_des_ede3_ofb64_encrypt(unsigned char * in, unsigned char * out, long length,
	_ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2,
	_ossl_old_des_key_schedule ks3, _ossl_old_des_cblock * ivec,
	int * num) (a0,a1,d0,d1,d2,d3,a2,a3)
void _ossl_old_des_xwhite_in2out(_ossl_old_des_cblock * des_key, _ossl_old_des_cblock * in_white,
	_ossl_old_des_cblock * out_white) (a0,a1,a2)
int _ossl_old_des_enc_read(int fd, char * buf, int len, _ossl_old_des_key_schedule sched,
	_ossl_old_des_cblock * iv) (d0,a0,d1,d2,a1)
int _ossl_old_des_enc_write(int fd, char * buf, int len, _ossl_old_des_key_schedule sched,
	_ossl_old_des_cblock * iv) (d0,a0,d1,d2,a1)
char * _ossl_old_des_fcrypt(const char * buf, const char * salt, char * ret) (a0,a1,a2)
char * _ossl_old_des_crypt(const char * buf, const char * salt) (a0,a1)
char * _ossl_old_crypt(const char * buf, const char * salt) (a0,a1)
void _ossl_old_des_ofb_encrypt(unsigned char * in, unsigned char * out, int numbits, long length,
	_ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec) (a0,a1,d0,d1,d2,a2)
void _ossl_old_des_pcbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	long length, _ossl_old_des_key_schedule schedule,
	_ossl_old_des_cblock * ivec, int enc) (a0,a1,d0,d1,a2,d2)
DES_LONG _ossl_old_des_quad_cksum(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output,
	long length, int out_count, _ossl_old_des_cblock * seed) (a0,a1,d0,d1,a2)
void _ossl_old_des_random_seed(_ossl_old_des_cblock key) (d0)
void _ossl_old_des_random_key(_ossl_old_des_cblock ret) (d0)
int _ossl_old_des_read_password(_ossl_old_des_cblock * key, const char * prompt, int verify) (a0,a1,d0)
int _ossl_old_des_read_2passwords(_ossl_old_des_cblock * key1, _ossl_old_des_cblock * key2,
	const char * prompt, int verify) (a0,a1,a2,d0)
void _ossl_old_des_set_odd_parity(_ossl_old_des_cblock * key) (a0)
int _ossl_old_des_is_weak_key(_ossl_old_des_cblock * key) (a0)
int _ossl_old_des_set_key(_ossl_old_des_cblock * key, _ossl_old_des_key_schedule schedule) (a0,d0)
int _ossl_old_des_key_sched(_ossl_old_des_cblock * key, _ossl_old_des_key_schedule schedule) (a0,d0)
void _ossl_old_des_string_to_key(char * str, _ossl_old_des_cblock * key) (a0,a1)
void _ossl_old_des_string_to_2keys(char * str, _ossl_old_des_cblock * key1, _ossl_old_des_cblock * key2) (a0,a1,a2)
void _ossl_old_des_cfb64_encrypt(unsigned char * in, unsigned char * out, long length,
	_ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec,
	int * num, int enc) (a0,a1,d0,d1,a2,a3,d2)
void _ossl_old_des_ofb64_encrypt(unsigned char * in, unsigned char * out, long length,
	_ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec,
	int * num) (a0,a1,d0,d1,a2,a3)
void _ossl_096_des_random_seed(des_cblock * key) (a0)
const DH_METHOD * DH_OpenSSL() ()
void DH_set_default_method(const DH_METHOD * meth) (a0)
const DH_METHOD * DH_get_default_method() ()
int DH_set_method(DH * dh, const DH_METHOD * meth) (a0,a1)
DH * DH_new_method(ENGINE * engine) (a0)
DH * DH_new() ()
void DH_free(DH * dh) (a0)
int DH_up_ref(DH * dh) (a0)
int DH_size(const DH * dh) (a0)
int DH_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int DH_set_ex_data(DH * d, int idx, void * arg) (a0,d0,a1)
void * DH_get_ex_data(DH * d, int idx) (a0,d0)
DH * DH_generate_parameters(int prime_len, int generator, void (*callback)(int, int, void *),
	void * cb_arg) (d0,d1,a0,a1)
int DH_check(const DH * dh, int * codes) (a0,a1)
int DH_generate_key(DH * dh) (a0)
int DH_compute_key(unsigned char * key, const BIGNUM * pub_key, DH * dh) (a0,a1,a2)
DH * d2i_DHparams(DH ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2d_DHparams(const DH * a, unsigned char ** pp) (a0,a1)
int DHparams_print(BIO * bp, const DH * x) (a0,a1)
void ERR_load_DH_strings() ()
DSA_SIG * DSA_SIG_new() ()
void DSA_SIG_free(DSA_SIG * a) (a0)
int i2d_DSA_SIG(const DSA_SIG * a, unsigned char ** pp) (a0,a1)
DSA_SIG * d2i_DSA_SIG(DSA_SIG ** v, const unsigned char ** pp, long length) (a0,a1,d0)
DSA_SIG * DSA_do_sign(const unsigned char * dgst, int dlen, DSA * dsa) (a0,d0,a1)
int DSA_do_verify(const unsigned char * dgst, int dgst_len, DSA_SIG * sig, DSA * dsa) (a0,d0,a1,a2)
const DSA_METHOD * DSA_OpenSSL() ()
void DSA_set_default_method(const DSA_METHOD * a) (a0)
const DSA_METHOD * DSA_get_default_method() ()
int DSA_set_method(DSA * dsa, const DSA_METHOD * a) (a0,a1)
DSA * DSA_new() ()
DSA * DSA_new_method(ENGINE * engine) (a0)
void DSA_free(DSA * r) (a0)
int DSA_up_ref(DSA * r) (a0)
int DSA_size(const DSA * a) (a0)
int DSA_sign_setup(DSA * dsa, BN_CTX * ctx_in, BIGNUM ** kinvp, BIGNUM ** rp) (a0,a1,a2,a3)
int DSA_sign(int type, const unsigned char * dgst, int dlen, unsigned char * sig,
	unsigned int * siglen, DSA * dsa) (d0,a0,d1,a1,a2,a3)
int DSA_verify(int type, const unsigned char * dgst, int dgst_len,
	const unsigned char * sigbuf, int siglen, DSA * dsa) (d0,a0,d1,a1,d2,a2)
int DSA_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int DSA_set_ex_data(DSA * d, int idx, void * arg) (a0,d0,a1)
void * DSA_get_ex_data(DSA * d, int idx) (a0,d0)
DSA * d2i_DSAPublicKey(DSA ** a, const unsigned char ** pp, long length) (a0,a1,d0)
DSA * d2i_DSAPrivateKey(DSA ** a, const unsigned char ** pp, long length) (a0,a1,d0)
DSA * d2i_DSAparams(DSA ** a, const unsigned char ** pp, long length) (a0,a1,d0)
DSA * DSA_generate_parameters(int bits, unsigned char * seed, int seed_len, int * counter_ret,
	unsigned long * h_ret, void (*callback)(int, int, void *),
	void * cb_arg) (d0,a0,d1,a1,a2,a3,d2)
int DSA_generate_key(DSA * a) (a0)
int i2d_DSAPublicKey(const DSA * a, unsigned char ** pp) (a0,a1)
int i2d_DSAPrivateKey(const DSA * a, unsigned char ** pp) (a0,a1)
int i2d_DSAparams(const DSA * a, unsigned char ** pp) (a0,a1)
int DSAparams_print(BIO * bp, const DSA * x) (a0,a1)
int DSA_print(BIO * bp, const DSA * x, int off) (a0,a1,d0)
DH * DSA_dup_DH(const DSA * r) (a0)
void ERR_load_DSA_strings() ()
const char * idea_options() ()
void idea_ecb_encrypt(const unsigned char * in, unsigned char * out, IDEA_KEY_SCHEDULE * ks) (a0,a1,a2)
void idea_set_encrypt_key(const unsigned char * key, IDEA_KEY_SCHEDULE * ks) (a0,a1)
void idea_set_decrypt_key(IDEA_KEY_SCHEDULE * ek, IDEA_KEY_SCHEDULE * dk) (a0,a1)
void idea_cbc_encrypt(const unsigned char * in, unsigned char * out, long length,
	IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int enc) (a0,a1,d0,a2,a3,d1)
void idea_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void idea_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int * num) (a0,a1,d0,a2,a3,d1)
void idea_encrypt(unsigned long * in, IDEA_KEY_SCHEDULE * ks) (a0,a1)
const char * MD2_options() ()
int MD2_Init(MD2_CTX * c) (a0)
int MD2_Update(MD2_CTX * c, const unsigned char * data, unsigned long len) (a0,a1,d0)
int MD2_Final(unsigned char * md, MD2_CTX * c) (a0,a1)
unsigned char * MD2(const unsigned char * d, unsigned long n, unsigned char * md) (a0,d0,a1)
int MD4_Init(MD4_CTX * c) (a0)
int MD4_Update(MD4_CTX * c, const void * data, unsigned long len) (a0,a1,d0)
int MD4_Final(unsigned char * md, MD4_CTX * c) (a0,a1)
unsigned char * MD4(const unsigned char * d, unsigned long n, unsigned char * md) (a0,d0,a1)
void MD4_Transform(MD4_CTX * c, const unsigned char * b) (a0,a1)
int MD5_Init(MD5_CTX * c) (a0)
int MD5_Update(MD5_CTX * c, const void * data, unsigned long len) (a0,a1,d0)
int MD5_Final(unsigned char * md, MD5_CTX * c) (a0,a1)
unsigned char * MD5(const unsigned char * d, unsigned long n, unsigned char * md) (a0,d0,a1)
void MD5_Transform(MD5_CTX * c, const unsigned char * b) (a0,a1)
int MDC2_Init(MDC2_CTX * c) (a0)
int MDC2_Update(MDC2_CTX * c, const unsigned char * data, unsigned long len) (a0,a1,d0)
int MDC2_Final(unsigned char * md, MDC2_CTX * c) (a0,a1)
unsigned char * MDC2(const unsigned char * d, unsigned long n, unsigned char * md) (a0,d0,a1)
void RC2_set_key(RC2_KEY * key, int len, const unsigned char * data, int bits) (a0,d0,a1,d1)
void RC2_ecb_encrypt(const unsigned char * in, unsigned char * out, RC2_KEY * key, int enc) (a0,a1,a2,d0)
void RC2_encrypt(unsigned long * data, RC2_KEY * key) (a0,a1)
void RC2_decrypt(unsigned long * data, RC2_KEY * key) (a0,a1)
void RC2_cbc_encrypt(const unsigned char * in, unsigned char * out, long length,
	RC2_KEY * ks, unsigned char * iv, int enc) (a0,a1,d0,a2,a3,d1)
void RC2_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	RC2_KEY * schedule, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void RC2_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	RC2_KEY * schedule, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
const char * RC4_options() ()
void RC4_set_key(RC4_KEY * key, int len, const unsigned char * data) (a0,d0,a1)
void RC4(RC4_KEY * key, unsigned long len, const unsigned char * indata,
	unsigned char * outdata) (a0,d0,a1,a2)
void RC5_32_set_key(RC5_32_KEY * key, int len, const unsigned char * data, int rounds) (a0,d0,a1,d1)
void RC5_32_ecb_encrypt(const unsigned char * in, unsigned char * out, RC5_32_KEY * key,
	int enc) (a0,a1,a2,d0)
void RC5_32_encrypt(unsigned long * data, RC5_32_KEY * key) (a0,a1)
void RC5_32_decrypt(unsigned long * data, RC5_32_KEY * key) (a0,a1)
void RC5_32_cbc_encrypt(const unsigned char * in, unsigned char * out, long length,
	RC5_32_KEY * ks, unsigned char * iv, int enc) (a0,a1,d0,a2,a3,d1)
void RC5_32_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	RC5_32_KEY * schedule, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void RC5_32_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length,
	RC5_32_KEY * schedule, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
int RIPEMD160_Init(RIPEMD160_CTX * c) (a0)
int RIPEMD160_Update(RIPEMD160_CTX * c, const void * data, unsigned long len) (a0,a1,d0)
int RIPEMD160_Final(unsigned char * md, RIPEMD160_CTX * c) (a0,a1)
unsigned char * RIPEMD160(const unsigned char * d, unsigned long n, unsigned char * md) (a0,d0,a1)
void RIPEMD160_Transform(RIPEMD160_CTX * c, const unsigned char * b) (a0,a1)
RSA * RSA_new() ()
RSA * RSA_new_method(ENGINE * engine) (a0)
int RSA_size(const RSA * a) (a0)
RSA * RSA_generate_key(int bits, unsigned long e, void (*callback)(int, int, void *),
	void * cb_arg) (d0,d1,a0,a1)
int RSA_check_key(const RSA * a) (a0)
int RSA_public_encrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa,
	int padding) (d0,a0,a1,a2,d1)
int RSA_private_encrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa,
	int padding) (d0,a0,a1,a2,d1)
int RSA_public_decrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa,
	int padding) (d0,a0,a1,a2,d1)
int RSA_private_decrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa,
	int padding) (d0,a0,a1,a2,d1)
void RSA_free(RSA * r) (a0)
int RSA_up_ref(RSA * r) (a0)
int RSA_flags(const RSA * r) (a0)
void RSA_set_default_method(const RSA_METHOD * meth) (a0)
const RSA_METHOD * RSA_get_default_method() ()
const RSA_METHOD * RSA_get_method(const RSA * rsa) (a0)
int RSA_set_method(RSA * rsa, const RSA_METHOD * meth) (a0,a1)
int RSA_memory_lock(RSA * r) (a0)
const RSA_METHOD * RSA_PKCS1_SSLeay() ()
const RSA_METHOD * RSA_null_method() ()
RSA * d2i_RSAPublicKey(RSA ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_RSAPublicKey(const RSA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * RSAPublicKey_it() ()
RSA * d2i_RSAPrivateKey(RSA ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_RSAPrivateKey(const RSA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * RSAPrivateKey_it() ()
int RSA_print(BIO * bp, const RSA * r, int offset) (a0,a1,d0)
int i2d_RSA_NET(const RSA * a, unsigned char ** pp, int (*cb)(), int sgckey) (a0,a1,a2,d0)
RSA * d2i_RSA_NET(RSA ** a, const unsigned char ** pp, long length, int (*cb)(),
	int sgckey) (a0,a1,d0,a2,d1)
int i2d_Netscape_RSA(const RSA * a, unsigned char ** pp, int (*cb)()) (a0,a1,a2)
RSA * d2i_Netscape_RSA(RSA ** a, const unsigned char ** pp, long length, int (*cb)()) (a0,a1,d0,a2)
int RSA_sign(int type, const unsigned char * m, unsigned int m_length,
	unsigned char * sigret, unsigned int * siglen, RSA * rsa) (d0,a0,d1,a1,a2,a3)
int RSA_verify(int type, const unsigned char * m, unsigned int m_length,
	unsigned char * sigbuf, unsigned int siglen, RSA * rsa) (d0,a0,d1,a1,d2,a2)
int RSA_sign_ASN1_OCTET_STRING(int type, const unsigned char * m, unsigned int m_length,
	unsigned char * sigret, unsigned int * siglen, RSA * rsa) (d0,a0,d1,a1,a2,a3)
int RSA_verify_ASN1_OCTET_STRING(int type, const unsigned char * m, unsigned int m_length,
	unsigned char * sigbuf, unsigned int siglen, RSA * rsa) (d0,a0,d1,a1,d2,a2)
int RSA_blinding_on(RSA * rsa, BN_CTX * ctx) (a0,a1)
void RSA_blinding_off(RSA * rsa) (a0)
int RSA_padding_add_PKCS1_type_1(unsigned char * to, int tlen, const unsigned char * f, int fl) (a0,d0,a1,d1)
int RSA_padding_check_PKCS1_type_1(unsigned char * to, int tlen, const unsigned char * f, int fl,
	int rsa_len) (a0,d0,a1,d1,d2)
int RSA_padding_add_PKCS1_type_2(unsigned char * to, int tlen, const unsigned char * f, int fl) (a0,d0,a1,d1)
int RSA_padding_check_PKCS1_type_2(unsigned char * to, int tlen, const unsigned char * f, int fl,
	int rsa_len) (a0,d0,a1,d1,d2)
int RSA_padding_add_PKCS1_OAEP(unsigned char * to, int tlen, const unsigned char * f, int fl,
	const unsigned char * p, int pl) (a0,d0,a1,d1,a2,d2)
int RSA_padding_check_PKCS1_OAEP(unsigned char * to, int tlen, const unsigned char * f, int fl,
	int rsa_len, const unsigned char * p, int pl) (a0,d0,a1,d1,d2,a2,d3)
int RSA_padding_add_SSLv23(unsigned char * to, int tlen, const unsigned char * f, int fl) (a0,d0,a1,d1)
int RSA_padding_check_SSLv23(unsigned char * to, int tlen, const unsigned char * f, int fl,
	int rsa_len) (a0,d0,a1,d1,d2)
int RSA_padding_add_none(unsigned char * to, int tlen, const unsigned char * f, int fl) (a0,d0,a1,d1)
int RSA_padding_check_none(unsigned char * to, int tlen, const unsigned char * f, int fl,
	int rsa_len) (a0,d0,a1,d1,d2)
int RSA_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * (*new_func)(),
	CRYPTO_EX_dup * (*dup_func)(), CRYPTO_EX_free * (*free_func)()) (d0,a0,a1,a2,a3)
int RSA_set_ex_data(RSA * r, int idx, void * arg) (a0,d0,a1)
void * RSA_get_ex_data(const RSA * r, int idx) (a0,d0)
RSA * RSAPublicKey_dup(RSA * rsa) (a0)
RSA * RSAPrivateKey_dup(RSA * rsa) (a0)
void ERR_load_RSA_strings() ()
int SHA_Init(SHA_CTX * c) (a0)
int SHA_Update(SHA_CTX * c, const void * data, unsigned long len) (a0,a1,d0)
int SHA_Final(unsigned char * md, SHA_CTX * c) (a0,a1)
unsigned char * SHA(const unsigned char * d, unsigned long n, unsigned char * md) (a0,d0,a1)
void SHA_Transform(SHA_CTX * c, const unsigned char * data) (a0,a1)
int SHA1_Init(SHA_CTX * c) (a0)
int SHA1_Update(SHA_CTX * c, const void * data, unsigned long len) (a0,a1,d0)
int SHA1_Final(unsigned char * md, SHA_CTX * c) (a0,a1)
unsigned char * SHA1(const unsigned char * d, unsigned long n, unsigned char * md) (a0,d0,a1)
void SHA1_Transform(SHA_CTX * c, const unsigned char * data) (a0,a1)
==private
int UI_read_string_lib(UI * ui, UI_STRING * uis) (a0,a1)
int UI_write_string_lib(UI * ui, UI_STRING * uis) (a0,a1)
==public
void HMAC_CTX_set_flags(HMAC_CTX * ctx, unsigned long flags) (a0,d0)
int X509_check_ca(X509 * x) (a0)
PROXY_POLICY * PROXY_POLICY_new() ()
void PROXY_POLICY_free(PROXY_POLICY * a) (a0)
PROXY_POLICY * d2i_PROXY_POLICY(PROXY_POLICY ** a, unsigned char ** in, long len) (a0,a1,d0)
int i2d_PROXY_POLICY(PROXY_POLICY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PROXY_POLICY_it() ()
PROXY_CERT_INFO_EXTENSION * PROXY_CERT_INFO_EXTENSION_new() ()
void PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION * a) (a0)
PROXY_CERT_INFO_EXTENSION * d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION ** a,
	unsigned char ** in, long len) (a0,a1,d0)
int i2d_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PROXY_CERT_INFO_EXTENSION_it() ()
==end
