#   $Id$
#
#   Generate libGL.a
#

include $(TOP)/config/make.cfg

include $(SRCDIR)/$(CURDIR)/sources.mak
include $(SRCDIR)/$(CURDIR)/../mapi/glapi/sources.mak
include $(SRCDIR)/$(CURDIR)/../mapi/mapi/sources.mak

#MM- workbench-libs-complete : workbench-libs-mesa-$(AROS_TARGET_CPU)

# m68k build is disabled, since there is no C++ crosscompiler yet
##MM- workbench-libs-mesa-m68k : workbench-libs-mesa-module test-mesa
#MM- workbench-libs-mesa-i386 : workbench-libs-mesa-module test-mesa
#MM- workbench-libs-mesa-x86_64 : workbench-libs-mesa-module test-mesa
#MM- workbench-libs-mesa-ppc : workbench-libs-mesa-module test-mesa
#MM- workbench-libs-mesa-arm : workbench-libs-mesa-module test-mesa

#MM- test-mesa : workbench-libs-mesa-module

#MM workbench-libs-mesa-module : includes linklibs-galliumauxiliary \
#MM workbench-libs-gallium workbench-libs-mesa-module-generated \
#MM workbench-libs-mesa-module-cpp

SHARED_LIB_SOURCES = \
            aros/arosmesacreatecontext \
            aros/arosmesadestroycontext \
            aros/arosmesamakecurrent \
            aros/arosmesaswapbuffers \
            aros/arosmesagetcurrentcontext \
            aros/arosmesa_funcs \
            aros/arosmesa_init \
            aros_libapi \
            arosc_emul \

GLSL_LIBGLCPP_SOURCES = \
            glcpp/glcpp-lex.c \
            glcpp/glcpp-parse.c \
            glcpp/pp.c

GLSL_GLCPP_SOURCES = \
            $(GLSL_LIBGLCPP_SOURCES) \

GLSL_CXX_SOURCES = \
            ast_expr.cpp \
            ast_function.cpp \
            ast_to_hir.cpp \
            ast_type.cpp \
            builtin_function.cpp \
            glsl_lexer.cpp \
            glsl_parser.cpp \
            glsl_parser_extras.cpp \
            glsl_types.cpp \
            glsl_symbol_table.cpp \
            hir_field_selection.cpp \
            ir_algebraic.cpp \
            ir_basic_block.cpp \
            ir_clone.cpp \
            ir_constant_expression.cpp \
            ir_constant_folding.cpp \
            ir_constant_propagation.cpp \
            ir_constant_variable.cpp \
            ir_copy_propagation.cpp \
            ir.cpp \
            ir_dead_code.cpp \
            ir_dead_code_local.cpp \
            ir_dead_functions.cpp \
            ir_div_to_mul_rcp.cpp \
            ir_explog_to_explog2.cpp \
            ir_expression_flattening.cpp \
            ir_function_can_inline.cpp \
            ir_function.cpp \
            ir_function_inlining.cpp \
            ir_hierarchical_visitor.cpp \
            ir_hv_accept.cpp \
            ir_if_simplification.cpp \
            ir_if_to_cond_assign.cpp \
            ir_import_prototypes.cpp \
            ir_lower_jumps.cpp \
            ir_mat_op_to_vec.cpp \
            ir_mod_to_fract.cpp \
            ir_noop_swizzle.cpp \
            ir_print_visitor.cpp \
            ir_reader.cpp \
            ir_rvalue_visitor.cpp \
            ir_set_program_inouts.cpp \
            ir_structure_splitting.cpp \
            ir_sub_to_add_neg.cpp \
            ir_swizzle_swizzle.cpp \
            ir_tree_grafting.cpp \
            ir_validate.cpp \
            ir_variable.cpp \
            ir_variable_refcount.cpp \
            ir_vec_index_to_cond_assign.cpp \
            ir_vec_index_to_swizzle.cpp \
            linker.cpp \
            link_functions.cpp \
            loop_analysis.cpp \
            loop_controls.cpp \
            loop_unroll.cpp \
            lower_noise.cpp \
            lower_variable_index_to_cond_assign.cpp \
            opt_redundant_jumps.cpp \
            s_expression.cpp \

ifeq ($(AROS_TARGET_CPU), i386)
  FFIXED = -ffixed-ebx
endif

ifeq ($(AROS_TARGET_CPU), x86_64)
  FFIXED = -ffixed-rbx
endif

ifeq ($(AROS_TARGET_CPU), ppc)
  FFIXED = -ffixed-r14
endif

ifeq ($(AROS_TARGET_CPU), arm)
  FFIXED = -ffixed-r10
endif

USER_INCLUDES := \
            -I$(SRCDIR)/$(CURDIR)/../../include \
            -I$(SRCDIR)/$(CURDIR)/../../include/GL \
            -I$(SRCDIR)/$(CURDIR) \
            -I$(SRCDIR)/$(CURDIR)/main \
            -I$(SRCDIR)/$(CURDIR)/../mapi \
            -I$(SRCDIR)/$(CURDIR)/../glsl \
            -I$(SRCDIR)/$(CURDIR)/../talloc \
            -I$(SRCDIR)/$(CURDIR)/../gallium/include \
            -I$(AROS_DEVELOPMENT)/include/gallium \

USER_CFLAGS := -DUSE_MGL_NAMESPACE -ffast-math $(FFIXED) -DMAPI_GLAPI_CURRENT

LIB_MESA_SOURCES = \
            $(MESA_GALLIUM_SOURCES:.c=) \
            $(addprefix ../mapi/glapi/, $(GLAPI_SOURCES:.c=)) \
            $(addprefix ../mapi/mapi/, $(MAPI_GLAPI_SOURCES:.c=)) \
            ../talloc/talloc \
            $(addprefix ../glsl/, $(GLSL_GLCPP_SOURCES:.c=)) \




# Compilation of C++ GLSL compiler

CXX_SOURCES := \
    $(SHADER_CXX_SOURCES:.cpp=) \
    $(addprefix ../glsl/, $(GLSL_CXX_SOURCES:.cpp=)) \
    cpp_emul \

CXX_OBJECTS := $(addprefix $(OBJDIR)/cpp/, $(addsuffix .o, $(notdir $(CXX_SOURCES))))

# Remove C-only flags
CXX_FLAGS := $(CFLAGS) $(USER_CFLAGS) -fno-rtti -fno-exceptions -isystem $(AROS_DEVELOPMENT)/include
CXX_FLAGS := $(subst -Wno-pointer-sign,, $(subst -Werror-implicit-function-declaration,, $(CXX_FLAGS)))

# Define the use of cross compiler
ifeq ($(TARGET_CXX),)
  CXX_CC := $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-g++
else
  CXX_CC := $(TARGET_CXX)
endif

$(CXX_SOURCES) : workbench-libs-mesa-module-cpp-gendir
	%compile_q cmd=$(CXX_CC) opt=$(CXX_FLAGS) from=$(SRCDIR)/$(CURDIR)/$@.cpp to="$(addsuffix .o,$(addprefix $(OBJDIR)/cpp/,$(notdir $@)))"

#MM
workbench-libs-mesa-module-cpp-gendir : 
	@$(MKDIR) $(OBJDIR)/cpp

#MM- workbench-libs-mesa-module-cpp : $(CROSSTOOLS_TARGET)

#MM
workbench-libs-mesa-module-cpp : $(CXX_SOURCES)

#MM
workbench-libs-mesa-module-cpp-quick : $(CXX_SOURCES)

# Compilation of C++ GLSL compiler




# Hack to get C++ objects linked into module
LDFLAGS := $(CXX_OBJECTS)

# TEMPORARY HACK FOR i386
ifeq ($(AROS_TARGET_CPU), i386)
  LDFLAGS += -nodefaultlibs
  SHARED_LIB_SOURCES += qdivrem udivdi3 umoddi3
endif

#MM- workbench-libs-mesa-module-quick : workbench-libs-mesa-module-cpp-quick

%build_module mmake=workbench-libs-mesa-module \
    modname=mesa modtype=library linklibname=GL conffile=arosmesa.conf linklibfiles="arosmesa_getprocaddress" \
    files="$(SHARED_LIB_SOURCES) $(LIB_MESA_SOURCES)" \
    uselibs="galliumauxiliary rom gallium arosm amiga"

# NOTE: Both files have been generate and added to AROS repository. Once all 
# build machines support python 2.5 with libxml2, these targets can be enabled
##MM
#workbench-libs-mesa-module-generated : $(SRCDIR)/$(CURDIR)/main/api_exec_es1.c $(SRCDIR)/$(CURDIR)/main/api_exec_es2.c
#
#$(SRCDIR)/$(CURDIR)/main/api_exec_es1.c :
#	@$(PYTHON) $(SRCDIR)/$(CURDIR)/main/es_generator.py -S $(SRCDIR)/$(CURDIR)/main/APIspec.xml -V GLES1.1 > $@
#
#$(SRCDIR)/$(CURDIR)/main/api_exec_es2.c :
#	@$(PYTHON) $(SRCDIR)/$(CURDIR)/main/es_generator.py -S $(SRCDIR)/$(CURDIR)/main/APIspec.xml -V GLES2.0 > $@

%common
