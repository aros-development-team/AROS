# $Id$
include $(TOP)/config/make.cfg

USER_INCLUDES	:= -I.. -I.

LIBNAME 	:= gadtools
ULIBNAME	:= GadTools
CLASSFILES	:= buttonclass textclass sliderclass arrowclass scrollerclass \
		   stringclass listviewclass checkboxclass cycleclass mxclass paletteclass
		   
FILES		:= basicfuncs gadgets menus $(CLASSFILES)
FUNCTIONS	:= \
	createcontext \
	creategadgeta \
	createmenusa \
	drawbevelboxa \
	freegadgets \
	freemenus \
	freevisualinfo \
	getvisualinfoa \
	gt_beginrefresh \
	gt_endrefresh \
	gt_filterimsg \
	gt_getgadgetattrsa \
	gt_getimsg \
	gt_postfilterimsg \
	gt_refreshwindow \
	gt_replyimsg \
	gt_setgadgetattrsa \
	layoutmenuitemsa \
	layoutmenusa

%define_libs prelibs=-l$(LIBNAME)

%genlib_cpak

#MM workbench-libs-gadtools : setup includes linklibs
workbench-libs-gadtools : $(SLIB)
	@$(NOP)

#MM workbench-libs-gadtools-quick :
workbench-libs-gadtools-quick : $(SLIB)
	@$(NOP)

#MM
setup :
	%mkdirs_q $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS)

#MM
clean ::
	$(RM) $(OBJDIR) *.err libdefs.h mmakefile $(END_FILE).c $(LIB) $(SLIB)

$(OBJDIR)/%.d : %.c
	%mkdepend_q

# (bernie) this hack disables optimization on classes.c to fix a problem in the
# current Amiga version of gcc and egcs. Using inline asm macros to perform
# shared library calls sometimes leads the optimizer to a dead-end situation
# where one of the registers involved in the inline asm macro gets spilled on
# the frame.
#
# stegerg: classes.c file was split into one c file per class. sorry :(
#
#ifeq ($(ARCH),amiga)
#$(OBJDIR)/classes.o : classes.c
#	%compile_q opt="$(filter-out -O%,$(CFLAGS)) -O0"
#endif

%common
%include_deps $(foreach f,$(INIT_FILE) $(notdir $(END_FILE)) $(FILES) functions,$(OBJDIR)/$(f).d)
