#/***************************************************************************
#
# codesets.library - Amiga shared library for handling different codesets
# Copyright (C) 2001-2005 by Alfonso [alfie] Ranieri <alforan@tin.it>.
# Copyright (C) 2005-2007 by codesets.library Open Source Team
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# codesets.library project: http://sourceforge.net/projects/codesetslib/
#
# $Id: makefile.mos 62 2007-01-23 08:55:18Z damato $
#
#***************************************************************************/

# Programs
CC        = ppc-morphos-gcc
STRIP     = ppc-morphos-strip
OBJDUMP   = ppc-morphos-objdump
RM        = rm -f
RMDIR     = rm -rf
MKDIR     = mkdir
CHMOD     = chmod
FLEX      = flex
FC        = flexcat

# Directories
PREFIX    = .
OBJDIR    = .obj_mos
BINDIR    = bin_mos

# Compiler/Linker flags
CPU	     = -mcpu=750
CPUFLAGS = -mmultiple
CDEFS    = -D__CST_VERDATE=\"`date +%d.%m.%Y`\" \
           -D__CST_VERDAYS="`expr \`date +%s\` / 86400 - 2922`"
WARN     = -W -Wall
OPTFLAGS = -O3 -fomit-frame-pointer -funroll-loops
DEBUG    = -DDEBUG #-g3 -O0
REDEFINE =
CFLAGS   = -noixemul -I. -I../include -I../../include $(CPU) $(CPUFLAGS) $(WARN) $(OPTFLAGS) \
           $(DEBUG) $(REDEFINE) -c
LDFLAGS  = $(CPU) -noixemul
LDLIBS   =

# CPU and DEBUG can be defined outside, defaults to above
# using e.g. "make DEBUG= CPU=-mcpu=603e" produces optimized non-debug PPC-603e version
#
# OPTFLAGS are disabled by DEBUG normally!
#
# ignored warnings are:
# none - because we want to compile with -Wall all the time

TARGET = $(BINDIR)/b64d \
         $(BINDIR)/b64e \
         $(BINDIR)/UTF8ToStrHook \
         $(BINDIR)/DetectCodeset \
         $(BINDIR)/demo1

#
all: $(BINDIR) $(OBJDIR) $(TARGET)

# make the object directories
$(OBJDIR):
	@printf '\033[33mGenerating $@ directory\033[0m\n'
	@$(MKDIR) $(OBJDIR)

# make the binary directories
$(BINDIR):
	@printf '\033[33mGenerating $@ directory\033[0m\n'
	@$(MKDIR) $(BINDIR)

#

$(OBJDIR)/%.o: %.c
	@printf '\033[32mCompiling $<\033[0m\n'
	@$(CC) $(CFLAGS) $< -o $@ -DUSE_INLINE_STDARG

#

$(BINDIR)/b64d: $(OBJDIR)/b64d.o
	@printf '\033[32mLinking \033[1m$@\033[0m\n'
	@$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS)

$(BINDIR)/b64e: $(OBJDIR)/b64e.o
	@printf '\033[32mLinking \033[1m$@\033[0m\n'
	@$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS)

$(BINDIR)/UTF8ToStrHook: $(OBJDIR)/UTF8ToStrHook.o
	@printf '\033[32mLinking \033[1m$@\033[0m\n'
	@$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS)

$(BINDIR)/DetectCodeset: $(OBJDIR)/DetectCodeset.o
	@printf '\033[32mLinking \033[1m$@\033[0m\n'
	@$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS)

$(BINDIR)/demo1: demo1.c
	@printf '\033[32mCompiling demo1.c\033[0m\n'
	@$(CC) $(CFLAGS) demo1.c -o $(OBJDIR)/demo1.o -DNO_PPCINLINE_STDARG
	@printf '\033[32mLinking \033[1m$@\033[0m\n'
	@$(CC) $(LDFLAGS) -o $@.debug $(OBJDIR)/demo1.o $(LDLIBS) -lmui
	@$(STRIP) -o $@ $@.debug

#

.PHONY: clean
clean:
	-$(RM) $(TARGET) $(TARGET).debug $(OBJDIR)/*.o

.PHONY: distclean
distclean: clean
	-$(RMDIR) $(OBJDIR)
	-$(RMDIR) $(BINDIR)

#
