#
#   Generate the zlib linklib.
#

include $(SRCDIR)/config/aros.cfg

#MM- includes-copy : zlib-fetch

ZLIBVERSION=1.2.13
REPOSITORIES := https://zlib.net/fossils/
ARCHBASE     := zlib-$(ZLIBVERSION)
ARCHSUFFIX := "tar.gz"
PATCHSPEC := $(ARCHBASE)-aros.diff:$(ARCHBASE):-f,-p1
ARCHSRCDIR := $(PORTSDIR)/zlib/$(ARCHBASE)

%fetch mmake=zlib-fetch archive=$(ARCHBASE) destination=$(PORTSDIR)/zlib \
    location=$(PORTSSOURCEDIR) archive_origins=$(REPOSITORIES) suffixes=$(ARCHSUFFIX) \
    patches_specs=$(PATCHSPEC)

%create_patch mmake=zlib-create-patch \
    archive=$(ARCHBASE) suffixes=$(ARCHSUFFIX) \
    destination=$(PORTSDIR)/zlib

#MM- includes-copy : \
#MM     zlib-fetch \
#MM     workbench-libs-z-pkgc

#MM workbench-libs-z-includes : \
#MM     kernel-exec-includes \
#MM     kernel-dos-includes \
#MM     includes-copy

FILES := adler32 \
         crc32 \
         deflate \
         infback \
         inffast \
         inflate \
         inftrees \
         trees \
         zutil \
         compress \
         uncompr \
         gzclose \
         gzlib \
         gzread \
         gzwrite \
         contrib/blast/blast \
         contrib/infback9/infback9 \
         contrib/infback9/inftree9

ifeq ($(AROS_TARGET_CPU),x86_64)
#MM- workbench-libs-z-x86_64 : workbench-libs-z-sse
SFILES := x86_aros
else
SFILES := simd_stub
endif

LIBZ_CPPFLAGS := -D_XOPEN_SOURCE=600 -DSTDC -DAMIGA -DZ_HAVE_UNISTD_H
USER_INCLUDES += -I$(ARCHSRCDIR)

USER_CPPFLAGS := $(LIBZ_CPPFLAGS)

%build_module mmake=workbench-libs-z \
  modname=z1 modtype=library \
  files="$(addprefix $(ARCHSRCDIR)/,$(FILES) $(SFILES))" linklibname=z

#MM- linklibs: linklibs-z-static
#MM linklibs-z-static : zlib-fetch

# N.B: z.static is compiled without the posix wrappers, so that it looks for the default function
# symbol names (e.g. lseek)

USER_CPPFLAGS := $(LIBZ_CPPFLAGS) -DNO_STRERROR -DNO_POSIX_WRAPPERS -DNDEBUG

%build_linklib mmake=linklibs-z-static libname=z.static \
    files="$(addprefix $(ARCHSRCDIR)/,$(FILES) simd_stub)" \
    objdir=$(GENDIR)/$(CURDIR)/static

INCLUDE_FILES := zlib.h zconf.h
%copy_includes dir=$(ARCHSRCDIR)

#MM
workbench-libs-z-pkgc : $(AROS_LIB)/pkgconfig/zlib.pc

$(AROS_LIB)/pkgconfig/zlib.pc : $(SRCDIR)/$(CURDIR)/zlib.pc.aros
	@$(IF) $(TEST) ! -d $(AROS_LIB)/pkgconfig ; then $(MKDIR) $(AROS_LIB)/pkgconfig ; else $(NOP) ; fi
	$(CP) $^ $@

%build_prog mmake=workbench-libs-z-example \
    progname=example \
    files=$(ARCHSRCDIR)/test/example targetdir=$(AROS_TESTS)/z uselibs="z1"

#MM workbench-libs-z-example : \
#MM        workbench-libs-z-linklib

##MM- test-z : workbench-libs-z-example
##MM- test-z-quick : workbench-libs-z-example-quick

%build_prog mmake=workbench-libs-z-minigzip \
    progname=minigzip \
    files=$(ARCHSRCDIR)/test/minigzip targetdir=$(AROS_C) uselibs="z1"

#MM- workbench-c : \
#MM        workbench-libs-z-minigzip

#MM workbench-libs-z-minigzip : \
#MM        workbench-libs-z-linklib

TARGET_ISA_CFLAGS +=  -msse2 -msse4.1 -mpclmul

# We depend on build_module linking-in everything it finds in ./arch/
GENDIR_Z_ARCH:= $(GENDIR)/$(CURDIR)/z1/arch

SSE_FILES := \
    fill_window_sse crc_folding

SSE_OBJS := $(addprefix $(GENDIR_Z_ARCH)/, $(addsuffix .o, $(SSE_FILES)))
SSE_DEPS := $(addprefix $(GENDIR_Z_ARCH)/, $(addsuffix .d, $(SSE_FILES)))

#MM
workbench-libs-z-sse : $(SSE_OBJS)

%rule_compile_multi mmake=workbench-libs-z-sse \
    basenames="$(addprefix $(ARCHSRCDIR)/,$(SSE_FILES))" targetdir=$(GENDIR_Z_ARCH)

%include_deps depstargets=workbench-libs-z-sse deps=$(SSE_DEPS)


%common
