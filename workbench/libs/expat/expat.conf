##begin config
basename Expat
libbase ExpatBase
libbasetype struct Library
version 1.4
date 12.05.2012
copyright Copyright (C) 2001-2009 Expat maintainers, 2007-2012 Fredrik Wikstrom, 2012 The AROS Development Team
##end config

##begin cdef
#include <libraries/expat.h>
##end cdef

##begin functionlist
XML_Parser XML_ParserCreate(const XML_Char * encodingName) (A0)
.cfunction
XML_Parser XML_ParserCreateNS(const XML_Char * encodingName, XML_Char nsSep) (A0,D0)
.cfunction
XML_Parser XML_ParserCreate_MM(const XML_Char * encodingName, const XML_Memory_Handling_Suite * memsuite, const XML_Char * nameSep) (A0,A1,A2)
.cfunction
XML_Parser XML_ExternalEntityParserCreate(XML_Parser oldParser, const XML_Char * context, const XML_Char * encodingName) (A0,A1,A2)
.cfunction
void XML_ParserFree(XML_Parser parser) (A0)
.cfunction
int XML_Parse(XML_Parser parser, const char * s, int len, int isFinal) (A0,A1,D0,D1)
.cfunction
int XML_ParseBuffer(XML_Parser parser, int len, int isFinal) (A0,D0,D1)
.cfunction
void * XML_GetBuffer(XML_Parser parser, int len) (A0,D0)
.cfunction
void XML_SetStartElementHandler(XML_Parser parser, XML_StartElementHandler start) (A0,A1)
.cfunction
void XML_SetEndElementHandler(XML_Parser parser, XML_EndElementHandler end) (A0,A1)
.cfunction
void XML_SetElementHandler(XML_Parser parser, XML_StartElementHandler start, XML_EndElementHandler end) (A0,A1,A2)
.cfunction
void XML_SetCharacterDataHandler(XML_Parser parser, XML_CharacterDataHandler handler) (A0,A1)
.cfunction
void XML_SetProcessingInstructionHandler(XML_Parser parser, XML_ProcessingInstructionHandler handler) (A0,A1)
.cfunction
void XML_SetCommentHandler(XML_Parser parser, XML_CommentHandler handler) (A0,A1)
.cfunction
void XML_SetStartCdataSectionHandler(XML_Parser parser, XML_StartCdataSectionHandler start) (A0,A1)
.cfunction
void XML_SetEndCdataSectionHandler(XML_Parser parser, XML_EndCdataSectionHandler end) (A0,A1)
.cfunction
void XML_SetCdataSectionHandler(XML_Parser parser, XML_StartCdataSectionHandler start, XML_EndCdataSectionHandler end) (A0,A1,A2)
.cfunction
void XML_SetDefaultHandler(XML_Parser parser, XML_DefaultHandler handler) (A0,A1)
.cfunction
void XML_SetDefaultHandlerExpand(XML_Parser parser, XML_DefaultHandler handler) (A0,A1)
.cfunction
void XML_SetExternalEntityRefHandler(XML_Parser parser, XML_ExternalEntityRefHandler handler) (A0,A1)
.cfunction
void XML_SetExternalEntityRefHandlerArg(XML_Parser parser, void * arg) (A0,A1)
.cfunction
void XML_SetUnknownEncodingHandler(XML_Parser parser, XML_UnknownEncodingHandler handler, void * data) (A0,A1,A2)
.cfunction
void XML_SetStartNamespaceDeclHandler(XML_Parser parser, XML_StartNamespaceDeclHandler start) (A0,A1)
.cfunction
void XML_SetEndNamespaceDeclHandler(XML_Parser parser, XML_EndNamespaceDeclHandler end) (A0,A1)
.cfunction
void XML_SetNamespaceDeclHandler(XML_Parser parser, XML_StartNamespaceDeclHandler start, XML_EndNamespaceDeclHandler end) (A0,A1,A2)
.cfunction
void XML_SetXmlDeclHandler(XML_Parser parser, XML_XmlDeclHandler handler) (A0,A1)
.cfunction
void XML_SetStartDoctypeDeclHandler(XML_Parser parser, XML_StartDoctypeDeclHandler start) (A0,A1)
.cfunction
void XML_SetEndDoctypeDeclHandler(XML_Parser parser, XML_EndDoctypeDeclHandler end) (A0,A1)
.cfunction
void XML_SetDoctypeDeclHandler(XML_Parser parser, XML_StartDoctypeDeclHandler start, XML_EndDoctypeDeclHandler end) (A0,A1,A2)
.cfunction
void XML_SetElementDeclHandler(XML_Parser parser, XML_ElementDeclHandler eldecl) (A0,A1)
.cfunction
void XML_SetAttlistDeclHandler(XML_Parser parser, XML_AttlistDeclHandler attdecl) (A0,A1)
.cfunction
void XML_SetEntityDeclHandler(XML_Parser parser, XML_EntityDeclHandler handler) (A0,A1)
.cfunction
void XML_SetUnparsedEntityDeclHandler(XML_Parser parser, XML_UnparsedEntityDeclHandler handler) (A0,A1)
.cfunction
void XML_SetNotationDeclHandler(XML_Parser parser, XML_NotationDeclHandler handler) (A0,A1)
.cfunction
void XML_SetNotStandaloneHandler(XML_Parser parser, XML_NotStandaloneHandler handler) (A0,A1)
.cfunction
int XML_GetErrorCode(XML_Parser parser) (A0)
.cfunction
const XML_LChar * XML_ErrorString(int code) (D0)
.cfunction
long XML_GetCurrentByteIndex(XML_Parser parser) (A0)
.cfunction
int XML_GetCurrentLineNumber(XML_Parser parser) (A0)
.cfunction
int XML_GetCurrentColumnNumber(XML_Parser parser) (A0)
.cfunction
int XML_GetCurrentByteCount(XML_Parser parser) (A0)
.cfunction
const char * XML_GetInputContext(XML_Parser parser, int * offset, int * size) (A0,A1,A2)
.cfunction
void XML_SetUserData(XML_Parser parser, void * p) (A0,A1)
.cfunction
void XML_DefaultCurrent(XML_Parser parser) (A0)
.cfunction
void XML_UseParserAsHandlerArg(XML_Parser parser) (A0)
.cfunction
int XML_SetBase(XML_Parser parser, const XML_Char * p) (A0,A1)
.cfunction
const XML_Char * XML_GetBase(XML_Parser parser) (A0)
.cfunction
int XML_GetSpecifiedAttributeCount(XML_Parser parser) (A0)
.cfunction
int XML_GetIdAttributeIndex(XML_Parser parser) (A0)
.cfunction
int XML_SetEncoding(XML_Parser parser, const XML_Char * encodingName) (A0,A1)
.cfunction
int XML_SetParamEntityParsing(XML_Parser parser, int peParsing) (A0,D0)
.cfunction
void XML_SetReturnNSTriplet(XML_Parser parser, int do_nst) (A0,D0)
.cfunction
const XML_LChar * XML_ExpatVersion() ()
.cfunction
XML_Expat_Version XML_ExpatVersionInfo() ()
.cfunction
XML_Bool XML_ParserReset(XML_Parser parser, const XML_Char * encodingName) (A0,A1)
.cfunction
void XML_SetSkippedEntityHandler(XML_Parser parser, XML_SkippedEntityHandler handler) (A0,A1)
.cfunction
int XML_UseForeignDTD(XML_Parser parser, XML_Bool useDTD) (A0,D0)
.cfunction
const XML_Feature * XML_GetFeatureList() ()
.cfunction
int XML_StopParser(XML_Parser parser, XML_Bool resumable) (A0,D0)
.cfunction
int XML_ResumeParser(XML_Parser parser) (A0)
.cfunction
void XML_GetParsingStatus(XML_Parser parser, XML_ParsingStatus * status) (A0,A1)
.cfunction
void XML_FreeContentModel(XML_Parser parser, XML_Content * model) (A0,A1)
.cfunction
void * XML_MemMalloc(XML_Parser parser, size_t size) (A0,D0)
.cfunction
void * XML_MemRealloc(XML_Parser parser, void * ptr, size_t size) (A0,A1,D0)
.cfunction
void XML_MemFree(XML_Parser parser, void * ptr) (A0,A1)
.cfunction
##end functionlist
