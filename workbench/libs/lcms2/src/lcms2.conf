##begin config
basename lcms2
version 1.1
date 29.9.2014
copyright Copyright (C) 1998-2011 Marti Maria Saguer, 2013-2014 The AROS Development Team
options pertaskbase
rellib  stdcio
rellib  stdc
forcebase StdCIOBase
forcebase StdCBase
##end config

##begin cdef
#include <lcms2.h>
##end cdef

##begin functionlist
int               cmsstrcasecmp(const char* s1, const char* s2)
long int          cmsfilelength(FILE* f)
cmsBool           cmsPlugin(void* Plugin)
void              cmsUnregisterPlugins(void)
void              cmsSetLogErrorHandler(cmsLogErrorHandlerFunction Fn)
const cmsCIEXYZ*  cmsD50_XYZ(void)
const cmsCIExyY*  cmsD50_xyY(void)
void              cmsXYZ2xyY(cmsCIExyY* Dest, const cmsCIEXYZ* Source)
void              cmsxyY2XYZ(cmsCIEXYZ* Dest, const cmsCIExyY* Source)
void              cmsXYZ2Lab(const cmsCIEXYZ* WhitePoint, cmsCIELab* Lab, const cmsCIEXYZ* xyz)
void              cmsLab2XYZ(const cmsCIEXYZ* WhitePoint, cmsCIEXYZ* xyz, const cmsCIELab* Lab)
void              cmsLab2LCh(cmsCIELCh*LCh, const cmsCIELab* Lab)
void              cmsLCh2Lab(cmsCIELab* Lab, const cmsCIELCh* LCh)
void              cmsLabEncoded2Float(cmsCIELab* Lab, const cmsUInt16Number wLab[3])
void              cmsLabEncoded2FloatV2(cmsCIELab* Lab, const cmsUInt16Number wLab[3])
void              cmsFloat2LabEncoded(cmsUInt16Number wLab[3], const cmsCIELab* Lab)
void              cmsFloat2LabEncodedV2(cmsUInt16Number wLab[3], const cmsCIELab* Lab)
void              cmsXYZEncoded2Float(cmsCIEXYZ* fxyz, const cmsUInt16Number XYZ[3])
void              cmsFloat2XYZEncoded(cmsUInt16Number XYZ[3], const cmsCIEXYZ* fXYZ)
cmsFloat64Number  cmsDeltaE(const cmsCIELab* Lab1, const cmsCIELab* Lab2)
cmsFloat64Number  cmsCIE94DeltaE(const cmsCIELab* Lab1, const cmsCIELab* Lab2)
cmsFloat64Number  cmsBFDdeltaE(const cmsCIELab* Lab1, const cmsCIELab* Lab2)
cmsFloat64Number  cmsCMCdeltaE(const cmsCIELab* Lab1, const cmsCIELab* Lab2, cmsFloat64Number l, cmsFloat64Number c)
cmsFloat64Number  cmsCIE2000DeltaE(const cmsCIELab* Lab1, const cmsCIELab* Lab2, cmsFloat64Number Kl, cmsFloat64Number Kc, cmsFloat64Number Kh)
cmsBool           cmsWhitePointFromTemp(cmsCIExyY* WhitePoint, cmsFloat64Number  TempK)
cmsBool           cmsTempFromWhitePoint(cmsFloat64Number* TempK, const cmsCIExyY* WhitePoint)
cmsBool           cmsAdaptToIlluminant(cmsCIEXYZ* Result, const cmsCIEXYZ* SourceWhitePt, const cmsCIEXYZ* Illuminant, const cmsCIEXYZ* Value)
cmsHANDLE         cmsCIECAM02Init(cmsContext ContextID, const cmsViewingConditions* pVC)
void              cmsCIECAM02Done(cmsHANDLE hModel)
void              cmsCIECAM02Forward(cmsHANDLE hModel, const cmsCIEXYZ* pIn, cmsJCh* pOut)
void              cmsCIECAM02Reverse(cmsHANDLE hModel, const cmsJCh* pIn,    cmsCIEXYZ* pOut)
cmsToneCurve*     cmsBuildSegmentedToneCurve(cmsContext ContextID, cmsInt32Number nSegments, const cmsCurveSegment Segments[])
cmsToneCurve*     cmsBuildParametricToneCurve(cmsContext ContextID, cmsInt32Number Type, const cmsFloat64Number Params[])
cmsToneCurve*     cmsBuildGamma(cmsContext ContextID, cmsFloat64Number Gamma)
cmsToneCurve*     cmsBuildTabulatedToneCurve16(cmsContext ContextID, cmsInt32Number nEntries, const cmsUInt16Number values[])
cmsToneCurve*     cmsBuildTabulatedToneCurveFloat(cmsContext ContextID, cmsUInt32Number nEntries, const cmsFloat32Number values[])
void              cmsFreeToneCurve(cmsToneCurve* Curve)
void              cmsFreeToneCurveTriple(cmsToneCurve* Curve[3])
cmsToneCurve*     cmsDupToneCurve(const cmsToneCurve* Src)
cmsToneCurve*     cmsReverseToneCurve(const cmsToneCurve* InGamma)
cmsToneCurve*     cmsReverseToneCurveEx(cmsInt32Number nResultSamples, const cmsToneCurve* InGamma)
cmsToneCurve*     cmsJoinToneCurve(cmsContext ContextID, const cmsToneCurve* X,  const cmsToneCurve* Y, cmsUInt32Number nPoints)
cmsBool           cmsSmoothToneCurve(cmsToneCurve* Tab, cmsFloat64Number lambda)
cmsFloat32Number  cmsEvalToneCurveFloat(const cmsToneCurve* Curve, cmsFloat32Number v)
cmsUInt16Number   cmsEvalToneCurve16(const cmsToneCurve* Curve, cmsUInt16Number v)
cmsBool           cmsIsToneCurveMultisegment(const cmsToneCurve* InGamma)
cmsBool           cmsIsToneCurveLinear(const cmsToneCurve* Curve)
cmsBool           cmsIsToneCurveMonotonic(const cmsToneCurve* t)
cmsBool           cmsIsToneCurveDescending(const cmsToneCurve* t)
cmsInt32Number    cmsGetToneCurveParametricType(const cmsToneCurve* t)
cmsFloat64Number  cmsEstimateGamma(const cmsToneCurve* t, cmsFloat64Number Precision)
cmsUInt32Number   cmsGetToneCurveEstimatedTableEntries(const cmsToneCurve* t)
const cmsUInt16Number*  cmsGetToneCurveEstimatedTable(const cmsToneCurve* t)
cmsPipeline*      cmsPipelineAlloc(cmsContext ContextID, cmsUInt32Number InputChannels, cmsUInt32Number OutputChannels)
void              cmsPipelineFree(cmsPipeline* lut)
cmsPipeline*      cmsPipelineDup(const cmsPipeline* Orig)
cmsContext        cmsGetPipelineContextID(const cmsPipeline* lut)
cmsUInt32Number   cmsPipelineInputChannels(const cmsPipeline* lut)
cmsUInt32Number   cmsPipelineOutputChannels(const cmsPipeline* lut)
cmsUInt32Number   cmsPipelineStageCount(const cmsPipeline* lut)
cmsStage*         cmsPipelineGetPtrToFirstStage(const cmsPipeline* lut)
cmsStage*         cmsPipelineGetPtrToLastStage(const cmsPipeline* lut)
void              cmsPipelineEval16(const cmsUInt16Number In[], cmsUInt16Number Out[], const cmsPipeline* lut)
void              cmsPipelineEvalFloat(const cmsFloat32Number In[], cmsFloat32Number Out[], const cmsPipeline* lut)
cmsBool           cmsPipelineEvalReverseFloat(cmsFloat32Number Target[], cmsFloat32Number Result[], cmsFloat32Number Hint[], const cmsPipeline* lut)
cmsBool           cmsPipelineCat(cmsPipeline* l1, const cmsPipeline* l2)
cmsBool           cmsPipelineSetSaveAs8bitsFlag(cmsPipeline* lut, cmsBool On)
int               cmsPipelineInsertStage(cmsPipeline* lut, cmsStageLoc loc, cmsStage* mpe)
void              cmsPipelineUnlinkStage(cmsPipeline* lut, cmsStageLoc loc, cmsStage** mpe)
cmsBool           cmsPipelineCheckAndRetreiveStages(const cmsPipeline* Lut, cmsUInt32Number n, ...)
cmsStage*         cmsStageAllocIdentity(cmsContext ContextID, cmsUInt32Number nChannels)
cmsStage*         cmsStageAllocToneCurves(cmsContext ContextID, cmsUInt32Number nChannels, cmsToneCurve* const Curves[])
cmsStage*         cmsStageAllocMatrix(cmsContext ContextID, cmsUInt32Number Rows, cmsUInt32Number Cols, const cmsFloat64Number* Matrix, const cmsFloat64Number* Offset)
cmsStage*         cmsStageAllocCLut16bit(cmsContext ContextID, cmsUInt32Number nGridPoints, cmsUInt32Number inputChan, cmsUInt32Number outputChan, const cmsUInt16Number* Table)
cmsStage*         cmsStageAllocCLutFloat(cmsContext ContextID, cmsUInt32Number nGridPoints, cmsUInt32Number inputChan, cmsUInt32Number outputChan, const cmsFloat32Number* Table)
cmsStage*         cmsStageAllocCLut16bitGranular(cmsContext ContextID, const cmsUInt32Number clutPoints[], cmsUInt32Number inputChan, cmsUInt32Number outputChan, const cmsUInt16Number* Table)
cmsStage*         cmsStageAllocCLutFloatGranular(cmsContext ContextID, const cmsUInt32Number clutPoints[], cmsUInt32Number inputChan, cmsUInt32Number outputChan, const cmsFloat32Number* Table)
cmsStage*         cmsStageDup(cmsStage* mpe)
void              cmsStageFree(cmsStage* mpe)
cmsStage*         cmsStageNext(const cmsStage* mpe)
cmsUInt32Number   cmsStageInputChannels(const cmsStage* mpe)
cmsUInt32Number   cmsStageOutputChannels(const cmsStage* mpe)
cmsStageSignature cmsStageType(const cmsStage* mpe)
void*             cmsStageData(const cmsStage* mpe)
cmsBool           cmsStageSampleCLut16bit(cmsStage* mpe,    cmsSAMPLER16 Sampler, void* Cargo, cmsUInt32Number dwFlags)
cmsBool           cmsStageSampleCLutFloat(cmsStage* mpe, cmsSAMPLERFLOAT Sampler, void* Cargo, cmsUInt32Number dwFlags)
cmsBool           cmsSliceSpace16(cmsUInt32Number nInputs, const cmsUInt32Number clutPoints[], cmsSAMPLER16 Sampler, void * Cargo)
cmsBool           cmsSliceSpaceFloat(cmsUInt32Number nInputs, const cmsUInt32Number clutPoints[], cmsSAMPLERFLOAT Sampler, void * Cargo)
cmsMLU*           cmsMLUalloc(cmsContext ContextID, cmsUInt32Number nItems)
void              cmsMLUfree(cmsMLU* mlu)
cmsMLU*           cmsMLUdup(const cmsMLU* mlu)
cmsBool           cmsMLUsetASCII(cmsMLU* mlu, const char LanguageCode[3], const char CountryCode[3], const char* ASCIIString)
cmsBool           cmsMLUsetWide(cmsMLU* mlu, const char LanguageCode[3], const char CountryCode[3], const wchar_t* WideString)
cmsUInt32Number   cmsMLUgetASCII(const cmsMLU* mlu, const char LanguageCode[3], const char CountryCode[3], char* Buffer,    cmsUInt32Number BufferSize)
cmsUInt32Number   cmsMLUgetWide(const cmsMLU* mlu, const char LanguageCode[3], const char CountryCode[3], wchar_t* Buffer, cmsUInt32Number BufferSize)
cmsBool           cmsMLUgetTranslation(const cmsMLU* mlu, const char LanguageCode[3], const char CountryCode[3], char ObtainedLanguage[3], char ObtainedCountry[3])
cmsNAMEDCOLORLIST* cmsAllocNamedColorList(cmsContext ContextID, cmsUInt32Number n, cmsUInt32Number ColorantCount, const char* Prefix, const char* Suffix)
void               cmsFreeNamedColorList(cmsNAMEDCOLORLIST* v)
cmsNAMEDCOLORLIST* cmsDupNamedColorList(const cmsNAMEDCOLORLIST* v)
cmsBool            cmsAppendNamedColor(cmsNAMEDCOLORLIST* v, const char* Name, cmsUInt16Number PCS[3], cmsUInt16Number Colorant[cmsMAXCHANNELS])
cmsUInt32Number    cmsNamedColorCount(const cmsNAMEDCOLORLIST* v)
cmsInt32Number     cmsNamedColorIndex(const cmsNAMEDCOLORLIST* v, const char* Name)
cmsBool            cmsNamedColorInfo(const cmsNAMEDCOLORLIST* NamedColorList, cmsUInt32Number nColor, char* Name, char* Prefix, char* Suffix, cmsUInt16Number* PCS, cmsUInt16Number* Colorant)
cmsNAMEDCOLORLIST* cmsGetNamedColorList(cmsHTRANSFORM xform)
cmsSEQ*           cmsAllocProfileSequenceDescription(cmsContext ContextID, cmsUInt32Number n)
cmsSEQ*           cmsDupProfileSequenceDescription(const cmsSEQ* pseq)
void              cmsFreeProfileSequenceDescription(cmsSEQ* pseq)
cmsHANDLE           cmsDictAlloc(cmsContext ContextID)
void                cmsDictFree(cmsHANDLE hDict)
cmsHANDLE           cmsDictDup(cmsHANDLE hDict)
cmsBool             cmsDictAddEntry(cmsHANDLE hDict, const wchar_t* Name, const wchar_t* Value, const cmsMLU *DisplayName, const cmsMLU *DisplayValue)
const cmsDICTentry* cmsDictGetEntryList(cmsHANDLE hDict)
const cmsDICTentry* cmsDictNextEntry(const cmsDICTentry* e)
cmsHPROFILE       cmsCreateProfilePlaceholder(cmsContext ContextID)
cmsContext        cmsGetProfileContextID(cmsHPROFILE hProfile)
cmsInt32Number    cmsGetTagCount(cmsHPROFILE hProfile)
cmsTagSignature   cmsGetTagSignature(cmsHPROFILE hProfile, cmsUInt32Number n)
cmsBool           cmsIsTag(cmsHPROFILE hProfile, cmsTagSignature sig)
void*             cmsReadTag(cmsHPROFILE hProfile, cmsTagSignature sig)
cmsBool           cmsWriteTag(cmsHPROFILE hProfile, cmsTagSignature sig, const void* data)
cmsBool           cmsLinkTag(cmsHPROFILE hProfile, cmsTagSignature sig, cmsTagSignature dest)
cmsTagSignature   cmsTagLinkedTo(cmsHPROFILE hProfile, cmsTagSignature sig)
cmsInt32Number    cmsReadRawTag(cmsHPROFILE hProfile, cmsTagSignature sig, void* Buffer, cmsUInt32Number BufferSize)
cmsBool           cmsWriteRawTag(cmsHPROFILE hProfile, cmsTagSignature sig, const void* data, cmsUInt32Number Size)
cmsUInt32Number   cmsGetHeaderFlags(cmsHPROFILE hProfile)
void              cmsGetHeaderAttributes(cmsHPROFILE hProfile, cmsUInt64Number* Flags)
void              cmsGetHeaderProfileID(cmsHPROFILE hProfile, cmsUInt8Number* ProfileID)
cmsBool           cmsGetHeaderCreationDateTime(cmsHPROFILE hProfile, struct tm *Dest)
cmsUInt32Number   cmsGetHeaderRenderingIntent(cmsHPROFILE hProfile)
void              cmsSetHeaderFlags(cmsHPROFILE hProfile, cmsUInt32Number Flags)
cmsUInt32Number   cmsGetHeaderManufacturer(cmsHPROFILE hProfile)
void              cmsSetHeaderManufacturer(cmsHPROFILE hProfile, cmsUInt32Number manufacturer)
cmsUInt32Number   cmsGetHeaderModel(cmsHPROFILE hProfile)
void              cmsSetHeaderModel(cmsHPROFILE hProfile, cmsUInt32Number model)
void              cmsSetHeaderAttributes(cmsHPROFILE hProfile, cmsUInt64Number Flags)
void              cmsSetHeaderProfileID(cmsHPROFILE hProfile, cmsUInt8Number* ProfileID)
void              cmsSetHeaderRenderingIntent(cmsHPROFILE hProfile, cmsUInt32Number RenderingIntent)
cmsColorSpaceSignature cmsGetPCS(cmsHPROFILE hProfile)
void              cmsSetPCS(cmsHPROFILE hProfile, cmsColorSpaceSignature pcs)
cmsColorSpaceSignature cmsGetColorSpace(cmsHPROFILE hProfile)
void              cmsSetColorSpace(cmsHPROFILE hProfile, cmsColorSpaceSignature sig)
cmsProfileClassSignature cmsGetDeviceClass(cmsHPROFILE hProfile)
void              cmsSetDeviceClass(cmsHPROFILE hProfile, cmsProfileClassSignature sig)
void              cmsSetProfileVersion(cmsHPROFILE hProfile, cmsFloat64Number Version)
cmsFloat64Number  cmsGetProfileVersion(cmsHPROFILE hProfile)
cmsUInt32Number   cmsGetEncodedICCversion(cmsHPROFILE hProfile)
void              cmsSetEncodedICCversion(cmsHPROFILE hProfile, cmsUInt32Number Version)
cmsBool           cmsIsIntentSupported(cmsHPROFILE hProfile, cmsUInt32Number Intent, cmsUInt32Number UsedDirection)
cmsBool           cmsIsMatrixShaper(cmsHPROFILE hProfile)
cmsBool           cmsIsCLUT(cmsHPROFILE hProfile, cmsUInt32Number Intent, cmsUInt32Number UsedDirection)
cmsColorSpaceSignature   _cmsICCcolorSpace(int OurNotation)
int              _cmsLCMScolorSpace(cmsColorSpaceSignature ProfileSpace)
cmsUInt32Number  cmsChannelsOf(cmsColorSpaceSignature ColorSpace)
cmsUInt32Number  cmsFormatterForColorspaceOfProfile(cmsHPROFILE hProfile, cmsUInt32Number nBytes, cmsBool lIsFloat)
cmsUInt32Number  cmsFormatterForPCSOfProfile(cmsHPROFILE hProfile, cmsUInt32Number nBytes, cmsBool lIsFloat)
cmsUInt32Number  cmsGetProfileInfo(cmsHPROFILE hProfile, cmsInfoType Info, const char LanguageCode[3], const char CountryCode[3], wchar_t* Buffer, cmsUInt32Number BufferSize)
cmsUInt32Number  cmsGetProfileInfoASCII(cmsHPROFILE hProfile, cmsInfoType Info, const char LanguageCode[3], const char CountryCode[3], char* Buffer, cmsUInt32Number BufferSize)
cmsIOHANDLER*    cmsOpenIOhandlerFromFile(cmsContext ContextID, const char* FileName, const char* AccessMode)
cmsIOHANDLER*    cmsOpenIOhandlerFromStream(cmsContext ContextID, FILE* Stream)
cmsIOHANDLER*    cmsOpenIOhandlerFromMem(cmsContext ContextID, void *Buffer, cmsUInt32Number size, const char* AccessMode)
cmsIOHANDLER*    cmsOpenIOhandlerFromNULL(cmsContext ContextID)
cmsBool          cmsCloseIOhandler(cmsIOHANDLER* io)
cmsBool          cmsMD5computeID(cmsHPROFILE hProfile)
cmsHPROFILE      cmsOpenProfileFromFile(const char *ICCProfile, const char *sAccess)
cmsHPROFILE      cmsOpenProfileFromFileTHR(cmsContext ContextID, const char *ICCProfile, const char *sAccess)
cmsHPROFILE      cmsOpenProfileFromStream(FILE* ICCProfile, const char* sAccess)
cmsHPROFILE      cmsOpenProfileFromStreamTHR(cmsContext ContextID, FILE* ICCProfile, const char* sAccess)
cmsHPROFILE      cmsOpenProfileFromMem(const void * MemPtr, cmsUInt32Number dwSize)
cmsHPROFILE      cmsOpenProfileFromMemTHR(cmsContext ContextID, const void * MemPtr, cmsUInt32Number dwSize)
cmsHPROFILE      cmsOpenProfileFromIOhandlerTHR(cmsContext ContextID, cmsIOHANDLER* io)
cmsBool          cmsCloseProfile(cmsHPROFILE hProfile)
cmsBool          cmsSaveProfileToFile(cmsHPROFILE hProfile, const char* FileName)
cmsBool          cmsSaveProfileToStream(cmsHPROFILE hProfile, FILE* Stream)
cmsBool          cmsSaveProfileToMem(cmsHPROFILE hProfile, void *MemPtr, cmsUInt32Number* BytesNeeded)
cmsUInt32Number  cmsSaveProfileToIOhandler(cmsHPROFILE hProfile, cmsIOHANDLER* io)
cmsHPROFILE      cmsCreateRGBProfileTHR(cmsContext ContextID, const cmsCIExyY* WhitePoint, const cmsCIExyYTRIPLE* Primaries, cmsToneCurve* const TransferFunction[3])
cmsHPROFILE      cmsCreateRGBProfile(const cmsCIExyY* WhitePoint, const cmsCIExyYTRIPLE* Primaries, cmsToneCurve* const TransferFunction[3])
cmsHPROFILE      cmsCreateGrayProfileTHR(cmsContext ContextID, const cmsCIExyY* WhitePoint, const cmsToneCurve* TransferFunction)
cmsHPROFILE      cmsCreateGrayProfile(const cmsCIExyY* WhitePoint, const cmsToneCurve* TransferFunction)
cmsHPROFILE      cmsCreateLinearizationDeviceLinkTHR(cmsContext ContextID, cmsColorSpaceSignature ColorSpace, cmsToneCurve* const TransferFunctions[])
cmsHPROFILE      cmsCreateLinearizationDeviceLink(cmsColorSpaceSignature ColorSpace, cmsToneCurve* const TransferFunctions[])
cmsHPROFILE      cmsCreateInkLimitingDeviceLinkTHR(cmsContext ContextID, cmsColorSpaceSignature ColorSpace, cmsFloat64Number Limit)
cmsHPROFILE      cmsCreateInkLimitingDeviceLink(cmsColorSpaceSignature ColorSpace, cmsFloat64Number Limit)
cmsHPROFILE      cmsCreateLab2ProfileTHR(cmsContext ContextID, const cmsCIExyY* WhitePoint)
cmsHPROFILE      cmsCreateLab2Profile(const cmsCIExyY* WhitePoint)
cmsHPROFILE      cmsCreateLab4ProfileTHR(cmsContext ContextID, const cmsCIExyY* WhitePoint)
cmsHPROFILE      cmsCreateLab4Profile(const cmsCIExyY* WhitePoint)
cmsHPROFILE      cmsCreateXYZProfileTHR(cmsContext ContextID)
cmsHPROFILE      cmsCreateXYZProfile(void)
cmsHPROFILE      cmsCreate_sRGBProfileTHR(cmsContext ContextID)
cmsHPROFILE      cmsCreate_sRGBProfile(void)
cmsHPROFILE      cmsCreateBCHSWabstractProfileTHR(cmsContext ContextID, int nLUTPoints, cmsFloat64Number Bright, cmsFloat64Number Contrast, cmsFloat64Number Hue, cmsFloat64Number Saturation, int TempSrc, int TempDest)
cmsHPROFILE      cmsCreateBCHSWabstractProfile(int nLUTPoints, cmsFloat64Number Bright, cmsFloat64Number Contrast, cmsFloat64Number Hue, cmsFloat64Number Saturation, int TempSrc, int TempDest)
cmsHPROFILE      cmsCreateNULLProfileTHR(cmsContext ContextID)
cmsHPROFILE      cmsCreateNULLProfile(void)
cmsHPROFILE      cmsTransform2DeviceLink(cmsHTRANSFORM hTransform, cmsFloat64Number Version, cmsUInt32Number dwFlags)
cmsUInt32Number  cmsGetSupportedIntents(cmsUInt32Number nMax, cmsUInt32Number* Codes, char** Descriptions)
cmsHTRANSFORM    cmsCreateTransformTHR(cmsContext ContextID, cmsHPROFILE Input, cmsUInt32Number InputFormat, cmsHPROFILE Output, cmsUInt32Number OutputFormat, cmsUInt32Number Intent, cmsUInt32Number dwFlags)
cmsHTRANSFORM    cmsCreateTransform(cmsHPROFILE Input, cmsUInt32Number InputFormat, cmsHPROFILE Output, cmsUInt32Number OutputFormat, cmsUInt32Number Intent, cmsUInt32Number dwFlags)
cmsHTRANSFORM    cmsCreateProofingTransformTHR(cmsContext ContextID, cmsHPROFILE Input, cmsUInt32Number InputFormat, cmsHPROFILE Output, cmsUInt32Number OutputFormat, cmsHPROFILE Proofing, cmsUInt32Number Intent, cmsUInt32Number ProofingIntent, cmsUInt32Number dwFlags)
cmsHTRANSFORM    cmsCreateProofingTransform(cmsHPROFILE Input, cmsUInt32Number InputFormat, cmsHPROFILE Output, cmsUInt32Number OutputFormat, cmsHPROFILE Proofing, cmsUInt32Number Intent, cmsUInt32Number ProofingIntent, cmsUInt32Number dwFlags)
cmsHTRANSFORM    cmsCreateMultiprofileTransformTHR(cmsContext ContextID, cmsHPROFILE hProfiles[], cmsUInt32Number nProfiles, cmsUInt32Number InputFormat, cmsUInt32Number OutputFormat, cmsUInt32Number Intent, cmsUInt32Number dwFlags)
cmsHTRANSFORM    cmsCreateMultiprofileTransform(cmsHPROFILE hProfiles[], cmsUInt32Number nProfiles, cmsUInt32Number InputFormat, cmsUInt32Number OutputFormat, cmsUInt32Number Intent, cmsUInt32Number dwFlags)
cmsHTRANSFORM    cmsCreateExtendedTransform(cmsContext ContextID, cmsUInt32Number nProfiles, cmsHPROFILE hProfiles[], cmsBool  BPC[], cmsUInt32Number Intents[], cmsFloat64Number AdaptationStates[], cmsHPROFILE hGamutProfile, cmsUInt32Number nGamutPCSposition, cmsUInt32Number InputFormat, cmsUInt32Number OutputFormat, cmsUInt32Number dwFlags)
void             cmsDeleteTransform(cmsHTRANSFORM hTransform)
void             cmsDoTransform(cmsHTRANSFORM Transform, const void * InputBuffer, void * OutputBuffer, cmsUInt32Number Size)
void             cmsDoTransformStride(cmsHTRANSFORM Transform, const void * InputBuffer, void * OutputBuffer, cmsUInt32Number Size, cmsUInt32Number Stride)
void             cmsSetAlarmCodes(cmsUInt16Number NewAlarm[cmsMAXCHANNELS])
void             cmsGetAlarmCodes(cmsUInt16Number NewAlarm[cmsMAXCHANNELS])
cmsFloat64Number cmsSetAdaptationState(cmsFloat64Number d)
cmsContext       cmsGetTransformContextID(cmsHTRANSFORM hTransform)
cmsUInt32Number  cmsGetTransformInputFormat(cmsHTRANSFORM hTransform)
cmsUInt32Number  cmsGetTransformOutputFormat(cmsHTRANSFORM hTransform)
cmsBool          cmsChangeBuffersFormat(cmsHTRANSFORM hTransform, cmsUInt32Number InputFormat, cmsUInt32Number OutputFormat)
cmsUInt32Number  cmsGetPostScriptColorResource(cmsContext ContextID, cmsPSResourceType Type, cmsHPROFILE hProfile, cmsUInt32Number Intent, cmsUInt32Number dwFlags, cmsIOHANDLER* io)
cmsUInt32Number  cmsGetPostScriptCSA(cmsContext ContextID, cmsHPROFILE hProfile, cmsUInt32Number Intent, cmsUInt32Number dwFlags, void* Buffer, cmsUInt32Number dwBufferLen)
cmsUInt32Number  cmsGetPostScriptCRD(cmsContext ContextID, cmsHPROFILE hProfile, cmsUInt32Number Intent, cmsUInt32Number dwFlags, void* Buffer, cmsUInt32Number dwBufferLen)
cmsHANDLE        cmsIT8Alloc(cmsContext ContextID)
void             cmsIT8Free(cmsHANDLE hIT8)
cmsUInt32Number  cmsIT8TableCount(cmsHANDLE hIT8)
cmsInt32Number   cmsIT8SetTable(cmsHANDLE hIT8, cmsUInt32Number nTable)
cmsHANDLE        cmsIT8LoadFromFile(cmsContext ContextID, const char* cFileName)
cmsHANDLE        cmsIT8LoadFromMem(cmsContext ContextID, void *Ptr, cmsUInt32Number len)
cmsBool          cmsIT8SaveToFile(cmsHANDLE hIT8, const char* cFileName)
cmsBool          cmsIT8SaveToMem(cmsHANDLE hIT8, void *MemPtr, cmsUInt32Number* BytesNeeded)
const char*      cmsIT8GetSheetType(cmsHANDLE hIT8)
cmsBool          cmsIT8SetSheetType(cmsHANDLE hIT8, const char* Type)
cmsBool          cmsIT8SetComment(cmsHANDLE hIT8, const char* cComment)
cmsBool          cmsIT8SetPropertyStr(cmsHANDLE hIT8, const char* cProp, const char *Str)
cmsBool          cmsIT8SetPropertyDbl(cmsHANDLE hIT8, const char* cProp, cmsFloat64Number Val)
cmsBool          cmsIT8SetPropertyHex(cmsHANDLE hIT8, const char* cProp, cmsUInt32Number Val)
cmsBool          cmsIT8SetPropertyMulti(cmsHANDLE hIT8, const char* Key, const char* SubKey, const char *Buffer)
cmsBool          cmsIT8SetPropertyUncooked(cmsHANDLE hIT8, const char* Key, const char* Buffer)
const char*      cmsIT8GetProperty(cmsHANDLE hIT8, const char* cProp)
cmsFloat64Number cmsIT8GetPropertyDbl(cmsHANDLE hIT8, const char* cProp)
const char*      cmsIT8GetPropertyMulti(cmsHANDLE hIT8, const char* Key, const char *SubKey)
cmsUInt32Number  cmsIT8EnumProperties(cmsHANDLE hIT8, char ***PropertyNames)
cmsUInt32Number  cmsIT8EnumPropertyMulti(cmsHANDLE hIT8, const char* cProp, const char ***SubpropertyNames)
const char*      cmsIT8GetDataRowCol(cmsHANDLE hIT8, int row, int col)
cmsFloat64Number cmsIT8GetDataRowColDbl(cmsHANDLE hIT8, int row, int col)
cmsBool          cmsIT8SetDataRowCol(cmsHANDLE hIT8, int row, int col, const char* Val)
cmsBool          cmsIT8SetDataRowColDbl(cmsHANDLE hIT8, int row, int col, cmsFloat64Number Val)
const char*      cmsIT8GetData(cmsHANDLE hIT8, const char* cPatch, const char* cSample)
cmsFloat64Number cmsIT8GetDataDbl(cmsHANDLE hIT8, const char* cPatch, const char* cSample)
cmsBool          cmsIT8SetData(cmsHANDLE hIT8, const char* cPatch, const char* cSample, const char *Val)
cmsBool          cmsIT8SetDataDbl(cmsHANDLE hIT8, const char* cPatch, const char* cSample, cmsFloat64Number Val)
int              cmsIT8FindDataFormat(cmsHANDLE hIT8, const char* cSample)
cmsBool          cmsIT8SetDataFormat(cmsHANDLE hIT8, int n, const char *Sample)
int              cmsIT8EnumDataFormat(cmsHANDLE hIT8, char ***SampleNames)
const char*      cmsIT8GetPatchName(cmsHANDLE hIT8, int nPatch, char* buffer)
int              cmsIT8GetPatchByName(cmsHANDLE hIT8, const char *cPatch)
int              cmsIT8SetTableByLabel(cmsHANDLE hIT8, const char* cSet, const char* cField, const char* ExpectedType)
cmsBool          cmsIT8SetIndexColumn(cmsHANDLE hIT8, const char* cSample)
void             cmsIT8DefineDblFormat(cmsHANDLE hIT8, const char* Formatter)
cmsHANDLE        cmsGBDAlloc(cmsContext ContextID)
void             cmsGBDFree(cmsHANDLE hGBD)
cmsBool          cmsGDBAddPoint(cmsHANDLE hGBD, const cmsCIELab* Lab)
cmsBool          cmsGDBCompute(cmsHANDLE  hGDB, cmsUInt32Number dwFlags)
cmsBool          cmsGDBCheckPoint(cmsHANDLE hGBD, const cmsCIELab* Lab)
cmsBool          cmsDetectBlackPoint(cmsCIEXYZ* BlackPoint, cmsHPROFILE hProfile, cmsUInt32Number Intent, cmsUInt32Number dwFlags)
cmsBool          cmsDetectDestinationBlackPoint(cmsCIEXYZ* BlackPoint, cmsHPROFILE hProfile, cmsUInt32Number Intent, cmsUInt32Number dwFlags)
cmsFloat64Number cmsDetectTAC(cmsHPROFILE hProfile)
cmsBool          cmsDesaturateLab(cmsCIELab* Lab, double amax, double amin, double bmax, double bmin)
##end functionlist
