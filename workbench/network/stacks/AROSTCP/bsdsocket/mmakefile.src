#   $Id$
include $(TOP)/config/make.cfg

#
# Copyright (C) 1993 AmiTCP/IP Group, <amitcp-group@hut.fi>
#                    Helsinki University of Technology, Finland.
#                    All rights reserved.
# Copyright (C) 2005 Neil Cafferkey
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston,
# MA 02111-1307, USA.
#

SYS_H= \
	sys/synch.h sys/uio.h \
	sys/kernel.h sys/malloc.h sys/mbuf.h sys/queue.h \
	sys/socketvar.h sys/domain.h sys/protosw.h \
	sys/systm.h 

PROTOS_H= \
	protos/kern/amiga_api_protos.h 	protos/kern/amiga_main_protos.h \
	protos/kern/amiga_select_protos.h protos/kern/amiga_time_protos.h \
	protos/kern/amiga_userlib_protos.h protos/kern/kern_malloc_protos.h \
	protos/kern/kern_synch_protos.h protos/kern/subr_prf_protos.h \
	protos/kern/uipc_domain_protos.h \
	protos/kern/uipc_socket2_protos.h protos/kern/uipc_socket_protos.h \
	protos/net/if_loop_protos.h protos/net/if_protos.h \
	protos/net/radix_protos.h protos/net/raw_cb_protos.h \
	protos/net/raw_usrreq_protos.h protos/net/rtsock_protos.h \
	protos/netinet/in_cksum_protos.h protos/netinet/in_pcb_protos.h \
	protos/netinet/in_proto_protos.h protos/netinet/in_protos.h \
	protos/netinet/ip_icmp_protos.h protos/netinet/ip_input_protos.h \
	protos/netinet/ip_output_protos.h protos/netinet/raw_ip_protos.h \
	protos/netinet/tcp_debug_protos.h protos/netinet/tcp_input_protos.h \
	protos/netinet/tcp_output_protos.h protos/netinet/tcp_subr_protos.h \
	protos/netinet/tcp_timer_protos.h protos/netinet/tcp_usrreq_protos.h \
	protos/netinet/udp_usrreq_protos.h

# Protocol inspecific network routines:
# network interfaces, input queue scheduling, 
# raw sockets, routing
NET_C= \
	net/if net/if_loop net/pfil \
	net/raw_cb net/raw_usrreq \
	net/route net/rtsock net/radix \
	net/if_sana net/netisr net/sana2config \
	net/sana2copybuff net/sana2arp net/sana2perror

NET_H= \
	net/if_types.h net/if_sana.h \
	net/sana2request.h net/sana2arp.h net/sana2config.h \
	net/netisr.h net/raw_cb.h

# netinet -- internet protocols (ip, icmp, tcp, udp, arp)
NETINET_C= \
	netinet/in netinet/in_cksum netinet/in_pcb netinet/in_proto \
	netinet/ip_icmp \
	netinet/ip_input netinet/ip_output netinet/raw_ip \
	netinet/tcp_debug netinet/tcp_input netinet/tcp_output \
	netinet/tcp_subr netinet/tcp_timer netinet/tcp_usrreq \
	netinet/udp_usrreq

NETINET_H= \
	netinet/in_pcb.h netinet/in_var.h netinet/icmp_var.h  \
	netinet/tcpip.h netinet/tcp_debug.h netinet/tcp_fsm.h \
	netinet/tcp_seq.h netinet/tcp_timer.h netinet/tcp_var.h \
	netinet/udp_var.h 


# "Kernel" sources
# main, timeouts, syncronization, memory management,
# BSD socket ("Unix interprocess communication") routines,
# logging and netstat rexx interface 
KERN_C= \
	kern/amiga_main kern/amiga_time kern/amiga_config \
	kern/amiga_netdb kern/amiga_gui kern/amiga_cx \
	kern/amiga_dhcp kern/amiga_rc kern/kern_subr \
	kern/kern_synch kern/kern_malloc kern/uipc_mbuf \
	kern/uipc_domain kern/uipc_socket kern/uipc_socket2 \
	kern/amiga_log kern/amiga_cstat kern/amiga_rexx \
	kern/subr_prf kern/accesscontrol kern/config_var

KERN_H= \
	kern/amiga_includes.h kern/amiga_time.h kern/amiga_config.h \
	kern/amiga_netdb.h kern/amiga_gui.h kern/amiga_log.h \
	kern/amiga_cx.h kern/amiga_dhcp.h kern/amiga_rc.h \
        kern/amiga_rexx.h kern/amiga_subr.h kern/accesscontrol.h

# Application interface sources
# Amiga "struct Library" interface, API functions,
API_C=\
	api/amiga_api api/amiga_libtables api/amiga_syscalls \
	api/amiga_sendrecv api/amiga_generic api/amiga_generic2 \
	api/amiga_libcalls api/amiga_errlists api/amiga_kernvars \
        api/amiga_ndbent api/amiga_netstat \
	api/getxbyy api/gethostnamadr api/allocdatabuffer \
	api/res_comp api/res_debug api/res_init \
	api/res_mkquery api/res_query api/res_send  \
	api/amiga_roadshow api/miami_api api/miami_functable \
        api/if_indextoname api/if_nametoindex api/if_nameindex \
        api/getifaddrs

API_H=\
	api/amiga_raf.h api/amiga_api.h api/amiga_libcallentry.h \
	api/allocdatabuffer.h api/gethtbynamadr.h \
	api/resolv.h api/sockargs.h \
	api/apicalls.h api/miami_api.h

#
# Misc headers
#
MISC_H=\
	conf/conf.h

#
# Misc sources
#
MISC= \
	kern/variables.src kern/config_var.awk

NET_O=      $(NET_C:.c=.o)
NETINET_O=  $(NETINET_C:.c=.o)
KERN_O=     $(KERN_C:.c=.o)
API_O=     $(API_C:.c=.o)
CSRCS=	$(API_C) $(KERN_C) $(NET_C) $(NETINET_C)
OBJS= 	$(API_O) $(KERN_O) $(NET_O) $(NETINET_O) 
AMISRC=      $(CSRCS) $(SYS_H) $(API_H) $(KERN_H) $(NET_H) $(NETINET_H) \
	     $(MISC_H) $(MISC) $(PROTOS_H)
#NETINCSRC=   $(SYS_HH) $(NET_HH) $(NETINET_HH) 
SRCS=	     $(AMISRC) #$(NETINCSRC)
TARGETS= AROSTCP
DIRS= net netinet kern api

all: dirs $(TARGETS)

opts: $(GCCOPTIONS)

$(TARGETS): $(OBJS) $(SRCS)
	$(LD) -o $@ $(OBJS) $(LIBSRC) $(LIBS)

dirs: $(DIRS)

net: $(NET_O)
netinet: $(NETINET_O)
kern: $(KERN_O)
api: $(API_O)

STACK_NAME := AROSTCP

USER_INCLUDES := -isystem $(SRCDIR)/$(CURDIR)/../netinclude -isystem $(SRCDIR)/$(CURDIR) -isystem $(SRCDIR)/$(CURDIR)/protos
USER_CFLAGS := \
	-Wno-uninitialized -Wno-parentheses \
	-Wno-implicit-function-declaration -DAMITCP -DKERNEL \
	-DDIRECTED_BROADCAST -D__BSD_VISIBLE=1

#MM- workbench-network-stacks-arostcp : workbench-network-stacks-arostcp-bsdsocket
%build_prog mmake=workbench-network-stacks-arostcp-bsdsocket \
    progname=$(STACK_NAME) \
    files="$(NET_C) $(NETINET_C) $(KERN_C) $(API_C)" \
    targetdir=$(AROS_SYSTEM)/Network/$(STACK_NAME)/C

%common

