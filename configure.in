dnl Copyright (C) 1997-1998 AROS - The Amiga Research OS
dnl $Id$
dnl
dnl Desc: Autoconf source for configuration file
dnl Lang: english

#TODO
# method of getting shared/non-shared ld/ar tool for target.
# ar, ranlib, strip, nm for target


# ------------------------------------------------------------------------
# Here starts the first section of the configure.in file.
# ------------------------------------------------------------------------

AC_INIT(mmakefile)
AC_CONFIG_AUX_DIR(scripts/autoconf)

# Check what host we are running on.
# If a target is not suggested, we use this one.
AC_CANONICAL_HOST

# The AROS target is slightly different to the normal GNU style
# format. We don't have the middle part, and we reverse the order
# of the $(CPU) and $(OS) bits.
#
# Don't strip the version of the target yet, it might be
# useful on some systems.

AC_MSG_CHECKING([for AROS style target])

if test "$target" = "NONE" ; then
    target=$host_os-$host_cpu
    cross_compile=no
else
    if test "$target" = "" ; then
        target=$host_os-$host_cpu
        cross_compile=no
    else
        cross_compile=yes
    fi
fi
AC_MSG_RESULT($target)

#don't know where else to put this...
TOPDIR=$PWD

# Parse the target field into something useful.
changequote(<<,>>)
target_os=`echo $target | sed 's/^\([^-]*\)-\(.*\)$/\1/'`
target_cpu=`echo $target | sed 's/^\([^-]*\)-\(.*\)$/\2/'`
changequote([,])

dnl --------------------------------------------------------------------
dnl Set the default Workbench resolution
dnl --------------------------------------------------------------------
aros_default_wbwidth=800
aros_default_wbheight=600
aros_default_wbdepth=4

dnl --------------------------------------------------------------------
dnl Host Configuration Section
dnl --------------------------------------------------------------------
dnl
dnl The idea here is to find out all the information we need about the
dnl host. This means things like tools for building directory structures
dnl copying files around and the like.

# The first step is to find the host binaries.
# Check for a compiler.
AC_PROG_CC
AC_PROG_CPP

# We don't yet support cross-compiling, but we may later on.
AC_CYGWIN
AC_EXEEXT
AC_OBJEXT

# Check for awk and a few other programs.
AC_PROG_AWK
AROS_PROG(MMAKE,mmake)

# Perform some default variable assignments. Note all of these will be
# Regenerated from the script, so there is no need to cache them.

aros_host_cc="$CC"
aros_host_ld="$CC"
aros_host_make="make"
aros_host_cflags=
aros_host_ldflags=
aros_host_debug="-g -O0"
aros_host_mkdep="\$(TOP)/scripts/mkdep"
aros_host_mkargs="--no-print-directory"
aros_host_incl="/usr/include"
aros_host_exe_suffix="$EXEEXT"
aros_host_lib_suffix=""

case "$CC" in
    *gcc*)
	aros_host_cc_pipe="-pipe"
	;;
    icc)
	aros_host_cc_pipe=""
	;;
    *)
	aros_host_cc_pipe=""
	;;
esac

dnl Despite the name, this is really a host configuration variable.
aros_target_cc_includes=""

# This is the main host configuration section. It is where the host
# can change the values of any variables it needs to change. We do
# not look at anything that compiles to the target yet, we'll get
# to that later.

case "$host_os" in
    linux*)
	aros_host_arch="linux"
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *m68k*)
		aros_host_cpu="m68k"
		;;
	    *powerpc*)
	    	aros_host_cpu="ppc"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    freebsd*)
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	aros_host_make="gmake"
	aros_host_arch="freebsd"
	aros_host_cpu="i386"

	dnl Need to override this here, it's just too hard later.
        dnl This shouldn't be here at all...
	aros_target_cc_includes="/usr/include"

	dnl FreeBSD 5.x has changed the default object format.
	case $host_os in
	    freebsd5*)
		aros_object_format="elf_i386_fbsd"
		;;

	    *)
		aros_object_format="elf_i386"
	esac

	;;

    netbsd*)
        aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	aros_host_make="gmake"
        aros_host_arch="netbsd"
	case "$host_cpu" in
            *i?86*)
        	aros_host_cpu="i386"
        	;;
            *m68k*)
        	aros_host_cpu="m68k"
        	;;
            *)
        	AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
        	aros_host_cpu="$host_cpu"
        	;;
	esac 	
	aros_host_lib_suffix=".0.0"
        ;;

    openbsd*)
        aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
        aros_host_make="gmake"
        aros_host_arch="openbsd"
        case "$host_cpu" in
            *i?86*)
                aros_host_cpu="i386"
                ;;
            *)
                AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
                aros_host_cpu="$host_cpu"
                ;;
        esac
        ;;
        
    solaris*)
        aros_host_arch="solaris"
        aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
        case "$host_cpu" in
            *sparc*)
                aros_host_cpu="sparc"
                ;;
            *)
                AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
                aros_host_cpu="$host_cpu"
                ;;
        esac
        ;;

    morphos*)
	aros_host_cc="$aros_host_cc"
	aros_host_arch="morphos"
	aros_host_cpu="ppc"
	;;

    amiga*)
	aros_host_arch="amiga"
	SORT="/gg/bin/sort"
	TEST="/gg/bin/test"
	UNIQ="/gg/bin/uniq"
	FOR="for"
	TOUCH="/gg/bin/touch"
	case "$host_cpu" in
	    *m68k*)
		aros_host_cpu="m68k"
		;;
	    *powerpc*)
		aros_host_cpu="ppc"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    cygwin*)
	aros_host_arch="cygwin"
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;
    *)
	AC_MSG_ERROR([Unsupported host architecture $host])
	;;
esac

AROS_PROG(HOST_AR,[ar],[cr])
AROS_PROG(HOST_RANLIB,ranlib)

AROS_PROG(RM,[rm],[-rf])
AROS_PROG(CP,[cp])
AROS_PROG(MV,[mv])
AROS_PROG(ECHO,[echo])
AROS_PROG(MKDIR,[mkdir],[-p])
AROS_PROG(TOUCH,[touch])
AROS_PROG(SORT,[sort])
AROS_PROG(UNIQ,[uniq])
AROS_PROG(NOP,[true])
AROS_PROG(LITE,[lite])
AROS_PROG(PYTHON,[python])
AROS_PROG(GNUPLOT,[gnuplot])
AROS_PROG(CAT,[cat])
AROS_PROG(BISON,[bison])
AROS_PROG(PNGTOPNM,[pngtopnm])
AROS_PROG(PPMTOILBM,[ppmtoilbm])
AROS_PROG(STRIP,[strip])

FOR=for
IF=if
TEST=test
AC_SUBST(FOR)
AC_SUBST(IF)
AC_SUBST(TEST)

dnl --------------------------------------------------------------------
dnl Target Configuration Section
dnl --------------------------------------------------------------------
dnl
dnl The target configuration section is responsible for setting up all
dnl the paths for includes, and tools required to build AROS to some
dnl particular target.

# Find all the tools we need to compile. This could be cross-compiling
# though! If that is the case we use the GNU form of the target and
# simply add this to the front of the binary name. This is rather simple,
# but it should work under most circumstances.
#
# The default tools are to use the same as the host, but only if the
# host and target CPU are the same. With GCC this is normally enough.
#
# iaint, 26/11/2002:
#   Sigh, temporarily disable cross-compiling support completely. There
#   are other critical errors that need to be fixed first.

aros_target_cc="$aros_host_cc"
aros_target_as="$aros_host_cc"
aros_shared_ld="$aros_host_ld"
aros_static_ld="$aros_host_ld"
aros_kernel_ld="$aros_host_ld"
aros_target_ld="/usr/bin/ld"

aros_target_mkdep="$aros_host_mkdep"
aros_target_incl_def="$aros_host_incl"

# The default tools.
aros_target_ar="ar"
aros_target_ar_flags="cr"
aros_target_nm="nm"
aros_target_nm_flags="-C -ul"
aros_target_objcopy="objcopy"
aros_target_objdump="objdump"
aros_target_ranlib="ranlib"
aros_target_strip="strip"

# It is necessary to clear the include and link paths for target
# commands. This should help clear up problems when cross compiling.
aros_target_cflags="-Wall -Werror-implicit-function-declaration"
aros_target_aflags="-Wall -x assembler-with-cpp"
aros_target_ldflags="-nostartfiles -nostdlib"

aros_shared_default=yes

aros_shared_cflags="-fPIC"
aros_shared_aflags=""
aros_shared_ldflags="-Wl,-rpath,./lib -shared"
aros_static_cflags=""
aros_static_aflags=""
aros_static_ldflags=""
aros_kernel_ldflags="-Wl,-rpath,./lib"

aros_compiler_libs=

# These are the flags to pass when compiling debugged programs
aros_debug_cflags="-g -O0 -DADEBUG=1 -DMDEBUG=1"
aros_debug_aflags=""
aros_debug_ldflags="-g"
aros_target_genmap="-Wl,-Map -Xlinker"

# Native flavour stuff
aros_bochs_hack="0"
aros_serial_debug="0"

# Palm native flavour stuff
aros_palm_debug_hack="0"

# Unix flavour stuff
aros_nesting_supervisor="0"

# Debug stuff
aros_mungwall_debug="1"
aros_stack_debug="1"
aros_modules_debug="1"

# X11 Xshm
DO_XSHM_SUPPORT="1"

# Check for some includes for the X11 HIDD
AC_CHECK_HEADERS(sys/ipc.h sys/shm.h)

# For the new kernel support
AC_CHECK_HEADERS(sys/mmap.h sys/mman.h sysexits.h)

# Look for some functions
AC_CHECK_FUNCS(getpagesize kqueue)

# Find X
AC_PATH_X

# This is the target configuration switch.

case "$target_os" in
    linux*)
	aros_target_arch="linux"
	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_object_format="m68kelf"
		aros_flavour="emulcompat"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -D__mc68000 -D__linux__"
		aros_shared_ldflags="-Wl,-T,\$(TOP)/config/linux/m68k/script.so"
		aros_kernel_ldflags="-Wl,-rpath,./lib,-T,\$(TOP)/config/linux/m68k/script.normal"
		gcc_target_cpu="mc68000"
		;;
	    *i?86*)
		aros_target_cpu="i386"
		aros_object_format="elf_i386"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__linux__"
		aros_default_wbdepth=8
		gcc_target_cpu="i386"
		;;
	    *powerpc*)
	    	aros_target_cpu="ppc"
		aros_object_format="elf32ppc"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc -D__linux__"
		aros_default_wbdepth=8
		gcc_target_cpu="ppc"
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for Linux -- $target_cpu")
		;;
	esac
    ;;

    pc)
	aros_target_arch="pc"
	aros_target_cflags="-Wall -Werror-implicit-function-declaration -O2 -DADEBUG=1 -DMDEBUG=1"
	aros_shared_default="no"
	case "$target_cpu" in
	    *i?86*)
		aros_target_cpu="i386"
		aros_object_format="elf_i386"
		aros_flavour="standalone"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
		aros_kernel_ldflags=""
		aros_default_wbwidth=640
		aros_default_wbheight=480
		gcc_target_cpu="i386"
		;;
	    *)
		AC_MSG_ERROR("Unknown native CPU -- $target_cpu")
		;;
	esac
	;;

    prep)
	aros_target_arch="prep"
	aros_target_cflags="-Wall -Werror-implicit-function-declaration -O2 -mregnames -mcpu=604e -mno-toc -mprototype -mno-sdata -DADEBUG=0 -DMDEBUG=0"
	aros_shared_default="no"
	aros_target_cpu="ppc"
	aros_object_format="elf32ppc"
	aros_flavour="ppcnative"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc"
	aros_kernel_ldflags=""
	aros_default_wbwidth=640
	aros_default_wbheight=480
	gcc_target_cpu="ppc"
	case "$target_cpu" in
	    *cross*)
		aros_target_cc="ppc-linux-gcc -pipe"
		aros_target_ld="ppc-linux-ld"
		aros_target_as="ppc-linux-as"
		aros_target_ar="ppc-linux-ar"
		aros_target_ranlib="ppc-linux-ranlib"
		aros_target_nm="ppc-linux-nm"
		aros_target_strip="ppc-linux-strip"
		aros_target_objcopy="ppc-linux-objcopy"
		aros_target_objdump="ppc-linux-objdump"
		aros_static_ld="ppc-linux-ld"
		aros_shared_ld="ppc-linux-ld"
		aros_kernel_ld="ppc-linux-ld"
		;;
	    *)
	        ;;
	esac
	;;

    freebsd*)
	aros_target_arch="freebsd"
	aros_target_cpu="i386"
	aros_flavour="emulation"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
	gcc_target_cpu="i386"

	strip_args="-x"
	;;

    netbsd*)
        aros_target_arch="netbsd"
	case "$target_cpu" in
            *m68k*)
        	aros_target_cpu="m68k"
		aros_object_format="m68kelf"
        	aros_flavour="emulcompat"
        	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -D__mc68000 -D__NetBSD__"
		gcc_target_cpu="mc68000"
        	;;
            *i?86*)
        	aros_target_cpu="i386"
		aros_object_format="elf_i386"
        	aros_flavour="emulation"
        	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__NetBSD__"
        	aros_default_wbdepth=8
		gcc_target_cpu="i386"
        	;;
            *)
        	AC_MSG_ERROR("Unknown CPU for NetBSD -- $target_cpu")
        	;;
	esac
	aros_target_genmap="-Wl,-M -Xlinker >"
        aros_flavour="emulation"
        aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
        ;;   

    openbsd*)
        aros_target_arch="openbsd"
        case "$target_cpu" in
            *i?86*)
                aros_target_cpu="i386"
		aros_object_format="elf_i386"
                aros_flavour="emulation"
                aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__OpenBSD__"
		gcc_target_cpu="i386"
                ;;
            *)
                AC_MSG_ERROR("Unknown CPU for OpenBSD -- $target_cpu")
                ;;
        esac
	aros_target_cflags="$aros_target_cflags -D$aros_target_cpu"
	aros_target_genmap="-Wl,-M -Xlinker >"
        aros_target_nm_flags="-u"
	aros_flavour="emulation"
        ;;

    solaris*)
        aros_target_arch="solaris"
        case "$target_cpu" in
            *sparc*)
                aros_target_cpu="sparc"
		aros_object_format="elf_sparc"
                aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dsparc -D__Solaris__"
		gcc_target_cpu="sparc"
                ;;
            *)
                AC_MSG_ERROR("Unknown CPU for Solaris -- $target_cpu")
                ;;
        esac
        aros_target_cflags="$aros_target_cflags -D$aros_target_cpu"
        aros_flavour="emulation"
        ;;

    morphos*)
	aros_target_arch="morphos"
	aros_shared_default="no"
	aros_target_cpu="ppc"
	aros_object_format="elf_ppc"
	aros_flavour="nativecompat"
	aros_target_cflags="-O2 -mcpu=604e -mmultiple -D__MORPHOS_DIRECTCALL -D__MORPHOS__ -D__NOLIBBASE__"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc"
	gcc_target_cpu="ppc"
	;;

    amiga*)
	aros_target_arch="amiga"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -D_AMIGA -DAMIGA"
	aros_shared_default="no"

	aros_target_cflags="-Wall -Werror-implicit-function-declaration -O2 -fomit-frame-pointer -fbuiltin -ffreestanding"

	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_object_format="m68kelf"
		aros_flavour="nativecompat"
		aros_target_cflags="$aros_target_cflags -m68020 -m68881"
		aros_target_aflags="$aros_target_aflags -m68060"
		gcc_target_cpu="mc68000"
		;;
	    *ppc*)
		aros_cpu="ppc"
		aros_flavour="native"
		aros_target_cflags="$aros_target_cflags -mpowerpc -mcpu=603e"
		aros_target_aflags="$aros_target_aflags -m603e"
		gcc_target_cpu="ppc"
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for Amiga $target_cpu")
		;;
        esac
	;;

    cygwin*)
	aros_target_arch="cygwin"
	aros_shared_default="no"
	case "$target_cpu" in
	    *i?86*)
		aros_target_cpu="i386"
		aros_object_format="elf_i386"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__CYGWIN32__"
		aros_shared_cflags=""
		aros_default_wbdepth=8
		gcc_target_cpu="i386"
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for CygWin -- $target_cpu")
		;;
	esac
    ;;
    pp*)
	aros_target_arch="pp"
	aros_shared_default="no"
	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_object_format="m68kelf"
		aros_flavour="palmnative"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dm68k"
		aros_kernel_ldflags=""
		aros_default_wbwidth=160
                aros_default_wbheight=160
		aros_default_wbdepth=1
                aros_target_cc="m68k-elf-gcc -pipe"
                aros_target_ld="$(which m68k-elf-ld)"
		aros_target_as="m68k-elf-gcc -pipe"
		aros_static_ld="m68k-elf-gcc"
		aros_shared_ld="m68k-elf-gcc"
		aros_kernel_ld="m68k-elf-gcc"
		aros_target_ar="m68k-elf-ar"
		aros_target_ar_flags="cru"
		aros_target_ranlib="m68k-elf-ranlib"
		aros_target_nm="m68k-elf-nm"
		aros_target_objcopy="m68k-elf-objcopy"
		aros_target_objdump="m68k-elf-objdump"
		aros_target_cflags="-Wall -Werror-implicit-function-declaration -fno-builtin -O2 -mc68000 -Wa,-mc68000 -DADEBUG=1 -DMDEBUG=1 -DHAS_OWN_DISPATCHER -D__DONT_UNDERSTAND__ASM__ -DAROS_CREATE_ROM -DAROS_CREATE_ROM_BUG -DAROS_NOFPU -DAROS_NO_LIMITS_H -DNEEDS___MAIN -Dlinux"
		aros_target_aflags="-Wall -x assembler-with-cpp -mc68000 --short-branchs"
		aros_target_ldflags="-nostartfiles -nostdlib"
		aros_compiler_libs="-lgcc1"
		aros_shared_default=no
		aros_shared_cflags="-fpic"
		aros_shared_aflags=""
		aros_shared_ldflags="-Wl,-rpath,./lib -shared"
		aros_static_cflags="-Wa,-mc68000"
		aros_static_aflags="-mc68000"
		aros_static_ldflags=""
		aros_kernel_ldflags="-Wl,-rpath,./lib"
		aros_debug_cflags="-Wall -Werror-implicit-function-declaration -g -DADEBUG=1 -DMDEBUG=1 -mc68000 -Wa,-mc68000"
		aros_debug_aflags=""
		aros_debug_ldflags="-g"
		aros_mungwall_debug="0"
		aros_modules_debug="0"
		gcc_target_cpu="mc68000"
		;;
	   *)
		AC_MSG_ERROR("Unknown CPU for PalmPilot -- $target_cpu")
		;;
	esac
	;;

    *)
	AC_MSG_ERROR([Unsupported target architecture $target])
	;;
esac


aros_hostcfg_dir="bin/${aros_host_arch}-${aros_host_cpu}/gen/config"
aros_targetcfg_dir="bin/${aros_target_arch}-${aros_target_cpu}/gen/config"
aros_inc_dir="bin/${aros_target_arch}-${aros_target_cpu}/AROS/Include/aros"
aros_geninc_dir="bin/${aros_target_arch}-${aros_target_cpu}/gen/include/aros"
aros_tools_dir="bin/${aros_host_arch}-${aros_host_cpu}/tools"

# Find the tools that we need for the target - this could be quite
# expensive, but we shall try it anyway.
# AROS_TOOL_CC(TARGET_CC,$aros_target_cc)
# AROS_TOOL_CC(TARGET_AS,$aros_target_as)
# AROS_TOOL_CC(STATIC_LD,$aros_static_ld)

TARGET_CC="${TOPDIR}/${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}-aros-gcc"
TARGET_AS=$TARGET_CC
STATIC_LD=$TARGET_CC

AC_SUBST(TARGET_CC)
AC_SUBST(TARGET_AS)
AC_SUBST(STATIC_LD)

AROS_TOOL_CC(SHARED_LD,$aros_shared_ld)
AROS_TOOL_CC(KERNEL_LD,$aros_kernel_ld)

AROS_TOOL(AR,$aros_target_ar,$aros_target_ar_flags)
AROS_TOOL(RANLIB,$aros_target_ranlib,$aros_target_ranlib_flags)
AROS_TOOL(NM,$aros_target_nm,$aros_target_nm_flags)
AROS_TOOL(NM_PLAIN,$aros_target_nm,)
AROS_TOOL(STRIP,$aros_target_strip,$aros_target_strip_flags)
AROS_TOOL(OBJDUMP,$aros_target_objdump)
AROS_TOOL(OBJCOPY,$aros_target_objcopy)

#find sdl-config
AC_PATH_PROG(SDL_CONFIG, sdl-config, not-found)

if test "$SDL_CONFIG" = "not-found" ; then
  HAVE_SDL_LIB=no
else
  HAVE_SDL_LIB=yes
  SDL_CFLAGS=`$SDL_CONFIG --cflags`
  SDL_LIBS=`$SDL_CONFIG --libs`
fi

dnl See if the user wants to use the SDL library
AC_MSG_CHECKING([whether to use SDL])
AC_ARG_WITH(sdl,[  --with-sdl              Use SDL library [default=no]], with_sdl=$withval, with_sdl=no)
if test "$with_sdl" != "yes" -a "$with_sdl" != no; then
    AC_MSG_ERROR("use either \'yes\' or \'no\' as arguments to --with-sdl")
fi

if test "$with_sdl" = "yes" -a "$HAVE_SDL_LIB" = "no"; then
    AC_MSG_ERROR(["sdl-config was not found, cannot configure for use with SDL"])
fi
AC_MSG_RESULT($with_sdl)

# See if we can compile SHM support
HAVE_XSHM_SUPPORT=0
if [[ "x$no_x" != "xyes" -a "x$ac_cv_header_sys_ipc_h" = "xyes" -a "x$ac_cv_header_sys_shm_h" = "xyes" ]]; then
  AC_MSG_CHECKING(whether the X11 MIT-SHM extension can be compiled in)
  if test -z "$x_includes" ; then
    CFLAGS=""
  else
    CFLAGS="-I $x_includes"
  fi
  LIBS="-L/usr/X11/lib -L/usr/X11R6/lib -lX11 -lXext"
  AC_TRY_LINK([
#include <sys/types.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/keysym.h>
#include <X11/cursorfont.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <X11/extensions/XShm.h>],[
static XShmSegmentInfo shminfo;
static Display *display;
XShmAttach(display, &shminfo);
XSync(display,0);
shmctl(shminfo.shmid, IPC_RMID, 0);
],
HAVE_XSHM_SUPPORT=1
AC_MSG_RESULT(yes),
HAVE_XSHM_SUPPORT=0
AC_MSG_RESULT(no))
fi


# Find the system include path. We can suggest that an alternative is
# used if we don't get it correct. The default is to use /usr/include.
# Which is set in the aros_target_incl_def variable.

AC_ARG_ENABLE(includes,
[  --enable-includes=dir   Alternative system include directory],
[aros_target_incl=$enable_includes], [aros_target_incl=$aros_target_incl_def])

dnl find out about the target cc's include path
AC_MSG_CHECKING([for the target compiler's include path])
if test "$aros_target_cc_includes" = "" ; then
    aros_target_cc_includes=`dirname \`${aros_target_cc} -print-libgcc-file-name\``/include
fi
AC_MSG_RESULT("$aros_target_cc_includes")

dnl Check if user specified --with-resolution=XRESxYRESxDEPTH
AC_MSG_CHECKING([for default resolution of WBScreen])
AC_ARG_WITH(resolution,[  --with-resolution=XRESxYRESxDEPTH        Default resolution of the initial WorkbenchScreen],resolution=$withval,resolution=none)
# We require an argument, so map --with/--without ("yes"/"no") to "none" specified
if test "$resolution" = "yes" ; then
    resolution="none"
fi
if test "$resolution" = "no" ; then
    resolution="none"
fi
if test "$resolution" != "none" ; then
    aros_default_wbwidth=`echo $resolution | cut -d'x' -f1`
    aros_default_wbheight=`echo $resolution | cut -d'x' -f2`
    aros_default_wbdepth=`echo $resolution | cut -d'x' -f3`
fi
AC_MSG_RESULT("$aros_default_wbwidth x $aros_default_wbheight x $aros_default_wbdepth")
aros_cv_default_wbwidth=$aros_default_wbwidth
aros_cv_default_wbheight=$aros_default_wbheight
aros_cv_default_wbdepth=$aros_default_wbdepth

dnl See if the user wants the BOCHS hack for native flavour
AC_MSG_CHECKING([if bochs hack is enabled])
AC_ARG_ENABLE(bochs_hack,[  --enable-bochs-hack     Enable hacks to make BOCHS (partly) work [default=no]],bochs_hack="yes",bochs_hack="no")
if test "$bochs_hack" = "yes" ; then
    aros_bochs_hack="1"
fi
AC_MSG_RESULT("$bochs_hack")

dnl See if the user wants the serial debug output for native flavour
AC_MSG_CHECKING([if serial debug is enabled])
AC_ARG_WITH(serial-debug,[  --with-serial-debug   Enable serial debug output in native [default=no]],serial_debug=$withval,serial_debug=none)
if test "$serial_debug" = "yes" ; then
    serial_debug="2"
fi
if test "$serial_debug" = "no" ; then
    serial_debug="none"
fi
if test "$serial_debug" != "none" ; then
    aros_serial_debug=$serial_debug
    AC_MSG_RESULT("on COM port $serial_debug")
else
    AC_MSG_RESULT("no")
fi

dnl See if the user wants the palm debug output hack for palm native flavour
AC_MSG_CHECKING([if palm debug hack is enabled])
AC_ARG_ENABLE(palm_debug_hack,[  --enable-palm-debug-hack   Enable palm debug output hack in palm native [default=no]],palm_debug_hack="yes",palm_debug_hack="no")
if test "$palm_debug_hack" = "yes" ; then
    aros_palm_debug_hack="1"
fi
AC_MSG_RESULT("$palm_debug_hack")


dnl See if the user wants nesting supervisor activated for unix flavour
AC_MSG_CHECKING([if nesting supervisor support is enabled])
AC_ARG_ENABLE(nesting_supervisor,[  --enable-nesting-supervisor   Enable nesting supervisor support in unix [default=no]],nesting_supervisor="yes",nesting_supervisor="no")
if test "$nesting_supervisor" = "yes" ; then
    aros_nesting_supervisor="1"
fi
AC_MSG_RESULT("$nesting_supervisor")


dnl See if the user wants the mungwall debug to be enabled
AC_MSG_CHECKING([if mungwall debug is enabled])
AC_ARG_ENABLE(mungwall_debug,[  --enable-mungwall-debug Enable mungwall debug [default=yes]],mungwall_debug="$enableval",mungwall_debug="yes")
if test "$mungwall_debug" = "no" ; then
    aros_mungwall_debug="0"
fi
AC_MSG_RESULT("$mungwall_debug")

dnl See if the user wants the stack debug to be enabled
AC_MSG_CHECKING([if stack debug is enabled])
AC_ARG_ENABLE(stack_debug,[  --enable-stack-debug    Enable stack debug [default=yes]],stack_debug="$enableval",stack_debug="yes")
if test "$stack_debug" = "no" ; then
    aros_stack_debug="0"
fi
AC_MSG_RESULT("$stack_debug")

dnl See if the user wants modules debug to be enabled
AC_MSG_CHECKING([if debug modules is enabled])
AC_ARG_ENABLE(modules_debug,[  --enable-modules-debug  Enable modules debug [default=no]],modules_debug="$enableval",modules_debug="no")
if test "$modules_debug" = "yes" ; then
    aros_modules_debug="1"
fi
AC_MSG_RESULT("$modules_debug")

dnl See if the user wants general debug to be enabled
AC_MSG_CHECKING([if debug is enabled])
AC_ARG_ENABLE(debug,[  --enable-debug          Enable general debug [default=no]],aros_debug="$enableval",aros_debug="no")
if test "$modules_debug" = "yes" ; then
    dnl modules_debug requires aros_debug to be "yes"
    aros_debug="yes"
fi
AC_MSG_RESULT("$aros_debug")

dnl See if the user wants cpak to be used
AC_MSG_CHECKING([if cpak is enabled])
AC_ARG_ENABLE(cpak,[  --enable-cpak           Enable cpak [default=yes]],aros_use_cpak="$enableval",aros_use_cpak="yes")
AC_MSG_RESULT("$aros_use_cpak")

if test "$HAVE_XSHM_SUPPORT" = "1" ; then
  dnl See if the user wants the X11 MIT-SHM extension to be enabled
  AC_MSG_CHECKING([if X11 MIT-SHM extension is enabled])
  AC_ARG_ENABLE(xshm_extension,[  --enable-xshm-extension Enable X11 MIT-SHM extension [default=yes]],xshm_extension="$enableval",xshm_extension="yes")
  if test "$xshm_extension" = "no" ; then
      DO_XSHM_SUPPORT="0"
  fi
  AC_MSG_RESULT("$xshm_extension")
else
  DO_XSHM_SUPPORT="0"
fi

dnl --------------------------------------------------------------------
dnl Configuration Output Section
dnl --------------------------------------------------------------------

# Generic
AC_SUBST(aros_arch)
AC_SUBST(aros_cpu)
AC_SUBST(aros_flavour)
AC_SUBST(aros_flavour_uc)
AC_SUBST(TOPDIR)

# Host related
AC_SUBST(aros_host_arch)
AC_SUBST(aros_host_cpu)
AC_SUBST(aros_host_cc)
AC_SUBST(aros_host_ld)
AC_SUBST(aros_host_make)
AC_SUBST(aros_host_cflags)
AC_SUBST(aros_host_ldflags)
AC_SUBST(aros_host_debug)
AC_SUBST(aros_host_mkdep)
AC_SUBST(aros_host_mkargs)
AC_SUBST(aros_host_exe_suffix)
AC_SUBST(aros_host_lib_suffix)

# Target Related
AC_SUBST(aros_target_arch)
AC_SUBST(aros_target_cpu)
AC_SUBST(aros_target_incl)
AC_SUBST(aros_target_cc)
AC_SUBST(aros_target_cc_includes)
AC_SUBST(aros_target_objdump)
AC_SUBST(aros_target_objcopy)
AC_SUBST(aros_target_strip)
AC_SUBST(aros_target_as)
AC_SUBST(aros_target_nm)
AC_SUBST(aros_shared_default)
AC_SUBST(aros_object_format)
AC_SUBST(aros_compiler_libs)

AC_SUBST(aros_target_cflags)
AC_SUBST(aros_target_aflags)
AC_SUBST(aros_target_ld)
AC_SUBST(aros_target_ldflags)

AC_SUBST(aros_static_cflags)
AC_SUBST(aros_static_aflags)
AC_SUBST(aros_static_ldflags)
AC_SUBST(aros_shared_cflags)
AC_SUBST(aros_shared_aflags)
AC_SUBST(aros_shared_ldflags)
AC_SUBST(aros_kernel_ldflags)
AC_SUBST(aros_debug_cflags)
AC_SUBST(aros_debug_aflags)
AC_SUBST(aros_debug_ldflags)
AC_SUBST(aros_target_genmap)

AC_SUBST(aros_use_cpak)

# Graphics Related
AC_SUBST(aros_gui_libdir)
AC_SUBST(aros_gui_ldflags)
AC_SUBST(aros_gui_libflags)
AC_SUBST(aros_gui_incdir)
AC_SUBST(aros_gui_ccflags)

AC_SUBST(aros_default_wbwidth)
AC_SUBST(aros_default_wbheight)
AC_SUBST(aros_default_wbdepth)
AC_SUBST(DO_XSHM_SUPPORT)

# Native version related
AC_SUBST(aros_bochs_hack)
AC_SUBST(aros_serial_debug)

# Palm native version related
AC_SUBST(aros_palm_debug_hack)

# Unix/Hosted version related
AC_SUBST(aros_nesting_supervisor)

# Debug related
AC_SUBST(aros_debug)
AC_SUBST(aros_mungwall_debug)
AC_SUBST(aros_stack_debug)
AC_SUBST(aros_modules_debug)

# C compiler related
AC_SUBST(gcc_target_cpu)

dnl Prepare for output, make up all the generated patches
case "$aros_flavour" in
emulation)	aros_flavour_uc="AROS_FLAVOUR_EMULATION"
		aros_flavour="emulation" ;;
emulcompat)	aros_flavour_uc="(AROS_FLAVOUR_EMULATION|AROS_FLAVOUR_BINCOMPAT)"
		aros_flavour="emulation" ;;
standalone)	aros_flavour_uc="AROS_FLAVOUR_STANDALONE"
		aros_flavour="standalone";;
native) 	aros_flavour_uc="AROS_FLAVOUR_NATIVE"
		aros_flavour="native" ;;
nativecompat)	aros_flavour_uc="(AROS_FLAVOUR_NATIVE|AROS_FLAVOUR_BINCOMPAT)"
		aros_flavour="native" ;;
linklib)	aros_flavour_uc="AROS_FLAVOUR_LINKLIB"
		aros_flavour="linklib" ;;
palmnative)     aros_flavour_uc="(AROS_FLAVOUR_STANDALONE|AROS_FLAVOUR_EMULATION)"
		aros_flavour="palmnative" ;;
ppcnative)	aros_flavour_uc="(AROS_FLAVOUR_NATIVE|AROS_FLAVOUR_BINCOMPAT)"
		aros_flavour="ppcnative" ;;
esac

if test -z "$aros_gui_basedir" ; then
    dnl Use X as the default GUI
    aros_gui_libdir="$x_libraries"
    if test -z "$x_libraries" ; then
	aros_gui_ldflags=""
    else
	aros_gui_ldflags="-L $x_libraries"
    fi
    if test "$HAVE_XSHM_SUPPORT" = "1" ; then
      aros_gui_libflags="-lX11 -lXext"
    else
      aros_gui_libflags="-lX11"
    fi
    aros_gui_incdir="$x_includes"
    if test -z "$x_includes" ; then
	aros_gui_ccflags=""
    else
	aros_gui_ccflags="-I $x_includes"
    fi
else
    if test -n "$aros_gui_basedir" ; then
	aros_gui_libdir="${aros_gui_basedir}/lib"
	aros_gui_incdir="${aros_gui_basedir}/include"
    fi

    if test -n "$aros_gui_libdir" ; then
	aros_gui_ldflags="-L ${aros_gui_libdir}"
    fi

    if test -n "$aros_gui_incdir" ; then
	aros_gui_ccflags="-I ${aros_gui_incdir}"
    else
	aros_gui_incdir="${aros_sysincludes}"
	aros_gui_ccflags=""
    fi
fi

if test ! -d ${aros_inc_dir} ; then
    ${MKDIR} ${aros_inc_dir}
fi
if test ! -d ${aros_geninc_dir} ; then
    ${MKDIR} ${aros_geninc_dir}
fi
if test ! -d ${aros_hostcfg_dir} ; then
    ${MKDIR} ${aros_hostcfg_dir}
fi
if test ! -d ${aros_targetcfg_dir} ; then
    ${MKDIR} ${aros_targetcfg_dir}
fi
if test ! -d ${aros_tools_dir} ; then
    ${MKDIR} ${aros_tools_dir}
fi

cp config/config.h.in ${aros_inc_dir}
cp config/config.h.in ${aros_geninc_dir}
cp config/host.cfg.in ${aros_hostcfg_dir}
cp config/target.cfg.in ${aros_targetcfg_dir}
cp config/make.defaults.in ${aros_targetcfg_dir}
cp config/specs.in ${aros_targetcfg_dir}
cp scripts/aros-gcc.in ${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}-aros-gcc.in

dnl AC_CONFIG_HEADER(${aros_geninc_dir}/config.h)

AC_OUTPUT(Makefile ${aros_inc_dir}/config.h ${aros_geninc_dir}/config.h
	${aros_hostcfg_dir}/host.cfg ${aros_targetcfg_dir}/target.cfg
	mmake.config ${aros_targetcfg_dir}/make.defaults ${aros_targetcfg_dir}/specs
        ${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}-aros-gcc)

chmod a+x ${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}-aros-gcc

dnl This is in order to not defined SHARED_CFLAGS sometimes
dnl We don't always do aros_shared_ar, aros_shared_cflags

#XXX compatability...
aros_shared_ar="$aros_shared_ld $aros_shared_ldflags -o"

if test -n "$aros_shared_cflags" ; then
    echo "SHARED_CFLAGS := $aros_shared_cflags" >> ${aros_hostcfg_dir}/host.cfg
    echo "SHARED_AR := $aros_shared_ar" >> ${aros_hostcfg_dir}/host.cfg
fi

