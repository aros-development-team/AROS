dnl Copyright © 1997-2009, The AROS Development Team. All rights reserved.
dnl $Id$
dnl
dnl Desc: Autoconf source for configuration file
dnl Lang: english

#TODO
# method of getting shared/non-shared ld/ar tool for target.


# ------------------------------------------------------------------------
# Here starts the first section of the configure.in file.
# ------------------------------------------------------------------------

AC_INIT(mmakefile)
AC_PREREQ(2.61)
AC_CONFIG_AUX_DIR(scripts/autoconf)

# Check what host we are running on.
# If a target is not suggested, we use this one.
# Note that what we call a target, Autoconf calls a host.
AC_CANONICAL_HOST

# The AROS target is slightly different to the normal GNU style
# format. We don't have the middle part, and we reverse the order
# of the $(CPU) and $(OS) bits.
#
# Don't strip the version of the target yet, it might be
# useful on some systems.

AC_MSG_CHECKING([for AROS style target])

if test "$target" = "NONE" ; then
    target=$host_os-$host_cpu
    cross_compile=no
else
    if test "$target" = "" ; then
        target=$host_os-$host_cpu
        cross_compile=no
    else
        cross_compile=yes
    fi
fi
AC_MSG_RESULT($target)

#don't know where else to put this...
AC_MSG_CHECKING([Building AROS in .. ])
AROS_BUILDDIR=$PWD
AC_MSG_RESULT($AROS_BUILDDIR)
AROS_BUILDDIR_NATIVE=$AROS_BUILDDIR

AC_MSG_CHECKING([AROS Source in .. ])
srcpwd=`cd ${srcdir} ; ${PWDCMD-pwd}`
SRCDIR=${srcpwd}
AC_MSG_RESULT($SRCDIR)

# Parse the target field into something useful.
changequote(<<,>>)
target_os=`echo $target | sed 's/^\([^-]*\)-\(.*\)$/\1/'`
target_cpu=`echo $target | sed 's/^\([^-]*\)-\(.*\)$/\2/'`
changequote([,])

dnl --------------------------------------------------------------------
dnl Set the default Workbench resolution
dnl --------------------------------------------------------------------
aros_default_wbwidth=800
aros_default_wbheight=600
aros_default_wbdepth=4

dnl --------------------------------------------------------------------
dnl Host Configuration Section
dnl --------------------------------------------------------------------
dnl
dnl The idea here is to find out all the information we need about the
dnl host. This means things like tools for building directory structures,
dnl copying files around and the like.

# The first step is to find the host binaries.
# Check for a compiler.
AC_PROG_CC
AC_PROG_CC_STDC
AC_PROG_CPP

# Check for a compatible awk
AC_CHECK_PROGS(AWK,[gawk nawk])
AROS_REQUIRED(gawk,$AWK)
AROS_PROG(MMAKE,mmake)

# Perform some default variable assignments. Note all of these will be
# Regenerated from the script, so there is no need to cache them.

aros_host_cc="$CC"
AROS_TOOL_CCPATH(aros_host_ld,ld)
AROS_REQUIRED(ld,$aros_host_ld)
aros_host_make="make"
aros_host_cflags=$CFLAGS
aros_host_ldflags=$LDFLAGS
aros_host_debug="-g -O0"
aros_host_mkdep="\$(SRCDIR)/scripts/mkdep"
aros_host_mkargs="--no-print-directory"
aros_host_incl="/usr/include"
aros_host_exe_suffix="$EXEEXT"
aros_host_lib_suffix=""

AC_CHECK_PROGS(aros_host_aclocal,[aclocal aclocal19 aclocal-1.9])
AC_CHECK_PROGS(aros_host_autoconf,[autoconf autoconf259 autoconf253])
AC_CHECK_PROGS(aros_host_autoheader,[autoheader autoheader259 autoheader253])
AC_CHECK_PROGS(aros_host_automake,[automake automake19 automake-1.9])

AROS_REQUIRED(aclocal/aclocal19/aclocal-1.9, $aros_host_aclocal)
AROS_REQUIRED(automake/automake19/automake-1.9, $aros_host_automake)

case "$aros_host_cc" in
    *gcc*)
	aros_host_cc_pipe="-pipe"
	;;
    icc)
	aros_host_cc_pipe=""
	;;
    *)
	aros_host_cc_pipe=""
	;;
esac

dnl Despite the name, this is really a host configuration variable.
aros_target_cc_includes=""

# This is the main host configuration section. It is where the host
# can change the values of any variables it needs to change. We do
# not look at anything that compiles to the target yet, we'll get
# to that later.

case "$host_os" in
    aros*)
	aros_host_arch="aros"
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *x86_64*)
		aros_host_cpu="x86_64"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    linux*)
	aros_host_arch="linux"
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *x86_64*)
	    	aros_host_cpu="x86_64"
		;;
	    *m68k*)
		aros_host_cpu="m68k"
		;;
	    *powerpc*)
	    	aros_host_cpu="ppc"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    freebsd*)
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe -I/usr/local/include"
	aros_host_make="gmake"
	aros_host_arch="freebsd"
	aros_host_cpu="i386"

        aros_host_ldflags="$aros_host_ldflags -L/usr/local/lib -liconv"

	dnl Need to override this here, it's just too hard later.
        dnl This shouldn't be here at all...
	dnl aros_target_cc_includes="/usr/include"

	dnl FreeBSD 5.x (and later) has changed the default object format.
        dnl The double [[]] is necessary to get around m4's quoting rules.
	case $host_os in
	    freebsd[[234]]*)
		aros_object_format="elf_i386"
                ;;

	    *)
		aros_object_format="elf_i386_fbsd"
                ;;
	esac

	;;

    darwin*)
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	aros_host_arch="darwin"
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *powerpc*)
	    	aros_host_cpu="ppc"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac

        aros_host_ldflags="$aros_host_ldflags -liconv"

	;;

    netbsd*)
        aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	aros_host_make="gmake"
        aros_host_arch="netbsd"
	case "$host_cpu" in
            *i?86*)
        	aros_host_cpu="i386"
        	;;
            *m68k*)
        	aros_host_cpu="m68k"
        	;;
            *)
        	AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
        	aros_host_cpu="$host_cpu"
        	;;
	esac 	
	aros_host_lib_suffix=".0.0"
        ;;

    openbsd*)
        aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
        aros_host_make="gmake"
        aros_host_arch="openbsd"
        case "$host_cpu" in
            *i?86*)
                aros_host_cpu="i386"
                ;;
            *)
                AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
                aros_host_cpu="$host_cpu"
                ;;
        esac
        ;;
        
    solaris*)
        aros_host_arch="solaris"
        aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
        case "$host_cpu" in
            *i?86*)
                aros_host_cpu="i386"
                ;;
            *sparc*)
                aros_host_cpu="sparc"
                ;;
            *)
                AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
                aros_host_cpu="$host_cpu"
                ;;
        esac
        ;;

    morphos*)
	aros_host_arch="morphos"
	aros_host_cpu="ppc"
	;;

    amiga*)
	aros_host_arch="amiga"
	SORT="/gg/bin/sort"
	TEST="/gg/bin/test"
	UNIQ="/gg/bin/uniq"
	FOR="for"
	TOUCH="/gg/bin/touch"
	case "$host_cpu" in
	    *m68k*)
		aros_host_cpu="m68k"
		;;
	    *powerpc*)
		aros_host_cpu="ppc"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    cygwin*)
	aros_host_arch="cygwin"
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    mingw32*)
        aros_host_arch="mingw32"
	aros_host_cc="$aros_host_cc $aros_host_cc_pipe"
	AROS_BUILDDIR_NATIVE=`pwd -W`
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;
    *)
	AC_MSG_ERROR([Unsupported host architecture $host])
	;;
esac

AROS_PROG(aros_host_ar,[ar],[cr])
AROS_REQUIRED(ar,$aros_host_ar)
AROS_PROG(aros_host_ranlib,ranlib)
AROS_REQUIRED(ranlib,$aros_host_ranlib)
AROS_PROG(aros_host_strip,strip)
AROS_REQUIRED(strip,$aros_host_strip)

AROS_PROG(RM,[rm],[-rf])
AROS_REQUIRED(rm,$RM)
AROS_PROG(CP,[cp])
AROS_REQUIRED(cp,$CP)
AROS_PROG(MV,[mv])
AROS_REQUIRED(mv,$MV)
AROS_PROG(ECHO,[echo])
AROS_REQUIRED(echo,$ECHO)
AROS_PROG(MKDIR,[mkdir],[-p])
AROS_REQUIRED(mkdir,$MKDIR)
AROS_PROG(TOUCH,[touch])
AROS_REQUIRED(touch,$TOUCH)
AROS_PROG(SORT,[sort])
AROS_REQUIRED(sort,$SORT)
AROS_PROG(UNIQ,[uniq])
AROS_REQUIRED(uniq,$UNIQ)
AROS_PROG(NOP,[true])
AROS_REQUIRED(true,$NOP)
AROS_PROG(CAT,[cat])
AROS_REQUIRED(cat,$CAT)
AROS_PROG(BISON,[bison])
AROS_REQUIRED(bison,$BISON)
AROS_PROG(FLEX,[flex])
AROS_REQUIRED(flex,$FLEX)
AROS_PROG(PNGTOPNM,[pngtopnm])
AROS_REQUIRED(pngtopnm,$PNGTOPNM)
AROS_PROG(PPMTOILBM,[ppmtoilbm])
AROS_REQUIRED(ppmtoilbm,$PPMTOILBM)
AROS_PROG(SED,[sed])
AROS_REQUIRED(sed,$SED)
AROS_PROG(CHMOD,[chmod])
AROS_REQUIRED(chmod,$CHMOD)

AM_PATH_PYTHON(2.2.1)

AC_SUBST(FOR, for)
AC_SUBST(IF, if)
AC_SUBST(TEST, test)
AC_SUBST(CMP, cmp)

dnl ---------------------------------------------------------------------------
dnl Look for things about the host system, good for hosted targets.
dnl ---------------------------------------------------------------------------

# Check for some includes for the X11 HIDD and the kernel
AC_CHECK_HEADERS([sys/ipc.h sys/shm.h \
    sys/mmap.h sys/mman.h sysexits.h \
    sys/statfs.h sys/statvfs.h sys/vfs.h sys/param.h \
])

AC_CHECK_HEADERS([sys/mount.h],,,[#include <sys/param.h>])

AC_HEADER_DIRENT
AC_HEADER_STAT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_STRUCT_ST_BLKSIZE
AC_STRUCT_ST_BLOCKS
AC_STRUCT_ST_RDEV
AC_STRUCT_TM
AC_STRUCT_TIMEZONE
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T

AC_CHECK_MEMBERS(struct tm.tm_gmtoff)

# Look for some functions
AC_CHECK_FUNCS([getpagesize kqueue statfs statvfs \
    clone kse_create rfork_thread thr_create sa_register \
    getcontext makecontext setcontext sigaltstack swapcontext])

AC_FUNC_MMAP


dnl --------------------------------------------------------------------
dnl Target Configuration Section
dnl --------------------------------------------------------------------
dnl
dnl The target configuration section is responsible for setting up all
dnl the paths for includes, and tools required to build AROS to some
dnl particular target.

aros_config_cflags="-Wall -Werror-implicit-function-declaration"
aros_config_aflags="-Wall -x assembler-with-cpp -c"
aros_config_ldflags=""

aros_shared_default=yes

aros_shared_cflags="-fPIC"
aros_shared_aflags=""
aros_shared_ldflags="-Wl,-rpath,./lib -shared"
aros_kernel_ldflags="-Wl,-rpath,./lib"

aros_target_ar_flags="cr"
aros_target_nm_flags="-C -ul"
aros_target_strip_flags="--strip-unneeded -R.comment"

aros_compiler_libs=
aros_arch_libs=

aros_target_genmap="-Wl,-Map -Xlinker"

# Native flavour stuff
aros_bochs_hack="0"
aros_serial_debug="0"

# Palm native flavour stuff
aros_palm_debug_hack="0"

# Unix flavour stuff
aros_nesting_supervisor="0"

# Collect-aros stuff: "-ius" to ignore undefined symbols
ignore_undefined_symbols=""

#-----------------------------------------------------------------------------

#
# GCC 4.1+ has a stack protection feature that requires OS support. Ubuntu has
# it switched on by default, and we use the host compiler, so it compiles AROS
# code with this enabled resulting in link failures as we don't have support
# for it.
#
# We use two methods to disable it. For the host compiler (used to compile
# some hosted modules), we test to see if the compiler supports stack
# protection, and if it does we disable it in AROS_CONFIG_CFLAGS. This should
# work on all platforms.
#
# For the "cross" compiler we clear the "ssp_default" spec in config/specs.in
# (this is done unconditionally, as it should have no effect on compilers
# without the stack protection feature). This may be specific to the way that
# Ubuntu enables the feature, so may not work everywhere. My specs-fu isn't
# strong enough to disable it in a generic way though, so we'll live with it
# until another vendor ships GCC with it enabled in a different way, and deal
# with it then.
#

AC_MSG_CHECKING([whether ${CC} accepts -fno-stack-protector])
save_cc="$CC"
save_cflags="$CFLAGS"
CFLAGS="$CFLAGS -fno-stack-protector"
AC_TRY_COMPILE(,, use_no_stack_protector="yes", use_no_stack_protector="no")
AC_MSG_RESULT($use_no_stack_protector)
if test "x-$use_no_stack_protector" = "x-yes" ; then
    aros_host_cflags="$aros_host_cflags -fno-stack-protector"
fi
if test "x-$cross_compiling" = "x-yes"; then
    CC="$aros_kernel_cc"
    AC_MSG_CHECKING([whether ${CC} accepts -fno-stack-protector])
    AC_TRY_COMPILE(,, use_no_stack_protector="yes", use_no_stack_protector="no")
    AC_MSG_RESULT($use_no_stack_protector)
fi
if test "x-$use_no_stack_protector" = "x-yes" ; then
    aros_kernel_cflags="$aros_kernel_cflags -fno-stack-protector"
fi
CC="$save_cc"
CFLAGS="$save_cflags"


#-----------------------------------------------------------------------------

# Check if we can explicitly choose older version of symbol hashing

save_cflags="$CFLAGS"
CFLAGS="$CFLAGS -Wl,--hash-style=sysv"
AC_MSG_CHECKING([whether ${CC} accepts -Wl,--hash-style=sysv])
AC_TRY_COMPILE(,, use_hash_style="yes", use_hash_style="no")
AC_MSG_RESULT($use_hash_style)
if test "x-$use_hash_style" = "x-yes" ; then
    aros_kernel_cflags="$aros_kernel_cflags -Wl,--hash-style=sysv"
fi
CFLAGS="$save_cflags"


#-----------------------------------------------------------------------------

# Disable pointer-signedness warnings if the compiler recognises the option
# (this only works for the host compiler at the moment)

AC_MSG_CHECKING([whether ${CC} accepts -Wno-pointer-sign])
save_cflags="$CFLAGS"
CFLAGS="$CFLAGS -Wno-pointer-sign"
AC_TRY_COMPILE(,, use_no_sign_warning="yes", use_no_sign_warning="no")
AC_MSG_RESULT($use_no_sign_warning)
if test "x-$use_no_sign_warning" = "x-yes" ; then
    aros_host_cflags="$aros_host_cflags -Wno-pointer-sign"
fi
CFLAGS="$save_cflags"

#-----------------------------------------------------------------------------

AC_MSG_CHECKING([for type of build])
AC_ARG_ENABLE(build_type,AC_HELP_STRING([--enable-build-type=TYPE],[Select the build type. Available types are: personal, nightly, snapshot, milestone, release. Do NOT use this option unless you know what you are doing! (default=personal)]),build_type=$enableval,build_type="personal")

if test "$build_type" = "nightly"; then
    build_type_string="NIGHTLY"
elif test "$build_type" = "snapshot"; then
    build_type_string="SNAPSHOT"
elif test "$build_type" = "milestone"; then
    build_type_string="MILESTONE"
elif test "$build_type" = "release"; then
    build_type_string="RELEASE"
else
    build_type_string="PERSONAL"
    build_type="personal"
fi

aros_config_cflags="$aros_config_cflags -DAROS_BUILD_TYPE=AROS_BUILD_TYPE_$build_type_string"

AC_MSG_RESULT($build_type)

#-----------------------------------------------------------------------------
all_debug_types="messages stack mungwall modules symbols"

AC_MSG_CHECKING([which debug types to enable])
AC_ARG_ENABLE(debug,AC_HELP_STRING([--enable-debug=list],[Enable different types of debug. Commas or whitespaces can be used to separate the items in the list. Available types of debug are: all, none, messages, stack, mungwall, modules, symbols. If no list is provided then "all" is assumed. (default=none)]),
 debug="$enableval",debug="")

if test "$debug" = "" -o "$debug" = "no"; then
    debug="none"
elif test "$debug" = "yes"; then
    debug="all"
fi

if test "$debug" = "all" ; then
    debug=$all_debug_types
    for d in $all_debug_types; do
        export aros_${d}_debug="1"
    done
else
    for d in $all_debug_types; do
        export aros_${d}_debug="0"
    done
fi

if test "$debug" != "none"; then
    debug=`echo $debug | sed s/,/\ /g`
    for d in $debug; do
        found="0"
        for d2 in $all_debug_types; do
	    if test "$d2" = "$d"; then
	        found="1"
		break
	    fi
	done
	if test "$found" = "0"; then
	    AC_MSG_ERROR([unrecognized debug type "$d". Available types are: all none $all_debug_types])
	fi
	export aros_${d}_debug="1"
    done
    aros_debug="yes"
fi
AC_MSG_RESULT($debug)

if test "$aros_messages_debug" = "1"; then
    aros_messages_debug="-DADEBUG=1 -DMDEBUG=1"
else
    aros_messages_debug=""
fi
if test "$aros_symbols_debug" = "1"; then
    aros_symbols_debug="-g"
else
    aros_symbols_debug=""
fi

# These are the flags to pass when compiling debugged programs
aros_debug_cflags="$aros_symbols_debug $aros_messages_debug"
aros_debug_aflags=""
aros_debug_ldflags="$aros_symbols_debug"

aros_crosstools="no"

#-----------------------------------------------------------------------------
#   Checking if we should build crosstools..
AC_MSG_CHECKING([whether to build crosstools])
AC_ARG_ENABLE(crosstools,AC_HELP_STRING([--enable-crosstools],[Build cross-compiler toolchains if necessary (default=no).]),crosstools="$enableval",crosstools="no")
if test "$crosstools" != "" -a "$crosstools" != "no"; then
    AC_MSG_RESULT(yes)
	aros_crosstools="yes"
else
    AC_MSG_RESULT(no)
fi

#-----------------------------------------------------------------------------
#   Checking for distcc and ccache.
#
#   Always apply the transforms in this particular order. Basically you should
#   always run 'ccache distcc compiler' in that order for the best performance.
#
AC_MSG_CHECKING([whether to enable distcc])
AC_ARG_ENABLE(distcc,AC_HELP_STRING([--enable-distcc],[Use distcc as a front end to the compiler (default=no).]),distcc="$enableval",distcc="no")
if test "$distcc" != "" -a "$distcc" != "no"; then
    # AC_CHECK_PROG will print out the result in this case
    AC_PATH_PROG(DISTCC,[distcc],distcc,)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([whether to enable ccache])
AC_ARG_ENABLE(ccache,AC_HELP_STRING([--enable-ccache],[Use ccache as a front end to the compiler (default=no).]),ccache="$enableval",ccache="no")
if test "$ccache" != "" -a "$ccache" != "no"; then
    # AC_CHECK_PROG will print out the result in this case
    AC_CHECK_PROG(CCACHE,[ccache],ccache,)
else
    AC_MSG_RESULT(no)
fi

#-----------------------------------------------------------------------------
AC_MSG_CHECKING([what optimization flags to use])
AC_ARG_WITH(optimization,AC_HELP_STRING([--with-optimization=FLAGS],[Use optimization flags FLAGS (default=-O2).]),optimization="$withval",optimization="unknown")
if test "$optimization" = "unknown"; then
    dnl default is -O2 for normal builds, -O0 for debug builds
    if test "$debug" != "none"; then
        optimization="-O0"
    else
        optimization="-O2"
    fi
fi
aros_config_cflags="$aros_config_cflags $optimization"
AC_MSG_RESULT($optimization)

#-----------------------------------------------------------------------------
AC_MSG_CHECKING([what target variant to enable])
AC_ARG_ENABLE(target_variant,AC_HELP_STRING([--enable-target-variant=NAME],[Enable a specific target variant(default=none)]),target_variant=$enableval,target_variant="none")
if test "$target_variant" = "none"; then
    aros_target_variant=""
    aros_target_suffix=""
else
    aros_target_variant="$target_variant"
    aros_target_suffix="-$target_variant"
fi
AC_MSG_RESULT($enableval)

target_bootloader="none"

#-----------------------------------------------------------------------------
# This is the target configuration switch.
case "$target_os" in
    linux*)
	aros_target_arch="linux"
	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_object_format="m68kelf"
		aros_flavour="emulcompat"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -D__mc68000 -D__linux__"
		aros_shared_ldflags="-Wl,-T,\$(TOP)/config/linux/m68k/script.so"
		aros_kernel_ldflags="-Wl,-rpath,./lib,-T,\$(TOP)/config/linux/m68k/script.normal"
		gcc_target_cpu="mc68000"
		;;
	    *i?86*)
		aros_target_cpu="i386"
		aros_object_format="elf_i386"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__linux__"
		aros_config_cflags="$aros_config_cflags -m32"
		aros_kernel_cflags="$aros_kernel_cflags -m32"
		aros_config_aflags="$aros_config_aflags -m32"
		aros_config_ldflags="-m32"
		aros_kernel_ldflags="-melf_i386"
		aros_default_wbdepth=8
		gcc_target_cpu="i386"
		;;
	    *x86_64*)
		aros_target_cpu="x86_64"
		aros_object_format="elf_x86_64"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dx86_64 -D__linux__"
		aros_config_cflags="$aros_config_cflags -mno-red-zone"
		aros_default_wbdepth=8
		gcc_target_cpu="x86_64"
		;;
	    *powerpc*)
	    	aros_target_cpu="ppc"
		aros_object_format="elf32ppc"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc -D__linux__"
		aros_default_wbdepth=8
		gcc_target_cpu="ppc"
		;;
# TODO
# Same as powerpc, but I need this for the nightly build to work again.
# Actually, the nightly should be made working with powerpc target.
# That just was too much work for the moment, another week or two.
	    *ppc*)
	    	aros_target_cpu="ppc"
		aros_object_format="elf32ppc"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc -D__linux__"
		aros_default_wbdepth=8
		gcc_target_cpu="ppc"
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for Linux -- $target_cpu")
		;;
	esac
    ;;

    pc)
	aros_target_arch="pc"
	aros_shared_default="no"
	target_bootloader="grub2"
	case "$target_cpu" in
	    *i?86*)
		aros_target_cpu="i386"

                dnl If somebody hasn't already set the target object
                dnl format, then use this value. Mostly to support
                dnl FreeBSD cross-compilation.
                dnl TODO: Remove when we always use our compiler.

                if test "$aros_object_format" = "" ; then
                    aros_object_format="elf_i386"
                fi
		aros_flavour="standalone"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
		aros_config_cflags="$aros_config_cflags -m32"
		aros_kernel_cflags="$aros_kernel_cflags -m32"
		aros_config_aflags="$aros_config_aflags -m32"
		aros_config_ldflags="-m32"
		aros_kernel_ldflags="-melf_i386"
		aros_default_wbwidth=640
		aros_default_wbheight=480
		gcc_target_cpu="i386"
		;;
            *x86_64*)
                aros_target_cpu="x86_64"
                aros_serial_debug=1
                if test "$aros_object_format" = "" ; then
                    aros_object_format="elf_x86_64"
                fi
                aros_flavour="standalone"
                aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dx86_64"
                aros_config_cflags="$aros_config_cflags -fno-asynchronous-unwind-tables -mno-red-zone"
                aros_kernel_ldflags=""
                aros_default_wbwidth=640
                aros_default_wbheight=480
                gcc_target_cpu="x86_64"
                ;;
            *)
		AC_MSG_ERROR("Unknown native CPU -- $target_cpu")
		;;
	esac
	;;

    prep)
	aros_target_arch="prep"
	aros_shared_default="no"
	aros_target_cpu="ppc"
	aros_object_format="elf32ppc"
	aros_flavour="ppcnative"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc"
	aros_kernel_ldflags=""
	aros_default_wbwidth=640
	aros_default_wbheight=480
	gcc_target_cpu="ppc"
	;;

    freebsd*)
	aros_target_arch="freebsd"
	aros_target_cpu="i386"
	aros_flavour="emulation"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
	gcc_target_cpu="i386"

	aros_target_strip_flags="-x"
	;;

    darwin*)
	aros_target_arch="darwin"
	aros_flavour="emulation"
	dnl FIXME
	dnl This test bypass was implemented for Darwin by port's author.
	dnl I wonder why, since darwin port needs this function.
	dnl I left it here just because port author did it.
	need_dlopen="no"
	case "$target_cpu" in
		*i?86*)
			aros_target_cpu="i386"
			aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
			gcc_target_cpu="i386"
			aros_object_format="elf_i386"
			aros_target_strip_flags="-x"
			;;
		*)
			AC_MSG_ERROR("Unsupported target CPU for darwin hosted flavour -- $target_cpu")
			;;
	esac
	;;
    netbsd*)
        aros_target_arch="netbsd"
	case "$target_cpu" in
            *m68k*)
        	aros_target_cpu="m68k"
		aros_object_format="m68kelf"
        	aros_flavour="emulcompat"
        	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -D__mc68000 -D__NetBSD__"
		gcc_target_cpu="mc68000"
        	;;
            *i?86*)
        	aros_target_cpu="i386"
		aros_object_format="elf_i386"
        	aros_flavour="emulation"
        	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__NetBSD__"
        	aros_default_wbdepth=8
		gcc_target_cpu="i386"
        	;;
            *)
        	AC_MSG_ERROR("Unknown CPU for NetBSD -- $target_cpu")
        	;;
	esac
	aros_target_genmap="-Wl,-M -Xlinker >"
        aros_flavour="emulation"
        aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
        ;;   

    openbsd*)
        aros_target_arch="openbsd"
        case "$target_cpu" in
            *i?86*)
                aros_target_cpu="i386"
		aros_object_format="elf_i386"
                aros_flavour="emulation"
                aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__OpenBSD__"
		gcc_target_cpu="i386"
                ;;
            *)
                AC_MSG_ERROR("Unknown CPU for OpenBSD -- $target_cpu")
                ;;
        esac
	aros_target_genmap="-Wl,-M -Xlinker >"
        aros_target_nm_flags="-u"
	aros_flavour="emulation"
        ;;

    solaris*)
        aros_target_arch="solaris"
        case "$target_cpu" in
           *i?86*)
               aros_target_cpu="i386"
               aros_object_format="elf_i386"
               aros_flavour="emulation"
               aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__Solaris__"
               aros_default_wbdepth=8
               gcc_target_cpu="i386"
               ;;
            *sparc*)
                aros_target_cpu="sparc"
		aros_object_format="elf_sparc"
                aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dsparc -D__Solaris__"
		gcc_target_cpu="sparc"
                ;;
            *)
                AC_MSG_ERROR("Unknown CPU for Solaris -- $target_cpu")
                ;;
        esac
        aros_config_cflags="$aros_config_cflags -D$aros_target_cpu"
        aros_flavour="emulation"
        ;;

    morphos*)
	aros_target_arch="morphos"
	aros_shared_default="no"
	aros_target_cpu="ppc"
	aros_object_format="elf_ppc"
	aros_flavour="nativecompat"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc"
	gcc_target_cpu="ppc"
	;;

    sam440)
	aros_target_arch="sam440"
	aros_shared_default="no"
	aros_target_cpu="ppc"
	aros_object_format="elf32ppc"
	aros_flavour="ppcnative"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc"
	aros_kernel_ldflags=""
	aros_default_wbwidth=640
	aros_default_wbheight=480
	aros_config_cflags="$aros_config_cflags -mcpu=440fp -mno-toc -fno-asynchronous-unwind-tables"
	gcc_target_cpu="powerpc"
	;;

    efika)
	aros_target_arch="efika"
	aros_shared_default="no"
	aros_target_cpu="arm"
	aros_object_format="armelf_linux_eabi"
	aros_flavour="standalone"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Darm"
	aros_kernel_ldflags=""
	aros_default_wbwidth=1024
	aros_default_wbheight=600
	aros_arch_libs="-laeabi"
	aros_config_cflags="$aros_config_cflags -march=armv7-a -mtune=cortex-a8 -mfpu=neon -mfloat-abi=softfp -fno-asynchronous-unwind-tables -fno-exceptions"
	aros_config_aflags="$aros_config_aflags -march=armv7-a -mtune=cortex-a8 -mfpu=neon -mfloat-abi=softfp -fno-asynchronous-unwind-tables -fno-exceptions"
	;;
	
    chrp)
    aros_target_arch="chrp"
    aros_shared_default="no"
    aros_target_cpu="ppc"
    aros_object_format="elf32ppc"
    aros_flavour="ppcnative"
    aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dppc"
    aros_kernel_ldflags=""
    aros_default_wbwidth=640
    aros_default_wbheight=480
    aros_config_cflags="$aros_config_cflags -mno-toc -fno-asynchronous-unwind-tables"    
    gcc_target_cpu="powerpc"
        case "$aros_target_variant" in
            efika)
            aros_config_cflags="$aros_config_cflags -DBIG_ENDIAN_OHCI=1 -mcpu=603e"
            ;;
        esac
    ;;

    amiga*)
	aros_target_arch="amiga"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -D_AMIGA -DAMIGA"
	aros_shared_default="no"

	aros_config_cflags="$aros_config_cflags -fomit-frame-pointer -fbuiltin -ffreestanding"

	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_object_format="m68kelf"
		aros_flavour="nativecompat"
		gcc_target_cpu="mc68000"
		;;
	    *ppc*)
		aros_cpu="ppc"
		aros_flavour="native"
		gcc_target_cpu="ppc"
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for Amiga $target_cpu")
		;;
        esac
	;;

    mingw32*)
        aros_target_arch="mingw32"
	aros_shared_default="no"
	need_dlopen="no"
	rescomp="windres"
	case "$target_cpu" in
	    *i?86*)
		aros_target_cpu="i386"
                aros_object_format="elf_i386"
		aros_flavour="emulation"
                aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
		aros_shared_cflags=""
		aros_default_wbdepth=8
		gcc_target_cpu="i386"
		aros_target_cc="i386-aros-gcc"
		aros_target_ld="i386-aros-ld"
		aros_target_as="i386-aros-as"
		aros_target_ar="i386-aros-ar"
		aros_target_ranlib="i386-aros-ranlib"
		aros_target_nm="i386-aros-nm"
		aros_target_strip="i386-aros-strip"
		aros_target_objcopy="i386-aros-objcopy"
		aros_target_objdump="i386-aros-objdump"
		target_tool_prefix="i386-mingw32-"
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for Mingw32 -- $target_cpu")
		;;
	esac
	if test $host_os = "cygwin"; then
		aros_kernel_cflags="-mno-cygwin"
	fi
    ;;
    pp*)
	aros_target_arch="pp"
	aros_shared_default="no"
	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_object_format="m68kelf"
		aros_flavour="palmnative"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dm68k"
		aros_default_wbwidth=160
                aros_default_wbheight=160
		aros_default_wbdepth=1
		aros_target_ar_flags="cru"
		aros_compiler_libs="-lgcc1"
		aros_shared_default=no
		aros_shared_cflags="-fpic"
		aros_shared_aflags=""
		aros_shared_ldflags="-Wl,-rpath,./lib -shared"
		aros_kernel_ldflags="-Wl,-rpath,./lib"
		aros_debug_cflags="-Wall -Werror-implicit-function-declaration $aros_symbols_debug  $aros_messages_debug -mc68000 -Wa,-mc68000"
		aros_debug_aflags=""
		aros_debug_ldflags="$aros_symbols_debug"
		aros_mungwall_debug="0"
		aros_modules_debug="0"
		gcc_target_cpu="mc68000"
		ignore_undefined_symbols="-ius"
		;;
	   *)
		AC_MSG_ERROR("Unknown CPU for PalmPilot -- $target_cpu")
		;;
	esac
	;;

    mac*)
	aros_target_arch="mac"
	aros_shared_default="no"
	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_object_format="m68kelf"
		aros_flavour="mac68knative"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Dm68k"
		aros_default_wbwidth=512
                aros_default_wbheight=384
		aros_default_wbdepth=8
		aros_target_ar_flags="cru"
		aros_compiler_libs="-lgcc1"
		aros_shared_default=no
		aros_shared_cflags="-fpic"
		aros_shared_aflags=""
		aros_shared_ldflags="-Wl,-rpath,./lib -shared"
		aros_kernel_ldflags="-Wl,-rpath,./lib"
		aros_debug_cflags="-Wall -Werror-implicit-function-declaration $aros_symbols_debug  $aros_messages_debug -mc68000"
		aros_debug_aflags=""
		aros_debug_ldflags="$aros_symbols_debug"
		aros_mungwall_debug="0"
		aros_modules_debug="0"
		gcc_target_cpu="mc68000"
		ignore_undefined_symbols="-ius"
		;;
	   *)
		AC_MSG_ERROR("Unknown CPU for Mac68k -- $target_cpu")
		;;
	esac
	;;

    *)
	AC_MSG_ERROR([Unsupported target architecture $target])
	;;
esac

AC_MSG_CHECKING([Where to download sourcecode for external ports])
AC_ARG_WITH(portssources,AC_HELP_STRING([--with-portssources=DIR],[Where to download sourcecode for external ports]),with_portssrcdir=$withval,with_portssrcdir="default")
if test "$with_portssrcdir" = "default"; then
    AROS_PORTSSRCDIR="$AROS_BUILDDIR/bin/Sources"
else
    AROS_PORTSSRCDIR="$with_portssrcdir"
fi
AC_MSG_RESULT($AROS_PORTSSRCDIR)

AC_MSG_CHECKING([which bootloader to use])
AC_ARG_WITH(bootloader,AC_HELP_STRING([--with-bootloader=NAME],[Use a specific bootloader]),target_bootloader=$withval,target_bootloader=$target_bootloader)
if test "$target_bootloader" = "none"; then
    aros_target_bootloader=""
else
    aros_target_bootloader="$target_bootloader"
fi
AC_MSG_RESULT($target_bootloader)

AC_MSG_CHECKING([which icon-set to use])
AC_ARG_WITH(iconset,AC_HELP_STRING([--with-iconset=NAME],[Use a specific Icon-set (default=Gorilla).]),target_iconset=$withval,target_iconset="default")
if test "$target_iconset" = "default"; then
    aros_target_iconset="Gorilla"
    target_iconset="default (Gorilla)"
else
    aros_target_iconset="$target_iconset"
fi
AC_MSG_RESULT($target_iconset)

AC_MSG_CHECKING([which GUI Theme to use])
AC_ARG_WITH(theme,AC_HELP_STRING([--with-theme=NAME],[Use a specific GUI Theme]),target_guitheme=$withval,target_guitheme="default")
if test "$target_guitheme" = "default"; then
    aros_target_guitheme="Ice"
else
    aros_target_guitheme="$target_guitheme"
fi
AC_MSG_RESULT($aros_target_guitheme)

# Find out if we are cross-compiling (i.e. if we can't use the host compiler
# for target code)
cross_compiling=no
if test "$aros_host_cpu" != "$aros_target_cpu" ; then
    cross_compiling=yes
fi
if test "$aros_host_cpu" == "x86_64" ; then
    if test "$aros_target_cpu" == "i386" ; then
        cross_compiling=no
    fi
fi
if test "$aros_host_arch" == "darwin" ; then
    cross_compiling=yes
fi

# Set prefix for target compiler etc. if we're cross-compiling
# (should possibly be earlier but needs to be after AC_PROG_CC)
if test "$cross_compiling" = "yes" ; then
    if test "$target_tool_prefix" = ""; then
	target_tool_prefix=${target_cpu}-elf-
    fi
    CC=${target_tool_prefix}gcc
fi

#-----------------------------------------------------------------------------

# Disable pointer-signedness warnings if the compiler recognises the option

AC_MSG_CHECKING([whether ${CC} accepts -Wno-pointer-sign])
save_cflags="$CFLAGS"
CFLAGS="$CFLAGS -Wno-pointer-sign"
AC_TRY_COMPILE(,, use_no_sign_warning="yes", use_no_sign_warning="no")
AC_MSG_RESULT($use_no_sign_warning)
if test "x-$use_no_sign_warning" = "x-yes" ; then
    aros_config_cflags="$aros_config_cflags -Wno-pointer-sign"
fi
CFLAGS="$save_cflags"

#-----------------------------------------------------------------------------

# Find all the tools we need to compile. This could be cross-compiling
# though! If that is the case we use the GNU form of the target and
# simply add this to the front of the binary name. This is rather simple,
# but it should work under most circumstances.
#
# The default tools are to use the same as the host, but only if the
# host and target CPU are the same. With GCC this is normally enough.
#

aros_cc_pre=""
aros_shared_ld="$aros_host_ld"

aros_target_mkdep="$aros_host_mkdep"
aros_target_incl_def="$aros_host_incl"

AC_PATH_PROG(aros_kernel_cc,$CC)

# The default tools executables to be linked to.
if test "$aros_target_cc" != ""; then
    AC_PATH_PROG(aros_target_cc,$aros_target_cc)
    AROS_REQUIRED(gcc,$aros_target_cc)
fi
if test "$aros_target_ld" != ""; then
    AC_PATH_PROG(aros_target_ld,$aros_target_ld)
    AROS_REQUIRED(ld,$aros_target_ld)
fi

if test "$crosstools" != "yes"; then
    AROS_TOOL_TARGET(aros_target_as_ln,as,$aros_target_as)
    AROS_REQUIRED(as,$aros_target_as_ln)
    AROS_TOOL_TARGET(aros_kernel_ld,ld,$aros_kernel_ld)
    AROS_REQUIRED(ld,$aros_kernel_ld)
    AROS_TOOL_TARGET(aros_target_ar_ln,ar,$aros_target_ar)
    AROS_REQUIRED(ar,$aros_target_ar_ln)
    AROS_TOOL_TARGET(aros_target_nm_ln,nm,$aros_target_nm)
    AROS_REQUIRED(nm,$aros_target_nm_ln)
    AROS_TOOL_TARGET(aros_target_objcopy_ln,objcopy,$aros_target_objcopy)
    AROS_REQUIRED(objcopy,$aros_target_objcopy_ln)
    AROS_TOOL_TARGET(aros_target_objdump_ln,objdump,$aros_target_objdump)
    AROS_REQUIRED(objdump,$aros_target_objdump_ln)
    AROS_TOOL_TARGET(aros_target_ranlib_ln,ranlib,$aros_target_ranlib)
    AROS_REQUIRED(ranlib,$aros_target_ranlib_ln)
    AROS_TOOL_TARGET(aros_target_strip_ln,strip,$aros_target_strip)
    AROS_REQUIRED(strip,$aros_target_strip_ln)
fi

if test "$rescomp" != ""; then
    if test "$cross_compiling" = "yes" ; then
	rescomp=${target_tool_prefix}${rescomp}
    fi
    AC_PATH_PROG(aros_kernel_rescomp,$rescomp)
    AROS_REQUIRED($rescomp,$aros_kernel_rescomp)
fi

aros_hostcfg_dir="bin/${aros_host_arch}-${aros_host_cpu}/gen/config"
aros_targetcfg_dir="bin/${aros_target_arch}-${aros_target_cpu}${aros_target_suffix}/gen/config"
aros_inc_dir="bin/${aros_target_arch}-${aros_target_cpu}${aros_target_suffix}/AROS/Development/include/aros"
aros_gendir="bin/${aros_target_arch}-${aros_target_cpu}${aros_target_suffix}/gen"
aros_geninc_dir="bin/${aros_target_arch}-${aros_target_cpu}${aros_target_suffix}/gen/include/aros"
aros_tools_dir="bin/${aros_host_arch}-${aros_host_cpu}/tools"
aros_scripts_dir="bin/${aros_target_arch}-${aros_target_cpu}${aros_target_suffix}/gen/scripts"

# aros_cc_pre is a variable that is added to the front of the compiler name
# in the generated aros-gcc shell script. We need this to enable the cache
# to work across cleaned builds. Also, support DISTCC using the correct
# environment variable.
#

if test "x${DISTCC}" != "x" ; then
    if test "x${CCACHE}" != "x" ; then
        aros_cc_pre="env CCACHE_PREFIX=${DISTCC} ${CCACHE} "
    else
        aros_cc_pre="${DISTCC} "
    fi
else
    if test "x${CCACHE}" != "x" ; then
        aros_cc_pre="${CCACHE} "
    fi
fi

prefix="${PWD}/${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}${aros_target_suffix}-aros"

AC_SUBST(aros_target_nostdinc_cflags,-nostdinc)
AC_SUBST(aros_target_nostartup_ldflags,-nostartfiles)
AC_SUBST(aros_target_nix_ldflags,-nix)
AC_SUBST(aros_target_detach_ldflags,-detach)
AC_SUBST(aros_target_nostdlib_ldflags,-nostdlib)

# Target tools
if test "$aros_target_cc" = ""; then
    orig_target_cc=$aros_kernel_cc
else
    orig_target_cc=$aros_target_cc
fi
if test "$aros_target_ld" = ""; then
    orig_target_ld=$aros_kernel_ld
else
    orig_target_ld=$aros_target_ld
fi
if test "$GCC" = "yes"; then
    aros_target_cc_path=`$orig_target_cc -print-search-dirs | grep "programs: =" | cut -c 12-`
fi
aros_target_cc="${prefix}-gcc"
aros_target_as="${prefix}-as"
aros_target_ld="${prefix}-ld"
aros_target_ar="${prefix}-ar $aros_target_ar_flags"
aros_target_objcopy=${prefix}-objcopy
aros_target_objdump=${prefix}-objdump
aros_target_ranlib="${prefix}-ranlib $aros_target_ranlib_flags"
aros_target_nm="${prefix}-nm $aros_target_nm_flags"
aros_kernel_nm="${prefix}-nm"
aros_target_strip=${prefix}-strip

# Find the system include path. We can suggest that an alternative is
# used if we don't get it correct. The default is to use /usr/include.
# Which is set in the aros_target_incl_def variable.

AC_ARG_ENABLE(includes,
AC_HELP_STRING([--enable-includes=dir],[Alternative system include directory]),
[aros_target_incl=$enable_includes], [aros_target_incl=$aros_target_incl_def])

dnl find out about the target cc's include path
AC_MSG_CHECKING([for the target compiler's include path])
if test "$aros_target_cc_includes" = "" ; then
    #try to guess where the directory is
    aros_target_cc_includes=`dirname \`${orig_target_cc} -print-libgcc-file-name\``/include
    if ! test -d $aros_target_cc_includes; then
        #the directory doesn't exist, we need to do some more work
        aros_target_cc_includes=${PWD}/${aros_gendir}/cc_include
	
	#these are the headers we're looling for
	headers="limits.h mmintrin.h stdbool.h syslimits.h float.h \
	         stddef.h xmmintrin.h iso646.h stdarg.h unwind.h   \
		 zutil.h"

        dirs=
	for h in $headers; do
	    #which other headers each of the above headers needs?
	    deps=$(echo "#include <$h>" | \
	           $aros_host_cc -E -M - 2>/dev/null | \
		   sed 's/^.*://; s/\\$/ /g; s/[[ \t]]\+/ /g')
	    
            #copy all the needed headers to a directory beneath gendir
	    for d in $deps; do
	        h=$(basename $d)
	        dir=${aros_target_cc_includes}$(echo $(dirname $d) | \
		                                sed -n "s,^.*/include\(/.*\),\1,p")
		! test -d $dir && mkdir -p $dir
		! test -f $dir/$h && { cp $d $dir; chmod u+w $dir/$h; }
	    done
	done	    
    fi
fi
AC_MSG_RESULT($aros_target_cc_includes)

#
# For GCC < 4.0 -I- is used for giving the search path for '#include "..."'
# On GCC >= 4.0 -iquote should be used
#

save_cc="$CC"
save_cflags="$CFLAGS"
CFLAGS="-iquote."
AC_MSG_CHECKING([whether ${CC} accepts -iquote])
AC_TRY_COMPILE(,, has_iquote="yes", has_iquote="no")
AC_MSG_RESULT($has_iquote)
if test "x-$has_iquote" = "x-yes" ; then
    host_cflags_iquote=-iquote
    host_cflags_iquote_end=
else
    host_cflags_iquote=-I
    host_cflags_iquote_end=-I-
fi
kernel_cflags_iquote=$host_cflags_iquote
kernel_cflags_iquote_end=$host_cflags_iquote_end
if test "x-$cross_compiling" = "x-yes"; then
    CC="$aros_kernel_cc"
    AC_MSG_CHECKING([whether ${CC} accepts -iquote])
    AC_TRY_COMPILE(,, has_iquote="yes", has_iquote="no")
    AC_MSG_RESULT($has_iquote)
    if test "x-$has_iquote" = "x-yes" ; then
        kernel_cflags_iquote=-iquote
        kernel_cflags_iquote_end=
    else
        kernel_cflags_iquote=-I
        kernel_cflags_iquote_end=-I-
    fi
fi
aros_cflags_iquote=$kernel_cflags_iquote
aros_cflags_iquote_end=$kernel_cflags_iquote_end
if test "$orig_target_cc" != "$aros_kernel_cc"; then
    CC="$orig_target_cc"
    AC_MSG_CHECKING([whether ${CC} accepts -iquote])
    AC_TRY_COMPILE(,, has_iquote="yes", has_iquote="no")
    AC_MSG_RESULT($has_iquote)
    if test "x-$has_iquote" = "x-yes" ; then
        aros_cflags_iquote=-iquote
        aros_cflags_iquote_end=
    else
        aros_cflags_iquote=-I
        aros_cflags_iquote_end=-I-
    fi
fi
CC="$save_cc"
CFLAGS="$save_cflags"

AC_SUBST(host_cflags_iquote)
AC_SUBST(host_cflags_iquote_end)
AC_SUBST(kernel_cflags_iquote)
AC_SUBST(kernel_cflags_iquote_end)
AC_SUBST(aros_cflags_iquote)
AC_SUBST(aros_cflags_iquote_end)


dnl Check if user specified --with-resolution=XRESxYRESxDEPTH
AC_MSG_CHECKING([for default resolution of WBScreen])
AC_ARG_WITH(resolution,AC_HELP_STRING([--with-resolution=XRESxYRESxDEPTH],[Default resolution of the initial WorkbenchScreen]),resolution=$withval,resolution=none)
# We require an argument, so map --with/--without ("yes"/"no") to "none" specified
if test "$resolution" = "yes" ; then
    resolution="none"
fi
if test "$resolution" = "no" ; then
    resolution="none"
fi
if test "$resolution" != "none" ; then
    aros_default_wbwidth=`echo $resolution | cut -d'x' -f1`
    aros_default_wbheight=`echo $resolution | cut -d'x' -f2`
    aros_default_wbdepth=`echo $resolution | cut -d'x' -f3`
fi
AC_MSG_RESULT($aros_default_wbwidth x $aros_default_wbheight x $aros_default_wbdepth)
aros_cv_default_wbwidth=$aros_default_wbwidth
aros_cv_default_wbheight=$aros_default_wbheight
aros_cv_default_wbdepth=$aros_default_wbdepth

dnl See if the user wants the BOCHS hack for native flavour
AC_MSG_CHECKING([if bochs hack is enabled])
AC_ARG_ENABLE(bochs_hack,AC_HELP_STRING([--enable-bochs-hack],[Enable hacks to make BOCHS (partly) work (default=no)]),bochs_hack="yes",bochs_hack="no")
if test "$bochs_hack" = "yes" ; then
    aros_bochs_hack="1"
fi
AC_MSG_RESULT($bochs_hack)

dnl See if the user wants the serial debug output for native flavour
AC_MSG_CHECKING([if serial debug is enabled])
AC_ARG_WITH(serial-debug,AC_HELP_STRING([--with-serial-debug],[Enable serial debug output in native (default=no)]),serial_debug=$withval,serial_debug=none)
if test "$aros_serial_debug" = 0 ; then
    serial_debug_forced=""
    if test "$serial_debug" = "yes" ; then
        serial_debug="2"
    fi
    if test "$serial_debug" = "no" ; then
        serial_debug="none"
    fi
else
    serial_debug_forced="(forced)"
    serial_debug=$aros_serial_debug
fi
if test "$serial_debug" != "none" ; then
    aros_serial_debug=$serial_debug
    AC_MSG_RESULT($serial_debug_forced on port $serial_debug)
else
    AC_MSG_RESULT(no)
fi

dnl See if the user wants the palm debug output hack for palm native flavour
AC_MSG_CHECKING([if palm debug hack is enabled])
AC_ARG_ENABLE(palm_debug_hack,AC_HELP_STRING([--enable-palm-debug-hack],[Enable palm debug output hack in palm native (default=no)]),palm_debug_hack="yes",palm_debug_hack="no")
if test "$palm_debug_hack" = "yes" ; then
    aros_palm_debug_hack="1"
fi
AC_MSG_RESULT($palm_debug_hack)


dnl See if the user wants nesting supervisor activated for unix flavour
AC_MSG_CHECKING([if nesting supervisor support is enabled])
AC_ARG_ENABLE(nesting_supervisor,AC_HELP_STRING([--enable-nesting-supervisor],[Enable nesting supervisor support in unix (default=no)]),nesting_supervisor="yes",nesting_supervisor="no")
if test "$nesting_supervisor" = "yes" ; then
    aros_nesting_supervisor="1"
fi
AC_MSG_RESULT($nesting_supervisor)


dnl things specifically required for hosted flavours
if test "x-$aros_flavour" = "x-emulation" -o "x-$aros_flavour" = "x-emulcompat" ; then

    if test "x-$need_dlopen" != "x-no" ; then
      dnl some kind of dynamic library access system is required for hostlib.resource
      AC_CHECK_FUNC(dlopen, have_dl="yes", have_dl="no")
      if test "x-$have_dl" = "x-no" ; then
          AC_CHECK_LIB(dl, dlopen, [have_dl="yes"
                                    aros_host_ldflags="$aros_host_ldflags -ldl"],
                                    have_dl="no")
      fi
      if test "x-$have_dl" = "x-no" ; then
          AC_MSG_ERROR([dlopen() dynamic linker functions not available])
      fi
    fi


    dnl x11 hidd
    AC_ARG_ENABLE(x11_hidd, AC_HELP_STRING([--enable-x11-hidd],
                                           [build X11 hidd for hosted (default=auto)]),
                                           x11_hidd="$enableval",
                                           x11_hidd="auto")
    case "x-$x11_hidd" in
        x-yes|x-no|x-auto)                 ;;
        *)                 x11_hidd="auto" ;;
    esac

    ENABLE_X11=0

    dnl they want it
    if test "x-$x11_hidd" != "x-no" ; then

        dnl find x11 stuff
        AC_PATH_X

        x_cflags=
        for path in $x_libraries
        do
            x_cflags="$x_cflags -L$path"
        done

        for path in $x_includes
        do
            x_cflags="$x_cflags -I$path"
        done
        
        if test "x-$no_x" = "x-yes" ; then

            dnl didn't find it
            if test "x-$x11_hidd" != "x-auto" ; then
                dnl and they explicitly asked for it, bail out
                AC_MSG_ERROR([X11 libs/headers not found, cannot build X11 hidd as requested])
            fi
        
        else
            dnl found it, setup the metatarget
            x11_hidd_target=kernel-x11gfx-kobj
	    ENABLE_X11=1

            dnl setup shared memory extensions
            AC_ARG_ENABLE(x11_shm, AC_HELP_STRING([--enable-x11-shm],
                                                  [use X11 shared memory (default=auto)]),
                                                  x11_hidd_shm="$enableval",
                                                  x11_hidd_shm="auto")
            case "x-$x11_hidd_shm" in
                x-yes|x-no|x-auto)                     ;;
                *)                 x11_hidd_shm="auto" ;;
            esac

            have_xshm=no

            dnl they want it
            if test "x-$x11_hidd_shm" != "x-no" ; then

                dnl system shm headers
                AC_CHECK_HEADERS(sys/ipc.h)
                AC_CHECK_HEADERS(sys/shm.h)

                dnl got them
                if test "x-$ac_cv_header_sys_ipc_h" = "x-yes" -a "x-$ac_cv_header_sys_shm_h" = "x-yes" ; then

                    dnl make sure X libs have shm functions
                    save_cflags="$CFLAGS"
                    CFLAGS="$CFLAGS $x_cflags"
                    AC_CHECK_LIB(Xext, XShmQueryExtension, have_xshm=yes)
                    CFLAGS="$save_cflags"
                fi
            fi

            dnl detection done, prepare output
            if test "x-$have_xshm" = "x-yes" ; then
                dnl we can do shm
                DO_XSHM_SUPPORT="1"
            elif test "x-$x11_hidd_shm" = "x-yes" ; then
                dnl they explicitly asked for it, but we can't do it
                AC_MSG_ERROR([X11 has no support for shared memory, cannot enable it as requested])
            else
                dnl otherwise just disable it
                DO_XSHM_SUPPORT="0"
            fi

            
            dnl setup vidmode (fullscreen) extensions
            AC_ARG_ENABLE(x11_vidmode, AC_HELP_STRING([--enable-x11-vidmode],
                                                      [use X11 vidmode extension (default=auto)]),
                                                      x11_hidd_vidmode="$enableval",
                                                      x11_hidd_vidmode="auto")
            case "x-$x11_hidd_vidmode" in
                x-yes|x-no|x-auto)                         ;;
                *)                 x11_hidd_vidmode="auto" ;;
            esac

            have_vidmode=no

            dnl they want it
            if test "x-$x11_hidd_vidmode" != "x-no" ; then

                dnl make sure X libs have vidmode functions
                save_cflags="$CFLAGS"
                CFLAGS="$CFLAGS $x_cflags"
                AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryExtension, have_vidmode=yes)
                CFLAGS="$save_cflags"
            fi

            dnl detection done, prepare output
            if test "x-$have_vidmode" = "x-yes" ; then
                dnl we can do vidmode
                DO_VIDMODE_SUPPORT="1"
            elif test "x-$x11_hidd_vidmode" = "x-yes" ; then
                dnl they explicitly asked for it, but we can't do it
                AC_MSG_ERROR([X11 vidmode extension not available, cannot enable it as requested])
            else
                dnl otherwise just disable it
                DO_VIDMODE_SUPPORT="0"
            fi
        fi

        aros_host_x11_includes=$x_includes 
        aros_host_x11_libdirs=$x_libraries
    fi


    dnl sdl hidd
    AC_ARG_ENABLE(sdl_hidd, AC_HELP_STRING([--enable-sdl-hidd],
                                           [build SDL hidd for hosted (default=auto)]),
                                           sdl_hidd="$enableval",
                                           sdl_hidd="auto")
    case "x-$sdl_hidd" in
        x-yes|x-no|x-auto)                 ;;
        *)                 sdl_hidd="auto" ;;
    esac

    dnl they want it
    if test "x-$sdl_hidd" != "x-no" ; then

        dnl find sdl
        AM_PATH_SDL([1.2.10], have_sdl="yes", have_sdl="no")

        if test "x-$have_sdl" != "x-yes" ; then

            dnl didn't find it
            if test "x-$sdl_hidd" != "x-auto" ; then
                dnl and they explicitly asked for it, bail out
                AC_MSG_ERROR([SDL libs/headers not found, cannot build SDL hidd as requested])
            fi

        else
            dnl found it, set up the metatarget
            sdl_hidd_target=kernel-hidd-sdl
            aros_host_sdl_cflags=SDL_CFLAGS
            aros_host_sdl_libs=SDL_LIBS
        fi
    fi

fi


dnl See if the user wants dbus.library
AC_MSG_CHECKING([if building of dbus.library is enabled])
AC_ARG_ENABLE(dbus,AC_HELP_STRING([--enable-dbus],[Enable DBUS support via dbus.library (default=no)]),dbus="yes",dbus="no")
if test "$dbus" = "yes" ; then
    ENABLE_DBUS=1
    DBUS_CFLAGS=`pkg-config --cflags dbus-1`
    DBUS_LIBFLAGS=`pkg-config --libs dbus-1`
    KERNEL_DBUS_KOBJ=kernel-dbus-kobj
    KERNEL_DBUS_INCLUDES=kernel-dbus-includes
else
    ENABLE_DBUS=0
fi
AC_MSG_RESULT($dbus)


dnl --------------------------------------------------------------------
dnl Configuration Output Section
dnl --------------------------------------------------------------------

# Generic
AC_SUBST(aros_arch)
AC_SUBST(aros_cpu)
AC_SUBST(aros_flavour)
AC_SUBST(aros_flavour_uc)
AC_SUBST(AROS_BUILDDIR)
AC_SUBST(AROS_BUILDDIR_NATIVE)
AC_SUBST(SRCDIR)
AC_SUBST(AROS_PORTSSRCDIR)

# Host related
AC_SUBST(aros_cc_pre)
AC_SUBST(aros_host_strip)
AC_SUBST(aros_host_arch)
AC_SUBST(aros_host_cpu)
AC_SUBST(aros_host_cc)
AC_SUBST(aros_host_ar)
AC_SUBST(aros_host_ranlib)
AC_SUBST(aros_host_ld)
AC_SUBST(aros_host_make)
AC_SUBST(aros_host_cflags)
AC_SUBST(aros_host_ldflags)
AC_SUBST(aros_host_debug)
AC_SUBST(aros_host_mkdep)
AC_SUBST(aros_host_mkargs)
AC_SUBST(aros_host_exe_suffix)
AC_SUBST(aros_host_lib_suffix)
AC_SUBST(aros_tools_dir)
AC_SUBST(aros_host_aclocal)
AC_SUBST(aros_host_autoconf)
AC_SUBST(aros_host_autoheader)
AC_SUBST(aros_host_automake)

# Target Related
AC_SUBST(aros_target_guitheme)
AC_SUBST(aros_target_iconset)
AC_SUBST(aros_target_bootloader)
AC_SUBST(aros_target_arch)
AC_SUBST(aros_target_cpu)
AC_SUBST(aros_target_variant)
AC_SUBST(aros_target_suffix)
AC_SUBST(aros_target_incl)
AC_SUBST(aros_target_ar)
AC_SUBST(aros_target_ranlib)
AC_SUBST(aros_kernel_nm)
AC_SUBST(orig_target_cc)
AC_SUBST(aros_target_cc)
AC_SUBST(aros_kernel_cc)
AC_SUBST(aros_target_as)
AC_SUBST(orig_target_ld)
AC_SUBST(aros_target_ld)
AC_SUBST(aros_kernel_ld)
AC_SUBST(aros_target_cc_includes)
AC_SUBST(aros_target_cc_path)
AC_SUBST(aros_target_objdump)
AC_SUBST(aros_target_objcopy)
AC_SUBST(aros_target_strip)
AC_SUBST(aros_target_nm)
AC_SUBST(aros_kernel_rescomp)
AC_SUBST(aros_shared_default)
AC_SUBST(aros_shared_ld)
AC_SUBST(aros_object_format)
AC_SUBST(aros_compiler_libs)
AC_SUBST(aros_arch_libs)

AC_SUBST(aros_config_cflags)
AC_SUBST(aros_config_aflags)
AC_SUBST(aros_config_ldflags)

AC_SUBST(aros_shared_cflags)
AC_SUBST(aros_shared_aflags)
AC_SUBST(aros_shared_ldflags)
AC_SUBST(aros_kernel_cflags)
AC_SUBST(aros_kernel_ldflags)
AC_SUBST(aros_debug_cflags)
AC_SUBST(aros_debug_aflags)
AC_SUBST(aros_debug_ldflags)
AC_SUBST(aros_target_genmap)
AC_SUBST(aros_target_strip_flags)

# Graphics Related
AC_SUBST(x11_hidd_target)
AC_SUBST(sdl_hidd_target)

AC_SUBST(aros_default_wbwidth)
AC_SUBST(aros_default_wbheight)
AC_SUBST(aros_default_wbdepth)
AC_SUBST(DO_XSHM_SUPPORT)
AC_SUBST(DO_VIDMODE_SUPPORT)

AC_SUBST(aros_host_x11_includes)
AC_SUBST(aros_host_x11_libdirs)
AC_SUBST(aros_host_sdl_cflags)
AC_SUBST(aros_host_sdl_libs)

# Native version related
AC_SUBST(aros_bochs_hack)
AC_SUBST(aros_serial_debug)

# Palm native version related
AC_SUBST(aros_palm_debug_hack)

# Unix/Hosted version related
AC_SUBST(aros_nesting_supervisor)

# DBUS related
AC_SUBST(ENABLE_DBUS)
AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBFLAGS)
AC_SUBST(KERNEL_DBUS_KOBJ)
AC_SUBST(KERNEL_DBUS_INCLUDES)

#X11 related
AC_SUBST(ENABLE_X11)

# Debug related
AC_SUBST(aros_debug)
AC_SUBST(aros_mungwall_debug)
AC_SUBST(aros_stack_debug)
AC_SUBST(aros_modules_debug)

# Collect-aros stuff: "-ius" to ignore undefined symbols
AC_SUBST(ignore_undefined_symbols)

# C compiler related
AC_SUBST(gcc_target_cpu)

dnl Prepare for output, make up all the generated patches
case "$aros_flavour" in
emulation)	aros_flavour_uc="AROS_FLAVOUR_EMULATION"
		aros_flavour="emulation" ;;
emulcompat)	aros_flavour_uc="(AROS_FLAVOUR_EMULATION|AROS_FLAVOUR_BINCOMPAT)"
		aros_flavour="emulation" ;;
standalone)	aros_flavour_uc="AROS_FLAVOUR_STANDALONE"
		aros_flavour="standalone";;
native) 	aros_flavour_uc="AROS_FLAVOUR_NATIVE"
		aros_flavour="native" ;;
nativecompat)	aros_flavour_uc="(AROS_FLAVOUR_NATIVE|AROS_FLAVOUR_BINCOMPAT)"
		aros_flavour="native" ;;
linklib)	aros_flavour_uc="AROS_FLAVOUR_LINKLIB"
		aros_flavour="linklib" ;;
palmnative)     aros_flavour_uc="(AROS_FLAVOUR_STANDALONE|AROS_FLAVOUR_EMULATION)"
		aros_flavour="palmnative" ;;
mac68knative)   aros_flavour_uc="(AROS_FLAVOUR_STANDALONE|AROS_FLAVOUR_EMULATION)"
		aros_flavour="mac68knative" ;;
ppcnative)	aros_flavour_uc="(AROS_FLAVOUR_STANDALONE|AROS_FLAVOUR_BINCOMPAT)"
		aros_flavour="ppcnative" ;;
esac

if test ! -d ${aros_inc_dir} ; then
    ${MKDIR} ${aros_inc_dir}
fi
if test ! -d ${aros_geninc_dir} ; then
    ${MKDIR} ${aros_geninc_dir}
fi
if test ! -d ${aros_hostcfg_dir} ; then
    ${MKDIR} ${aros_hostcfg_dir}
fi
if test ! -d ${aros_targetcfg_dir} ; then
    ${MKDIR} ${aros_targetcfg_dir}
fi
if test ! -d ${aros_tools_dir} ; then
    ${MKDIR} ${aros_tools_dir}
fi
if test ! -d ${aros_scripts_dir} ; then
    ${MKDIR} ${aros_scripts_dir}
fi

AC_CONFIG_HEADERS(${aros_geninc_dir}/host-conf.h:config/host-conf.h.in)

AC_CONFIG_COMMANDS([compiler_executable],
    [
        prefix=${PWD}/${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}${aros_target_suffix}
	mkdir -p $prefix
	prefix="${prefix}/${aros_target_cpu}-aros"
        prefix2=${PWD}/${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}${aros_target_suffix}-aros

	echo ${prefix}
	echo ${prefix2}
	chmod a+x ${prefix2}-gcc ${prefix2}-ld

	ln -sf ${prefix2}-gcc          ${prefix}-gcc
	ln -sf ${prefix2}-ld           ${prefix}-ld

        ln -sf $aros_target_as_ln$aros_host_exe_suffix      ${prefix}-as
        ln -sf $aros_target_nm_ln$aros_host_exe_suffix      ${prefix}-nm
        ln -sf $aros_target_ar_ln$aros_host_exe_suffix      ${prefix}-ar
        ln -sf $aros_target_ranlib_ln$aros_host_exe_suffix  ${prefix}-ranlib
        ln -sf $aros_target_objcopy_ln$aros_host_exe_suffix ${prefix}-objcopy
        ln -sf $aros_target_objdump_ln$aros_host_exe_suffix ${prefix}-objdump
        ln -sf $aros_target_strip_ln$aros_host_exe_suffix   ${prefix}-strip

        ln -sf $aros_target_as_ln$aros_host_exe_suffix      ${prefix2}-as
        ln -sf $aros_target_nm_ln$aros_host_exe_suffix      ${prefix2}-nm
        ln -sf $aros_target_ar_ln$aros_host_exe_suffix      ${prefix2}-ar
        ln -sf $aros_target_ranlib_ln$aros_host_exe_suffix  ${prefix2}-ranlib
        ln -sf $aros_target_objcopy_ln$aros_host_exe_suffix ${prefix2}-objcopy
        ln -sf $aros_target_objdump_ln$aros_host_exe_suffix ${prefix2}-objdump
        ln -sf $aros_target_strip_ln$aros_host_exe_suffix   ${prefix2}-strip
    ],
    [
        aros_host_exe_suffix=${aros_host_exe_suffix}
        aros_tools_dir=${aros_tools_dir}
        aros_target_cpu=${aros_target_cpu}
        aros_target_arch=${aros_target_arch}
        aros_target_suffix=${aros_target_suffix}
	aros_target_nm_ln=${aros_target_nm_ln}
	aros_target_as_ln=${aros_target_as_ln}
	aros_target_ar_ln=${aros_target_ar_ln}
	aros_target_ranlib_ln=${aros_target_ranlib_ln}
	aros_target_objdump_ln=${aros_target_objdump_ln}
	aros_target_objcopy_ln=${aros_target_objcopy_ln}
	aros_target_strip_ln=${aros_target_strip_ln}
    ]
)
AC_CONFIG_COMMANDS([genshared_executable],
    [chmod a+x ${aros_scripts_dir}/genshared],
    [aros_scripts_dir=${aros_scripts_dir}]
)
AC_CONFIG_COMMANDS([genmf_executable],
    [chmod a+x ${aros_tools_dir}/genmf.py],
    [aros_tools_dir=${aros_tools_dir}]
)
AC_CONFIG_COMMANDS([adflib_myaros.conf_executable],
    [chmod a+x tools/adflib/myconf.aros]
)

AC_CONFIG_FILES(
    Makefile
    config/make.cfg
    ${aros_inc_dir}/config.h:config/config.h.in
    ${aros_geninc_dir}/config.h:config/config.h.in
    ${aros_hostcfg_dir}/host.cfg:config/host.cfg.in
    ${aros_targetcfg_dir}/target.cfg:config/target.cfg.in
    mmake.config
    ${aros_targetcfg_dir}/make.defaults:config/make.defaults.in
    ${aros_targetcfg_dir}/specs:config/specs.in
    ${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}${aros_target_suffix}-aros-gcc:scripts/aros-gcc.in
    ${aros_tools_dir}/${aros_target_cpu}-${aros_target_arch}${aros_target_suffix}-aros-ld:scripts/aros-ld.in
    ${aros_scripts_dir}/genshared:compiler/c_lib/source/lib_source/genshared.in
    ${aros_tools_dir}/genmf.py:tools/genmf/genmf.py
    tools/adflib/myconf.aros
    tools/collect-aros/env.h
)

AC_OUTPUT

dnl This is in order to not define SHARED_CFLAGS sometimes
dnl We don't always do aros_shared_ar, aros_shared_cflags

#XXX compatability...
aros_shared_ar="$aros_shared_ld $aros_shared_ldflags -o"

if test -n "$aros_shared_cflags" ; then
    echo "SHARED_CFLAGS := $aros_shared_cflags" >> ${aros_hostcfg_dir}/host.cfg
    echo "SHARED_AR := $aros_shared_ar" >> ${aros_hostcfg_dir}/host.cfg
fi

