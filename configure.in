dnl Copyright (C) 1997-1998 AROS - The Amiga Research OS
dnl $Id$
dnl
dnl Desc: Autoconf source for configuration file
dnl Lang: english

#TODO
# method of getting shared/non-shared ld/ar tool for target.
# ar, ranlib, strip, nm for target


# ------------------------------------------------------------------------
# Here starts the first section of the configure.in file.
# ------------------------------------------------------------------------

AC_INIT(mmakefile)
AC_CONFIG_AUX_DIR(scripts/autoconf)

# Check what host we are running on.
# If a target is not suggested, we use this one.
AC_CANONICAL_HOST

# The AROS target is slightly different to the normal GNU style
# format. We don't have the middle part, and we reverse the order
# of the $(CPU) and $(OS) bits.
#
# Don't strip the version of the target yet, it might be
# useful on some systems.

AC_MSG_CHECKING([for AROS style target])
AC_CACHE_VAL(aros_cv_target,[aros_cv_target=$target])
target=`eval echo '$''{'aros_cv_target'}'`

if test $target = "NONE" ; then
    target=$host_os-$host_cpu
    cross_compile=no
else
    cross_compile=yes
fi
AC_MSG_RESULT($target)

# Parse the target field into something useful.
changequote(<<,>>)
target_os=`echo $target | sed 's/^\([^-]*\)-\(.*\)$/\1/'`
target_cpu=`echo $target | sed 's/^\([^-]*\)-\(.*\)$/\2/'`
changequote([,])

dnl --------------------------------------------------------------------
dnl Set the default Workbench resolution
dnl --------------------------------------------------------------------
aros_default_wbwidth=800
aros_default_wbheight=600
aros_default_wbdepth=4

dnl --------------------------------------------------------------------
dnl Host Configuration Section
dnl --------------------------------------------------------------------
dnl
dnl The idea here is to find out all the information we need about the
dnl host. This means things like tools for building directory structures
dnl copying files around and the like. 

# The first step is to find the host binaries.
# Check for a compiler.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_CXXCPP

# We don't yet support cross-compiling, but we may later on.
AC_CYGWIN
AC_EXEEXT
AC_OBJEXT

# Check for awk and a few other programs.
AC_PROG_AWK
AROS_PROG(MMAKE,mmake)

# Perform some default variable assignments. Note all of these will be
# Regenerated from the script, so there is no need to cache them.

aros_host_cc="$CC"
aros_host_ld="$CC"
aros_host_make="make"
aros_host_cflags=
aros_host_ldflags=
aros_host_debug="-g -O0"
aros_host_mkdep="\$(TOP)/scripts/mkdep"
aros_host_mkargs="--no-print-directory"
aros_host_incl="/usr/include"
aros_host_exe_suffix=""
aros_host_lib_suffix=""

# This is the main host configuration section. It is where the host
# can change the values of any variables it needs to change. We do
# not look at anything that compiles to the target yet, we'll get
# to that later.

case "$host_os" in
    linux*)
	aros_host_arch="linux"
	aros_host_cc="$aros_host_cc -pipe"
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *m68k*)
		aros_host_cpu="m68k"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    freebsd*)
	aros_host_cc="$aros_host_cc -pipe"
	aros_host_make="gmake"
	aros_host_arch="freebsd"
	aros_host_cpu="i386"
	;;

    netbsd*)
        aros_host_cc="$aros_host_cc -pipe"
	aros_host_make="gmake"
        aros_host_arch="netbsd"
        aros_host_cpu="i386"
	aros_host_lib_suffix=".0.0"
        ;; 

    amiga*)
	aros_host_arch="amiga"
	SORT="/gg/bin/sort"
	TEST="/gg/bin/test"
	UNIQ="/gg/bin/uniq"
	FOR="for"
	TOUCH="/gg/bin/touch"
	case "$host_cpu" in
	    *m68k*)
		aros_host_cpu="m68k"
		;;
	    *powerpc*)
		aros_host_cpu="ppc"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    cygwin*)
	aros_host_arch="cygwin"
	aros_host_cc="$aros_host_cc -pipe"
	aros_host_exe_suffix=".exe"
	case "$host_cpu" in
	    *i?86*)
		aros_host_cpu="i386"
		;;
	    *)
		AC_MSG_WARN("Unknown CPU for host -- $host_cpu")
		aros_host_cpu="$host_cpu"
		;;
	esac
        ;;

    *)
	AC_MSG_ERROR([Unsupported host architecture $host])
	;;
esac

AROS_PROG(HOST_AR,[ar],[cru])
AROS_PROG(HOST_RANLIB,ranlib)

AROS_PROG(RM,[rm],[-rf])
AROS_PROG(CP,[cp])
AROS_PROG(MV,[mv])
AROS_PROG(ECHO,[echo])
AROS_PROG(MKDIR,[mkdir],[-p])
AROS_PROG(TOUCH,[touch])
AROS_PROG(SORT,[sort])
AROS_PROG(UNIQ,[uniq])
AROS_PROG(NOP,[true])
AROS_PROG(LITE,[lite])
AROS_PROG(PYTHON,[python])
AROS_PROG(GNUPLOT,[gnuplot])
AROS_PROG(CAT,[cat])
AROS_PROG(BISON,[bison])

FOR=for
IF=if
TEST=test
AC_SUBST(FOR)
AC_SUBST(IF)
AC_SUBST(TEST)

dnl --------------------------------------------------------------------
dnl Target Configuration Section
dnl --------------------------------------------------------------------
dnl
dnl The target configuration section is responsible for setting up all
dnl the paths for includes, and tools required to build AROS to some
dnl particular target.

# Find all the tools we need to compile. This could be cross-compiling
# though! If that is the case we use the GNU form of the target and
# simply add this to the front of the binary name. This is rather simple,
# but it should work under most circumstances.
#
# The default tools are to use the same as the host, but only if the
# host and target CPU are the same. With GCC this is normally enough.
#

#if test "$cross_compile" = "no" ; then 
    aros_target_cc="$aros_host_cc"
    aros_target_as="$aros_host_cc"
    aros_shared_ld="$aros_host_ld"
    aros_static_ld="$aros_host_ld"
    aros_kernel_ld="$aros_host_ld"

    aros_target_mkdep="$aros_host_mkdep"
    aros_target_incl_def="$aros_host_incl"
#else
#    AC_MSG_ERROR([cross compiling is not yet supported])
#fi

# The default tools.
aros_target_ar="ar"
aros_target_ar_flags="cr"
aros_target_nm="nm"
aros_target_nm_flags="-ul"
aros_target_objcopy="objcopy"
aros_target_objdump="objdump"
aros_target_ranlib="ranlib"
aros_target_strip="true"

# It is necessary to clear the include and link paths for target
# commands. This should help clear up problems when cross compiling.
# XXX We don't do this yet.
aros_target_cflags="-Wall -O0 -DADEBUG=1 -DMDEBUG=1"
aros_target_aflags="-Wall -x assembler-with-cpp"
aros_target_ldflags="-nostartfiles -nostdlib -Wl,-r"

aros_shared_default=yes

aros_shared_cflags="-fPIC"
aros_shared_aflags=""
aros_shared_ldflags="-Wl,-rpath,./lib -shared"
aros_static_cflags=""
aros_static_aflags=""
aros_static_ldflags=""
aros_kernel_ldflags="-Wl,-rpath,./lib"

# These are the flags to pass when compiling debugged programs
aros_debug_cflags="-g -O0 -DADEBUG=1 -DMDEBUG=1"
aros_debug_aflags=""
aros_debug_ldflags="-g"
aros_target_genmap="-Wl,-Map -Xlinker"

# Native flavour stuff
aros_vmware_hack="0"
aros_bochs_hack="0"
aros_ide_driver="0"

# Check for some includes
AC_CHECK_HEADERS(sys/ipc.h sys/shm.h)

# This is the target configuration switch.

case "$target_os" in
    linux*)
	aros_target_arch="linux"
	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_flavour="emulcompat"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -D__mc68000 -D__linux__"
		aros_shared_ldflags="-Wl,-T,\$(TOP)/config/linux/m68k/script.so"
		aros_kernel_ldflags="-Wl,-rpath,./lib,-T,\$(TOP)/config/linux/m68k/script.normal"
		;;
	    *i?86*)
		aros_target_cpu="i386"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__linux__"
		aros_default_wbdepth=8
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for Linux -- $target_cpu")
		;;
	esac
    ;;

    native)
	aros_target_arch="native"
	aros_target_cflags="-Wall -O2 -DADEBUG=1 -DMDEBUG=1"
	aros_shared_default="no"

	case "$target_cpu" in
	    *i?86*)
		aros_target_cpu="i386"
		aros_flavour="standalone"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
		aros_kernel_ldflags=""
		aros_default_wbwidth=640
		aros_default_wbheight=480
		;;
	    *)
		AC_MSG_ERROR("Unknown native CPU -- $target_cpu")
		;;
	esac
	;;

    freebsd*)
	aros_target_arch="freebsd"
	aros_target_cpu="i386"
	aros_flavour="emulation"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
	strip_args="-x"
	;;

    netbsd*)
        aros_target_arch="netbsd"
        aros_target_cpu="i386"
	aros_target_genmap="-Wl,-M -Xlinker >" 
        aros_flavour="emulation"
        aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386"
        strip_args="-x"
        ;;   

    amiga*)
	aros_target_arch="amiga"
	aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -D_AMIGA -DAMIGA"
	aros_shared_default="no"

	aros_target_cflags="-Wall -O2 -fomit-frame-pointer -fbuiltin -ffreestanding"

	case "$target_cpu" in
	    *m68k*)
		aros_target_cpu="m68k"
		aros_flavour="nativecompat"
		aros_target_cflags="$aros_target_cflags -m68020 -m68881"
		aros_target_aflags="$aros_target_aflags -m68060"
		;;
	    *ppc*)
		aros_cpu="ppc"
		aros_flavour="native"
		aros_target_strip="strip"
		aros_target_cflags="$aros_target_cflags -mpowerpc -mcpu=603e"
		aros_target_aflags="$aros_target_aflags -m603e"
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for Amiga $target_cpu")
		;;
        esac
	;;

    cygwin*)
	aros_target_arch="cygwin"
	aros_shared_default="no"
	case "$target_cpu" in
	    *i?86*)
		aros_target_cpu="i386"
		aros_flavour="emulation"
		aros_target_mkdep="$aros_target_mkdep -D__GNUC__ -Di386 -D__CYGWIN32__"
		aros_shared_cflags=""
		aros_default_wbdepth=8
		;;
	    *)
		AC_MSG_ERROR("Unknown CPU for CygWin -- $target_cpu")
		;;
	esac
    ;;

    *)
	AC_MSG_ERROR([Unsupported target architecture $target])
	;;
esac


# Find the tools that we need for the target - this could be quite
# expensive, but we shall try it anyway.
AROS_TOOL_CC(TARGET_CC,$aros_target_cc)
AROS_TOOL_CC(TARGET_AS,$aros_target_as)
AROS_TOOL_CC(SHARED_LD,$aros_shared_ld)
AROS_TOOL_CC(STATIC_LD,$aros_static_ld)
AROS_TOOL_CC(KERNEL_LD,$aros_kernel_ld)

AROS_TOOL(AR,$aros_target_ar,$aros_target_ar_flags)
AROS_TOOL(RANLIB,$aros_target_ranlib,$aros_target_ranlib_flags)
AROS_TOOL(NM,$aros_target_nm,$aros_target_nm_flags)
AROS_TOOL(NM_PLAIN,$aros_target_nm,)
AROS_TOOL(STRIP,$aros_target_strip,$aros_target_strip_flags)
AROS_TOOL(OBJDUMP,$aros_target_objdump)
AROS_TOOL(OBJCOPY,$aros_target_objcopy)

# Find X
AC_PATH_X

# See if we can compile SHM support
HAVE_XSHM_SUPPORT=0
if [[ "x$no_x" != "xyes" -a "x$ac_cv_header_sys_ipc_h" = "xyes" -a "x$ac_cv_header_sys_shm_h" = "xyes" ]]; then
  AC_MSG_CHECKING(whether the X11 MIT-SHM extension can be compiled in)
  CFLAGS="-I $x_includes"
  LIBS="-L/usr/X11/lib -L/usr/X11R6/lib -lX11 -lXext"
  AC_TRY_LINK([
#include <sys/types.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/keysym.h>
#include <X11/cursorfont.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <X11/extensions/XShm.h>],[
static XShmSegmentInfo shminfo;
static Display *display;
XShmAttach(display, &shminfo);
XSync(display,0);
shmctl(shminfo.shmid, IPC_RMID, 0);
],
HAVE_XSHM_SUPPORT=1
AC_MSG_RESULT(yes),
HAVE_XSHM_SUPPORT=0
AC_MSG_RESULT(no))
fi


# Find the system include path. We can suggest that an alternative is
# used if we don't get it correct. The default is to use /usr/include.
# Which is set in the aros_target_incl_def variable.

AROS_CACHE_CHECK(for the system include path,target_incl,[
AC_ARG_ENABLE(includes,
[  --enable-includes=dir   Alternative system include directory],
[aros_target_incl=$enable_includes], [aros_target_incl=$aros_target_incl_def])
])

dnl Check if user specified --with-resolution=XRESxYRESxDEPTH
AC_MSG_CHECKING([for default resolution of WBScreen])
AC_ARG_WITH(resolution,[  --with-resolution=XRESxYRESxDEPTH        Default resolution of the initial WorkbenchScreen],resolution=$withval,resolution=none)
# We require an argument, so map --with/--without ("yes"/"no") to "none" specified
if test "$resolution" = "yes" ; then
    resolution="none"
fi
if test "$resolution" = "no" ; then
    resolution="none"
fi
if test "$resolution" != "none" ; then
    aros_default_wbwidth=`echo $resolution | cut -d'x' -f1`
    aros_default_wbheight=`echo $resolution | cut -d'x' -f2`
    aros_default_wbdepth=`echo $resolution | cut -d'x' -f3`
else
    # If "--with-resolution" is not given, check cache...
    AC_CACHE_VAL(aros_cv_default_wbwidth,aros_cv_default_wbwidth=$aros_default_wbwidth)
    AC_CACHE_VAL(aros_cv_default_wbheight,aros_cv_default_wbheight=$aros_default_wbheight)
    AC_CACHE_VAL(aros_cv_default_wbdepth,aros_cv_default_wbdepth=$aros_default_wbdepth)    
    aros_default_wbwidth=$aros_cv_default_wbwidth
    aros_default_wbheight=$aros_cv_default_wbheight
    aros_default_wbdepth=$aros_cv_default_wbdepth    
fi
AC_MSG_RESULT("$aros_default_wbwidth x $aros_default_wbheight x $aros_default_wbdepth")
aros_cv_default_wbwidth=$aros_default_wbwidth
aros_cv_default_wbheight=$aros_default_wbheight
aros_cv_default_wbdepth=$aros_default_wbdepth

dnl See if the user wants the VMWare hack for native flavour
AC_MSG_CHECKING([if vmware hack is enabled])
AC_ARG_ENABLE(vmware_hack,[  --enable-vmware-hack    Enable a hack on the kernel output in native [default=no]],vmware_hack="yes",vmware_hack="no")
if test "$vmware_hack" = "yes" ; then
    aros_vmware_hack="1"
fi
AC_MSG_RESULT("$vmware_hack")

dnl See if the user wants the BOCHS hack for native flavour
AC_MSG_CHECKING([if bochs hack is enabled])
AC_ARG_ENABLE(bochs_hack,[  --enable-bochs-hack     Enable hacks to make BOCHS (partly) work [default=no]],bochs_hack="yes",bochs_hack="no")
if test "$bochs_hack" = "yes" ; then
    aros_bochs_hack="1"
fi
AC_MSG_RESULT("$bochs_hack")

dnl See if the user wants the IDE driver in the native flavour
AC_MSG_CHECKING([if the ide driver is enabled])
AC_ARG_ENABLE(ide_driver,[  --enable-ide-driver     Enable IDE driver in native [default=no]],ide_driver="yes",ide_driver="no")
if test "$ide_driver" = "yes" ; then
    aros_ide_driver="1"
fi
AC_MSG_RESULT("$ide_driver")

dnl --------------------------------------------------------------------
dnl Configuration Output Section
dnl --------------------------------------------------------------------

# Generic
AC_SUBST(aros_arch)
AC_SUBST(aros_cpu)
AC_SUBST(aros_flavour)
AC_SUBST(aros_flavour_uc)

# Host related
AC_SUBST(aros_host_arch)
AC_SUBST(aros_host_cpu)
AC_SUBST(aros_host_cc)
AC_SUBST(aros_host_ld)
AC_SUBST(aros_host_make)
AC_SUBST(aros_host_cflags)
AC_SUBST(aros_host_ldflags)
AC_SUBST(aros_host_debug)
AC_SUBST(aros_host_mkdep)
AC_SUBST(aros_host_mkargs)
AC_SUBST(aros_host_exe_suffix)
AC_SUBST(aros_host_lib_suffix)

# Target Related
AC_SUBST(aros_target_arch)
AC_SUBST(aros_target_cpu)
AC_SUBST(aros_target_incl)
AC_SUBST(aros_shared_default)

AC_SUBST(aros_target_cflags)
AC_SUBST(aros_target_aflags)
AC_SUBST(aros_target_ldflags)
AC_SUBST(aros_static_cflags)
AC_SUBST(aros_static_aflags)
AC_SUBST(aros_static_ldflags)
AC_SUBST(aros_shared_cflags)
AC_SUBST(aros_shared_aflags)
AC_SUBST(aros_shared_ldflags)
AC_SUBST(aros_kernel_ldflags)
AC_SUBST(aros_debug_cflags)
AC_SUBST(aros_debug_aflags)
AC_SUBST(aros_debug_ldflags)
AC_SUBST(aros_target_genmap)

# Graphics Related
AC_SUBST(aros_gui_libdir)
AC_SUBST(aros_gui_ldflags)
AC_SUBST(aros_gui_libflags)
AC_SUBST(aros_gui_incdir)
AC_SUBST(aros_gui_ccflags)

AC_SUBST(aros_default_wbwidth)
AC_SUBST(aros_default_wbheight)
AC_SUBST(aros_default_wbdepth)
AC_SUBST(HAVE_XSHM_SUPPORT)

# Native version related
AC_SUBST(aros_vmware_hack)
AC_SUBST(aros_bochs_hack)
AC_SUBST(aros_ide_driver)

dnl Prepare for output, make up all the generated patches
case "$aros_flavour" in
emulation)	aros_flavour_uc="AROS_FLAVOUR_EMULATION" ;;
emulcompat)	aros_flavour_uc="(AROS_FLAVOUR_EMULATION|AROS_FLAVOUR_BINCOMPAT)"
		aros_flavour="emulation" ;;
standalone)	aros_flavour_uc="AROS_FLAVOUR_STANDALONE" ;;
native) 	aros_flavour_uc="AROS_FLAVOUR_NATIVE" ;;
nativecompat)	aros_flavour_uc="(AROS_FLAVOUR_NATIVE|AROS_FLAVOUR_BINCOMPAT)"
		aros_flavour="native" ;;
linklib)	aros_flavour_uc="AROS_FLAVOUR_LINKLIB" ;;
esac

if test -z "$aros_gui_basedir" ; then
    dnl Use X as the default GUI
    aros_gui_libdir="$x_libraries"
    if test -z "$x_libraries" ; then
	aros_gui_ldflags=""
    else
	aros_gui_ldflags="-L $x_libraries"
    fi
    if test "$HAVE_XSHM_SUPPORT" = "1" ; then
      aros_gui_libflags="-lX11 -lXext"
    else
      aros_gui_libflags="-lX11"
    fi
    aros_gui_incdir="$x_includes"
    if test -z "$x_includes" ; then
	aros_gui_ccflags=""
    else
	aros_gui_ccflags="-I $x_includes"
    fi
else
    if test -n "$aros_gui_basedir" ; then
	aros_gui_libdir="${aros_gui_basedir}/lib"
	aros_gui_incdir="${aros_gui_basedir}/include"
    fi

    if test -n "$aros_gui_libdir" ; then
	aros_gui_ldflags="-L ${aros_gui_libdir}"
    fi

    if test -n "$aros_gui_incdir" ; then
	aros_gui_ccflags="-I ${aros_gui_incdir}"
    else
	aros_gui_incdir="${aros_sysincludes}"
	aros_gui_ccflags=""
    fi
fi

if test ! -d bin/${aros_target_arch}-${aros_target_cpu}/AROS/Include/aros ; then
    ${MKDIR} bin/${aros_target_arch}-${aros_target_cpu}/AROS/Include/aros
fi

AC_OUTPUT(Makefile config/config.h config/host.cfg mmake.config
    make.defaults)

dnl This is in order to not defined SHARED_CFLAGS sometimes
dnl We don't always do aros_shared_ar, aros_shared_cflags

#XXX compatability...
aros_shared_ar="$aros_shared_ld $aros_shared_ldflags -o"

if test -n "$aros_shared_cflags" ; then
    echo "SHARED_CFLAGS := $aros_shared_cflags" >> config/host.cfg
    echo "SHARED_AR := $aros_shared_ar" >> config/host.cfg
fi

# Sometimes, configure will not create config/config.h; in that case,
# assume that it has not changed.
if test -f config/config.h ; then
    out=bin/$aros_target_arch-$aros_target_cpu/AROS/Include/aros/config.h
    if cmp -s "$out" "config/config.h"; then
        echo "config/config.h is unchanged."
        rm $out
    else
        echo "Replacing $out by config/config.h"
        if test -f $out ; then
	    mv $out ${out}.bak
        fi
        mv config/config.h $out
    fi
fi
