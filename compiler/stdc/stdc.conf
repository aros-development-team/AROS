##begin config
version 0.1
basename StdC
libbasetypeextern struct StdCBase
libbasetype struct StdCIntBase
options peropenerbase
##end config

##begin cdef
#include <exec/libraries.h>
##end cdef

##begin cdefprivate
#include "__stdc_intbase.h"
##end cdefprivate

##begin functionlist
# == Internal functions ==
#
.skip 10
# == C99 functions ordered per include file ==
# * assert.h: Support function for assert() macro
.skip 1
#__stdc_assert(const char * expr, const char * file, unsigned int line)
#.alias __assert
#
# * complex.h
.skip 66
#double complex cacos(double complex z)
#float complex cacosf(float complex z)
#long double complex cacosl(long double complex z)
#double complex casin(double complex z)
#float complex casinf(float complex z)
#long double complex casinl(long double complex z)
#double complex catan(double complex z)
#float complex catanf(float complex z)
#long double complex catanl(long double complex z)
#double complex ccos(double complex z)
#float complex ccosf(float complex z)
#long double complex ccosl(long double complex z)
#double complex csin(double complex z)
#float complex csinf(float complex z)
#long double complex csinl(long double complex z)
#double complex ctan(double complex z)
#float complex ctanf(float complex z)
#long double complex ctanl(long double complex z)
#double complex cacosh(double complex z)
#float complex cacoshf(float complex z)
#long double complex cacoshl(long double complex z)
#double complex casinh(double complex z)
#float complex casinhf(float complex z)
#long double complex casinhl(long double complex z)
#double complex catanh(double complex z)
#float complex catanhf(float complex z)
#long double complex catanhl(long double complex z)
#double complex ccosh(double complex z)
#float complex ccoshf(float complex z)
#long double complex ccoshl(long double complex z)
#double complex csinh(double complex z)
#float complex csinhf(float complex z)
#long double complex csinhl(long double complex z)
#double complex ctanh(double complex z)
#float complex ctanhf(float complex z)
#long double complex ctanhl(long double complex z)
#double complex cexp(double complex z)
#float complex cexpf(float complex z)
#long double complex cexpl(long double complex z)
#double complex clog(double complex z)
#float complex clogf(float complex z)
#long double complex clogl(long double complex z)
#double cabs(double complex z)
#float cabsf(float complex z)
#long double cabsl(long double complex z)
#double complex cpow(double complex x, double complex y)
#float complex cpowf(float complex x, float complex y)
#long double complex cpowl(long double complex x, long double complex y)
#double complex csqrt(double complex z)
#float complex csqrtf(float complex z)
#long double complex csqrtl(long double complex z)
#double carg(double complex z)
#float cargf(float complex z)
#long double cargl(long double complex z)
#double cimag(double complex z)
#float cimagf(float complex z)
#long double cimagl(long double complex z)
#double complex conj(double complex z)
#float complex conjf(float complex z)
#long double complex conjl(long double complex z)
#double complex cproj(double complex z)
#float complex cprojf(float complex z)
#long double complex cprojl(long double complex z)
#double creal(double complex z)
#float crealf(float complex z)
#long double creall(long double complex z)
#
# * ctype.h: functions are declared as static inline functions
#
# * errno.h
.skip 1
#int __stdc_ioerr2errno(int ioerr)
#
# * fenv.h
.skip 11
#int feclearexcept(int excepts)
#int fegetexceptflag(fexcept_t *flagp, int excepts)
#int feraiseexcept(int excepts)
#int fesetexceptflag(const fexcept_t *flagp, int excepts)
#int fetestexcept(int excepts)
#int fegetround(void)
#int fesetround(int round)
#int fegetenv(fenv_t *envp)
#int feholdexcept(fenv_t *envp)
#int fesetenv(const fenv_t *envp)
#int feupdateenv(const fenv_t *envp)
#
# * float.h: no functions in float.h
#
# * inttypes.h
.skip 6
#intmax_t imaxabs(intmax_t j)
#imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom)
#intmax_t strtoimax(const char * restrict nptr, char ** restrict endptr, int base)
#uintmax_t strtoumax(const char * restrict nptr, char ** restrict endptr, int base)
#intmax_t wcstoimax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)
#uintmax_t wcstoumax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)
#
# * iso646.h: no functions in iso646.h
#
# * limits.h: no functions in limits.h
#
# * locale.h
.skip 2
#char *setlocale(int category, const char *locale)
#struct lconv *localeconv(void)
#
# * math.h
.skip 189
#int __fpclassify(double)
#int __fpclassifyf(float)
#int __fpclassifyl(long double)
#int __isfinite(double)
#.alias finite
#int __isfinitef(float)
#.alias finitef
#int __isfinitel(long double)
#.alias finitel
#int __isinf(double)
#.alias isinf
#int __isinff(float)
#.alias isinff
#int __isinfl(long double)
#.alias isinfl
#int __isnan(double)
#.alias isnan
#int __isnanf(float)
#.alias isnanf
#int __isnanl(long double)
#.alias isnanl
#int __isnormal(double)
#int __isnormalf(float)
#int __isnormall(long double)
#int __signbit(double)
#int __signbitf(float)
#int __signbitl(long double)
#double acos(double)
#double asin(double)
#double atan(double)
#double atan2(double, double)
#double cos(double)
#double sin(double)
#double tan(double)
#double acosh(double)
#double asinh(double)
#double atanh(double)
#double cosh(double)
#double sinh(double)
#double tanh(double)
#double exp(double)
#double exp2(double)
#double expm1(double)
#double frexp(double, int *)
#int ilogb(double)
#double ldexp(double, int)
#double log(double)
#double log10(double)
#double log1p(double)
#double log2(double)
#double logb(double)
#double modf(double, double *)
#double scalbn(double, int)
#double scalbln(double, long)
#double cbrt(double)
#double fabs(double)
#double hypot(double, double)
#double pow(double, double)
#double sqrt(double)
#double erf(double)
#double erfc(double)
#double lgamma(double)
#.alias gamma
#double tgamma(double)
#double ceil(double)
#double floor(double)
#double nearbyint(double)
#double rint(double)
#long lrint(double)
#long long llrint(double)
#double round(double)
#long lround(double)
#long long llround(double)
#double trunc(double)
#double fmod(double, double)
#double remainder(double, double)
#.alias drem
#double remquo(double, double, int *)
#double copysign(double, double)
#double nan(const char *tagp)
#double nextafter(double, double)
#double nexttoward(double, long double)
#double fdim(double, double)
#double fmax(double, double)
#double fmin(double, double)
#double fma(double, double, double)
#float acosf(float)
#float asinf(float)
#float atanf(float)
#float atan2f(float, float)
#float cosf(float)
#float sinf(float)
#float tanf(float)
#float acoshf(float)
#float asinhf(float)
#float atanhf(float)
#float coshf(float)
#float sinhf(float)
#float tanhf(float)
#float expf(float)
#float exp2f(float)
#float expm1f(float)
#float frexpf(float, int *)
#int ilogbf(float)
#float ldexpf(float, int)
#float logf(float)
#float log10f(float)
#float log1pf(float)
#float log2f(float)
#float logbf(float)
#float modff(float, float *)
#float scalbnf(float, int)
#float scalblnf(float, long)
#float cbrtf(float)
#float fabsf(float)
#float hypotf(float, float)
#float powf(float, float)
#float sqrtf(float)
#float erff(float)
#float erfcf(float)
#float lgammaf(float)
#.alias gammaf
#float tgammaf(float)
#float ceilf(float)
#float floorf(float)
#float nearbyintf(float)
#float rintf(float)
#long lrintf(float)
#long long llrintf(float)
#float roundf(float)
#long lroundf(float)
#long long llroundf(float)
#float truncf(float)
#float fmodf(float, float)
#float remainderf(float, float)
#.alias dremf
#float remquof(float, float, int *)
#float copysignf(float, float)
#float nanf(const char *tagp)
#float nextafterf(float, float)
#float nexttowardf(float, long double)
#float fdimf(float, float)
#float fmaxf(float, float)
#float fminf(float, float)
#float fmaf(float, float, float)
#long double acosl(long double)
#long double asinl(long double)
#long double atanl(long double)
#long double atan2l(long double, long double)
#long double cosl(long double)
#long double sinl(long double)
#long double tanl(long double)
#long double acoshl(long double)
#long double asinhl(long double)
#long double atanhl(long double)
#long double coshl(long double)
#long double sinhl(long double)
#long double tanhl(long double)
#long double expl(long double)
#long double exp2l(long double)
#long double expm1l(long double)
#long double frexpl(long double value, int *)
#int ilogbl(long double)
#long double ldexpl(long double, int)
#long double logl(long double)
#long double log10l(long double)
#long double log1pl(long double)
#long double log2l(long double)
#long double logbl(long double)
#long double modfl(long double, long double *)
#long double scalbnl(long double, int)
#long double scalblnl(long double, long)
#long double cbrtl(long double)
#long double fabsl(long double)
#long double hypotl(long double, long double)
#long double powl(long double, long double)
#long double sqrtl(long double)
#long double erfl(long double)
#long double erfcl(long double)
#long double lgammal(long double)
#.alias gammal
#long double tgammal(long double)
#long double ceill(long double)
#long double floorl(long double)
#long double nearbyintl(long double)
#long double rintl(long double)
#long lrintl(long double)
#long long llrintl(long double)
#long double roundl(long double)
#long lroundl(long double)
#long long llroundl(long double)
#long double truncl(long double)
#long double fmodl(long double, long double)
#long double remainderl(long double, long double)
#.alias dreml
#long double remquol(long double, long double, int *)
#long double copysignl(long double, long double)
#long double nanl(const char *tagp)
#long double nextafterl(long double, long double)
#long double nexttowardl(long double, long double)
#long double fdiml(long double, long double)
#long double fmaxl(long double, long double)
#long double fminl(long double, long double)
#long double fmal(long double, long double, long double)
#
# * setjmp.h
.skip 2
#int setjmp(jmp_buf env)
#void longjmp(jmp_buf env, int val)
#
# * signal.h
.skip 2
#__sighandler_t *signal(int, __sighandler_t *)
#int raise(int)
#
# * stdarg.h: implementation has to be provided by the compiler.
#
# * stdbool.h: no functions in stdbool.h
#
# * stddef.h: no functions in stddef.h
#
# * stdint.h: no functions in stdint.h
#
# * stdio.h: only string based functions are implemented, the rest in stdcio.library
.skip 6
#int snprintf(char * restrict s, size_t n, const char * restrict format, ...)
#int sprintf(char * restrict s, const char * restrict format, ...)
#int sscanf(const char * restrict s, const char * restrict format, ...)
#int vsnprintf(char * restrict s, size_t n, const char * restrict format, va_list arg)
#int vsprintf(char * restrict s, const char * restrict format, va_list arg)
#int vsscanf(const char * restrict s, const char * restrict format, va_list arg)
#
# * stdlib.h: getenv() and system() implemented in stdcio.library
.skip 37
#double atof(const char *nptr)
#int atoi(const char *nptr)
#long int atol(const char *nptr)
#long long int atoll(const char *nptr)
#double strtod(const char * restrict nptr, char ** restrict endptr)
#float strtof(const char * restrict nptr, char ** restrict endptr)
#long double strtold(const char * restrict nptr, char ** restrict endptr)
#long int strtol(const char * restrict nptr, char ** restrict endptr, int base)
#long long int strtoll(const char * restrict nptr, char ** restrict endptr, int base)
#unsigned long int strtoul(const char * restrict nptr, char ** restrict endptr, int base)
#unsigned long long int strtoull(const char * restrict nptr, char ** restrict endptr, int base)
#int rand(void)
#void srand(unsigned int seed)
#void *calloc(size_t count, size_t size)
#void free(void *memory)
#void *malloc(size_t size)
#void *__malloc_align(size_t size, size_t alignment)
#void *realloc(void *oldmem, size_t newsize)
#void *realloc_nocopy(void *oldmem, size_t newsize)
#void abort(void)
#int atexit(void (*func)(void))
#int on_exit(void (*func)(int, void *), void *)
#void exit(int code)
#void _Exit(int)
#void *bsearch(const void * key, const void * base, size_t count, size_t size, int (*comparefunction)(const void *, const void *))
#void qsort(void * array, size_t count, size_t elementsize, int (*comparefunction)(const void * element1, const void * element2))
#int abs(int j)
#long labs(long j)
#long long llabs(long long j)
#div_t div(int numer, int denom)
#ldiv_t ldiv(long int numer, long int denom)
#lldiv_t lldiv(long long int numer, long long int denom)
#int mblen(const char *s, size_t n)
#int mbtowc(wchar_t * restrict pwc, const char * restrict s, size_t n)
#int wctomb(char *s, wchar_t wc)
#size_t mbstowcs(wchar_t * restrict pwcs, const char * restrict s, size_t n)
#size_t wcstombs(char * restrict s, const wchar_t * restrict pwcs, size_t n)
#
# * string.h: memcpy is the same as memmove
.skip 21
#void *memmove (void * dest, const void * src, size_t n)
#.alias memcpy
#char *strcpy (char * restrict dest, const char * restrict src)
#char *strncpy (char * restrict dest, const char * restrict src, size_t n)
#char *strcat (char * restrict dest, const char * restrict src)
#char *strncat (char * restrict dest, const char * restrict src, size_t n)
#int memcmp (const void * s1, const void * s2, size_t n)
#int strcmp (const char * s1, const char * s2)
#int strcoll (const char *s1, const char *s2)
#int strncmp (const char * s1, const char * s2, size_t n)
#size_t strxfrm (char * restrict s1, const char * restrict s2, size_t n)
#void *memchr (const void * dest, int c, size_t n)
#char *strchr (const char * s, int c)
#.alias index
#size_t strcspn (const char *s1, const char *s2)
#char *strpbrk (const char * s1, const char * s2)
#char *strrchr (const char * s, int c)
#.alias rindex
#size_t strspn (const char * s1, const char * s2)
#char *strstr (const char * buf, const char * str)c
#char *strtok (char * str, const char * sep)v
#void *memset (void * dest, int c, size_t n)
#char *__stdc_strerror (int n)
#size_t strlen (const char * str)
#
# * tgmath.h: not implemented in stdc.library
#
# * time.h
.skip 9
#clock_t clock(void)
#double difftime(time_t, time_t)
#time_t mktime(struct tm *)
#time_t time(time_t *)
#char *asctime(const struct tm *)
#char *ctime(const time_t *)
#struct tm *gmtime(const time_t *)
#struct tm *localtime(const time_t *)
#size_t strftime(char *, size_t, const char *, const struct tm *)
#
# * wchar.h: not implemented in stdc.library
#
# * wctype.h: not implemented in stdc.library
#
# == Extensions ==
# * stdio.h: AROS specific support functions based on libnix
.skip 2
#int __vcformat(void * data, int (*outc)(int, void *), const char * format, va_list args)
#int __vcscan(void * data, int (*getc)(void *), int (*ungetc)(int, void *), const char * format, va_list args)
#
# * string.h: POSIX, BSD/UNIX, SAS/C
.skip 28
#void *memccpy(void *restrict, const void *restrict, int, size_t)
#char *stpcpy(char *restrict, const char *restrict)
#char *stpncpy(char *restrict, const char *restrict, size_t)
#int strcoll_l(const char *, const char *, locale_t)
#char *strdup(const char *)
#char *strerror_l(int, locale_t)
#int strerror_r(int, char *, size_t)
#char *strndup(const char *, size_t)
#size_t strnlen(const char *, size_t)
#char *strsignal(int)
#char *strtok_r(char *restrict, const char *restrict, char **restrict)
#size_t strxfrm_l(char *restrict, const char *restrict, size_t, locale_t)
#size_t strlcpy(char *dst, const char *src, size_t size)
#size_t strlcat(char *dst, const char *src, size_t size)
#char *strsep(char **, const char *)
#char *strlwr(char *)
#char *strupr(char *)
#char *strrev(char * s)
#int stch_l(const char * in, long * lvalue)
#int stcd_l(const char * in, long * lvalue)
#int stco_l(const char * in, long * lvalue)
#int stcl_d(char * out, long lvalue)
#int stcl_h(char * out, long lvalue)
#int stcl_o(char * out, long lvalue)
#int stcu_d(char * out, unsigned uivalue)
#size_t stccpy(char *str1_ptr, const char *str2_ptr, size_t max)
#char *stpsym(char *str_ptr, char *dest_ptr, int dest_size)
#char * stpblk( const char * str )
#
# * strings.h: POSIX, BSD
.skip 4
#int strcasecmp(const char * s1, const char * s2)
#int strcasecmp_l(const char *, const char *, locale_t)
#int strncasecmp(const char *, const char *, size_t)
#int strncasecmp_l(const char *, const char *, size_t, locale_t)
#
# * time.h: reentrant versions of some C99 functions (POSIX)
.skip 4
#char *asctime_r(const struct tm *, char *)
#char *ctime_r(const time_t *, char *)
#struct tm *gmtime_r(const time_t *, struct tm *)
#struct tm *localtime_r(const time_t *, struct tm *)
#
##end functionlist
