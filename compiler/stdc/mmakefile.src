include $(SRCDIR)/config/aros.cfg

#MM- AROS : compiler-stdc compiler-stdcio

FMTPRINTFDIR := $(SRCDIR)/compiler/fmtprintf
USER_INCLUDES += -I$(SRCDIR)/$(CURDIR)/math -iquote $(FMTPRINTFDIR)

STDC_MATH := \
    math/bsdsrc/b_exp \
    math/bsdsrc/b_log \
    math/bsdsrc/b_tgamma \
    math/e_acos \
    math/e_acosf \
    math/e_acosh \
    math/e_acoshf \
    math/e_asin \
    math/e_asinf \
    math/e_atan2 \
    math/e_atan2f \
    math/e_atanh \
    math/e_atanhf \
    math/e_cosh \
    math/e_coshf \
    math/e_exp \
    math/e_expf \
    math/e_fmod \
    math/e_fmodf \
    math/e_gamma \
    math/e_gammaf \
    math/e_gamma_r \
    math/e_gammaf_r \
    math/e_hypot \
    math/e_hypotf \
    math/e_j0 \
    math/e_j0f \
    math/e_j1 \
    math/e_j1f \
    math/e_jn \
    math/e_jnf \
    math/e_lgamma \
    math/e_lgammaf \
    math/e_lgamma_r \
    math/e_lgammaf_r \
    math/e_log \
    math/e_logf \
    math/e_log2 \
    math/e_log2f \
    math/e_log10 \
    math/e_log10f \
    math/e_pow \
    math/e_powf \
    math/e_rem_pio2 \
    math/e_rem_pio2f \
    math/e_remainder \
    math/e_remainderf \
    math/e_scalb \
    math/e_scalbf \
    math/e_sinh \
    math/e_sinhf \
    math/e_sqrt \
    math/e_sqrtf \
    math/k_cos \
    math/k_cosf \
    math/k_exp \
    math/k_expf \
    math/k_rem_pio2 \
    math/k_rem_pio2f \
    math/k_sin \
    math/k_sinf \
    math/k_tan \
    math/k_tanf \
    math/s_nan \
    math/s_asinh \
    math/s_asinhf \
    math/s_atan \
    math/s_atanf \
    math/s_cacos \
    math/s_cacosf \
    math/s_cacosh \
    math/s_cacoshf \
    math/s_carg \
    math/s_cargf \
    math/s_casin \
    math/s_casinf \
    math/s_casinh \
    math/s_casinhf \
    math/s_catan \
    math/s_catanf \
    math/s_catanh \
    math/s_catanhf \
    math/s_cbrt \
    math/s_cbrtf \
    math/s_ccos \
    math/s_ccosf \
    math/s_ccosh \
    math/s_ccoshf \
    math/s_ceil \
    math/s_ceilf \
    math/s_cexp \
    math/s_cexpf \
    math/s_cimag \
    math/s_cimagf \
    math/s_conj \
    math/s_conjf \
    math/s_clog \
    math/s_clogf \
    math/s_cpow \
    math/s_cpowf \
    math/s_cproj \
    math/s_cprojf \
    math/s_creal \
    math/s_crealf \
    math/s_csinh \
    math/s_csinhf \
    math/s_csin \
    math/s_csqrt \
    math/s_csqrtf \
    math/s_ctan \
    math/s_ctanf \
    math/s_ctanh \
    math/s_ctanhf \
    math/s_copysign \
    math/s_copysignf \
    math/s_cos \
    math/s_cosf \
    math/s_erf \
    math/s_erff \
    math/s_exp2 \
    math/s_exp2f \
    math/s_expm1 \
    math/s_expm1f \
    math/s_fabs \
    math/s_fabsf \
    math/s_fdim \
    math/s_floor \
    math/s_floorf \
    math/s_fpclassify \
    math/s_fma \
    math/s_fmaf  \
    math/s_fmax \
    math/s_fmaxf \
    math/s_fmaxl \
    math/s_fmin \
    math/s_fminf \
    math/s_fminl \
    math/s_frexp \
    math/s_frexpf  \
    math/s_ilogb \
    math/s_ilogbf \
    math/s_isfinite \
    math/s_isinf \
    math/s_isnan \
    math/s_isnormal \
    math/s_log1p \
    math/s_log1pf \
    math/s_logb \
    math/s_logbf \
    math/s_modf \
    math/s_modff \
    math/s_nearbyint \
    math/s_nextafter \
    math/s_nextafterf  \
    math/s_nexttowardf \
    math/s_remquo \
    math/s_remquof \
    math/s_rint \
    math/s_rintf \
    math/s_lrint \
    math/s_lrintf \
    math/s_llrint \
    math/s_llrintf \
    math/s_round \
    math/s_roundf \
    math/s_lround \
    math/s_lroundf \
    math/s_llround \
    math/s_llroundf \
    math/s_scalbln \
    math/s_scalbn \
    math/s_scalbnf  \
    math/s_signbit \
    math/s_significand \
    math/s_significandf \
    math/s_sin \
    math/s_sincos \
    math/s_sincosf \
    math/s_sinf \
    math/s_tan \
    math/s_tanf \
    math/s_tanh \
    math/s_tanhf \
    math/s_tgammaf \
    math/s_trunc \
    math/s_truncf

STDC_SCABS_MATH := \
    math/s_cabs \
    math/s_cabsf

STDC_WCABS_MATH := \
    math/w_cabs \
    math/w_cabsf

STDC_LONGDB_MATH := \
    math/e_acosl \
    math/e_asinl \
    math/e_atan2l \
    math/e_fmodl \
    math/e_hypotl \
    math/e_lgammal \
    math/e_remainderl \
    math/e_sqrtl \
    math/polevll \
    math/s_atanl \
    math/s_cacoshl \
    math/s_cacosl \
    math/s_cargl \
    math/s_casinhl \
    math/s_casinl \
    math/s_catanhl \
    math/s_catanl \
    math/s_cbrtl \
    math/s_ccoshl \
    math/s_ccosl \
    math/s_ceill \
    math/s_cexpl \
    math/s_cimagl \
    math/s_clogl \
    math/s_conjl \
    math/s_copysignl \
    math/s_cosl \
    math/s_cpowl \
    math/s_cprojl \
    math/s_creall \
    math/s_csinhl \
    math/s_csinl \
    math/s_csqrtl \
    math/s_ctanhl \
    math/s_ctanl \
    math/s_fabsl \
    math/s_floorl \
    math/s_fmal \
    math/s_frexpl \
    math/s_ilogbl \
    math/s_llrintl \
    math/s_llroundl \
    math/s_lrintl \
    math/s_lroundl \
    math/s_logbl \
    math/s_modfl \
    math/s_nextafterl \
    math/s_nexttoward \
    math/s_remquol \
    math/s_rintl \
    math/s_roundl \
    math/s_scalbnl \
    math/s_sincosl \
    math/s_sinl \
    math/s_tanl \
    math/s_truncl

# Support files for 80bit and 128bit precision long double.

STDC_LONGDB80_MATH := \
    math/ld80/e_acoshl \
    math/ld80/e_atanhl \
    math/ld80/e_coshl \
    math/ld80/e_expl \
    math/ld80/e_lgammal_r \
    math/ld80/e_log2l \
    math/ld80/e_log10l \
    math/ld80/e_logl \
    math/ld80/e_powl \
    math/ld80/e_sinhl \
    math/ld80/e_tgammal \
    math/ld80/invtrig \
    math/ld80/k_cosl \
    math/ld80/k_sinl \
    math/ld80/k_tanl \
    math/ld80/s_asinhl \
    math/ld80/s_erfl \
    math/ld80/s_exp2l \
    math/ld80/s_expm1l \
    math/ld80/s_log1pl \
    math/ld80/s_nanl \
    math/ld80/s_tanhl

STDC_LONGDB128_MATH := \
    math/ld128/e_acoshl \
    math/ld128/e_atanhl \
    math/ld128/e_coshl \
    math/ld128/e_expl \
    math/ld128/e_lgammal_r \
    math/ld128/e_log2l \
    math/ld128/e_log10l \
    math/ld128/e_logl \
    math/ld128/e_powl \
    math/ld128/e_sinhl \
    math/ld128/e_tgammal \
    math/ld128/invtrig \
    math/ld128/k_cosl \
    math/ld128/k_sinl \
    math/ld128/k_tanl \
    math/ld128/s_asinhl \
    math/ld128/s_erfl \
    math/ld128/s_exp2l \
    math/ld128/s_expm1l \
    math/ld128/s_log1pl \
    math/ld128/s_nanl \
    math/ld128/s_tanhl

#
# Add 80bit long double support on x86, x64 and m68k
#
ifneq ($(filter $(AROS_TARGET_CPU),i386 x86_64 m68k),)
STDC_MATH += $(STDC_LONGDB_MATH)
STDC_MATH += $(STDC_LONGDB80_MATH)
USER_INCLUDES += -I$(SRCDIR)/$(CURDIR)/math/ld80
STDC_SCABS_MATH += math/s_cabsl
STDC_WCABS_MATH += math/w_cabsl
else
#
# Add 128bit long double support for aarch64
#
ifneq ($(filter $(AROS_TARGET_CPU),aarch64),)
STDC_MATH += $(STDC_LONGDB_MATH)
STDC_MATH += $(STDC_LONGDB128_MATH)
USER_INCLUDES += -I$(SRCDIR)/$(CURDIR)/math/ld128
STDC_SCABS_MATH += math/s_cabsl
STDC_WCABS_MATH += math/w_cabsl
else
#
# We either don't know what long double format is required
# or the platform doesn't support it, so alias the double versions
# of necessary functions.
# These architectures should have
# LDBL_MANT_DIG == DBL_MANT_DIG (53) in float.h
#
endif
endif

STDC_MATH += $(STDC_WCABS_MATH)

STDC := \
    __ctype \
    __exitfunc \
    __optionallibs \
    __signal \
    __stdc_assert \
    __stdc_gmtoffset \
    __stdc_ioerr2errno \
    __stdc_startup \
    __stdc_fpuprivate \
    __vcformat \
    __vcscan \
    _exit \
    abort \
    abs labs llabs \
    asctime asctime_r \
    atexit \
    atof \
    atoi \
    atol \
    atoll \
    bsearch \
    calloc \
    clock \
    ctime ctime_r \
    difftime \
    div ldiv lldiv \
    exit \
    fenv _fenv \
    free \
    getc \
    gmtime gmtime_r \
    imaxabs \
    imaxdiv \
    localeconv \
    localtime localtime_r \
    longjmp \
    malloc \
    malloc_align \
    $(STDC_MATH) \
    mblen \
    memchr \
    memcmp \
    memcpy \
    memmove \
    memset \
    mktime \
    on_exit \
    putc \
    qsort \
    raise \
    rand \
    realloc \
    realloc_nocopy \
    setjmp \
    setlocale \
    signal \
    snprintf \
    sprintf \
    sscanf \
    stccpy \
    stcd_l \
    stch_l \
    stcl_d \
    stcl_h \
    stcl_o \
    stco_l \
    stcu_d \
    stpblk \
    stpcpy \
    stpsym \
    strcasecmp \
    strcat \
    strchr \
    strcmp \
    strcoll \
    strcpy \
    strcspn \
    strdup \
    strerror \
    strftime \
    strlcat \
    strlcpy \
    strlen \
    strnlen \
    strlwr \
    strncasecmp \
    strncat \
    strncmp \
    strncpy \
    strndup \
    strpbrk \
    strrchr \
    strrev \
    strsep \
    strspn \
    strstr \
    strtod \
    strtof \
    strtoimax \
    strtok \
    strtok_r \
    strtol \
    strtold \
    strtoll \
    strtoul \
    strtoull \
    strtoumax \
    strupr \
    strxfrm \
    time \
    vsnprintf \
    vsprintf \
    vsscanf

STDC_LINKLIB := \
    __ctype_linklib \
    strcasestr

# The common files will be put both in the shared and in the static link lib
STDC_COMMON := \
    __stdc_geterrnoptr \
    __stdc_getsigngamptr \
    __stdc_mb_cur_max \
    math/infinity

STDCIO := \
    __stdcio_assert \
    __stdcio_init \
    __stdio \
    clearerr \
    fclose \
    feof \
    ferror \
    fflush \
    fgetc \
    fgetpos \
    fgets \
    fopen \
    fprintf \
    fputc \
    fputs \
    fread \
    freopen \
    fscanf \
    fseek \
    fsetpos \
    ftell \
    fwrite \
    getchar \
    getenv \
    gets \
    printf \
    putchar \
    puts \
    remove \
    rename \
    rewind \
    scanf \
    setbuf \
    setvbuf \
    system \
    tmpfile \
    tmpnam \
    ungetc \
    vfprintf \
    vfscanf \
    vprintf \
    vscanf

# The common files will be put both in the shared and in the static link lib
STDCIO_COMMON := \
    __stdcio_stdstreams

#MM- core-linklibs : linklibs-stdc linklibs-stdcio linklibs-libm

STDC_LINKOBJS := $(addsuffix .o,$(addprefix $(GENDIR)/$(CURDIR)/stdc/,$(notdir $(STDC_COMMON))))

# Ugh. These are for the math routines, which have a number of
# lint issues, that should be fixed.
NOWARN_FLAGS := $(NOWARN_NONNULL_COMPARE) $(NOWARN_UNUSED_VARIABLE) \
    $(NOWARN_PARENTHESES) $(NOWARN_UNINITIALIZED)

USER_CFLAGS := $(NOWARN_FLAGS) -noposixc $(CFLAGS_NO_BUILTIN)
USER_LDFLAGS := -nostdc -noposixc
USER_CPPFLAGS := -Dlint '-D__FBSDID(x)=' 

%build_module mmake=compiler-stdc \
    modname=stdc modtype=library \
    files="$(STDC) $(STDC_COMMON)" \
    linklibfiles=$(STDC_LINKLIB) linklibobjs=$(STDC_LINKOBJS)

STDCIO_LINKOBJS := $(addsuffix .o,$(addprefix $(GENDIR)/$(CURDIR)/stdcio/,$(notdir $(STDCIO_COMMON))))

%build_module mmake=compiler-stdcio \
    modname=stdcio modtype=library \
    files="$(STDCIO) $(STDCIO_COMMON)" \
    linklibobjs=$(STDCIO_LINKOBJS) \
    uselibs="stdc_rel"

STDC_MATH_STATIC := \
    math/e_log \
    math/e_logf \
    math/e_log2 \
    math/e_log2f \
    math/e_log10 \
    math/e_log10f \
    math/e_pow \
    math/e_powf \
    math/e_rem_pio2 \
    math/e_sqrt \
    math/k_cos \
    math/k_rem_pio2 \
    math/k_sin \
    math/s_copysign \
    math/s_copysignf \
    math/s_copysignl \
    math/s_cos \
    math/s_fabs \
    math/s_floor \
    math/s_fpclassify \
    math/s_scalbn \
    math/s_scalbnf

STDC_STATIC := \
    __ctype \
    __vcformat \
    __vcscan \
    atoi \
    atol \
    atoll \
    bsearch \
    $(STDC_MATH_STATIC) \
    memchr \
    memcmp \
    memcpy \
    memmove \
    memset \
    qsort \
    snprintf \
    sprintf \
    sscanf \
    stccpy \
    stpblk \
    strcasecmp \
    strcasestr \
    strcat \
    stcd_l \
    stch_l \
    stcl_d \
    stcl_h \
    stcl_o \
    stco_l \
    stcu_d \
    stpcpy \
    strchr \
    strcmp \
    strcpy \
    strcspn \
    strlcat \
    strlcpy \
    strlen \
    strnlen \
    strlwr \
    strncasecmp \
    strncat \
    strncpy \
    strncmp \
    strpbrk \
    strrchr \
    strspn \
    strstr \
    strtod \
    strtof \
    strtol \
    strtoul \
    vsnprintf \
    vsprintf \
    vsscanf

USER_CFLAGS := $(NOWARN_FLAGS) -fno-builtin
USER_CPPFLAGS := -DSTDC_STATIC -Dlint

#MM- core-linklibs : linklibs-stdc-static
%build_linklib mmake=linklibs-stdc-static libname=stdc.static \
    files="$(STDC_STATIC)" objdir=$(GENDIR)/$(CURDIR)/static

#MM- linklibs-romhack : compiler-stdc
# FIXME: The next romhack linklib is a temporary hack and has to be
# excommunicated in the future !
# setjmp()/longjmp() is used in dos.library so make it available.
# Plan to put stdc.library also in aros-base rom so this is not needed anymore
%build_linklib mmake=linklibs-romhack \
    objdir=$(GENDIR)/$(CURDIR)/stdc libname=romhack files="setjmp longjmp"

CFLAGS32 := $(filter-out -mcmodel=large,$(CFLAGS))

# x86_64 needs a 32bit version stdc.static
%build_linklib mmake=linklibs-stdc-static32 \
    libname=stdc.static files="$(STDC_STATIC)" objs=$(ROM_COMMON_OBJ32) \
    cflags="-m32 $(CFLAGS32) -DSTDC_LIB32 -DSTDC_STATIC" \
    objdir=$(GENDIR)/$(CURDIR)/32bit libdir=$(GENDIR)/lib32

# A dummy libm.a is provided so that -lm link option does not produce an error
# objdir is provided to avoid that arch specific files end up in libm.a
%build_linklib mmake=linklibs-libm \
    libname=m files=empty objdir=$(GENDIR)/$(CURDIR)/libm
