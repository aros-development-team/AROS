# $Id$
include $(TOP)/config/make.cfg

#
#   This is a rather special include file. It builds both a shared library
#   and a link library from the same source, with only a small amount of
#   overlap.
#
USER_CFLAGS :=	-Iinclude -I$(TOP)/rom/exec

# We are trying to build:
#   $(AROS_LIBS)/arosc.library	    from $(SHARED)
#   $(AROS_LIB)/libarosc.a	    from $(COMMON) and $(STATIC)
#   $(AROS_LIB)/libarosc_shared.a   from $(COMMON) and $(STUBS)
#
#   Note that $(SHARED) and $(STATIC) are the same group of files, but
#   compiled slightly differently.
#
#   It turns out that some of $(SHARED) refer to things in $(COMMON), so
#   I've put that into the arosc.library as well.
MODULE	    :=	arosc.library
STATIC_LIB  :=	$(AROS_LIB)/libarosc.a
SHARED_LIB  :=	$(AROS_LIB)/libarosc_shared.a

# New: Also trying to build
#   $(AROS_LIB)/librom.a	    from $(COMMON) and $(ROMONLY)
#
#   This is a library that is allowed to be used inside modules and the
#   kernel. It must include no code which refers to global variables.
#
#   Currently the main difference is that it includes a different __assert()
#   function to handle asserts in the kernel.
ROM_LIB	    :=	$(AROS_LIB)/librom.a

# All of the above
LIB	    := $(STATIC_LIB) $(SHARED_LIB) $(ROM_LIB) $(AROS_LIBS)/$(MODULE)

# Lists of files
#   - Common always exist in the link library.

COMMON	:= \
	__alloca \
	bcmp \
	bcopy \
	bzero \
	ctype \
	div \
	ldiv \
	lldiv \
	longjmp \
	memchr \
	memcmp \
	memcpy \
	memmove \
	memset \
	putchar \
	setjmp \
	stccpy \
	stpblk \
	stpcpy \
	stpsym \
	strcasecmp \
	strcat \
	strchr \
	strcmp \
        strcoll \
	strcpy \
	strcspn \
	strdup \
	strlcat \
	strlcpy \
	strlen \
	strlwr \
	strncasecmp \
	strncat \
	strncmp \
	strncpy \
	strpbrk \
	strrchr \
	strrev \
	strspn \
	strstr \
	strtod \
	strtok \
	strupr \
	swab


#   - Shared are in either the shared linklib, or the arosc.library module
SHARED	:= \
	__assert \
	__env \
	__exitfunc \
	__ioerr2errno \
	__isinf \
	__open \
	__rand48 \
	__stat \
	__stdio \
	__vcformat \
	__vcscan \
	abort \
	abs \
	access \
	asctime \
	atexit \
	atof \
	atoi \
	atol \
	bsearch \
	calloc \
	chdir \
	chmod \
	clearerr \
	ctime \
	clock \
	close \
	closedir \
	creat \
	difftime \
	drand48 \
	dup \
	dup2 \
	erand48 \
	errno \
	exit \
        _exit \
	fchmod \
	fclose \
	fcntl \
	fdopen \
	feof \
	ferror \
	fflush \
	fgetc \
	fgetpos \
	fgets \
	fileno \
	fopen \
	fprintf \
	fscanf \
	fputc \
	fputs \
	fread \
	free \
	freopen \
	fseek \
	fsetpos \
	fstat \
	ftell \
	ftruncate \
	fwrite \
	gcvt \
	getcwd \
	getenv \
	getfsstat \
        getpid \
	gettimeofday \
	gmtime \
	isatty \
	isinf \
	jrand48 \
        kill \
	labs \
	lcong48 \
	localtime \
	lrand48 \
	lseek \
	malloc \
	mktemp \
	mktime \
	mkdir \
	mrand48 \
	nrand48 \
	on_exit \
	open \
	opendir \
        pclose \
	perror \
	pipe \
        popen \
	printf \
	putenv \
	puts \
	qsort \
	rand \
	random \
	read \
	readdir \
	realloc \
        realloc_nocopy \
	remove \
	rename \
	rewind \
	rewinddir \
	scanf \
	seed48 \
	seekdir \
	setbuf \
	setenv \
	setlinebuf \
        setlocale \
	setvbuf \
	sigaction \
	sigaddset \
	sigdelset \
	sigemptyset \
	sigfillset \
	sigismember \
	signal \
	sigpending \
	sigprocmask \
	sigsuspend \
	sleep \
	snprintf \
	sprintf \
	srand48 \
	sscanf \
	stat \
	stcd_l \
	stcl_d \
	stcl_h \
	stcl_o \
	stch_l \
	stco_l \
	stcu_d \
	strftime \
	strerror \
	strtol \
	strtoll \
	strtoul \
	strtoull \
	system \
	telldir \
	time	 \
	tmpnam \
	truncate \
	umask \
	ungetc \
	unlink \
	unsetenv \
	updatestdio \
	utime \
	utimes \
	vfprintf \
	vfscanf \
	vprintf \
	vscanf \
	vsnprintf \
	vsprintf \
	vsscanf \
	write

ROM_ONLY := \
	__assert_kernel

ROM_COMMON := \
	bcmp \
	bcopy \
	bzero \
	ctype \
	div \
	ldiv \
	lldiv \
	longjmp \
	memchr \
	memcmp \
	memcpy \
	memmove \
	memset \
	setjmp \
	stpblk \
	stpcpy \
	strcasecmp \
	strcat \
	strchr \
	strcmp \
	strcpy \
	strcspn \
	strlen \
	strncasecmp \
	strncat \
	strncmp \
	strncpy \
	strpbrk \
	strrchr \
	strrev \
	strspn \
	strstr \
	strtod \
	strtok

# Objects for rom.lib, from the static build.
ROM_STATIC := \
	__isinf \
	__vcformat \
	abs \
	atoi \
	atol \
	bsearch \
	ctype \
	errno \
	isinf \
	labs \
	qsort \
	snprintf \
	sprintf \
	strtol \
	strtoll \
	strtoul \
	strtoull \
	vsnprintf \
	vsprintf

#   - The stubs are generated, and are in the shared link library.
STUBS   := $(wildcard $(OBJDIR)/stubs/*.o)

# Dependancies
DEPS := $(foreach f,$(COMMON),$(OBJDIR)/$(f).d) \
	$(foreach f,$(SHARED),$(OBJDIR)/static/$(f).d) \
	$(foreach f,$(SHARED),$(OBJDIR)/shared/$(f).d) \
	$(OBJDIR)/shared/arosc_init.d $(OBJDIR)/shared/arosc_functable.d $(OBJDIR)/shared/arosc_endtag.d

STATIC_OBJ :=	$(foreach f,$(COMMON),$(OBJDIR)/$(f).o) \
		$(foreach f,$(SHARED),$(OBJDIR)/static/$(f).o)
SHARED_OBJ :=	$(foreach f,$(COMMON),$(OBJDIR)/$(f).o) \
		$(STUBS)
MODULE_OBJ :=	$(foreach f,$(COMMON) $(SHARED),$(OBJDIR)/shared/$(f).o)

ROM_OBJ	   :=	$(foreach f,$(ROM_ONLY),$(OBJDIR)/rom/$(f).o) \
		$(foreach f,$(ROM_COMMON),$(OBJDIR)/$(f).o) \
		$(foreach f,$(ROM_STATIC),$(OBJDIR)/static/$(f).o)

# These are added to the link step of arosc.library
LIBS := -L$(AROS_LIB) -larosm -lautoinit
DEP_LIBS := arosm autoinit

#MM- linklibs : linklibs-clib
#MM linklibs-clib : setup-clib includes linklibs-mlib linklibs-autoinit \
#MM			clib-$(ARCH)-$(CPU) clib-stubs

#MM
linklibs-clib-quick : linklibs-clib

linklibs-clib : setup-clib $(STATIC_LIB) $(SHARED_LIB) $(ROM_LIB) $(AROS_LIBS)/$(MODULE)

$(STATIC_LIB) : $(STATIC_OBJ)
	%mklib_q from=$^

$(SHARED_LIB) : $(SHARED_OBJ)
	%mklib_q from=$^

$(ROM_LIB) : $(ROM_OBJ)
	%mklib_q from=$^

$(AROS_LIBS)/$(MODULE) : $(MODULE_OBJ)
	%link_module_q objs="$(OBJDIR)/shared/arosc_init.o $(OBJDIR)/shared/arosc_functable.o $(MODULE_OBJ)" endtag="$(OBJDIR)/shared/arosc_endtag.o"

$(OBJDIR)/static/%.o : %.c
	%compile_q opt="$(CFLAGS) -include $(INCDIR)/libraries/arosc.h"

$(OBJDIR)/shared/%.o : %.c
	%compile_q opt="$(CFLAGS) -D_CLIB_KERNEL_ -include $(INCDIR)/libraries/arosc.h"

$(OBJDIR)/rom/%.o : %.c
	%compile_q opt="$(CFLAGS) -include $(INCDIR)/libraries/arosc.h"

$(OBJDIR)/%.o : %.c
	%compile_q opt="$(CFLAGS) -include $(INCDIR)/libraries/arosc.h"

# Need to copy these files in from the machine dependant build.
$(OBJDIR)/shared/%jmp.o : $(OBJDIR)/%jmp.o
	@$(CP) $< $@

# The rules to create the dependancy files.
$(OBJDIR)/static/%.d : %.c
	%mkdepend_q flags=$(CFLAGS)

$(OBJDIR)/shared/%.d : %.c
	%mkdepend_q flags=$(CFLAGS)

$(OBJDIR)/rom/%.d : %.c
	%mkdepend_q flags=$(CFLAGS)

$(OBJDIR)/%.d : %.c
	%mkdepend_q flags=$(CFLAGS)

#MM
setup-clib :
	%mkdirs_q $(AROS_INCLUDES)/sys $(OBJDIR) 
	%mkdirs_q $(OBJDIR)/static $(OBJDIR)/shared $(OBJDIR)/rom
	%mkdirs_q $(AROS_LIB) $(AROS_LIBS)

#MM
check : $(TESTDIR)/snprint

$(TESTDIR)/snprintf : snprintf.c $(LIBDIR)/startup.o $(DEPLIBS)
	$(CC) -DTEST $(ILDFLAGS) $(LIBDIR)/startup.o $< -o $@ $(LIBS)

#MM
clean ::
	-$(RM) $(OBJDIR) *.err $(LIB)

%common
%include_deps

# Fix up the deps, these won't end up in $^, but they'll make it work.
$(AROS_LIBS)/$(MODULE) : $(OBJDIR)/shared/arosc_init.o $(OBJDIR)/shared/arosc_functable.o $(OBJDIR)/shared/arosc_endtag.o
$(AROS_LIBS)/$(MODULE) : $(foreach f,$(DEP_LIBS),$(AROS_LIB)/lib$(f).a)
$(OBJDIR)/shared/arosc_init.o $(OBJDIR)/shared/arosc_functable.o: $(AROS_INCLUDES)/sys/syscall.def

