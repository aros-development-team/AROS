BEGIN {
    stderr="/dev/stderr";

    file = "libdefs.h";

    while ((getline < file) > 0)
    {
	if ($2 == "BASENAME")
	{
	    lib = $3;
	    basename = $3;
	}
	else if ($2 == "LIBBASE")
	{
	    libbase = $3;
	}
	else if ($2 == "LIBBASETYPEPTR")
	{
	    libbtp = $3;
	    for (t=4; t<=NF; t++)
		libbtp=libbtp" "$t;
	}
	else if($2 == "NT_TYPE")
	{
	    if( $3 == "NT_RESOURCE" )
	    {
		firstlvo = 0;
		libext = ".resource";
	    }
	    else if ( $3 == "NT_DEVICE" )
	    {
		firstlvo = 6;
		libext = ".device";
	    }
	    else
	    {
		firstlvo = 4;
		libexit = ".library";
	    }
	}
    }

    verbose_pattern = libbase"[ \\t]*,[ \\t]*[0-9]+[ \\t]*,[ \\t]*"basename;

    close (file);

    BASENAME=toupper(basename);

    print "#ifndef DEFINES_"BASENAME"_PROTOS_H"
    print "#define DEFINES_"BASENAME"_PROTOS_H"
    print ""
    print "/*"
    print "    Copyright © 1995-2001, The AROS Development Team. All rights reserved."
    print "    *** Automatically generated by gendefines.awk. Do not edit ***"
    print ""
    print "    Desc: Prototypes for "basename libext
    print "    Lang: english"
    print "*/"
    print ""
    print "#ifndef AROS_LIBCALL_H"
    print "#   include <aros/libcall.h>"
    print "#endif"
    print "#ifndef EXEC_TYPES_H"
    print "#   include <exec/types.h>"
    print "#endif"
    print ""

    file = "headers.tmpl"
    doprint = 0;
    emit = 0;

    while ((getline < file) > 0)
    {
	if ($1=="##begin" && $2 == "defines")
	    doprint = 1;
	else if ($1=="##end" && $2 == "defines")
	    doprint = 0;
	else if (doprint)
	{
	    print;
	    emit ++;
	}
    }

    if (emit > 0)
	print ""

    print "/* Defines */"
}
/AROS_LH(A|(QUAD)?[0-9])/ {
    line=$0;
    isarg=match($0,/AROS_LHA/);

    gsub(/AROS_LH/,"AROS_LC",line);
    gsub(/^[ \t]+/,"",line);

    if (!isarg)
    {
	args="";
	narg=0;
	match(line,/[a-zA-Z_0-9]+[ \t]*,[ \t]*$/);
	fname=substr(line,RSTART,RLENGTH);
	gsub(/[ \t]*,[ \t]*$/,"",fname);
	call=line;
    }
    else
    {
	arg[narg++] = line;
	match(line,/,[^)]+/);
	line=substr(line,RSTART+1,RLENGTH-1);
	gsub(/[ \t]+/,"",line);
	match(line,/[^,]+/);
	if (args!="")
	    args=args", "substr(line,RSTART,RLENGTH);
	else
	    args=substr(line,RSTART,RLENGTH);
    }
}
/LIBBASE[ \t]*,[ \t]*[0-9]+/ || $0 ~ verbose_pattern {
    line=$0;
    gsub(/LIBBASETYPEPTR/,libbtp,line);
    gsub(/LIBBASE/,libbase,line);
    gsub(/BASENAME/,basename,line);
    gsub(/[ \t]*[)][ \t]*$/,"",line);
    gsub(/^[ \t]+/,"",line);
    split(line,a,",");
    lvo=int(a[3]);

    if (lvo > firstlvo)
    {
	print "#define "fname"("args") \\"
	print "\t"call" \\";
	for (t=0; t<narg; t++)
	{
	# parenthesize the second argument of AROS_LCA
	# AROS_LCA(a,b,c) => AROS_LCA(a,(b),c)
	#
	match(arg[t],/\(.*\)/);
	lca_args=substr(arg[t],RSTART+1,RLENGTH-2);
	split(lca_args,lca_arg,",");
	lca_args="("lca_arg[1]",("lca_arg[2]"),"lca_arg[3]")";
	sub(/\(.*\)/,lca_args,arg[t]);

	    print "\t"arg[t]" \\"
	}
	print "\t"line")"
	print ""
    }
    narg=0;
}
END {
    print "#endif /* DEFINES_"BASENAME"_PROTOS_H */"
}
