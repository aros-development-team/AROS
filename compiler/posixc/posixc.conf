##begin config
version 0.1
basename PosixC
libbasetypeextern struct PosixCBase
libbasetype struct PosixCIntBase
options pertaskbase
##end config

##begin cdef
#include <libraries/posixc.h>
#include <stdlib.h>
#include <grp.h>
#include <time.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/stat.h>
#include <dirent.h>
#include <sys/resource.h>
#include <sys/mount.h>
#include <sys/time.h>
#include <sys/times.h>
#include <signal.h>
#include <regex.h>
#include <sys/utsname.h>
#include <termios.h>
#include <utime.h>

#undef __assert /* We replace the aroscstddos __assert with our own */
##end cdef

##begin cdefprivate
#include "__posixc_intbase.h"
##end cdefprivate

##begin startup
#include "posixc_startup.c"
##end startup

##begin functionlist
# == internal functions ==
int __posixc_nixmain(int (*main)(int argc, char *argv[]), int argc, char *argv[])
.skip 9
#
# == POSIX.1-2008 ==
# * aio.h
.skip 8
#int aio_cancel(int, struct aiocb *)
#int aio_error(const struct aiocb *)
#int aio_fsync(int, struct aiocb *)
#int aio_read(struct aiocb *)
#ssize_t aio_return(struct aiocb *)
#int aio_suspend(const struct aiocb *const [], int, const struct timespec *)
#int aio_write(struct aiocb *)
#int lio_listio(int, struct aiocb *restrict const [restrict], int, struct sigevent *restrict)
#
# * arpa/inet.h
.skip 8
#uint32_t htonl(uint32_t)
#uint16_t htons(uint16_t)
#uint32_t ntohl(uint32_t)
#uint16_t ntohs(uint16_t)
#in_addr_t inet_addr(const char *)
#char *inet_ntoa(struct in_addr)
#const char  *inet_ntop(int, const void *restrict, char *restrict, socklen_t)
#int inet_pton(int, const char *restrict, void *restrict)
#
# * assert.h
void __posixc_assert (const char *, const char *, unsigned int)
.alias __assert
#
# * complex.h: not implemented in posixc.library
#
# * cpio.h: no functions in cpio.h
#
# * ctype.h: Reserve the LVOs, we may want to provide our own implementation
.skip 32
#int isalnum(int)
#int isalnum_l(int, locale_t)
#int isalpha(int)
#int isalpha_l(int, locale_t)
#int isascii(int)
#int isblank(int)
#int isblank_l(int, locale_t)
#int iscntrl(int)
#int iscntrl_l(int, locale_t)
#int isdigit(int)
#int isdigit_l(int, locale_t)
#int isgraph(int)
#int isgraph_l(int, locale_t)
#int islower(int)
#int islower_l(int, locale_t)
#int isprint(int)
#int isprint_l(int, locale_t)
#int ispunct(int)
#int ispunct_l(int, locale_t)
#int isspace(int)
#int isspace_l(int, locale_t)
#int isupper(int)
#int isupper_l(int, locale_t)
#int isxdigit(int)
#int isxdigit_l(int, locale_t)
#int toascii(int)
#int tolower(int)
#int tolower_l(int, locale_t)
#int toupper(int)
#int toupper_l(int, locale_t)
#int _toupper(int)
#int _tolower(int)
#
# * dirent.h
.skip 1
#int alphasort(const struct dirent **a, const struct dirent **b)
int closedir(DIR *dir)
int dirfd(DIR *dir)
.skip 1
#DIR *fdopendir(int)
DIR *opendir(const char *filename)
struct dirent *readdir(DIR *dir)
.skip 1
#int readdir_r(DIR *restrict, struct dirent *restrict, struct dirent **restrict)
void rewinddir(DIR *dir)
.skip 1
#int scandir (const char *dir, struct dirent ***namelist, int (*select)(const struct dirent *), int (*compar)(const struct dirent **, const struct dirent **))
void seekdir(DIR *dir, off_t loc)
long telldir(DIR *dir)
#
# * dlfcn.h
.skip 4
#int dlclose(void *)
#char *dlerror(void)
#void *dlopen(const char *, int)
#void *dlsym(void *restrict, const char *restrict)
#
# * errno.h: no functions in errno.h
#
# * fcntl.h
int creat (const char * filename, int mode)
int fcntl (int fd, int cmd, ...)
int open  (const char * filename, int flags, ...)
.skip 3
#int openat(int, const char *, int, ...)
#int posix_fadvise(int fd, off_t offset, size_t len, int advice)
#int posix_fallocate(int fd, off_t offset, size_t len)
#
# * fenv.h: not implemented in posixc.library
#
# * float.h: not implemented in posixc.library
#
# * fmtmsg.h
.skip 1
#int fmtmsg(long, const char *, int, const char *, const char *, const char *)
#
# * fnmatch.h
.skip 1
#int fnmatch(const char *, const char *, int)
#
# * ftw.h
.skip 2
#int ftw(const char *, int (*)(const char *, const struct stat *, int), int)
#int nftw(const char *, int (*)(const char *, const struct stat *, int, struct FTW *), int, int)
#
# * glob.h
.skip 2
#int glob(const char *restrict, int, int(*)(const char *, int), glob_t *restrict)
#void globfree(glob_t *)
#
# * grp.h
void endgrent(void)
struct group *getgrent(void)
struct group *getgrgid(gid_t)
.skip 1
#int getgrgid_r(gid_t, struct group *, char *, size_t, struct group **)
struct group *getgrnam(const char *)
.skip 1
#int getgrnam_r(const char *, struct group *, char *, size_t , struct group **)
void setgrent(void)
#
# * iconv.h
.skip 3
#size_t iconv(iconv_t, char **restrict, size_t *restrict, char **restrict, size_t *restrict)
#int iconv_close(iconv_t)
#iconv_t iconv_open(const char *, const char *)
#
# * inttypes.h: no POSIX specific functions in inttypes.h
#
# * iso646.h: no functions in iso646.h
#
# * langinfo.h
.skip 2
#char *nl_langinfo(nl_item)
#char *nl_langinfo_l(nl_item, locale_t)
#
# * libgen.h
char *basename(char *)
char *dirname(char *)
#
# * limits.h: no functions in limits.h
#
# * locale.h: Reserve the LVOs, we may want to provide our own implementation
.skip 6
#locale_t duplocale(locale_t)
#void freelocale(locale_t)
#struct lconv *localeconv(void)
#locale_t newlocale(int, const char *, locale_t)
#char *setlocale(int, const char *)
#locale_t uselocale (locale_t)
#
# * math.h: not implemented in posixc.library
#
# * monetary.h
.skip 2
#ssize_t strfmon(char *restrict, size_t, const char *restrict, ...)
#ssize_t strfmon_l(char *restrict, size_t, locale_t, const char *restrict, ...)
#
# * mqueue.h
.skip 10
#int mq_close(mqd_t)
#int mq_getattr(mqd_t, struct mq_attr *)
#int mq_notify(mqd_t, const struct sigevent *)
#mqd_t mq_open(const char *, int, ...)
#ssize_t mq_receive(mqd_t, char *, size_t, unsigned *)
#int mq_send(mqd_t, const char *, size_t, unsigned)
#int mq_setattr(mqd_t, const struct mq_attr *restrict, struct mq_attr *restrict)
#ssize_t mq_timedreceive(mqd_t, char *restrict, size_t, unsigned *restrict, const struct timespec *restrict)
#int mq_timedsend(mqd_t, const char *, size_t, unsigned, const struct timespec *)
#int mq_unlink(const char *)
#
# * ndbm.h
.skip 9
#int dbm_clearerr(DBM *)
#void dbm_close(DBM *)
#int dbm_delete(DBM *, datum)
#int dbm_error(DBM *)
#datum dbm_fetch(DBM *, datum)
#datum dbm_firstkey(DBM *)
#datum dbm_nextkey(DBM *)
#DBM *dbm_open(const char *, int, mode_t)
#int dbm_store(DBM *, datum, datum, int)
#
# * net/if.h
.skip 4
#void if_freenameindex(struct if_nameindex *)
#char *if_indextoname(unsigned, char *)
#struct if_nameindex *if_nameindex(void)
#unsigned if_nametoindex(const char *)
#
# * netdb.h
.skip 22
#void endhostent(void)
#void endnetent(void)
#void endprotoent(void)
#void endservent(void)
#void freeaddrinfo(struct addrinfo *)
#const char *gai_strerror(int)
#int getaddrinfo(const char *restrict, const char *restrict, const struct addrinfo *restrict, struct addrinfo **restrict)
#struct hostent *gethostent(void)
#int getnameinfo(const struct sockaddr *restrict, socklen_t, char *restrict, socklen_t, char *restrict, socklen_t, int)
#struct netent *getnetbyaddr(uint32_t, int)
#struct netent *getnetbyname(const char *)
#struct netent *getnetent(void)
#struct protoent *getprotobyname(const char *)
#struct protoent *getprotobynumber(int)
#struct protoent *getprotoent(void)
#struct servent *getservbyname(const char *, const char *)
#struct servent *getservbyport(int, const char *)
#struct servent *getservent(void)
#void sethostent(int)
#void setnetent(int)
#void setprotoent(int)
#void setservent(int)
#
# * netinit/in.h: no functions in netinet/in.h
#
# * netinit/tcp.h: no functions in netinet/tcp.h
#
# * nl_types.h
.skip 3
#int catclose(nl_catd)
#char *catgets(nl_catd, int, int, const char *)
#nl_catd catopen(const char *, int)
#
# * poll.h
.skip 1
#int poll(struct pollfd [], nfds_t, int)
#
# * pthread.h
.skip 100
#int pthread_atfork(void (*)(void), void (*)(void), void(*)(void))
#int pthread_attr_destroy(pthread_attr_t *)
#int pthread_attr_getdetachstate(const pthread_attr_t *, int *)
#int pthread_attr_getguardsize(const pthread_attr_t *restrict, size_t *restrict)
#int pthread_attr_getinheritsched(const pthread_attr_t *restrict, int *restrict)
#int pthread_attr_getschedparam(const pthread_attr_t *restrict, struct sched_param *restrict)
#int pthread_attr_getschedpolicy(const pthread_attr_t *restrict, int *restrict)
#int pthread_attr_getscope(const pthread_attr_t *restrict, int *restrict)
#int pthread_attr_getstack(const pthread_attr_t *restrict, void **restrict, size_t *restrict)
#int pthread_attr_getstacksize(const pthread_attr_t *restrict, size_t *restrict)
#int pthread_attr_init(pthread_attr_t *)
#int pthread_attr_setdetachstate(pthread_attr_t *, int)
#int pthread_attr_setguardsize(pthread_attr_t *, size_t)
#int pthread_attr_setinheritsched(pthread_attr_t *, int)
#int pthread_attr_setschedparam(pthread_attr_t *restrict, const struct sched_param *restrict)
#int pthread_attr_setschedpolicy(pthread_attr_t *, int)
#int pthread_attr_setscope(pthread_attr_t *, int)
#int pthread_attr_setstack(pthread_attr_t *, void *, size_t)
#int pthread_attr_setstacksize(pthread_attr_t *, size_t)
#int pthread_barrier_destroy(pthread_barrier_t *)
#int pthread_barrier_init(pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned)
#int pthread_barrier_wait(pthread_barrier_t *)
#int pthread_barrierattr_destroy(pthread_barrierattr_t *)
#int pthread_barrierattr_getpshared(const pthread_barrierattr_t *restrict, int *restrict)
#int pthread_barrierattr_init(pthread_barrierattr_t *)
#int pthread_barrierattr_setpshared(pthread_barrierattr_t *, int)
#int pthread_cancel(pthread_t)
#void pthread_cleanup_pop(int)
#void pthread_cleanup_push(void (*)(void*), void *)
#int pthread_cond_broadcast(pthread_cond_t *)
#int pthread_cond_destroy(pthread_cond_t *)
#int pthread_cond_init(pthread_cond_t *restrict, const pthread_condattr_t *restrict)
#int pthread_cond_signal(pthread_cond_t *)
#int pthread_cond_timedwait(pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)
#int pthread_cond_wait(pthread_cond_t *restrict, pthread_mutex_t *restrict)
#int pthread_condattr_destroy(pthread_condattr_t *)
#int pthread_condattr_getclock(const pthread_condattr_t *restrict, clockid_t *restrict)
#int pthread_condattr_getpshared(const pthread_condattr_t *restrict, int *restrict)
#int pthread_condattr_init(pthread_condattr_t *)
#int pthread_condattr_setclock(pthread_condattr_t *, clockid_t)
#int pthread_condattr_setpshared(pthread_condattr_t *, int)
#int pthread_create(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void*), void *restrict)
#int pthread_detach(pthread_t)
#int pthread_equal(pthread_t, pthread_t)
#void pthread_exit(void *)
#int pthread_getconcurrency(void)
#int pthread_getcpuclockid(pthread_t, clockid_t *)
#int pthread_getschedparam(pthread_t, int *restrict, struct sched_param *restrict)
#void *pthread_getspecific(pthread_key_t)
#int pthread_join(pthread_t, void **)
#int pthread_key_create(pthread_key_t *, void (*)(void*))
#int pthread_key_delete(pthread_key_t)
#int pthread_mutex_consistent(pthread_mutex_t *)
#int pthread_mutex_destroy(pthread_mutex_t *)
#int pthread_mutex_getprioceiling(const pthread_mutex_t *restrict, int *restrict)
#int pthread_mutex_init(pthread_mutex_t *restrict, const pthread_mutexattr_t *restrict)
#int pthread_mutex_lock(pthread_mutex_t *)
#int pthread_mutex_setprioceiling(pthread_mutex_t *restrict, int, int *restrict)
#int pthread_mutex_timedlock(pthread_mutex_t *restrict, const struct timespec *restrict)
#int pthread_mutex_trylock(pthread_mutex_t *)
#int pthread_mutex_unlock(pthread_mutex_t *)
#int pthread_mutexattr_destroy(pthread_mutexattr_t *)
#int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *restrict, int *restrict)
#int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *restrict, int *restrict)
#int pthread_mutexattr_getpshared(const pthread_mutexattr_t *restrict, int *restrict)
#int pthread_mutexattr_getrobust(const pthread_mutexattr_t *restrict, int *restrict)
#int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict, int *restrict)
#int pthread_mutexattr_init(pthread_mutexattr_t *)
#int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int)
#int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int)
#int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int)
#int pthread_mutexattr_setrobust(pthread_mutexattr_t *, int)
#int pthread_mutexattr_settype(pthread_mutexattr_t *, int)
#int pthread_once(pthread_once_t *, void (*)(void))
#int pthread_rwlock_destroy(pthread_rwlock_t *)
#int pthread_rwlock_init(pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)
#int pthread_rwlock_rdlock(pthread_rwlock_t *)
#int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict, const struct timespec *restrict)
#int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict, const struct timespec *restrict)
#int pthread_rwlock_tryrdlock(pthread_rwlock_t *)
#int pthread_rwlock_trywrlock(pthread_rwlock_t *)
#int pthread_rwlock_unlock(pthread_rwlock_t *)
#int pthread_rwlock_wrlock(pthread_rwlock_t *)
#int pthread_rwlockattr_destroy(pthread_rwlockattr_t *)
#int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *restrict, int *restrict)
#int pthread_rwlockattr_init(pthread_rwlockattr_t *)
#int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int)
#pthread_t pthread_self(void)
#int pthread_setcancelstate(int, int *)
#int pthread_setcanceltype(int, int *)
#int pthread_setconcurrency(int)
#int pthread_setschedparam(pthread_t, int, const struct sched_param *)
#int pthread_setschedprio(pthread_t, int)
#int pthread_setspecific(pthread_key_t, const void *)
#int pthread_spin_destroy(pthread_spinlock_t *)
#int pthread_spin_init(pthread_spinlock_t *, int)
#int pthread_spin_lock(pthread_spinlock_t *)
#int pthread_spin_trylock(pthread_spinlock_t *)
#int pthread_spin_unlock(pthread_spinlock_t *)
#void pthread_testcancel(void)
#
# * pwd.h
void endpwent(void)
struct passwd *getpwent(void)
struct passwd *getpwnam(const char *)
.skip 1
#int getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **)
struct passwd *getpwuid(uid_t);
.skip 1
#int getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **)
void setpwent(void)
#
# * regex.h
.skip 4
int regcomp(regex_t *restrict, const char *restrict, int)
size_t regerror(int, const regex_t *restrict, char *restrict, size_t)
int regexec(const regex_t *restrict, const char *restrict, size_t, regmatch_t [], int)
void regfree(regex_t *)
#
# * sched.h
.skip 8
#int sched_get_priority_max(int)
#int sched_get_priority_min(int)
#int sched_getparam(pid_t, struct sched_param *)
#int sched_getscheduler(pid_t)
#int sched_rr_get_interval(pid_t, struct timespec *)
#int sched_setparam(pid_t, const struct sched_param *)
#int sched_setscheduler(pid_t, int, const struct sched_param *)
#int sched_yield(void)
#
# * search.h
.skip 11
#int hcreate(size_t)
#void hdestroy(void)
#ENTRY *hsearch(ENTRY, ACTION)
#void insque(void *, void *)
#void *lfind(const void *, const void *, size_t *, size_t, int (*)(const void *, const void *))
#void *lsearch(const void *, void *, size_t *, size_t, int (*)(const void *, const void *))
#void remque(void *)
#void *tdelete(const void *restrict, void **restrict, int(*)(const void *, const void *))
#void *tfind(const void *, void *const *, int(*)(const void *, const void *))
#void *tsearch(const void *, void **, int(*)(const void *, const void *))
#void twalk(const void *, void (*)(const void *, VISIT, int ))
#
# * semaphore.h
.skip 10
#int sem_close(sem_t *)
#int sem_destroy(sem_t *)
#int sem_getvalue(sem_t *restrict, int *restrict)
#int sem_init(sem_t *, int, unsigned)
#sem_t *sem_open(const char *, int, ...)
#int sem_post(sem_t *)
#int sem_timedwait(sem_t *restrict, const struct timespec *restrict)
#int sem_trywait(sem_t *)
#int sem_unlink(const char *)
#int sem_wait(sem_t *)
#
# * setjmp.h: Only POSIX.1-2008 specific functions are included here
.skip 2
#void siglongjmp(sigjmp_buf, int)
#int sigsetjmp(sigjmp_buf, int)
#
# * signal.h: Also reserve LVO for C99 funcs, we may want to overload them later on
int kill(pid_t, int)
.skip 6
#int killpg(pid_t, int)
#void psiginfo(const siginfo_t *, const char *)
#void psignal(int, const char *)
#int pthread_kill(pthread_t, int)
#int pthread_sigmask(int, const sigset_t *restrict, sigset_t *restrict)
#int raise(int)
int sigaction(int, const struct sigaction *, struct sigaction *)
int sigaddset(sigset_t *, int)
.skip 1
#int sigaltstack(const stack_t *, stack_t *)
int sigdelset(sigset_t *, int)
int sigemptyset(sigset_t *)
int sigfillset(sigset_t *)
.skip 3
#int sighold(int)
#int sigignore(int)
#int siginterrupt(int)
int sigismember(const sigset_t *, int)
.skip 2
#void (*signal(int, void (*)(int)))(int)
#int sigpause(int)
int sigpending(sigset_t *)
int sigprocmask(int, const sigset_t *, sigset_t *)
.skip 3
#int sigqueue(pid_t, int, const union sigval)
#int sigrelse(int)
#int sigset(__sighandler_t *, int)
int sigsuspend(const sigset_t *)
.skip 3
#int sigtimedwait(const sigset_t *, siginfo_t *, const struct timespec *)
#int sigwait(const sigset_t *, int *)
#int sigwaitinfo(const sigset_t *, siginfo_t *)
#
# * spawn.h
.skip 21
#int posix_spawn(pid_t *restrict, const char *restrict, const posix_spawn_file_actions_t *, const posix_spawnattr_t *restrict, char *const [restrict], char *const [restrict])
#int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *, int)
#int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *, int, int)
#int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *restrict, int, const char *restrict, int, mode_t)
#int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *)
#int posix_spawn_file_actions_init(posix_spawn_file_actions_t *)
#int posix_spawnattr_destroy(posix_spawnattr_t *)
#int posix_spawnattr_getflags(const posix_spawnattr_t *restrict, short *restrict)
#int posix_spawnattr_getpgroup(const posix_spawnattr_t *restrict, pid_t *restrict)
#int posix_spawnattr_getschedparam(const posix_spawnattr_t *restrict, struct sched_param *restrict)
#int posix_spawnattr_getschedpolicy(const posix_spawnattr_t *restrict, int *restrict)
#int posix_spawnattr_getsigdefault(const posix_spawnattr_t *restrict, sigset_t *restrict)
#int posix_spawnattr_getsigmask(const posix_spawnattr_t *restrict, sigset_t *restrict)
#int posix_spawnattr_init(posix_spawnattr_t *)
#int posix_spawnattr_setflags(posix_spawnattr_t *, short)
#int posix_spawnattr_setpgroup(posix_spawnattr_t *, pid_t)
#int posix_spawnattr_setschedparam(posix_spawnattr_t *restrict, const struct sched_param *restrict)
#int posix_spawnattr_setschedpolicy(posix_spawnattr_t *, int)
#int posix_spawnattr_setsigdefault(posix_spawnattr_t *restrict, const sigset_t *restrict)
#int posix_spawnattr_setsigmask(posix_spawnattr_t *restrict, const sigset_t *restrict)
#int posix_spawnp(pid_t *restrict, const char *restrict, const posix_spawn_file_actions_t *, const posix_spawnattr_t *restrict, char *const [restrict], char *const [restrict])
#
# * stdarg.h: not implemented in posixc.library
#
# * stdbool.h: no functions in stdbool.h
#
# * stddef.h: not implemented in posixc.library
#
# * stdint.h: not implemented in posixc.library
#
# * stdio.h: Also reserve LVO for C99 funcs, we may want to overload them later on
void clearerr(FILE *)
.skip 2
#char *ctermid(char *)
#int dprintf(int, const char *restrict, ...)
int fclose(FILE *)
FILE *fdopen(int, const char *)
int feof(FILE *)
int ferror(FILE *)
int fflush(FILE *)
int fgetc(FILE *)
.alias getc
int fgetpos(FILE *restrict, fpos_t *restrict)
char *fgets(char *restrict, int, FILE *restrict)
int fileno(FILE *)
.skip 2
#void flockfile(FILE *)
#FILE *fmemopen(void *restrict, size_t, const char *restrict)
FILE *fopen(const char *restrict, const char *restrict)
int fprintf(FILE *restrict, const char *restrict, ...)
int fputc(int, FILE *)
.alias putc
int fputs(const char *restrict, FILE *restrict)
size_t fread(void *restrict, size_t, size_t, FILE *restrict)
FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
int fscanf(FILE *restrict, const char *restrict, ...)
int fseek(FILE *, long, int)
int fseeko(FILE *, off_t, int)
int fsetpos(FILE *, const fpos_t *)
long ftell(FILE *)
off_t ftello(FILE *)
.skip 2
#int ftrylockfile(FILE *)
#void funlockfile(FILE *)
size_t fwrite(const void *restrict, size_t, size_t, FILE *restrict)
# getc alias from fgetc
int getchar(void)
.skip 4
#int getc_unlocked(FILE *)
#int getchar_unlocked(void)
#ssize_t getdelim(char **restrict, size_t *restrict, int, FILE *restrict)
#ssize_t  getline(char **restrict, size_t *restrict, FILE *restrict)
char *gets(char *)
.skip 1
#FILE *open_memstream(char **, size_t *)
int pclose(FILE *)
void perror(const char *)
FILE *popen(const char *, const char *)
int printf(const char *restrict, ...)
# putc alias from fputc
int putchar(int)
.skip 2
#int putc_unlocked(int, FILE *)
#int putchar_unlocked(int)
int puts(const char *)
int __posixc_remove(const char *)
.alias remove
.alias unlink
int __posixc_rename(const char *, const char *)
.alias rename
.skip 1
#int renameat(int, const char *, int, const char *)
void rewind(FILE *)
int scanf(const char *restrict, ...)
void setbuf(FILE *restrict, char *restrict)
int setvbuf(FILE *restrict, char *restrict, int, size_t)
.skip 3
#int snprintf(char *restrict, size_t, const char *restrict, ...)
#int sprintf(char *restrict, const char *restrict, ...)
#int sscanf(const char *restrict, const char *restrict, ...)
char *tempnam(const char *, const char *)
FILE *tmpfile(void)
char *tmpnam(char *)
int ungetc(int, FILE *)
.skip 1
#int vdprintf(int, const char *restrict, va_list)
int vfprintf(FILE *restrict, const char *restrict, va_list)
int vfscanf(FILE *restrict, const char *restrict, va_list)
int vprintf(const char *restrict, va_list)
int vscanf(const char *restrict, va_list)
.skip 3
#int vsnprintf(char *restrict, size_t, const char *restrict, va_list)
#int vsprintf(char *restrict, const char *restrict, va_list)
#int vsscanf(const char *restrict, const char *restrict, va_list)
#
# * stdlib.h: only POSIX.1-2008 specific functions and
#             getenv(), system() overriding posixc.library version
.skip 1
#long a64l(const char *)
double drand48(void)
double erand48(unsigned short [3])
char *getenv(const char *name)
.skip 2
#int getsubopt(char **, char *const *, char **)
#int grantpt(int)
char *initstate(unsigned, char *, int)
long int jrand48(unsigned short [3])
.skip 1
#char *l64a(long)
void lcong48(unsigned short [7])
long int lrand48(void)
.skip 1
#char *mkdtemp(char *)
int mkstemp(char *)
char *mktemp(char *)
long int mrand48(void)
long int nrand48(unsigned short [3])
int posix_memalign(void **, size_t, size_t)
.skip 2
#int posix_openpt(int)
#char *ptsname(int)
int putenv(const char *)
.skip 1
#int rand_r(unsigned int *)
long random(void)
char *realpath(const char * restrict , char * restrict)
unsigned short int *seed48(unsigned short [3])
int setenv(const char *, const char *, int)
.skip 1
#void setkey(const char *)
char *setstate(char *)
void srand48(long)
void srandom(unsigned)
int system(const char *string)
.skip 1
#int unlockpt(int)
void unsetenv(const char *)
int getloadavg(double [], int)
#
# * string.h: all function are in stdc.library, only strerror is overloaded
char *__posixc_strerror(int)
.alias strerror
#
# * strings.h: reserve LVO for str(n)casecmp, we may want to overload them later
.skip 4
#int strcasecmp(const char *, const char *)
#int strcasecmp_l(const char *, const char *, locale_t)
#int strncasecmp(const char *, const char *, size_t)
#int strncasecmp_l(const char *, const char *, size_t, locale_t)
#
# * stropts.h
.skip 8
#int fattach(int, const char *)
#int fdetach(const char *)
#int getmsg(int, struct strbuf *restrict, struct strbuf *restrict, int *restrict)
#int getpmsg(int, struct strbuf *restrict, struct strbuf *restrict, int *restrict, int *restrict)
int ioctl(int, int, ...)
#int isastream(int)
#int putmsg(int, const struct strbuf *, const struct strbuf *, int)
#int putpmsg(int, const struct strbuf *, const struct strbuf *, int, int)
#
# * sys/ipc.h
.skip 1
#key_t ftok(const char *, int)
#
# * sys/mman.h
.skip 14
#int mlock(const void *, size_t)
#int mlockall(int)
#void *mmap(void *, size_t, int, int, int, off_t)
#int mprotect(void *, size_t, int)
#int msync(void *, size_t, int)
#int munlock(const void *, size_t)
#int munlockall(void)
#int munmap(void *, size_t)
#int posix_madvise(void *, size_t, int)
#int posix_mem_offset(const void *restrict, size_t, off_t *restrict, size_t *restrict, int *restrict)
#int posix_typed_mem_get_info(int, struct posix_typed_mem_info *)
#int posix_typed_mem_open(const char *, int, int)
#int shm_open(const char *, int, mode_t)
#int shm_unlink(const char *)
#
# * sys/msg.h
.skip 4
#int msgctl(int, int, struct msqid_ds *)
#int msgget(key_t, int)
#ssize_t msgrcv(int, void *, size_t, long, int)
#int msgsnd(int, const void *, size_t, int)
#
# * sys/resource.h
.skip 1
#int getpriority(int, id_t)
int getrlimit(int, struct rlimit *)
.skip 2
#int getrusage(int, struct rusage *)
#int setpriority(int, id_t, int)
int setrlimit(int, const struct rlimit *)
#
# * sys/select.h: Reserve also LVO for FD_xxx()
.skip 6
#void FD_CLR(int, fd_set *)
#int FD_ISSET(int, fd_set *)
#void FD_SET(int, fd_set *)
#void FD_ZERO(fd_set *)
#int pselect(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, const struct timespec *restrict, const sigset_t *restrict)
#int select(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)
#
# * sys/sem.h
.skip 3
#int semctl(int, int, int, ...)
#int semget(key_t, int, int)
#int semop(int, struct sembuf *, size_t)
#
# * sys/shm.h
.skip 4
#void *shmat(int, const void *, int)
#int   shmctl(int, int, struct shmid_ds *)
#int   shmdt(const void *)
#int   shmget(key_t, size_t, int)
#
# * sys/socket.h: also reserve LVO for bsdsocket.library functions
.skip 18
#int accept(int, struct sockaddr *restrict, socklen_t *restrict)
#int bind(int, const struct sockaddr *, socklen_t)
#int connect(int, const struct sockaddr *, socklen_t)
#int getpeername(int, struct sockaddr *restrict, socklen_t *restrict)
#int getsockname(int, struct sockaddr *restrict, socklen_t *restrict)
#int getsockopt(int, int, int, void *restrict, socklen_t *restrict)
#int listen(int, int)
#ssize_t recv(int, void *, size_t, int)
#ssize_t recvfrom(int, void *restrict, size_t, int, struct sockaddr *restrict, socklen_t *restrict)
#ssize_t recvmsg(int, struct msghdr *, int)
#ssize_t send(int, const void *, size_t, int)
#ssize_t sendmsg(int, const struct msghdr *, int)
#ssize_t sendto(int, const void *, size_t, int, const struct sockaddr *, socklen_t)
#int setsockopt(int, int, int, const void *, socklen_t)
#int shutdown(int, int)
#int sockatmark(int)
#int socket(int, int, int)
#int socketpair(int, int, int, int [2])
#
# * sys/stat.h
int chmod(const char *path, mode_t mode)
int fchmod(int fildes, mode_t mode)
.skip 1
#int fchmodat(int, const char *, mode_t, int)
int fstat(int fd, struct stat *sb)
.skip 2
#int fstatat(int, const char *restrict, struct stat *restrict, int)
#int futimens(int, const struct timespec [2])
int lstat(const char * restrict path, struct stat * restrict sb)
int mkdir(const char *path, mode_t mode)
.skip 3
#int mkdirat(int, const char *, mode_t)
#int mkfifo(const char *path, mode_t mode)
#int mkfifoat(int, const char *, mode_t)
int mknod(const char *path, mode_t mode, dev_t dev)
.skip 1
#int mknodat(int, const char *, mode_t, dev_t)
int stat(const char * restrict path, struct stat * restrict sb)
mode_t umask(mode_t numask)
.skip 1
#int utimensat(int, const char *, const struct timespec [2], int)
#
# * sys/statvfs.h
.skip 2
#int fstatvfs(int, struct statvfs *)
#int statvfs(const char *restrict, struct statvfs *restrict)
#
# * sys/time.h
.skip 1
#int getitimer(int which, struct itimerval *)
int gettimeofday(struct timeval * restrict, struct timezone * restrict)
.skip 2
#int setitimer(int which, const struct itimerval * restrict, struct itimerval * restrict)
#int select(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)
int utimes(const char *, const struct timeval [2])
#
# * sys/times.h
clock_t times(struct tms *)
#
# * sys/types.h: no functions in sys/types.h
#
# * sys/uio.h
.skip 2
#ssize_t readv(int, const struct iovec *, int)
#ssize_t writev(int, const struct iovec *, int)
#
# * sys/un.h: no functions in sys/un.h
#
# * sys/utsname.h
int uname(struct utsname *)
#
# * sys/wait.h
pid_t wait(int *)
.skip 1
#int waitid(idtype_t, id_t, siginfo_t *, int)
pid_t waitpid(pid_t, int *, int)
#
# <syslog.h>
.skip 4
#void closelog(void)
#void openlog(const char *, int, int)
#int setlogmask(int)
#void syslog(int, const char *, ...)
#
# * tar.h: no functions in tar.h
#
# * termios.h
speed_t cfgetispeed(const struct termios *)
speed_t cfgetospeed(const struct termios *)
int cfsetispeed(struct termios *, speed_t)
int cfsetospeed(struct termios *, speed_t)
.skip 3
#int tcdrain(int)
#int tcflow(int, int)
#int tcflush(int, int)
int tcgetattr(int, struct termios *)
.skip 2
#pid_t tcgetsid(int)
#int tcsendbreak(int, int)
int tcsetattr(int, int, const struct termios *)
#
# * tgmath.h: not implemented in posixc.library
#
# * time.h: Also reserve LVO for C99 funcs that may depend on locale
.skip 11
#char *asctime(const struct tm *)
#char *asctime_r(const struct tm *restrict, char *restrict)
#clock_t clock(void)
#int clock_getcpuclockid(pid_t, clockid_t *)
#int clock_getres(clockid_t, struct timespec *)
#int clock_gettime(clockid_t, struct timespec *)
#int clock_nanosleep(clockid_t, int, const struct timespec *, struct timespec *)
#int clock_settime(clockid_t, const struct timespec *)
#struct tm *getdate(const char *)
#struct tm *localtime(const time_t *)
#struct tm *localtime_r(const time_t *restrict, struct tm *restrict)
int nanosleep(const struct timespec *, struct timespec *)
.skip 2
#size_t strftime(char *restrict, size_t, const char *restrict, const struct tm *restrict)
#size_t strftime_l(char *restrict, size_t, const char *restrict, const struct tm *restrict, locale_t)
char *strptime(const char *, const char *, struct tm *)
.skip 6
#int timer_create(clockid_t, struct sigevent *, timer_t *)
#int timer_delete(timer_t)
#int timer_getoverrun(timer_t)
#int timer_gettime(timer_t, struct itimerspec *)
#int timer_settime(timer_t, int, const struct itimerspec *, struct itimerspec *)
#void tzset(void)
#
# * trace.h
.skip 50
#int posix_trace_attr_destroy(trace_attr_t *)
#int posix_trace_attr_getclockres(const trace_attr_t *, struct timespec *)
#int posix_trace_attr_getcreatetime(const trace_attr_t *, struct timespec *)
#int posix_trace_attr_getgenversion(const trace_attr_t *, char *)
#int posix_trace_attr_getinherited(const trace_attr_t *restrict, int *restrict)
#int posix_trace_attr_getlogfullpolicy(const trace_attr_t *restrict, int *restrict)
#int posix_trace_attr_getlogsize(const trace_attr_t *restrict, size_t *restrict)
#int posix_trace_attr_getmaxdatasize(const trace_attr_t *restrict, size_t *restrict)
#int posix_trace_attr_getmaxsystemeventsize(const trace_attr_t *restrict, size_t *restrict)
#int posix_trace_attr_getmaxusereventsize(const trace_attr_t *restrict, size_t, size_t *restrict)
#int posix_trace_attr_getname(const trace_attr_t *, char *)
#int posix_trace_attr_getstreamfullpolicy(const trace_attr_t *restrict, int *restrict)
#int posix_trace_attr_getstreamsize(const trace_attr_t *restrict, size_t *restrict)
#int posix_trace_attr_init(trace_attr_t *)
#int posix_trace_attr_setinherited(trace_attr_t *, int)
#int posix_trace_attr_setlogfullpolicy(trace_attr_t *, int)
#int posix_trace_attr_setlogsize(trace_attr_t *, size_t)
#int posix_trace_attr_setmaxdatasize(trace_attr_t *, size_t)
#int posix_trace_attr_setname(trace_attr_t *, const char *)
#int posix_trace_attr_setstreamfullpolicy(trace_attr_t *, int)
#int posix_trace_attr_setstreamsize(trace_attr_t *, size_t)
#int posix_trace_clear(trace_id_t)
#int posix_trace_close(trace_id_t)
#int posix_trace_create(pid_t, const trace_attr_t *restrict, trace_id_t *restrict)
#int posix_trace_create_withlog(pid_t, const trace_attr_t *restrict, int, trace_id_t *restrict)
#void posix_trace_event(trace_event_id_t, const void *restrict, size_t)
#int posix_trace_eventid_equal(trace_id_t, trace_event_id_t, trace_event_id_t)
#int posix_trace_eventid_get_name(trace_id_t, trace_event_id_t, char *)
#int posix_trace_eventid_open(const char *restrict, trace_event_id_t *restrict)
#int posix_trace_eventset_add(trace_event_id_t, trace_event_set_t *)
#int posix_trace_eventset_del(trace_event_id_t, trace_event_set_t *)
#int posix_trace_eventset_empty(trace_event_set_t *)
#int posix_trace_eventset_fill(trace_event_set_t *, int)
#int posix_trace_eventset_ismember(trace_event_id_t, const trace_event_set_t *restrict, int *restrict)
#int posix_trace_eventtypelist_getnext_id(trace_id_t, trace_event_id_t *restrict, int *restrict)
#int posix_trace_eventtypelist_rewind(trace_id_t)
#int posix_trace_flush(trace_id_t)
#int posix_trace_get_attr(trace_id_t, trace_attr_t *)
#int posix_trace_get_filter(trace_id_t, trace_event_set_t *)
#int posix_trace_get_status(trace_id_t, struct posix_trace_status_info *)
#int posix_trace_getnext_event(trace_id_t, struct posix_trace_event_info *restrict, void *restrict, size_t, size_t *restrict, int *restrict)
#int posix_trace_open(int, trace_id_t *)
#int posix_trace_rewind(trace_id_t)
#int posix_trace_set_filter(trace_id_t, const trace_event_set_t *, int)
#int posix_trace_shutdown(trace_id_t)
#int posix_trace_start(trace_id_t)
#int posix_trace_stop(trace_id_t)
#int posix_trace_timedgetnext_event(trace_id_t, struct posix_trace_event_info *restrict, void *restrict, size_t, size_t *restrict, int *restrict, const struct timespec *restrict)
#int posix_trace_trid_eventid_open(trace_id_t, const char *restrict, trace_event_id_t *restrict)
#int posix_trace_trygetnext_event(trace_id_t, struct posix_trace_event_info *restrict, void *restrict, size_t, size_t *restrict, int *restrict)
#
# * ulimit.h
.skip 1
#long ulimit(int, ...)
#
# * unistd.h
int access(const char *path, int mode)
.skip 1
#unsigned alarm(unsigned)
int chdir(const char *path)
int chown(const char *path, uid_t owner, gid_t group)
int close(int fd)
.skip 3
#size_t confstr(int, char *, size_t)
#char *crypt(const char *, const char *)
#char *ctermid(char *)
int dup(int oldfd)
int dup2(int oldfd, int newfd)
.skip 2
#void _exit(int) ; is alias from _Exit in stdc.library
#void encrypt(char [64], int)
int execl(const char *path, const char *arg, ...)
.skip 1
#int execle(const char *path, const char *arg, ...)
int execlp(const char *path, const char *arg, ...)
int execv(const char *path, char *const argv[])
int execve(const char *path, char *const argv[], char *const envp[])
int execvp(const char *path, char *const argv[])
.skip 1
#int faccessat(int, const char *, int, int)
int fchdir(int fd)
int fchown(int fd, uid_t owner, gid_t group)
.skip 5
#int fchownat(int, const char *, uid_t, gid_t, int)
#int fdatasync(int)
#long fpathconf(int fd, int name)
#int fexecve(int, char *const [], char *const [])
#pid_t fork(void)
int fsync(int fd)
int ftruncate(int fd, off_t length)
char *getcwd(char *buf, size_t size)
gid_t getegid(void)
uid_t geteuid(void)
gid_t getgid(void)
int getgroups(int gidsetlen, gid_t *gidset)
.skip 2
#long gethostid(void)
#int gethostname(char *name, size_t namelen)
char *getlogin(void)
.skip  3
#int getlogin_r(char *, size_t)
#int getopt(int argc, char * const argv[], const char *optstring)
#pid_t getpgid(pid_t)
pid_t getpgrp(void)
pid_t getpid(void)
pid_t getppid(void)
.skip 1
#pid_t getsid(pid_t pid)
uid_t getuid(void)
int isatty(int fd)
.skip 1
#int lchown(const char *path, uid_t owner, gid_t group)
int link(const char *name1, const char *name2)
.skip 2
#int linkat(int, const char *, int, const char *, int)
#int lockf(int filedes, int function, off_t size)
off_t lseek(int filedes, off_t offset, int whence)
.skip 1
#int nice(int incr)
long pathconf(const char *path, int name)
.skip 1
#int pause(void)
int pipe(int filedes[2])
.skip 2
#ssize_t pread(int d, void *buf, size_t nbytes, off_t offset)
#ssize_t pwrite(int d, const void *buf, size_t nbytes, off_t offset)
ssize_t read(int d, void *buf, size_t nbytes)
ssize_t readlink(const char * restrict path, char * restrict buf, size_t bufsize)
.skip 1
#ssize_t readlinkat(int, const char *restrict, char *restrict, size_t)
int rmdir(const char *path)
.skip 2
#int setegid(gid_t egid)
#int seteuid(uid_t euid)
int setgid(gid_t gid)
.skip 5
#int setpgid(pid_t pid, pid_t pgrp)
#int setpgrp(pid_t pid, pid_t pgrp)
#int setregid(gid_t rgid, gid_t egid)
#int setreuid(uid_t ruid, uid_t euid)
#pid_t setsid(void)
int setuid(uid_t uid)
unsigned sleep(unsigned)
void swab(const void * restrict src, void * restrict dst, size_t len)
int symlink(const char *name1, const char *name2)
.skip 1
#int symlinkat(const char *, int, const char *)
void sync(void)
long sysconf(int name)
.skip 2
#pid_t tcgetpgrp(int fd)
#int tcsetpgrp(int fd, pid_t pgrp_id)
int truncate(const char *path, off_t length)
char *ttyname(int fd)
.skip 1
#int ttyname_r(int fd, char *buf, size_t len)
#int unlink(const char *) ; alias of remove()
#int unlinkat(int, const char *, int)
ssize_t write(int fd, const void *buf, size_t nbytes)
#
# <utime.h>
int utime(const char *, const struct utimbuf *)
#
# * utmpx.h
.skip 6
#void endutxent(void)
#struct utmpx *getutxent(void)
#struct utmpx *getutxid(const struct utmpx *)
#struct utmpx *getutxline(const struct utmpx *)
#struct utmpx *pututxline(const struct utmpx *)
#void setutxent(void)
#
# * wchar.h: Reserve LVOs, we may want to provide own implementation
.skip 89
#wint_t btowc(int)
#wint_t fgetwc(FILE *)
#wchar_t *fgetws(wchar_t *restrict, int, FILE *restrict)
#wint_t fputwc(wchar_t, FILE *)
#int fputws(const wchar_t *restrict, FILE *restrict)
#int fwide(FILE *, int)
#int fwprintf(FILE *restrict, const wchar_t *restrict, ...)
#int fwscanf(FILE *restrict, const wchar_t *restrict, ...)
#wint_t getwc(FILE *)
#wint_t getwchar(void)
#int iswalnum(wint_t)
#int iswalpha(wint_t)
#int iswcntrl(wint_t)
#int iswctype(wint_t, wctype_t)
#int iswdigit(wint_t)
#int iswgraph(wint_t)
#int iswlower(wint_t)
#int iswprint(wint_t)
#int iswpunct(wint_t)
#int iswspace(wint_t)
#int iswupper(wint_t)
#int iswxdigit(wint_t)
#size_t mbrlen(const char *restrict, size_t, mbstate_t *restrict)
#size_t mbrtowc(wchar_t *restrict, const char *restrict, size_t, mbstate_t *restrict)
#int mbsinit(const mbstate_t *)
#size_t mbsnrtowcs(wchar_t *restrict, const char **restrict, size_t, size_t, mbstate_t *restrict)
#size_t mbsrtowcs(wchar_t *restrict, const char **restrict, size_t, mbstate_t *restrict)
#FILE *open_wmemstream(wchar_t **, size_t *)
#wint_t putwc(wchar_t, FILE *)
#wint_t putwchar(wchar_t)
#int swprintf(wchar_t *restrict, size_t, const wchar_t *restrict, ...)
#int swscanf(const wchar_t *restrict, const wchar_t *restrict, ...)
#wint_t towlower(wint_t)
#wint_t towupper(wint_t)
#wint_t ungetwc(wint_t, FILE *)
#int vfwprintf(FILE *restrict, const wchar_t *restrict, va_list)
#int vfwscanf(FILE *restrict, const wchar_t *restrict, va_list)
#int vswprintf(wchar_t *restrict, size_t, const wchar_t *restrict, va_list)
#int vswscanf(const wchar_t *restrict, const wchar_t *restrict, va_list)
#int vwprintf(const wchar_t *restrict, va_list)
#int vwscanf(const wchar_t *restrict, va_list)
#wchar_t *wcpcpy(wchar_t restrict*, const wchar_t *restrict)
#wchar_t *wcpncpy(wchar_t restrict *, const wchar_t *restrict, size_t)
#size_t wcrtomb(char *restrict, wchar_t, mbstate_t *restrict)
#int wcscasecmp(const wchar_t *, const wchar_t *)
#int wcscasecmp_l(const wchar_t *, const wchar_t *, locale_t)
#wchar_t *wcscat(wchar_t *restrict, const wchar_t *restrict)
#wchar_t *wcschr(const wchar_t *, wchar_t)
#int wcscmp(const wchar_t *, const wchar_t *)
#int wcscoll(const wchar_t *, const wchar_t *)
#int wcscoll_l(const wchar_t *, const wchar_t *, locale_t)
#wchar_t *wcscpy(wchar_t *restrict, const wchar_t *restrict)
#size_t wcscspn(const wchar_t *, const wchar_t *)
#wchar_t *wcsdup(const wchar_t *)
#size_t wcsftime(wchar_t *restrict, size_t, const wchar_t *restrict, const struct tm *restrict)
#size_t wcslen(const wchar_t *)
#int wcsncasecmp(const wchar_t *, const wchar_t *, size_t)
#int wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t, locale_t)
#wchar_t *wcsncat(wchar_t *restrict, const wchar_t *restrict, size_t)
#int wcsncmp(const wchar_t *, const wchar_t *, size_t)
#wchar_t *wcsncpy(wchar_t *restrict, const wchar_t *restrict, size_t)
#size_t wcsnlen(const wchar_t *, size_t)
#size_t wcsnrtombs(char *restrict, const wchar_t **restrict, size_t, size_t, mbstate_t *restrict)
#wchar_t *wcspbrk(const wchar_t *, const wchar_t *)
#wchar_t *wcsrchr(const wchar_t *, wchar_t)
#size_t wcsrtombs(char *restrict, const wchar_t **restrict, size_t, mbstate_t *restrict)
#size_t wcsspn(const wchar_t *, const wchar_t *)
#wchar_t *wcsstr(const wchar_t *restrict, const wchar_t *restrict)
#double wcstod(const wchar_t *restrict, wchar_t **restrict)
#float wcstof(const wchar_t *restrict, wchar_t **restrict)
#wchar_t *wcstok(wchar_t *restrict, const wchar_t *restrict, wchar_t **restrict)
#long wcstol(const wchar_t *restrict, wchar_t **restrict, int)
#long double wcstold(const wchar_t *restrict, wchar_t **restrict)
#long long wcstoll(const wchar_t *restrict, wchar_t **restrict, int)
#unsigned long wcstoul(const wchar_t *restrict, wchar_t **restrict, int)
#unsigned long long wcstoull(const wchar_t *restrict, wchar_t **restrict, int)
#int wcswidth(const wchar_t *, size_t)
#size_t wcsxfrm(wchar_t *restrict, const wchar_t *restrict, size_t)
#size_t wcsxfrm_l(wchar_t *restrict, const wchar_t *restrict, size_t, locale_t)
#int wctob(wint_t)
#wctype_t wctype(const char *)
#int wcwidth(wchar_t)
#wchar_t *wmemchr(const wchar_t *, wchar_t, size_t)
#int wmemcmp(const wchar_t *, const wchar_t *, size_t)
#wchar_t *wmemcpy(wchar_t *restrict, const wchar_t *restrict, size_t)
#wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t)
#wchar_t *wmemset(wchar_t *, wchar_t, size_t)
#int wprintf(const wchar_t *restrict, ...)
#int wscanf(const wchar_t *restrict, ...)
#
# * wctype.h: Reserve LVOs, we may want to provide own implementation
.skip 36
#int iswalnum(wint_t)
#int iswalnum_l(wint_t, locale_t)
#int iswalpha(wint_t)
#int iswalpha_l(wint_t, locale_t)
#int iswblank(wint_t)
#int iswblank_l(wint_t, locale_t)
#int iswcntrl(wint_t)
#int iswcntrl_l(wint_t, locale_t)
#int iswctype(wint_t, wctype_t)
#int iswctype_l(wint_t, wctype_t, locale_t)
#int iswdigit(wint_t)
#int iswdigit_l(wint_t, locale_t)
#int iswgraph(wint_t)
#int iswgraph_l(wint_t, locale_t)
#int iswlower(wint_t)
#int iswlower_l(wint_t, locale_t)
#int iswprint(wint_t)
#int iswprint_l(wint_t, locale_t)
#int iswpunct(wint_t)
#int iswpunct_l(wint_t, locale_t)
#int iswspace(wint_t)
#int iswspace_l(wint_t, locale_t)
#int iswupper(wint_t)
#int iswupper_l(wint_t, locale_t)
#int iswxdigit(wint_t)
#int iswxdigit_l(wint_t, locale_t)
#wint_t towctrans(wint_t, wctrans_t)
#wint_t towctrans_l(wint_t, wctrans_t, locale_t)
#wint_t towlower(wint_t)
#wint_t towlower_l(wint_t, locale_t)
#wint_t towupper(wint_t)
#wint_t towupper_l(wint_t, locale_t)
#wctrans_t wctrans(const char *)
#wctrans_t wctrans_l(const char *, locale_t)
#wctype_t wctype(const char *)
#wctype_t wctype_l(const char *, locale_t)
#
# * wordexp.h
.skip 2
#int wordexp(const char *restrict, wordexp_t *restrict, int)
#void wordfree(wordexp_t *)
#
# == Extensions ==
# * stdio.h: amiga/AROS specific
void updatestdio(void)
int __get_default_file (int, long *)
#
# * sys/file.h: BSD
int flock(int, int)
#
# * sys/mount.h: BSD
int getfsstat (struct statfs *, long, int);
int statfs(const char *, struct statfs *);
#
# * unistd.h: Legacy support, amiga/AROS extension
int __posixc_set_environptr(char ***environptr)
char ***__posixc_get_environptr(void)
.skip 1
#useconds_t ualarm(useconds_t, useconds_t)
int usleep(useconds_t microseconds)
pid_t vfork(void)
#
##end functionlist
