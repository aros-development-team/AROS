<?xml version="1.0"?>
<!DOCTYPE project [
    <!ENTITY build_opt SYSTEM "file:../../../build-tools/build-opt.xml">
    ]>

<project name="server" default="build" basedir=".">
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->

  <description>
      This is the build file for the LPS server subproject.
  </description>

  &build_opt;

  <!-- Define contrib tasks -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <property name="packages" value="org.openlaszlo.*.*" />

  <!-- Source Directories -->
  <property name="src" value="./src" />
  <property name="build" value="./build" />
  <!-- Use JGenerator 2.2 now -->
  <property name="jgen" value="./jgenerator-2.2" />
  <property name="jgen.src" value="${jgen}/src" />

  <!-- Programmatically generated Java files -->
  <property name="build.java" value="${build}/src" />
  <property name="jjt.src" value="${build}/src/org/openlaszlo/sc/parser" />

  <!-- All Java files that should be compiled: both hand-generated
       sources and programatically generated files. -->
  <property name="java.1.4.srcs" value="${src}:${jgen.src}:${jjt.src}" />
  <!-- Java files that have to be compiled with -source 1.3 (for now -->
  <property name="java.1.3.srcs" value="${build.java}" />
  <property name="javasrcs" value="${java.1.4.srcs}:${java.1.3.srcs}" />
    
  <!-- More directories and files -->
  <property name="lib" value="./lib" />
  <property name="javadoc" value="./doc/api" />
  <property name="compilerapi" value="./doc/compiler/api" />
  <property name="jgendoc" value="./jgendoc" />

  <!-- comment -->
  <property name="EDITING-COMMENT" 
       value="THIS IS A GENERATED FILE.  DO NOT EDIT.  EDIT .proto instead" />

  <!-- Source file directories -->
  <property name="sc.src.java" value="./sc/src/org/openlaszlo/sc"/>
  <property name="sc.src.py"   value="./sc" />

  <!-- Build file directories -->
  <property name="sc.build.java"
           value="${build.java}/org/openlaszlo/sc" />

  <!--===============  Target [init]  ===================-->
  <!-- Initialize property values for other targets to use. -->
  <target name="init" unless="done.server.init" depends="build-opt">
    <tstamp/>

  <!-- Ignore the system classpath -->
  <property name="build.sysclasspath" value="ignore" />

  <!-- We use jikes -->
  <!-- property name="build.compiler" value="jikes"/ -->

  <property name="build.debug" value="off"/>

  <property name="JAVA_HOME"   value="${env.JAVA_HOME}"/>
  <property name="JAVACC_HOME" value="${env.JAVACC_HOME}"/>
  <property name="JYTHON_HOME" value="${env.JYTHON_HOME}"/>
  <property name="ANT_HOME"    value="${env.ANT_HOME}"/>

  <property name="ANT_JAR"     value="${ANT_HOME}/lib/ant.jar"/>
  <property name="JUNIT_JAR"   value="${ANT_HOME}/lib/junit.jar"/>

  <property name="properties.file" value="${LPS_HOME}/build.properties" />
  <property file="${properties.file}" />

  <property name="LPS_JAR" value="${lib}/${lps.jar}" />

    <!-- Script compiler build properties -->
    <condition property="jython" value="${JYTHON_HOME}/jython">
      <os family="unix"/> 
    </condition>
    <condition property="jython" value="${JYTHON_HOME}/jython">
      <os family="mac"/> 
    </condition>
    <condition property="jython" value="${JYTHON_HOME}/jython.bat">
      <os family="windows"/> 
    </condition>

    <!-- Copy jgen files into misc directory -->
    <property name="misc" value="${LPS_HOME}/WEB-INF/lps/misc" />
    <mkdir dir="${misc}" />
    <copy file="${jgen}/bin/error.swt" todir="${misc}" />
    <copy file="${jgen}/bin/DefaultSymbolFile.swt" todir="${misc}"  />
    <copy file="${jgen}/bin/fop-config.xml" todir="${misc}"  />

    <!-- Create JAR manifest based on build info -->
    <dependset>
        <srcfilelist dir="/" files="${properties.file}" />
        <targetfilelist dir="." files="manifest.mf" />
    </dependset>
    <copy file="manifest" tofile="manifest.mf" >
          <filterset>
              <filter token="BUILDID"   value="${build.id}" />
              <filter token="RELEASE"   value="${release}" />
              <filter token="RELEASEID" value="${release.id}" />
              <filter token="VERSIONID" value="${version.id}" />
          </filterset>
   </copy>

   <path id="3rd.party.classpath" >
       <pathelement path="${ANT_JAR}" />
       <pathelement path="${JUNIT_JAR}" />
       <fileset dir="${LPS_HOME}/WEB-INF/lib/" >
           <exclude name="${lps.jar}" />
       </fileset>
       <fileset dir="${LPS_HOME}/3rd-party/jars/dev" />
   </path>

    <property name="done.server.init" value="true" />
  </target>

  <!--===============  Target [clean]  ==================-->
  <!-- Deletes all output files and directories generated-->
  <!-- by the build process                              -->

  <target name="clean" depends="init"
     description="Deletes build output files and directories.">

    <delete dir="${build}" />
    <delete dir="${lib}" />
    <delete dir="${debug}" />
    <delete dir="misc" />
    <delete dir="cache" />
    <delete file="manifest.mf" />
    <delete>
      <fileset dir="." defaultexcludes="no" includes="**/*~"/>
    </delete>
    <delete>
      <fileset dir="sc" includes="*.class"/>
    </delete>

    <antcall target="cleandoc" inheritAll="true" />
  </target>
  
  <target name="clean-classes" depends="init"
          description="Delete just the .class files.">
    <delete dir="${build}/com"/>
  </target>
  
  <!--===============  Target [cleandoc]  ==================-->
  <!-- Deletes all output files and directories generated-->
  <!-- by the build process                              -->

  <target name="cleandoc" depends="init"
     description="Deletes generated documentation.">
    <delete dir="${javadoc}" />
    <delete dir="${compilerapi}" />
    <delete dir="${jgendoc}" />
  </target>

  <!--==============  Target [css-parser]  ===================-->
  <target name="css-parser" depends="init"
          description="Run JavaCC to create the css-parser *.java files.">
    <mkdir dir="${build.java}/org/openlaszlo/css/parser"/>
    <if>
        <not> 
            <uptodate 
              targetfile="${build.java}/org/openlaszlo/css/CSSParser.java"
              srcfile="${src}/org/openlaszlo/css/CSSParser.jj"/>
        </not>
        <then>
            <javacc target="${src}/org/openlaszlo/css/CSSParser.jj"
                    outputdirectory="${build.java}/org/openlaszlo/css/"
                    javacchome="${JAVACC_HOME}" />
       </then>
    </if>
  </target>

  <!--==============  Target [sc-parser]  ===================-->
  <target name="sc-parser" depends="init"
      description="Run JavaCC to create the parser *.java files.">

    <mkdir dir="${sc.build.java}"/>
    <mkdir dir="${sc.build.java}/parser"/>

    <if>
      <not> <and>
        <uptodate targetfile="${sc.build.java}/parser/Parser.jj">
          <srcfiles dir="${sc.src.java}" includes="Parser.jjt"/>
        </uptodate>
        <uptodate targetfile="${sc.build.java}/parser/Parser.java">
          <srcfiles dir="${sc.build.java}/parser" includes="Parser.jj"/>
        </uptodate>
        <uptodate>
          <srcfiles dir="${sc.src.java}/parser" includes="*.java"/>
          <mapper type="glob" from="${sc.src.java}/*" to="${sc.build.java}/*"/>
        </uptodate>
      </and> </not>

      <then>
        <jjtree target="${sc.src.java}/Parser.jjt"
                outputdirectory="${sc.build.java}/parser"
                javacchome="${JAVACC_HOME}"
                />
        <javacc target="${sc.build.java}/parser/Parser.jj"
                outputdirectory="${sc.build.java}/parser"
                javacchome="${JAVACC_HOME}"
                />
        <copy flatten="true" todir="${sc.build.java}/parser" overwrite="true">
          <fileset dir="${sc.src.java}/parser" includes="*.java"/>
        </copy>
      </then>
    </if>

  </target>

  <!--==============  Target [sc-compiler]  ===================-->
  <target name="sc-compiler" depends="init" unless="options.sc.skip"
      description="Run jythonc to create *.java files.">

    <mkdir dir="${sc.build.java}"/>
    <if>
        <not> 
            <uptodate targetfile="${sc.build.java}/Compiler.java">
               <srcfiles dir="${sc.src.py}" includes="*.py" 
                         excludes="test*.py,jsdoc2xml.py,xmldocutils.py"/>
            </uptodate>
        </not>
        <then>
            <exec executable="${jython}" dir="${sc.src.py}" failonerror="true" >
              <arg value="${LPS_HOME}/3rd-party/tools/jythonc/jythonc.py"/>
              <arg line="--package org.openlaszlo.sc"/>
              <arg line="--workdir ../${build.java}"/>
              <arg value="--deep"/>
              <arg line="--compiler NONE"/>
              <arg value="Compiler"/>
              <arg value="parseinstructions"/>
              <arg value="LFCCompiler"/>
              <arg value="Regenerator"/>
            </exec>
        </then>
      </if>
  </target>

  <target name="skip-sc" depends="init"
          description="Don't compile the script compiler.">
    <property name="options.sc.skip" value="true"/>
  </target>

  <target name="test-jythonc" depends="init"
          description="A target for quickly testing jythonc changes.">
        <exec executable="${jython}" dir="${sc.src.py}" failonerror="true" >
          <arg value="${LPS_HOME}/3rd-party/tools/jythonc/jythonc.py"/>
          <arg line="--package org.openlaszlo.sc"/>
          <arg line="--workdir ../${build.java}"/>
          <arg line="--compiler NONE"/>
          <arg value="Compiler"/>
        </exec>
  </target>

  <!--==============  Target [lps-xml]  ===================-->
  <target name="lps-xml" depends="init" unless="done-lps-xml"
          description="Create the lps.xml file" >

    <!-- Create LPS.xml based on timestamp -->
    <tstamp>
        <format property="BUILDDATE" 
                pattern="hh:mm aa dd-MMM-yyyy" locale="en"/>
    </tstamp>
    <copy overwrite="true" tofile="build/org/openlaszlo/server/lps.xml"
            file="src/org/openlaszlo/server/lps.xml.proto">
        <filterset>
            <filter token="BUILDDATE" value="${BUILDDATE}" />
            <filter token="BUILDID"   value="${build.id}" />
            <filter token="RELEASE"   value="${release}" />
            <filter token="VERSIONID" value="${version.id}" />
            <filter token="RELEASEID" value="${release.id}" />
            <filter token="EDITING_COMMENT" value="${EDITING-COMMENT}" />
        </filterset>
    </copy>
    <property name="done-lps-xml" value="true"/>
  </target>

  <!--==============  Target [compile]  ===================-->
  <!-- Compile the java code from ${javasrcs} into ${build},  -->
  <!-- jar up classes an place them in ${lib}            -->
  <target name="compile" 
      depends="init,lps-xml,css-parser,sc-parser,sc-compiler"
      description="Compile java code and jar classes into ${lib}">

    <javac classpathref="3rd.party.classpath"
           srcdir="${java.1.3.srcs}"
           destdir="${build}" debug="${build.debug}"
           source="1.3"
           nowarn="true"
           >
      <!-- 1.3 sources created by jython -->
      <include name="org/openlaszlo/sc/**" />
      <!-- not the jjt sources -->
      <exclude name="org/openlaszlo/sc/parser/**" />
    </javac>

    <javac classpathref="3rd.party.classpath"
           srcdir="${javasrcs}"
           destdir="${build}" debug="${build.debug}"
           source="1.4"
           nowarn="true"
           >
      <include name="org/openlaszlo/**" />
      <!-- yes the jjt sources -->
      <include name="org/openlaszlo/sc/parser/**" />
      <!-- Parts of JGenerator 1.4 that we don't yet need -->
      <!-- and don't compile easily without more external jars -->
      <exclude name="org/openlaszlo/iv/flash/commands/FOPCommand" />
      <exclude name="org/openlaszlo/iv/flash/xml/**" />
      <exclude name="org/openlaszlo/iv/flash/js/**" />
      <exclude name="org/openlaszlo/iv/flash/url/JSUrl.*" />
      <exclude name="org/openlaszlo/iv/flash/**/*Test.*" />
      <exclude name="org/openlaszlo/iv/flash/context/**" />
      <exclude name="org/openlaszlo/iv/flash/fop/SWFRenderer.*" />
    </javac>

    <!-- Build jar files  -->
    <mkdir dir="${lib}" />
    <jar jarfile="${LPS_JAR}" manifest="manifest.mf" basedir="${build}"
         includes="org/**,EDU/**"
         excludes="org/openlaszlo/*/internal/*_Test.class,
                   org/openlaszlo/*/*_Test*.class,
                   org/openlaszlo/test/*"
         />

  </target>

  <!--===============  Target [test]  ====================-->
  <!-- build and run the tests                            -->
  <!-- XXX For now, we only have minimal things here      -->
  <target name="test" depends="build"
          description="Run tests">

      <junit printsummary="withOutAndErr" showoutput="true" fork="yes">
          <formatter type="plain" usefile="false"/>
          <sysproperty key="LPS_HOME" value="${LPS_HOME}"/>
          <classpath>
              <path refid="3rd.party.classpath"/>
              <pathelement location="build"/>
          </classpath> 
          <test name="org.openlaszlo.utils.FileUtils_Test"/>
          <test name="org.openlaszlo.xml.internal.XMLUtils_Test"/>
          <test name="org.openlaszlo.compiler.Compiler_Test"/>
          <test name="org.openlaszlo.compiler.TextCompiler_Test"/>
          <test name="org.openlaszlo.compiler.ViewSchema_Test"/>
      </junit>
  </target>

  <!--===============  Target [build]  ===================-->
  <!-- Compile the source, doc, and test framrk           -->
  <target name="build" depends="compile" description="Compile the source" />

  <!--=================  Target [doc]  ==================-->
  <!-- Really depends on css-parser but that will usually be done -->
  <target name="doc" depends="init" 
      description="Create documentation from ${src} into ${javadoc}">
    <mkdir dir="${javadoc}" />
    <property name="xtraparams" value=""/>
    <condition property="xtraparams" value="-quiet -breakiterator">
        <equals arg1="${ant.java.version}" arg2="1.4"/>
    </condition>
    <if>
      <not>
        <uptodate targetfile="${javadoc}/index.html" >
            <srcfiles dir="${src}" />
        </uptodate>
      </not>

      <then>
        <echo message="JAVA VERSION ${ant.java.version}"  />
        <!-- build from ${javasrcs}, not ${srcs}, because the automatically
        generated sources generally contain constructs that cause javadoc
        to report errors. Exclude the jgenerator bits from our doc. -->
        <mkdir dir="${build}/src" />
        <javadoc packagenames="${packages}"
                 sourcepath="${javasrcs}"
                 classpathref="3rd.party.classpath"
                 destdir="${javadoc}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="${LPS_NAME} API"
                 doctitle="${LPS_NAME} API"
                 Private="true"
                 excludepackagenames="org.openlaszlo.iv.*"
                 additionalparam="${xtraparams}">
            <bottom><![CDATA[
<!-- * H_LZ_COPYRIGHT_BEGIN *********************************************** -->
<p class="copyright">Copyright © 2002-2004 <a target="_top"
href="http://www.laszlosystems.com/">Laszlo Systems, Inc.</a>
All Rights Reserved. Unauthorized use, duplication or
distribution is strictly prohibited. This is the proprietary
information of Laszlo Systems, Inc. Use is subject to license terms.</p>
<!-- * H_LZ_COPYRIGHT_END ************************************************* -->
            ]]></bottom>
        </javadoc>
        <mkdir dir="${compilerapi}" />
        
        <javadoc packagenames="org.openlaszlo.sc,org.openlaszlo.compiler,org.openlaszlo.cm"
                 sourcepath="${javasrcs}"
                 classpath="${build}" 
                 classpathref="3rd.party.classpath"
                 destdir="${compilerapi}"
                 author="true"
                 use="true"
                 windowtitle="Compiler API"
                 doctitle="Compiler API"
                 Private="false"
                 additionalparam="${xtraparams}">
            <bottom><![CDATA[
<!-- * H_LZ_COPYRIGHT_BEGIN *********************************************** -->
<p class="copyright">Copyright © 2002-2004 <a target="_top"
href="http://www.laszlosystems.com/">Laszlo Systems, Inc.</a>
All Rights Reserved. Unauthorized use, duplication or
distribution is strictly prohibited. This is the proprietary
information of Laszlo Systems, Inc. Use is subject to license terms.</p>
<!-- * H_LZ_COPYRIGHT_END ************************************************* -->
            ]]></bottom>
        </javadoc>
    </then>
  </if>
    
  </target>

  <!--=================  Target [jgendoc]  ==================-->
  <!-- We don't build this by default because the jgen code has
       boatloads of javadoc warnings -->
  <target name="jgendoc" depends="init" 
      description="Create JGenerator documentation from ${jgen.src} into ${jgendoc}">
    <mkdir dir="${jgendoc}" />
    <javadoc classpathref="3rd.party.classpath"
             packagenames="org.openlaszlo.iv.*.*"
             sourcepath="${jgen.src}" 
             destdir="${jgendoc}"
             author="true"
             version="true"
             use="true"
             windowtitle="JGenerator API"
             doctitle="JGenerator API"
             Private="true" >
    </javadoc>

  </target>

  <!--=================  Target [javadoc-public]  ==================-->
  <target name="javadoc-public" 
      description="Build javadocs for deployment"
      depends="init" 
      unless="done.javadoc" >

      <mkdir dir="${LPS_HOME}/docs/javadoc" />

      <path id="javadoc.classpath" >
           <fileset dir="${LPS_HOME}/WEB-INF/lib" >
               <exclude name="${lps.jar}" />
           </fileset> 
           <fileset dir="lib" >
               <exclude name="${lps_noship.jar}" />
           </fileset> 
           <fileset dir="${LPS_HOME}/3rd-party/jars/dev" />
      </path>

      <javadoc destdir="${LPS_HOME}/docs/javadoc" version="true" author="false"
          classpathref="javadoc.classpath"
          windowtitle="Laszlo Presentation Server API">

          <packageset dir="src" >
              <include name="org/openlaszlo/xml" />
          </packageset>

        <doctitle><![CDATA[<h1>Laszlo Presentation Server API</h1>]]></doctitle>
        <bottom><![CDATA[
<!-- * H_LZ_COPYRIGHT_BEGIN *********************************************** -->
<p class="copyright">Copyright © 2002-2004 <a target="_top"
href="http://www.laszlosystems.com/">Laszlo Systems, Inc.</a>
All Rights Reserved. Unauthorized use, duplication or
distribution is strictly prohibited. This is the proprietary
information of Laszlo Systems, Inc. Use is subject to license terms.</p>
<!-- * H_LZ_COPYRIGHT_END ************************************************* -->
        ]]></bottom>
<!--
        <link href="http://java.sun.com/j2se/1.3/docs/api" />
        <link href="http://java.sun.com/products/servlet/2.2/javadoc" />
        <link href="http://java.sun.com/xml/jaxp/dist/1.1/docs/api" />
-->
      </javadoc>

      <property name="done.javadoc" value="true" />

  </target>

  <!--===============  Target [regression tests]  =================-->
  <target name="regression-baseline" depends="compile"
      description="Set the baseline for regression tests.">
    <exec executable="python">
      <arg value="bin/regression"/>
      <arg value="baseline"/>
    </exec>
    <exec executable="python">
      <arg value="bin/icregresserrors"/>
      <arg value="baseline"/>
    </exec>
  </target>

  <target name="regression-test" depends="compile"
      description="Test against the regression test baseline.">
    <exec executable="python">
      <arg value="bin/regression"/>
      <arg value="test"/>
    </exec>
    <exec executable="python">
      <arg value="bin/icregresserrors"/>
      <arg value="test"/>
    </exec>
  </target>

  <!--================  Target [all]  ===================-->
  <!-- Build the whole shebang.  -->
  <target name="all" description="Clean and rebuild"
     depends="clean, build, test">
  </target>

</project>
