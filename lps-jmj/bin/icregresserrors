#! /bin/env python
# * P_LZ_COPYRIGHT_BEGIN ******************************************************
# * Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.            *
# * Use is subject to license terms.                                          *
# * P_LZ_COPYRIGHT_END ********************************************************
"""Usage: %(progname)s <option>
Interface compiler regression testing on test cases for
erroneous input files.  Tests all files in server/error/*.lzx,
and server/inclusion/include-*.lzx.

  %(progname)s baseline
    Create a baseline for comparing subsequent error report tests to.
    The file is stored at %(baselinefile)s.

  %(progname)s test
    Run the script compiler on the error report test cases, and report
    differences from the baseline, if any.
"""

import os, sys
from shutil import copyfile
LPS_HOME = os.getenv('LPS_HOME')

def lzc(fname):
    print >> sys.stderr, 'Compiling', fname
    cin, cout = os.popen4('lzc %s' % fname)
    cin.close()
    return cout.read()

def runTests(fnames):
    from cStringIO import StringIO
    s = StringIO()
    print >> s, fnames
    print >> s, 'Files:', ', '.join([os.path.split(fn)[1] for fn in fnames])
    print >> s
    for fname in fnames:
        print >> s, fname
        print >> s, lzc(fname)
    return s.getvalue()

Testdir = os.path.join(LPS_HOME, 'WEB-INF', 'lps', 'server', 'test')
Baselinefile = os.path.join(Testdir, 'baseline', 'errors.out')
Logfile = os.path.join(Testdir, 'reports', 'errors.out')

def establishRegressionBaseline():
    from glob import glob
    fnames = glob(os.path.join(Testdir, 'errors', '*.lzx')) + \
             glob(os.path.join(Testdir, 'inclusion', 'include-*.lzx'))
    str = runTests(fnames)
    open(Baselinefile, 'w').write(str)

def compareRegressionResults():
    fnames = eval(open(Baselinefile).readline())
    str = runTests(fnames)
    open(Logfile, 'w').write(str)
    changed = os.system('diff %s %s' % (Baselinefile, Logfile))
    if not changed:
        print 'Passed'
    return changed

def usage():
    print __doc__ % {'progname': os.path.split(sys.argv[0])[1],
                     'baselinefile': Baselinefile}
    sys.exit(1)

if __name__ == '__main__':
    if len(sys.argv) != 2:
        usage()
    cmd = sys.argv[1]
    fn = {'baseline': establishRegressionBaseline,
          'test': compareRegressionResults}.get(cmd, usage)
    failed = fn()
    if failed:
        sys.exit(1)

# Local variables:
# mode: python
# End:
