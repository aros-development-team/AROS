# GNU Make automatic variables
# $@ current target
# $< First dependency
# $? All newer dependencies
# $^ All dependencies
# $* The stem (ie. target is dir/a.foo.b and the pattern is
#    a.%.b, then the stem is dir/foo)

#------------------------------------------------------------------------------
# Create one directory without any output
%define mkdir_q dir=.
	@$(IF) $(TEST) ! -d %(dir) ; then $(MKDIR) %(dir) ; else $(NOP) ; fi
%end

#------------------------------------------------------------------------------
# Create several directories without any output
%define mkdirs_q dirs=/M
	@$(FOR) dir in %(dirs) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done
%end

#------------------------------------------------------------------------------
# Same, more noisy
%define mkdirs dirs=/M
	@$(FOR) dir in %(dirs) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done
%end

#------------------------------------------------------------------------------
# Assemble the file %(from) to %(to) with %(cmd). Write any errors to %(err)
# and use the options in %(opt).
%define assemble_q cmd=$(AS) opt=$(AFLAGS) from=$< to=$@ path=$(CURDIR)/
	@$(ECHO) "Assembling %(path)$(notdir %(from))..."
	@$(IF) %(cmd) %(opt) -c %(from) -o %(to) > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "%(path)$(notdir %(from)): %(cmd) %(opt) -c %(from) -o %(to)" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: %(cmd) %(opt) -c %(from) -o %(to)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
%end

#------------------------------------------------------------------------------
# Compile the file %(from) to %(to) with %(cmd). Write any errors to %(err)
# and use the options in %(opt).
%define compile_q cmd=$(CC) opt=$(CFLAGS) from=$< to=$@ path=$(CURDIR)/
	@$(ECHO) "Compiling %(path)$(patsubst %(path)/,,%(from))..."
	@$(IF) %(cmd) %(opt) -c %(from) -o %(to) > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "%(path)%(from): %(cmd) %(opt) -c %(from) -o %(to)" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: %(cmd) %(opt) -c %(from) -o %(to)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
%end

#------------------------------------------------------------------------------
%define link_q cmd=$(CC) opt=$(LDFLAGS) startup=$(STARTUP) from=$< to=$@ libs=$(LIBS) end=$()
	@$(ECHO) "Linking %(to)..."
	@$(IF) %(cmd) %(opt) %(startup) %(from) -o %(to) %(libs) $(COMPILER_LIBS) %(end) 2>&1 > $(GENDIR)/cerrors 2>&1 ; then \
		$(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
				$(ECHO) "%(to): %(cmd) %(opt) %(startup) %(from) -o %(to) %(libs) %(end)" >> $(GENDIR)/errors ; \
				$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	   	else \
			$(NOP) ; \
    	fi ; \
	else \
	    $(ECHO) "Link failed: %(cmd) %(opt) %(startup) %(from) -o %(to) %(libs) %(end)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
%end

#------------------------------------------------------------------------------
%define checkuds us=$(GENDIR)/undefdsyms.list err=$(GENDIR)/errors to=$@ linkcmd=""
	@$(ECHO) "Checking %(to)..."
	@$(CHECKUDS) %(to) > %(us)
	@$(IF) $(TEST) -s %(us); then \
	    $(ECHO) "%(linkcmd)" >> %(err) ; \
	    $(ECHO) "There are undefined symbols in %(to):" 1>&2 ; \
	    tee < %(us) -a %(err) 1>&2 ; \
	    $(RM) %(to); \
	    exit 1 ; \
	else $(NOP) ; fi
%end

#------------------------------------------------------------------------------
# Create the library
%define mklib_q ar=$(AR) ranlib=$(RANLIB) to=$@ from=$(OBJS)
	@$(ECHO) "Creating library %(to)..."
	@%(ar) %(to) %(from)
	@%(ranlib) %(to)
%end

#------------------------------------------------------------------------------
%define mklib_arch ar=$(AR) ranlib=$(RANLIB) to=$@ from="$(OBJS)" cmd=$(CC) opt=$(CFLAGS) archive=$(ARCHIVE)
	@$(ECHO) "Creating library %(to)..."
	@%(ar) %(to) %(from)
	@%(ranlib) %(to)
	@$(RM) $(RMLIB)

$(OBJDIR)/functions.o : $(OBJDIR)/functions.c
%compile_q opt="$(CFLAGS) -I$(OBJDIR)"

$(OBJDIR)/functions.c : mmakefile.src %(archive)
%mkdir_q $(OBJDIR)
	@$(ARCHTOOL) -s $@ %(archive)

$(OBJDIR)/functions.d : $(OBJDIR)/functions.c
%mkdepend_q flags="$(CFLAGS) -I$(OBJDIR)"
%end

#------------------------------------------------------------------------------
%define mklib_f ar=$(AR) ranlib=$(RANLIB) to=$@ from="$(OBJS)" cmd=$(CC) opt=$(CFLAGS) functions=$(FUNCTIONS) deplibs="$(DEPLIBS)"
	@$(ECHO) "Creating library %(to)..."
	@%(ar) %(to) %(from)
	@%(ranlib) %(to)
	@$(RM) $(RMLIB)

$(OBJDIR)/functions.o : $(OBJDIR)/functions.c
%compile_q opt="$(CFLAGS) -I$(OBJDIR)" path=""

$(OBJDIR)/functions.c : mmakefile.src $(foreach f,%(functions),$(f).c)
	@$(CPAK) %(functions)
%mkdir_q $(OBJDIR)
	@$(MV) functions.c functions.h $(OBJDIR)

$(OBJDIR)/functions.d : $(OBJDIR)/functions.c
%mkdepend_q flags="$(CFLAGS) -I$(OBJDIR)"
%end

#------------------------------------------------------------------------------
# Same but more noisy
%define mklib ar=$(AR) ranlib=$(RANLIB) to=$@ from=$(OBJS)
	@$(ECHO) "Creating library %(to)..."
	%(ar) %(to) %(from)
	%(ranlib) %(to)
%end

#------------------------------------------------------------------------------
# Create the dependency file %(to) for %(from) in the directory %(dir)
%define mkdepend_q flags=$(CFLAGS) from=$< to=$@ dir=$(@D) opt=
	@$(IF) [ ! -d %(dir) ]; then $(MKDIR) %(dir) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir %(from))..."
	@$(MKDEPEND) %(flags) %(from) -o %(to)
%end

#------------------------------------------------------------------------------
# Same but more noisy
%define mkdepend flags=$(CFLAGS) from=$< to=$@ dir=$(@D) opt=
	@$(IF) [ ! -d %(dir) ]; then $(MKDIR) %(dir) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir %(from))..."
	$(MKDEPEND) %(flags) %(from) -o %(to)
%end

#------------------------------------------------------------------------------
# Add section with all necessary libs and dependencies for linking
%define define_libs prelibs=$(PRELIBS) postlibs= deplibs=
STARTUP = $(LIBDIR)/startup.o
LIBS = -L$(LIBDIR) %(prelibs) -larossupport -lamiga -larosc -larosm -lautoinit %(postlibs) $(COMPILER_LIBS)
DEPLIBS = $(LIBDIR)/libamiga.a $(LIBDIR)/libarossupport.a $(STARTUP) \
	$(LIBDIR)/libarosc.a $(LIBDIR)/libarosm.a $(LIBDIR)/libautoinit.a %(deplibs)
%end

#------------------------------------------------------------------------------
# Do something in all subdirs
# This macro uses a trick: %(target) is evaluated *after* %(text), so one
# can use %(target) in %(text).
%define subdirs_q text="Making %(target)" target=$(TARGET) dirs=$(SUBDIRS) curdir=$(CURDIR) mflags=$(MFLAGS) submf=makefile top=$(TOP)
	@$(FOR) dir in %(dirs) ; do \
	    $(ECHO) "%(text) in %(curdir)/$$dir..." ; \
	    if $(TEST) -f $$dir/%(submf).src && \
		{ $(TEST) ! -f $$dir/%(submf) \
		-o $$dir/%(submf).src -nt $$dir/%(submf) \
		-o %(top)/config/make.tmpl -nt $$dir/%(submf) ; } ; then \
		$(ECHO) "Generating %(submf)..." ; \
		$(AWK) -f $(TOP)/scripts/genmf.gawk \
		-v TOP="$(TOP)" \
		$$dir/%(submf).src > $$dir/%(submf) || exit 1 ; \
	    fi ; \
	    if ( cd $$dir ; \
		$(MAKE) %(mflags) --file=%(submf) \
		    TOP="%(top)/.." CURDIR="%(curdir)/$$dir" \
		    TARGET=%(target) %(target) ) ; \
	    then $(NOP) ; else exit 1 ; fi ; \
	done
%end

#------------------------------------------------------------------------------
# Prepare creation of a shared lib
%define prepare_shlib lib=dummy shflag=$(SHARED_DUMMY) lib_suffix=$(HOST_LIB_SUFFIX)
ifeq ("%(shflag)","yes")
LIB    := $(LIBDIR)/lib%(lib).so%(lib_suffix)
RMLIB  := $(LIBDIR)/lib%(lib).a
AR     := $(SHARED_LD) $(SHARED_LDFLAGS) -o
RANLIB := $(NOP)
else
LIB    := $(LIBDIR)/lib%(lib).a
RMLIB  := $(LIBDIR)/lib%(lib).so%(lib_suffix)
endif
%end

#------------------------------------------------------------------------------
# Compile function table
%define compilefunctable
$(OBJDIR)/functable.d : $(OBJDIR)/functable.c
%mkdepend_q opt="$(MKDEPEND_FLAGS) -I."

$(OBJDIR)/functable.o : $(OBJDIR)/functable.c
%compile_q opt="$(CFLAGS) -I$(OBJDIR) -I."
%end

#------------------------------------------------------------------------------
# Generate function table with archtool
%define mkfunctable_arch archive=$(ARCHIVE)
$(OBJDIR)/functable.c : mmakefile.src %(archive) libdefs.h
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(ARCHTOOL) -t %(archive)
	@$(MV) functable.c $@

%compilefunctable
%end

#------------------------------------------------------------------------------
# Generate function table with some awk script
%define mkfunctable_q
$(OBJDIR)/functable.c : mmakefile.src $(FUNCTABLE_SRCS) $(BINDIR)/scripts/genfunctable.awk libdefs.h
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCTABLE_SRCS) > $@

%compilefunctable
%end

#------------------------------------------------------------------------------
# Generate endskip variable
%define mkendtag_q
$(END_FILE).c : libdefs.h
	%mkdir_q $(OBJDIR)
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(ENDFUNC) : $(END_FILE).c libdefs.h
%compile_q path=""

$(END_FILE).d : $(END_FILE).c
%mkdepend_q opt="$(MKDEPEND_CFLAGS) -I."
%end

#------------------------------------------------------------------------------
# Common rules for all makefiles
%define common
# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

%end

#------------------------------------------------------------------------------
# Include the dependency files and add some internal rules
%define include_deps deps=$(DEPS)/M nodepstargets=
# Include these files but only if the current target is neither
# setup nor clean.
ifeq (,$(filter clean% %clean %clean% setup% includes% %(nodepstargets),$(TARGET)))
-include %(deps)
endif
%end

#------------------------------------------------------------------------------
# rule to generate libdefs.h with archtool (options may go away!)
%define libdefs_rule conffile=lib.conf genlibdefstool=$(ARCHTOOL) dest=libdefs.h
%(dest) : %(conffile) %(genlibdefstool)
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@%(genlibdefstool) -c
%end


#------------------------------------------------------------------------------
# rule to generate asm files from c files (for debugging purposes)
%define asm_rule opt=$(GENASM)
.PHONY : asm
asm : $(foreach f,%(opt),$(f).s) all
%end

#------------------------------------------------------------------------------
# generate asm files from c files (for debugging purposes)
%define ctoasm_q
%.s : %.c
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(TARGET_CC) -S $(CFLAGS) $< -c -o $@
%end

#------------------------------------------------------------------------------
%define gennames name=$(LIBNAME)
%end

#------------------------------------------------------------------------------
%define genlib flags=$(CFLAGS) cc=$(CC)
ifndef SLIB
SLIB := $(SLIBDIR)/$(LIBNAME).library
endif
ifndef LIB
LIB := $(LIBDIR)/lib$(LIBNAME).a
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := $(OBJDIR)/endtag
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(END_FILE).o
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(OBJDIR)/$(LIBNAME)lib.map $(SYS_OBJS) $(EXTRA_LIBS) $(LIBS) $(COMPILER_LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

# Collect all functions in a linklib for fast linking:
$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $?
	@$(RANLIB) $@

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h $(EXTRA_CLEAN) \
	    $(LIB) $(SLIB)

$(OBJDIR)/%.o : %.c
%compile_q cmd=%(cc) opt=%(flags)

%libdefs_rule

FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)

%mkfunctable_q

%mkendtag_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)
%end

#------------------------------------------------------------------------------
%define genromlib flags=$(CFLAGS) cc=$(CC)
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := $(OBJDIR)/endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(END_FILE).o
endif
ifndef OSMODULE
OSMODULE := $(LIBNAME).library
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPLIBS
DEPLIBS :=
endif
ifndef DEPS
DEPS := $(foreach f,$(INIT_FILE) $(FILES) $(FUNCTIONS) $(notdir $(END_FILE)),$(OBJDIR)/$(f).d)
endif
ALL_OBJS := $(SYS_OBJS) $(OBJS) $(ENDFUNC)

$(OSMODDIR)/$(OSMODULE) : $(LIB) $(INITFUNC) \
	    $(foreach f,$(DEPLIBS), $(LIBDIR)/lib$(f).a)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(OBJDIR)/$(OSMODULE).map -L$(LIBDIR) \
	    $(INITFUNC) $(LIB) $(foreach f, $(DEPLIBS), -l$(f)) $(COMPILER_LIBS) \
	    -o $@ 2>&1 | tee $(OSMODULE).err
	@if $(TEST) ! -s $(OSMODULE).err; then rm $(OSMODULE).err ; else $(NOP); fi
ifeq ($(FLAVOUR),native)
	@strip $@
else
	@strip -x $@
endif

# Collect all functions in a linklib for fast linking
$(LIB) : $(ALL_OBJS)
	@$(ECHO) "Creating library $@..."
	@$(AR) $@ $(ALL_OBJS)
	@$(RANLIB) $@

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(OSMODDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h $(EXTRA_CLEAN) \
	    $(LIB) $(SLIB)

$(OBJDIR)/%.o : %.c
%compile_q cmd=%(cc) opt=%(flags)

%libdefs_rule

ifndef FUNCTABLE_SRCS
FUNCTABLE_SRCS := $(foreach f,$(ALL_FUNCTIONS),$(f).c)
endif

%mkfunctable_q

%mkendtag_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)
%end

#------------------------------------------------------------------------------
# version of genromlib that allows you to use archtools
%define genromlib_arch flags=$(CFLAGS) cc=$(CC) files=$(FILES) archive=$(ARCHIVE)
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := $(OBJDIR)/endtag
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(END_FILE).o
endif
ifndef OSMODULE
OSMODULE := $(LIBNAME).library
endif
ifndef NO_FUNCTABLE
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
else
SYS_FILES := $(SYS_FILES) $(INIT_FILE)
endif
ifndef OBJS
OBJS := $(foreach f,%(files) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPLIBS
DEPLIBS :=
endif
ifndef DEPS
DEPS := $(foreach f,$(INIT_FILE) functions $(FILES) $(notdir $(END_FILE)),$(OBJDIR)/$(f).d)
endif
ALL_OBJS := $(SYS_OBJS) $(OBJS) $(OBJDIR)/functions.o $(ENDFUNC)

$(OSMODDIR)/$(OSMODULE) : $(LIB) $(INITFUNC) \
	    $(foreach f,$(DEPLIBS), $(LIBDIR)/lib$(f).a)
	@$(ECHO) "Building $(notdir $@) ..."
	@%(cc) $(ILDFLAGS) $(GENMAP) $(OBJDIR)/$(OSMODULE).map -L$(LIBDIR) \
	    $(INITFUNC) $(LIB) $(foreach f, $(DEPLIBS), -l$(f)) $(COMPILER_LIBS) \
	    -o $@ 2>&1 | tee $(OSMODULE).err
	@if $(TEST) ! -s $(OSMODULE).err; then rm $(OSMODULE).err ; else $(NOP); fi
ifeq ($(FLAVOUR),native)
	@strip $@
else
	@strip -x $@
endif

setup :
%mkdirs_q $(OBJDIR) $(LIBDIR) $(OSMODDIR) $(DESTDIRS)

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h $(EXTRA_CLEAN) $(LIB) $(OSMODDIR)/$(OSMODULE)

# Collect all functions in a linklib for fast linking
$(LIB) : $(ALL_OBJS)
%mklib_arch from=$(ALL_OBJS) archive=%(archive)

$(OBJDIR)/%.o : %.c
%compile_q

%libdefs_rule

ifndef NO_FUNCTABLE
%mkfunctable_arch archive=%(archive)
endif

%mkendtag_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)

# Generate include files
%genlibincludes_arch

%end

#------------------------------------------------------------------------------
# version of genromlib that allows you to use cpak and generates inline
%define genromlib_finline flags=$(CFLAGS) cc=$(CC) files=$(FILES) functions=$(FUNCTIONS) hasrt=
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := $(OBJDIR)/endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(END_FILE).o
endif
ifndef OSMODULE
OSMODULE := $(LIBNAME).library
endif
ifndef NO_FUNCTABLE
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
else
SYS_FILES := $(SYS_FILES) $(INIT_FILE)
endif
ifndef OBJS
OBJS := $(foreach f,%(files) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPLIBS
DEPLIBS :=
endif
ifndef DEPS
DEPS := $(foreach f,$(INIT_FILE) functions $(FILES) $(notdir $(END_FILE)),$(OBJDIR)/$(f).d)
endif
ALL_OBJS := $(SYS_OBJS) $(OBJS) $(OBJDIR)/functions.o $(ENDFUNC)

$(OSMODDIR)/$(OSMODULE) : $(LIB) $(INITFUNC) \
	    $(foreach f,$(DEPLIBS), $(LIBDIR)/lib$(f).a)
	@$(ECHO) "Building $(notdir $@) ..."
	@%(cc) $(ILDFLAGS) $(GENMAP) $(OBJDIR)/$(OSMODULE).map -L$(LIBDIR) \
	    $(INITFUNC) $(LIB) $(foreach f, $(DEPLIBS), -l$(f)) $(COMPILER_LIBS) \
	    -o $@ 2>&1 | tee $(OSMODULE).err
	@if $(TEST) ! -s $(OSMODULE).err; then rm $(OSMODULE).err ; else $(NOP); fi
ifeq ($(FLAVOUR),native)
	@strip $@
else
	@strip -x $@
endif

setup ::
%mkdirs_q $(OBJDIR) $(LIBDIR) $(OSMODDIR) $(DESTDIRS)

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h $(EXTRA_CLEAN) \
	    $(LIB) $(OSMODDIR)/$(OSMODULE)

# Collect all functions in a linklib for fast linking
$(LIB) : $(ALL_OBJS)
%mklib_f from=$(ALL_OBJS) functions=%(functions)

$(OBJDIR)/%.o : %.c
%compile_q

$(OBJDIR)/%.o : $(OBJDIR)/%.c
%compile_q opt="$(CFLAGS) -I$(OBJDIR)"

%libdefs_rule

ifndef NO_FUNCTABLE
ifndef FUNCTABLE_SRCS
FUNCTABLE_SRCS := $(foreach f,$(ALL_FUNCTIONS),$(f).c)
endif

%mkfunctable_q
endif

%mkendtag_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)

# Generate include files
%genlibincludesinline hasrt=%(hasrt)

%end

#------------------------------------------------------------------------------
%define genlibincludes name=$(LIBNAME) functions=$(ALL_FUNCTIONS)
#MM includes-generate : setup-clib
includes-generate : setup $(OBJDIR)/headers.stamp \
            $(INCDIR)/clib/%(name)_protos.h \
            $(INCDIR)/defines/%(name).h
	@$(NOP)

FSRCS := $(foreach f,%(functions),$(f).c)

$(OBJDIR)/headers.stamp : mmakefile.src $(wildcard headers.tmpl) libdefs.h \
            $(FSRCS) \
            $(SCRIPTDIR)/genshared \
            $(SCRIPTDIR)/genclib.awk $(SCRIPTDIR)/gendefines.awk
	@$(SCRIPTDIR)/genshared -clib -prefix $(GENINCDIR) $(FSRCS)
	@$(SCRIPTDIR)/genshared -defines -prefix $(GENINCDIR) $(FSRCS)
	@$(TOUCH) $@

$(INCDIR)/clib/%(name)_protos.h : $(GENINCDIR)/clib/%(name)_protos.h
	@$(CP) $< $@

$(INCDIR)/defines/%(name).h : $(GENINCDIR)/defines/%(name).h
	@$(CP) $< $@
%end

#------------------------------------------------------------------------------
%define genlibincludes_arch name=$(LIBNAME) archive=$(ARCHIVE)
#MM includes-generate : setup-clib
includes-generate : setup $(OBJDIR)/headers.stamp \
            $(INCDIR)/pragmas/%(name)_pragmas.h \
            $(INCDIR)/clib/%(name)_protos.h \
            $(INCDIR)/defines/%(name).h \
            $(INCDIR)/inline/%(name).h \
            $(INCDIR)/proto/%(name).h
	@$(NOP)

_HEADER_DEPS := mmakefile.src $(wildcard headers.tmpl) libdefs.h %(archive)
$(OBJDIR)/headers.stamp : $(GENINCDIR)/pragmas/%(name)_pragmas.h \
	    $(GENINCDIR)/clib/%(name)_protos.h \
	    $(GENINCDIR)/defines/%(name).h \
	    $(GENINCDIR)/inline/%(name).h \
	    $(GENINCDIR)/proto/%(name).h
	@$(TOUCH) $@

$(GENINCDIR)/pragmas/%(name)_pragmas.h \
	    $(GENINCDIR)/clib/%(name)_protos.h \
	    $(GENINCDIR)/defines/%(name).h \
	    $(GENINCDIR)/inline/%(name).h \
	    $(GENINCDIR)/proto/%(name).h :
	@$(ARCHTOOL) -I $(GENINCDIR) %(archive)

$(INCDIR)/pragmas/%(name)_pragmas.h : $(GENINCDIR)/pragmas/%(name)_pragmas.h
	@$(CP) $< $@

$(INCDIR)/clib/%(name)_protos.h : $(GENINCDIR)/clib/%(name)_protos.h
	@$(CP) $< $@

$(INCDIR)/defines/%(name).h : $(GENINCDIR)/defines/%(name).h
	@$(CP) $< $@

$(INCDIR)/inline/%(name).h : $(GENINCDIR)/inline/%(name).h
	@$(CP) $< $@

$(INCDIR)/proto/%(name).h : $(GENINCDIR)/proto/%(name).h
	@$(CP) $< $@
%end



#------------------------------------------------------------------------------
%define genlibincludesinline name=$(LIBNAME) functions=$(ALL_FUNCTIONS) hasrt=
#MM includes-generate : setup-clib
includes-generate : setup $(OBJDIR)/headers.stamp \
            $(INCDIR)/clib/%(name)_protos.h \
            $(INCDIR)/defines/%(name).h \
            $(INCDIR)/inline/%(name).h \
            $(INCDIR)/proto/%(name).h
	@$(NOP)

FSRCS := $(foreach f,%(functions),$(f).c)

_HEADER_DEPS := mmakefile.src $(wildcard headers.tmpl) libdefs.h \
            $(FSRCS) \
            $(SCRIPTDIR)/genshared \
            $(SCRIPTDIR)/genclib.awk $(SCRIPTDIR)/gendefines.awk \
            $(SCRIPTDIR)/geninline.awk

$(OBJDIR)/headers.stamp : $(GENINCDIR)/clib/%(name)_protos.h \
	    $(GENINCDIR)/defines/%(name).h \
	    $(GENINCDIR)/inline/%(name).h \
	    $(GENINCDIR)/proto/%(name).h
	@$(TOUCH) $@

$(GENINCDIR)/clib/%(name)_protos.h : $(_HEADER_DEPS)
	@$(SCRIPTDIR)/genshared -clib %(hasrt) -prefix $(GENINCDIR) $(FSRCS)

$(GENINCDIR)/defines/%(name).h : $(_HEADER_DEPS)
	@$(SCRIPTDIR)/genshared -defines %(hasrt) -prefix $(GENINCDIR) $(FSRCS)

$(GENINCDIR)/inline/%(name).h : $(_HEADER_DEPS)
	@$(SCRIPTDIR)/genshared -inline %(hasrt) -prefix $(GENINCDIR) $(FSRCS)

$(GENINCDIR)/proto/%(name).h : $(_HEADER_DEPS)
	@$(SCRIPTDIR)/genshared -proto %(hasrt) -prefix $(GENINCDIR) $(FSRCS)

$(INCDIR)/clib/%(name)_protos.h : $(GENINCDIR)/clib/%(name)_protos.h
	@$(CP) $< $@

$(INCDIR)/defines/%(name).h : $(GENINCDIR)/defines/%(name).h
	@$(CP) $< $@

$(INCDIR)/inline/%(name).h : $(GENINCDIR)/inline/%(name).h
	@$(CP) $< $@

$(INCDIR)/proto/%(name).h : $(GENINCDIR)/proto/%(name).h
	@$(CP) $< $@

%end

#------------------------------------------------------------------------------
# Used to help with the function replacement mechanism. Use like
#
#	%prepare_replace module=os/exec
#
# This will include the file contain information written out by the
# $(TOP)/config makefiles which is used to filter out files that are
# being replaced by machine dependant versions in the $(TOP)/config
# subtree.
#
# You can also determine which group of files you wish to filter against
# with the filter command. You pass it the variable to modify as var
#
# Eg:
#	%prepare_replace module=os/foobar
#	%filter_replace $(FUNCTIONS)
#
# The variable $(ADDITIONAL_OBJS) will be available for you to link in
# extra files.
#
# You should save the values of the variables which you filter in case
# you need them at a later date.
#
%define prepare_replace module=
-include $(GENDIR)/%(module)/mf.inc
%end

#------------------------------------------------------------------------------
%define filter_replace var=FILES filter=$(SUPPRESS_FILES)
%(var) := $(filter-out %(filter),$(%(var)))
%end

#------------------------------------------------------------------------------
# You can use this to prevent objects which weren't compiled correctly by
# config/$(...) directories to not be compiled by the local makefile.
%define additional_objs_rule
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) Error: One of the precompiled object files did not exist.
	@exit 1
%end

#------------------------------------------------------------------------------
%define add_objects files=/M
	@$(FOR) file in %(files) ; do \
	    $(ECHO) >> $(GENDIR)/config.files "add $$file" ; \
	done
%end

#------------------------------------------------------------------------------
%define exclude_files files=/M
	@$(FOR) file in %(files) ; do \
	    $(ECHO) >> $(GENDIR)/config.files "not $$file" ; \
	done
%end

#------------------------------------------------------------------------------
%define genlib_arch
ifndef BASENAME
  BASENAME := $(ULIBNAME)
endif

SLIB	      := $(SLIBDIR)/$(LIBNAME).library
LIB	      := $(LIBDIR)/lib$(LIBNAME).a
INIT_FILE     := $(LIBNAME)_init
END_FILE      := $(OBJDIR)/endtag
OBJDIR        := $(GENDIR)/$(CURDIR)
INITFUNC      := $(OBJDIR)/$(INIT_FILE).o
ENDFUNC       := $(END_FILE).o
SYS_FILES     := $(SYS_FILES) $(INIT_FILE) functable
OBJS	      := $(foreach f,$(FILES) functions $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
SYS_OBJS      := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(OBJDIR)/$(LIBNAME)lib.map $(OBJS) $(SYS_OBJS) $(EXTRA_LIBS) $(LIBS) $(COMPILER_LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $(OBJS)
	@$(RANLIB) $@

$(OBJDIR)/functions.o : $(OBJDIR)/functions.c
%compile_q

$(OBJDIR)/functions.c : mmakefile.src $(ARCHIVE)
	@$(ARCHTOOL) -s $@ $(ARCHIVE)

$(OBJDIR)/functions.d : $(OBJDIR)/functions.c
%mkdepend_q flags="$(CFLAGS) -I$(OBJDIR)"

ALL_FUNCTIONS := $(FUNCTIONS)
%genlibincludes_arch

$(OBJDIR)/%.o : %.c
%compile_q

%mkfunctable_arch

%mkendtag_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

%libdefs_rule

%end

#------------------------------------------------------------------------------
%define genlib_cpak hasrt=
ifndef LIBPOST
  LIBPOST := library
endif
ifndef DESTDIR
  DESTDIR := $(SLIBDIR)
endif
ifndef BASENAME
  BASENAME := $(ULIBNAME)
endif

SLIB	      := $(DESTDIR)/$(LIBNAME).$(LIBPOST)
LIB	      := $(LIBDIR)/lib$(LIBNAME).a
OBJDIR	      := $(GENDIR)/$(CURDIR)
INIT_FILE     := $(LIBNAME)_init
END_FILE      := $(OBJDIR)/endtag
INITFUNC      := $(OBJDIR)/$(INIT_FILE).o
ENDFUNC       := $(END_FILE).o
SYS_FILES     := $(SYS_FILES) $(INIT_FILE) functable
OBJS	      := $(foreach f,$(FILES) functions $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
SYS_OBJS      := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
DEPS          := $(DEPS) $(foreach f,$(INIT_FILE) functable functions $(FILES) $(notdir $(END_FILE)),$(OBJDIR)/$(f).d)

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(OBJDIR)/$(LIBNAME)lib.map $(SYS_OBJS) $(EXTRA_LIBS) $(LIBS) $(COMPILER_LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $(OBJS)
	@$(RANLIB) $@

$(OBJDIR)/functions.c : mmakefile.src $(foreach f,$(FUNCTIONS),$(f).c)
	@$(CPAK) $(FUNCTIONS)
%mkdir_q $(OBJDIR)
	@$(MV) functions.c functions.h $(OBJDIR)

ALL_FUNCTIONS := $(FUNCTIONS)
%genlibincludesinline hasrt=%(hasrt)

$(OBJDIR)/functions.o : $(OBJDIR)/functions.c
%compile_q opt="$(CFLAGS) -I$(OBJDIR) -I." path=""

$(OBJDIR)/functions.d : $(OBJDIR)/functions.c
%mkdepend_q flags="$(CFLAGS) -I$(OBJDIR)"

$(OBJDIR)/%.o : %.c
%compile_q

FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)

%mkfunctable_q

%mkendtag_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

%libdefs_rule

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)

%include_deps

%end

#------------------------------------------------------------------------------
#Common template for generating non-rom shared objects
%define genwblib flags=$(CFLAGS) cc=$(CC)
ifndef LIBPOST
LIBPOST := library
endif
ifndef DESTDIR
DESTDIR	:= $(SLIBDIR)
endif
ifndef SLIB
SLIB := $(DESTDIR)/$(LIBNAME).$(LIBPOST)
endif
ifndef LIB
LIB := $(LIBDIR)/lib$(LIBNAME).a
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := $(OBJDIR)/endtag
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(END_FILE).o
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPS
DEPS := $(foreach f, $(INIT_FILE) functable $(FILES) $(FUNCTIONS) $(notdir $(END_FILE)), $(OBJDIR)/$(f).d)
endif

DESTDIRS := $(DESTDIRS) $(DESTDIR)

# Insert collection lib lib$(LIBNAME).a into $(LIBS) for final $(SLIB) target
%define_libs prelibs=-l$(LIBNAME)

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(OBJDIR)/$(LIBNAME)lib.map $(SYS_OBJS) $(LIBS) $(COMPILER_LIBS) $(ENDFUNC) $(EXTRA_LIBS) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

# Collect all functions in a linklib for fast linking:
$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $(OBJS)
	@$(RANLIB) $@

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h $(EXTRA_CLEAN) \
	    $(LIB) $(SLIB)

$(OBJDIR)/%.o : %.c
%compile_q cmd=%(cc) opt=%(flags)

%libdefs_rule

FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)

%mkfunctable_arch archive=

%mkendtag_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)

%include_deps
%end


#------------------------------------------------------------------------------
# NOTE: The following are all part of Iain's build changes, please don't use
# or change anything below this line until you know what you are doing. This
# is so that I don't conflict with the semantics of any of the above macros.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#
%define safe_define var=/A value=/M
ifndef %(var)
%(var) := %(value)
endif
%end

#------------------------------------------------------------------------------
# Do some setup common to all compiling directories.
#
#
%define make_common_setup id=
%safe_define var=OBJDIR%(id) value="$(GENDIR)/$(CURDIR)"
ifneq (%(id),)
  LIBS := LIBS%(id)
endif
%safe_define var=CFLAGS%(id) value="$(TARGET_CFLAGS) $(USER_CFLAGS) $(INCLUDES) $(LIB_CFLAGS) -I$(AROS_INCLUDES) -D__AROS__ -D__AROS"
%safe_define var=AFLAGS%(id) value="$(TARGET_AFLAGS) $(USER_AFLAGS) $(INCLUDES) $(LIB_CFLAGS) -I$(AROS_INCLUDES) -D__AROS__ -D__AROS"
%safe_define var=LDFLAGS%(id) value="$(TARGET_LDFLAGS) $(USER_LDFLAGS)"

%end

#------------------------------------------------------------------------------
# Copy files from one directory to another.

%define copy_files_q files=$(FILES) src=. dst=/A

SRC_FILES := $(foreach f, %(files), %(src)/$(f))
DST_FILES := $(foreach f, %(files), %(dst)/$(f))

files-copy : setup $(DST_FILES)

%(dst)/% : %(src)/%
	@$(CP) $< $@
	
setup ::
	%mkdirs_q %(dst)

%end

#------------------------------------------------------------------------------
# Just as above, but noisy.

%define copy_files files=$(FILES) src=. dst=/A

SRC_FILES := $(foreach f, %(files), %(src)/$(f))
DST_FILES := $(foreach f, %(files), %(dst)/$(f))

files-copy : setup $(DST_FILES)

%(dst)/% : %(src)/%
	$(CP) $< $@
	
setup ::
	%mkdirs_q %(dst)

%end

#------------------------------------------------------------------------------
#   Copy include files into the includes directories. There are currently
#   two include directories. One for building AROS $(AROS_INCLUDES) and one
#   for building tools that need to run on the host system $(GENINCDIR). The
#   $(GENINCDIR) path must not contain any references to the C runtime
#   library header files.
#
%define copy_includes path=. dir=include

INCL_FILES_1 := $(subst %(dir),$(AROS_INCLUDES)/%(path),$(INCLUDE_FILES))
INCL_FILES_2 := $(subst %(dir),$(GENINCDIR)/%(path),$(INCLUDE_FILES))

includes-copy : setup $(INCL_FILES_1) $(INCL_FILES_2)

$(AROS_INCLUDES)/%(path)/%.h : %(dir)/%.h
	@$(CP) $< $@

$(GENINCDIR)/%(path)/%.h : %(dir)/%.h
	@$(CP) $< $@

setup ::
	%mkdirs_q $(AROS_INCLUDES)/%(path) $(GENINCDIR)/%(path)

%end

# This is an unholy hack, and shall be removed...
%define copy_includes_half path=. dir=include

INCL_FILES_1 := $(subst %(dir),$(AROS_INCLUDES)/%(path),$(INCLUDE_FILES))

includes-copy : setup $(INCL_FILES_1)

$(AROS_INCLUDES)/%(path)/%.h : %(dir)/%.h
	@$(CP) $< $@

setup ::
	%mkdirs_q $(AROS_INCLUDES)/%(path)

%end

#------------------------------------------------------------------------------
# Same as copy_includes, except that the includes are in the current
# directory.
#
%define copy_includes_cwd namespace=amiga path=/A

INCL_FILES_1 := $(foreach f,$(INCLUDE_FILES),$(AROS_INCLUDES)/%(path)/$(f))
INCL_FILES_2 := $(foreach f,$(INCLUDE_FILES),$(GENINCDIR)/%(path)/$(f))

includes-copy : $(INCL_FILES_1) $(INCL_FILES_2)

$(AROS_INCLUDES)/%(path)/%.h : %.h
	@$(CP) $< $@

$(GENINCDIR)/%(path)/%.h : %.h
	@$(CP) $< $@

%end

#------------------------------------------------------------------------------
# Do the early stuff needed for compiling. This must be run before you
# do make_vpath otherwise any rules defined in the included makefiles will
# be invalid.

%define make_linklib_setup mmake=/A
.PHONY : %(mmake) %(mmake)-clean %(mmake)-quick
#MM
%(mmake)-quick : %(mmake)
#MM
%(mmake)-clean : clean

%make_common_setup

%end

#------------------------------------------------------------------------------
# Generate a link library from a collection of files.
#

%define make_linklib dflags=$(CFLAGS)
OBJS := $(foreach f,$(FILES),$(OBJDIR)/$(f).o)
DEPS := $(DEPS) $(foreach f,$(FILES),$(OBJDIR)/$(f).d)

linklibs-$(LIB): setup $(LIBDIR)/lib$(LIB).a
	@$(NOP)

$(LIBDIR)/lib$(LIB).a : $(OBJS)
	%mklib_q

$(OBJDIR)/%.o : %.c
	%compile_q cmd=$(TARGET_CC) opt=$(CFLAGS)

$(OBJDIR)/%.d : %.c
	%mkdepend_q flags=%(dflags)

setup ::
	%mkdirs_q $(OBJDIR) $(LIBDIR)

clean ::
	-@$(RM) $(OBJDIR)

%end

#------------------------------------------------------------------------------
# Standard Binary Commands, such as you would find in C:, SYS:Tools/, etc.
# This assumes a one to one mapping between source code and executable. If
# you have a program that has multiple source files, it will need to be in
# a separate directory. In that case see make_prog_multi
#

%define make_prog_single dir=/A id=
%make_prog_common dir=%(dir) id=%(id)

%(dir)/% : $(OBJDIR%(id))/%.o
	%link_q cmd=$(STATIC_LD) opt=$(LDFLAGS%(id)) libs=$(LIBS%(id))

%end

#------------------------------------------------------------------------------
# Standard Binary Programs: Multiple source files to one output.
#
%define make_prog_multi dir=/A target=/A id=
%make_prog_common dir=%(dir) id=%(id)

%(target) : %(dir)/% : $(OBJS%(id))
	%link_q cmd=$(STATIC_LD) opt=$(LDFLAGS%(id)) from=$^ libs=$(LIBS%(id))

%end

#------------------------------------------------------------------------------
# Common code for building programs
#
%define make_prog_common dflags=$(CFLAGS) id= dir=/A
OBJS%(id) := $(foreach f,$(FILES),$(OBJDIR%(id))/$(f).o)
DEPS := $(DEPS) $(foreach f,$(FILES),$(OBJDIR%(id))/$(f).d)

$(OBJDIR%(id))/%.o : %.c
	%compile_q cmd=$(TARGET_CC) opt=$(CFLAGS%(id))

$(OBJDIR%(id))/%.d : %.c
	%mkdepend_q flags=%(dflags)

%(dir)/% : $(STARTUP) $(DEPLIBS)

setup ::
	%mkdirs_q $(OBJDIR%(id)) %(dir)

clean ::
	-@$(RM) $(OBJDIR%(id))

%end

#------------------------------------------------------------------------------
# Common code that is used to build statically linked programs
#
%define make_prog_setup mmake=/A startup=$(AROS_LIB)/startup.o id=
.PHONY : %(mmake) %(mmake)-clean %(mmake)-quick
#MM
%(mmake)-clean : clean
#MM
%(mmake)-quick : %(mmake)

%make_use_linklibs libs=LIBS%(id) startup=%(startup)
%make_common_setup id=%(id)

%end

#------------------------------------------------------------------------------
#   Allow us to use standard link libraries without needing to worry about
#   what they are called, and things like linker flags. This may need to
#   be changed later on to support that kind of thing.
#

%define make_use_linklibs libs=LIBS deps=DEPLIBS prelibs=$(PRELIBS) lib_cflags=LIB_CFLAGS postlibs= startup=$(AROS_LIB)/startup.o module=MODULE
%(libs)       := -L$(LIBDIR) %(prelibs)
%(deps)       :=
%(lib_cflags) :=
STARTUP := %(startup)
ifdef USE_DETACH
STARTUP := $(LIBDIR)/detach.o $(STARTUP)
endif
%(deps) := $(STARTUP)
ifdef USE_AROSLIB
%(libs) := $(%(libs)) -larossupport
%(deps) := $(%(deps)) $(LIBDIR)/libarossupport.a
endif
ifdef USE_AMIGALIB
%(libs) := $(%(libs)) -lamiga
%(deps) := $(%(deps)) $(LIBDIR)/libamiga.a
endif
ifdef USE_ZLIB
%(libs) := $(%(libs)) -larosz
%(deps) := $(%(deps)) $(LIBDIR)/libarosz.a
endif
ifdef USE_EXPATLIB
%(libs) := $(%(libs)) -lexpat
%(deps) := $(%(deps)) $(LIBDIR)/libexpat.a
endif
ifdef USE_COOLIMAGESLIB
%(libs) := $(%(libs)) -lcoolimages
%(deps) := $(%(deps)) $(LIBDIR)/libcoolimages.a
endif
ifdef USE_BGUILIB
%(libs) := $(%(libs)) -lbgui
%(deps) := $(%(deps)) $(LIBDIR)/libbgui.a
endif
ifdef USE_MUILIB
%(libs) := $(%(libs)) -lmui
%(deps) := $(%(deps)) $(LIBDIR)/libmui.a
endif
ifdef USE_REQTOOLSLIB
%(libs) := $(%(libs)) -lreqtoolsstubs
%(deps) := $(%(deps)) $(LIBDIR)/libreqtoolsstubs.a
endif
ifdef USE_HIDDSTUBS
%(libs) := $(%(libs)) -lhiddstubs
%(deps) := $(%(deps)) $(LIBDIR)/libhiddstubs.a
endif

# USE_ROMLIB is a special one to say that this is a shared module, and it
# should use the restricted c.lib. Currently this includes the static parts
# of the normal C lib, but in the future it may contain quite a bit more.

ifdef USE_ROMLIB
%(libs) := $(%(libs)) -lrom
%(deps) := $(%(deps)) $(LIBDIR)/librom.a
endif

ifdef USE_CLIB
# uncomment this if you want to compile by default
# against the shared version of the clib
%(libs) := $(%(libs)) -larosc_shared
%(deps) := $(%(deps)) $(LIBDIR)/libarosc_shared.a

# uncomment this if you want to compile by default
# against the static version of the clib
#%(libs) := $(%(libs)) -larosc
#%(deps) := $(%(deps)) $(LIBDIR)/libarosc.a
else
    ifdef USE_CLIB_SHARED
	%(libs) := $(%(libs)) -larosc_shared
	%(deps) := $(%(deps)) $(LIBDIR)/libarosc_shared.a
    else
	ifdef USE_CLIB_STATIC
	    %(libs) := $(%(libs)) -larosc
	    %(deps) := $(%(deps)) $(LIBDIR)/libarosc.a
	else
	    ifdef USE_CLIB_LIBRARY
	        %(libs) := $(%(libs)) -larosc_shared
		%(deps) := $(%(deps)) $(LIBDIR)/libarosc_shared.a
		%(lib_cflags) := $(%(lib_cflags)) -I$(TOP)/rom/exec -D_CLIB_LIBRARY_
	    endif		
	endif
    endif
endif

# m.lib MUST come after c.lib in it's various incarnations.
ifdef USE_MLIB
%(libs) := $(%(libs)) -larosm
%(deps) := $(%(deps)) $(LIBDIR)/libarosm.a
endif

# These must always be linked if we are NOT building a module,
# otherwise strange things might happen.
ifndef %(module)
ifndef NO_AUTOINIT
%(libs) := $(%(libs)) -lautoinit
%(deps) := $(%(deps)) $(LIBDIR)/libautoinit.a
endif
endif

%(libs) := $(%(libs)) %(postlibs)

ifeq ($(AROS_TARGET_ARCH),morphos)
%(libs) := $(FORCE_LIBS)
%(deps) := $(FORCE_DEPLIBS)
endif
%end

#------------------------------------------------------------------------------
#   Create a shared object (ie library, device, gadget, hidd, ...)
#
%define make_module_setup mmake=/A objdir=$(OBJDIR) id=
.PHONY : %(mmake) %(mmake)-clean %(mmake)-object-quick %(mmake)-linklib-quick
#MM
%(mmake)-clean : clean

%safe_define var=MODULE%(id) value="$(MODNAME).$(MODTYPE)"
%safe_define var=USE_FUNCTABLE value="yes"
%safe_define var=USE_CPAK value="$(USE_CPAK_DEFAULT)"

%make_use_linklibs libs=LIBS%(id) module=MODULE%(id)
%make_common_setup id=%(id)

# Depending upon the value of MODTYPE, much changes...
MOD_DIR%(id) := bollocks
ifeq ($(MODTYPE),library)
MOD_DIR%(id) := $(AROS_LIBS)
endif
ifeq ($(MODTYPE),device)
MOD_DIR%(id) := $(AROS_DEVS)
endif
ifeq ($(MODTYPE),resource)
MOD_DIR%(id) := $(AROS_MODULES)
endif
ifeq ($(MODTYPE),gadget)
MOD_DIR%(id) := $(AROS_GADGETS)
endif
ifeq ($(MODTYPE),class)
MOD_DIR%(id) := $(AROS_CLASSES)
endif
ifeq ($(MODTYPE),datatype)
MOD_DIR%(id) := $(AROS_DATATYPES)
endif
ifeq ($(MODTYPE),handler)
MOD_DIR%(id) := $(AROS_FS)
endif
ifeq ($(MODTYPE),language)
MOD_DIR%(id) := $(AROS_LOCALE)/Languages
endif
ifeq ($(MODTYPE),module)
MOD_DIR%(id) := $(AROS_MODULES)
endif
ifeq ($(MODTYPE),mcc)
MOD_DIR%(id) := $(CONTRIBDIR)/Zune/Libs/mui
endif
ifeq ($(MODTYPE),mcp)
MOD_DIR%(id) := $(CONTRIBDIR)/Zune/Libs/mui
endif
ifeq ($(MOD_DIR%(id)),bollocks)
$(error You have to set MODTYPE to something other than $(MODTYPE))
endif

# Save these because they may be changed later.
FILES_ALL := $(foreach f,$(FILES),$(f).c)
FUNCS_ALL%(id) := $(foreach f,$(FUNCS),$(f).c)


%end

%define make_module_common dflags=$(CFLAGS) id=
# You need to put the $(OBJDIR) rules first, because they are more specific.
# and that affects the way that GNU Make binds its dependencies.
#
# Note that if you wish to use a $(OBJDIR)/%.c rather than $(ARCH)/blah/%.c
# or $(CPU)/blah/%.c then you will have to specify that manually. Shouldn't
# happen though.
$(OBJDIR%(id))/%.o : $(OBJDIR%(id))/%.c
	%compile_q cmd=$(TARGET_CC) opt=$(CFLAGS%(id))

$(OBJDIR%(id))/%.so : $(OBJDIR%(id))/%.c
	%compile_q cmd=$(TARGET_CC) opt="$(SHARED_CFLAGS) $(CFLAGS%(id))"

$(OBJDIR%(id))/%.d : $(OBJDIR%(id))/%.c
	%mkdepend_q flags=%(dflags)

$(OBJDIR%(id))/%.o : %.c
	%compile_q cmd=$(TARGET_CC) opt=$(CFLAGS%(id))

$(OBJDIR%(id))/%.so : %.c
	%compile_q cmd=$(TARGET_CC) opt="$(SHARED_CFLAGS) $(CFLAGS%(id))"

$(OBJDIR%(id))/%.d : %.c
	%mkdepend_q flags=%(dflags)

ifeq ($(USE_LIBDEFS),yes)
LIBDEFS := libdefs.h
%libdefs_rule
endif

#MM
setup :: $(LIBDEFS)
	%mkdirs_q  $(OBJDIR%(id)) $(LIBDIR) $(MOD_DIR%(id))

#MM
setup-morphos :: $(LIBDEFS)
	%mkdirs_q  $(OBJDIR%(id)) $(LIBDIR) $(MOD_DIR%(id))

clean ::
	-@$(RM) $(OBJDIR%(id))

%end

#-------------------------------------------------------------------------
# Link a module based upon a number of arguments and the standard $(LIBS)
# and $(DEPLIBS) make variables.
#
%define link_module_q err="$(notdir $@).err" objs=/A endtag= id=
	@$(ECHO) "Building $(notdir $@) ..."
	@if $(STATIC_LD) $(STATIC_LDFLAGS) $(LDFLAGS%(id)) \
	    $(GENMAP) $(OBJDIR%(id))/$(MODULE%(id)).map \
	    %(objs) $(LIBS%(id)) %(endtag) $(COMPILER_LIBS) \
	    -o $@ 2>&1 > $(OBJDIR%(id))/%(err); \
	then \
	    cat $(OBJDIR%(id))/%(err); \
	else \
	    cat $(OBJDIR%(id))/%(err); \
	    exit 1; \
	fi
	
	@if $(TEST) ! -s $(OBJDIR%(id))/%(err) ; then $(RM) $(OBJDIR%(id))/%(err) ; fi
	@$(STRIP) $@
%end


#-------------------------------------------------------------------------
# Use cpak to generate the files functions.[ch]. This requires a small
# check to make sure that $(FUNCS) != "".
#
%define make_module_cpak id=
# Don't even bother generating the file if $(FUNCS) is zero.
ifneq ($(FUNCS),)
ifneq ($(USE_CPAK),no)
F_NAME := functions

$(OBJDIR%(id))/functions.c : $(foreach f,$(FUNCS),$(f).c)
	%mkdir_q $(OBJDIR%(id))
	@$(CPAK) $(patsubst %.c,%,$^)
	@$(MV) functions.c functions.h $(OBJDIR%(id))

endif
endif
%end

#-------------------------------------------------------------------------
# Use the old archtool to generate the files functions.[ch].
#
%define make_module_archtool
F_NAME := functions

$(OBJDIR)/functions.c : $(ARCHIVE)
	@$(ARCHTOOL) -s $@ $(ARCHIVE)

# This version of $(OBJDIR)/functable.c will override the one later.
# Especially with $(FUNCS) == ""...
$(OBJDIR)/functable.c : $(ARCHIVE)
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(ARCHTOOL) -t $(ARCHIVE)
	@$(MV) functable.c $@

# Because $(FUNCS) is "", then USE_FUNCTABLE is set to no, so I have to do
# myself. Similarly, USE_LIBDEFS = no breaks the END_OBJ
FUNC_OBJ := $(OBJDIR)/functable.o
FUNC_SOBJ := $(OBJDIR)/functable.so

%end

#-------------------------------------------------------------------------
# I want to get rid of this. Either use the new archtool, or the scripts
#
%define make_lib_incl_arch name=$(MODNAME) hasrt=
#MM includes-generate : setup-includes
includes-generate : setup \
	    $(INCDIR)/clib/%(name)_protos.h \
	    $(INCDIR)/defines/%(name).h \
	    $(INCDIR)/inline/%(name).h \
	    $(INCDIR)/proto/%(name).h \
	    $(GENINCDIR)/clib/%(name)_protos.h \
	    $(GENINCDIR)/defines/%(name).h \
	    $(GENINCDIR)/inline/%(name).h \
	    $(GENINCDIR)/proto/%(name).h
	@$(NOP)

clean ::
	@$(RM) \
	    $(AROS_INCLUDES)/clib/%(name)_protos.h \
	    $(AROS_INCLUDES)/defines/%(name).h \
	    $(AROS_INCLUDES)/inline/%(name).h \
	    $(AROS_INCLUDES)/proto/%(name).h \
	    $(GENINCDIR)/clib/%(name)_protos.h \
	    $(GENINCDIR)/defines/%(name).h \
	    $(GENINCDIR)/inline/%(name).h \
	    $(GENINCDIR)/proto/%(name).h

_HEADER_DEPS := mmakefile.src $(wildcard headers.tmpl) libdefs.h

$(GENINCDIR)/pragmas/%(name)_pragmas.h \
    $(GENINCDIR)/clib/%(name)_protos.h \
    $(GENINCDIR)/defines/%(name).h \
    $(GENINCDIR)/inline/%(name).h \
    $(GENINCDIR)/proto/%(name).h : $(_HEADER_DEPS)
	@$(ARCHTOOL) -I $(GENINCDIR) $(ARCHIVE)

$(AROS_INCLUDES)/clib/%(name)_protos.h : $(GENINCDIR)/clib/%(name)_protos.h
	@$(CP) $< $@

$(AROS_INCLUDES)/defines/%(name).h : $(GENINCDIR)/defines/%(name).h
	@$(CP) $< $@

$(AROS_INCLUDES)/inline/%(name).h : $(GENINCDIR)/inline/%(name).h
	@$(CP) $< $@

$(AROS_INCLUDES)/proto/%(name).h : $(GENINCDIR)/proto/%(name).h
	@$(CP) $< $@
%end

#-------------------------------------------------------------------------------
#   Generate a module like a normal shared library/device/etc that consists
#   of multiple files, with an init file, function table, and an endtag at the
#   end.
#
%define make_module dflags=$(CFLAGS) mmake=/A id=
%safe_define var=INIT_FILE value="$(MODNAME)_init"
%safe_define var=END_FILE value="endtag"
%safe_define var=USE_ENDTAG value="yes"
%safe_define var=USE_LIBDEFS value="yes"

#MM
%(mmake)-module-quick : %(mmake)-module
#MM
%(mmake)-linklib-quick : %(mmake)-linklib

#MM %(mmake)-module : %(mmake)
%(mmake)-module : $(MOD_DIR%(id))/$(MODULE%(id))

#MM %(mmake)-linklib : %(mmake)
ifeq ($(MAKE_SHLIB),yes)
%(mmake)-linklib : $(AROSDIR)/lib/lib$(MODNAME).so
else
%(mmake)-linklib : $(AROSDIR)/lib/lib$(MODNAME).a
endif

ifeq ($(USE_LIBDEFS),no)
USE_FUNCTABLE := no
USE_ENDTAG := no
endif

# Don't generate a functable if there is nothing there to do.
ifeq ($(FUNCS),)
   USE_FUNCTABLE := no
endif

# F_NAME might be set by make_module_cpak/make_module_archtool
# It should be set to $(FUNCS) otherwise
ifndef F_NAME
  F_NAME := $(FUNCS)
endif

DEPS := $(DEPS) $(foreach f,$(INIT_FILE) $(FILES) $(F_NAME), $(OBJDIR%(id))/$(f).d)
OBJS := $(foreach f,$(FILES) $(F_NAME), $(OBJDIR%(id))/$(f).o)
SOBJS := $(foreach f,$(FILES) $(F_NAME), $(OBJDIR%(id))/$(f).so)

INIT_OBJ := $(OBJDIR%(id))/$(INIT_FILE).o
INIT_SOBJ := $(OBJDIR%(id))/$(INIT_FILE).so

ifeq ($(USE_FUNCTABLE),yes)
FUNC_OBJ := $(OBJDIR%(id))/functable.o
FUNC_SOBJ := $(OBJDIR%(id))/functable.so
endif
ifeq ($(USE_ENDTAG),yes)
END_OBJ := $(OBJDIR%(id))/endtag.o
END_SOBJ := $(OBJDIR%(id))/endtag.so
endif

# Generate the module from the object files.
ifeq ($(NO_MODULE),yes)
$(MOD_DIR%(id))/$(MODULE%(id)) :
	$(error You cannot make $(MODULE%(id)) into a module)
else
$(MOD_DIR%(id))/$(MODULE%(id)) : $(INIT_OBJ) $(FUNC_OBJ) $(OBJS) $(END_OBJ) $(DEPLIBS)
	%link_module_q objs="$(INIT_OBJ) $(FUNC_OBJ) $(OBJS)" endtag="$(END_OBJ)" id=%(id)
endif

# Make a library. Not sure about the RHS yet.
$(AROSDIR)/lib/lib$(MODNAME).a : $(INIT_OBJ) $(FUNC_OBJ) $(OBJS) $(END_OBJ)
	%mklib_q from=$^

$(AROSDIR)/lib/lib$(MODNAME).so : $(INIT_SOBJ) $(FUNC_SOBJ) $(SOBJS) $(END_SOBJ)
	@$(ECHO) "Linking $(notdir $@)..."
	@$(SHARED_LD) $(SHARED_LDFLAGS) -o $@ $^

# Make a function table
ifeq ($(USE_FUNCTABLE),yes)
$(OBJDIR%(id))/functable.c : $(FUNCS_ALL%(id)) $(BINDIR)/scripts/genfunctable.awk libdefs.h
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCS_ALL%(id)) > $@
endif

# Make the end tag if it is needed.
$(OBJDIR%(id))/endtag.c : libdefs.h
	@$(ECHO) "Generating $(CURDIR)/$(notdir $@)..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

%asm_rule "$(INIT_FILE) $(FILES) $(FUNCS)"
%ctoasm_q

clean ::
	-@$(RM) $(AROS_MODULES)/$(MODULE%(id)) \
	    $(AROSDIR)/lib/lib$(MODNAME).a $(AROSDIR)/lib/lib$(MODNAME).so

%make_module_common dflags=%(dflags) id=%(id)
%end

#--------------------------------------------------------------------------
#   Compile the files $(MODULES) based on single files. It will take a file
#   %.c -> %.o -> %.$(MODTYPE) without generating any of the other regular
#   cruft associated with modules. It also can perform the rule:
#   %.c -> %.o -> %, for those people who don't want an extension.
#
%define make_module_single mmake=/A dflags=$(CFLAGS)
# Munge the linklibs into something that is useful for linking. Don't put
# this before the inclusion of the config/ stuff. This is so that they
# can change the linklibs if necessary.
%make_use_linklibs

$(MOD_DIR)/%.$(MODTYPE) : $(OBJDIR)/%.o $(DEPLIBS)
	%link_module_q objs=$(OBJDIR)/$*.o

$(MOD_DIR)/% : $(OBJDIR)/%.o $(DEPLIBS)
	%link_module_q objs=$(OBJDIR)/$*.o

DEPS := $(DEPS) $(OBJDIR)/$(MODNAME).d

%ctoasm_q

# Use the common rules to generate the rest of the files.
%make_module_common dflags=%(dflags)
%end

%define make_lib_includes name=$(MODNAME) hasrt= id=
#MM includes-generate : setup-includes
includes-generate : setup \
	    $(INCDIR)/clib/%(name)_protos.h \
	    $(INCDIR)/defines/%(name).h \
	    $(INCDIR)/inline/%(name).h \
	    $(INCDIR)/proto/%(name).h \
	    $(GENINCDIR)/clib/%(name)_protos.h \
	    $(GENINCDIR)/defines/%(name).h \
	    $(GENINCDIR)/inline/%(name).h \
	    $(GENINCDIR)/proto/%(name).h
	@$(NOP)

clean ::
	@$(RM) \
	    $(AROS_INCLUDES)/clib/%(name)_protos.h \
	    $(AROS_INCLUDES)/defines/%(name).h \
	    $(AROS_INCLUDES)/inline/%(name).h \
	    $(AROS_INCLUDES)/proto/%(name).h \
	    $(GENINCDIR)/clib/%(name)_protos.h \
	    $(GENINCDIR)/defines/%(name).h \
	    $(GENINCDIR)/inline/%(name).h \
	    $(GENINCDIR)/proto/%(name).h

_HEADER_DEPS := mmakefile.src $(wildcard headers.tmpl) libdefs.h \
	    $(FUNCS_ALL%(id)) \
	    $(SCRIPTDIR)/genshared $(SCRIPTDIR)/genclib.awk \
	    $(SCRIPTDIR)/gendefines.awk $(SCRIPTDIR)/geninline.awk

$(GENINCDIR)/clib/%(name)_protos.h : $(_HEADER_DEPS)
	@$(SCRIPTDIR)/genshared -clib %(hasrt) -prefix $(GENINCDIR) $(FUNCS_ALL%(id))

$(GENINCDIR)/defines/%(name).h : $(_HEADER_DEPS)
	@$(SCRIPTDIR)/genshared -defines %(hasrt) -prefix $(GENINCDIR) $(FUNCS_ALL%(id))

$(GENINCDIR)/inline/%(name).h : $(_HEADER_DEPS)
	@$(SCRIPTDIR)/genshared -inline %(hasrt) -prefix $(GENINCDIR) $(FUNCS_ALL%(id))

$(GENINCDIR)/proto/%(name).h : $(_HEADER_DEPS)
	@$(SCRIPTDIR)/genshared -proto %(hasrt) -prefix $(GENINCDIR) $(FUNCS_ALL%(id))

$(AROS_INCLUDES)/clib/%(name)_protos.h : $(GENINCDIR)/clib/%(name)_protos.h
	@$(CP) $< $@

$(AROS_INCLUDES)/defines/%(name).h : $(GENINCDIR)/defines/%(name).h
	@$(CP) $< $@

$(AROS_INCLUDES)/inline/%(name).h : $(GENINCDIR)/inline/%(name).h
	@$(CP) $< $@

$(AROS_INCLUDES)/proto/%(name).h : $(GENINCDIR)/proto/%(name).h
	@$(CP) $< $@
%end

%define make_hidd_stubs hidd=/A cflags=$(CFLAGS) dflags=$(CFLAGS)
STUBS_SRC := $(foreach f,$(STUBS),$(f).c)
STUBS_OBJ := $(foreach f,$(STUBS),$(OBJDIR)/$(f).o)
STUBS_MEM := $(foreach f,$(STUBS),$(f).o)
STUBS_DEP := $(foreach f,$(STUBS),$(OBJDIR)/$(f).d)
HIDD_LIB := $(AROS_LIB)/libhiddstubs.a

#MM- linklibs: hidd-%(hidd)-stubs
#MM
hidd-%(hidd)-stubs : $(HIDD_LIB)($(STUBS_MEM))

$(HIDD_LIB)($(STUBS_MEM)) : $(STUBS_OBJ)
	%mklib_q from=$^

$(STUBS_OBJ) : $(STUBS_SRC)
	%compile_q cmd=$(TARGET_CC) opt=%(cflags)

$(STUBS_DEP) : $(STUBS_SRC)
	%mkdepend_q flags=%(dflags)

#MM
setup ::
	%mkdirs_q $(OBJDIR) $(LIBDIR)

#MM
clean ::
	-@$(RM) $(HIDD_LIB) $(OBJDIR)

DEPS := $(DEPS) $(STUBS_DEP)

%end
#------------------------------------------------------------------------------
#   Hey! iaint says don't add things here, add them before my other message.
#   The reason is that I'm trying to work out which of macros are still
#   needed, and because of this, I'm trying to keep my additions separate
#   from all the others.
