dnl Copyright © 1997-2016, The AROS Development Team. All rights reserved.
dnl $Id$
dnl
dnl Desc: Autoconf source for target compiler feature detection
dnl Lang: english 

# Note: After file changes, generate features anew and commit _both_ files.
-------------------------

AC_INIT(../mmakefile)
AC_PREREQ(2.61)
AC_CONFIG_AUX_DIR(../scripts/autoconf)

AROS_BUILDDIR=`${PWDCMD-pwd}`
AROS_BUILDDIR_UNIX=${PWD}

srcpwd=`cd ${srcdir} ; ${PWDCMD-pwd}`
SRCDIR=${srcpwd}

NOLINKFLAGS="-nostdlib -nostartfiles"
 LDFLAGS=$NOLINKFLAGS
# The first step is to find the binaries.
AC_PROG_CC

AC_MSG_CHECKING([target config location])
AC_ARG_WITH(config-dir,AC_HELP_STRING([--with-config-dir=VERSION],[Location of generated target config files]),targetcfg_dir="$withval",targetcfg_dir="")
if test "$targetcfg_dir" = ""; then
    AC_MSG_ERROR([missing config directory!])
else
    aros_targetcfg_dir="$targetcfg_dir"
fi
AC_MSG_RESULT($aros_targetcfg_dir)

#-----------------------------------------------------------------------------

# Check if the target compiler supports some features:
#  -flto
#  -floop-block
#  -floop-interchange
#  -floop-strip-mine

AC_MSG_CHECKING([whether ${CC} accepts -flto])
CFLAGS=-flto
AC_TRY_COMPILE(,, aros_lto="yes", aros_lto="no")
AC_MSG_RESULT($aros_lto)
if test "x-$aros_lto" = "x-yes" ; then
    aros_cflags_lto=-flto
fi

AC_MSG_CHECKING([whether ${CC} accepts -floop-block])
CFLAGS=-floop-block
AC_TRY_COMPILE(,, aros_loop_block="yes", aros_loop_block="no")
AC_MSG_RESULT($aros_loop_block)
if test "x-$aros_loop_block" = "x-yes" ; then
    aros_cflags_loop_block=-floop-block
fi

AC_MSG_CHECKING([whether ${CC} accepts -floop-interchange])
CFLAGS=-floop-interchange
AC_TRY_COMPILE(,, aros_loop_interchange="yes", aros_loop_interchange="no")
AC_MSG_RESULT($aros_loop_interchange)
if test "x-$aros_loop_interchange" = "x-yes" ; then
    aros_cflags_loop_interchange=-floop-interchange
fi

AC_MSG_CHECKING([whether ${CC} accepts -floop-strip-mine])
CFLAGS=-floop-strip-mine
AC_TRY_COMPILE(,, aros_loop_strip_mine="yes", aros_loop_strip_mine="no")
AC_MSG_RESULT($aros_loop_strip_mine)
if test "x-$aros_loop_strip_mine" = "x-yes" ; then
    aros_cflags_loop_strip_mine=-floop-strip-mine
fi

AC_MSG_CHECKING([whether ${CC} accepts -iquote])
CFLAGS="-iquote."
AC_TRY_COMPILE(,, has_iquote="yes", has_iquote="no")
AC_MSG_RESULT($has_iquote)
if test "x-$has_iquote" = "x-yes" ; then
    aros_cflags_iquote=-iquote
    aros_cflags_iquote_end=
else
    aros_cflags_iquote=-I
    aros_cflags_iquote_end=-I-
fi

#-----------------------------------------------------------------------------

# Check if the target compiler supports some options used for de-linting:
#  -Wunused-command-line-argument
#  -Wunknown-warning-option
#  -Wunused-but-set-variable
#  -Wstrict-aliasing
#  -Warray-bounds
#  -Wenum-compare
#  -Wstrict-prototypes
#  -Wstrict-overflow
#  -Wformat-security
#  -Wmisleading-indentation
#  -Wnonnull-compare
#  -Wunused
#  -Wunused-value
#  -Wunused-variable
#  -Wunused-function
#  -Wunused-parameter
#  -Wuninitialized
#  -Wmaybe-uninitialized
#  -Wimplicit-function-declaration
#  -Wformat
#  -Wparentheses
#  -Wchar-subscripts
#  -Wendif-labels
#  -Wformat-contains-nul
#  -Wimplicit-int
#  -Waggressive-loop-optimizations
#  -Wcpp
#  -Wswitch
#  -Wdiscarded-qualifiers
#  -Wsequence-point
#  -Wunknown-pragmas
#  -Wdiscarded-array-qualifiers
#  -Wint-conversion
#  -Wint-to-pointer-cast
#  -Wpointer-to-int-cast
#  -Wunused-const-variable
#  -Wwrite-strings 
#  -Wcomment
#  -Wincompatible-pointer-types
#  -Wbool-compare
#  -Wlogical-not-parentheses
#  -Wpointer-sign
#  -Wshift-overflow
#  -Wframe-address
#  -Wdeprecated-declarations
#  -Wsign-compare
#  -Wattributes
#  -Woverflow
#  -Wunused-local-typedefs
#  -Wmissing-braces
#  -Wconversion-null
#  -Wnarrowing
#  -Wvolatile-register-var
#  -Wsizeof-pointer-memaccess
#  -Wreturn-type
#  -Wformat-zero-length

AC_MSG_CHECKING([whether ${CC} accepts -Wunused-command-line-argument])
CFLAGS=-Wunused-command-line-argument
AC_TRY_COMPILE(,, aros_unused_command_line_argument="yes", aros_unused_command_line_argument="no")
AC_MSG_RESULT($aros_unused_command_line_argument)
if test "x-$aros_unused_command_line_argument" = "x-yes" ; then
    aros_cflags_unused_command_line_argument=-Wno-unused-command-line-argument
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunknown-warning-option])
CFLAGS=-Wunknown-warning-option
AC_TRY_COMPILE(,, aros_unknown_warning_option="yes", aros_unknown_warning_option="no")
AC_MSG_RESULT($aros_unknown_warning_option)
if test "x-$aros_unknown_warning_option" = "x-yes" ; then
    aros_cflags_unknown_warning_option=-Wno-unknown-warning-option
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunused-but-set-variable])
CFLAGS=-Wunused-but-set-variable
AC_TRY_COMPILE(,, aros_unused_but_set_variable="yes", aros_unused_but_set_variable="no")
AC_MSG_RESULT($aros_unused_but_set_variable)
if test "x-$aros_unused_but_set_variable" = "x-yes" ; then
    aros_cflags_unused_but_set_variable=-Wno-unused-but-set-variable
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wstrict-aliasing])
CFLAGS=-Wstrict-aliasing
AC_TRY_COMPILE(,, aros_strict_aliasing="yes", aros_strict_aliasing="no")
AC_MSG_RESULT($aros_strict_aliasing)
if test "x-$aros_strict_aliasing" = "x-yes" ; then
    aros_cflags_strict_aliasing=-Wno-strict-aliasing
fi

AC_MSG_CHECKING([whether ${CC} accepts -Warray-bounds])
CFLAGS=-Warray-bounds
AC_TRY_COMPILE(,, aros_array_bounds="yes", aros_array_bounds="no")
AC_MSG_RESULT($aros_array_bounds)
if test "x-$aros_array_bounds" = "x-yes" ; then
    aros_cflags_array_bounds=-Wno-array-bounds
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wenum-compare])
CFLAGS=-Wenum-compare
AC_TRY_COMPILE(,, aros_enum_compare="yes", aros_enum_compare="no")
AC_MSG_RESULT($aros_enum_compare)
if test "x-$aros_enum_compare" = "x-yes" ; then
    aros_cflags_enum_compare=-Wno-enum-compare
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wstrict-prototypes])
CFLAGS=-Wstrict-prototypes
AC_TRY_COMPILE(,, aros_strict_prototypes="yes", aros_strict_prototypes="no")
AC_MSG_RESULT($aros_strict_prototypes)
if test "x-$aros_strict_prototypes" = "x-yes" ; then
    aros_cflags_strict_prototypes=-Wno-strict-prototypes
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wstrict-overflow])
CFLAGS=-Wstrict-overflow
AC_TRY_COMPILE(,, aros_strict_overflow="yes", aros_strict_overflow="no")
AC_MSG_RESULT($aros_strict_overflow)
if test "x-$aros_strict_overflow" = "x-yes" ; then
    aros_cflags_strict_overflow=-Wno-strict-overflow
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wformat-security])
CFLAGS=-Wformat-security
AC_TRY_COMPILE(,, aros_format_security="yes", aros_format_security="no")
AC_MSG_RESULT($aros_format_security)
if test "x-$aros_format_security" = "x-yes" ; then
    aros_cflags_format_security=-Wno-format-security
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wmisleading-indentation])
CFLAGS=-Wmisleading-indentation
AC_TRY_COMPILE(,, aros_misleading_indentation="yes", aros_misleading_indentation="no")
AC_MSG_RESULT($aros_misleading_indentation)
if test "x-$aros_misleading_indentation" = "x-yes" ; then
    aros_cflags_misleading_indentation=-Wno-misleading-indentation
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wnonnull-compare])
CFLAGS=-Wnonnull-compare
AC_TRY_COMPILE(,, aros_nonnull_compare="yes", aros_nonnull_compare="no")
AC_MSG_RESULT($aros_nonnull_compare)
if test "x-$aros_nonnull_compare" = "x-yes" ; then
    aros_cflags_nonnull_compare=-Wno-nonnull-compare
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunused])
CFLAGS=-Wunused
AC_TRY_COMPILE(,, aros_unused="yes", aros_unused="no")
AC_MSG_RESULT($aros_unused)
if test "x-$aros_unused" = "x-yes" ; then
    aros_cflags_unused=-Wno-unused
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunused-value])
CFLAGS=-Wunused-value
AC_TRY_COMPILE(,, aros_unused_value="yes", aros_unused_value="no")
AC_MSG_RESULT($aros_unused_value)
if test "x-$aros_unused_value" = "x-yes" ; then
    aros_cflags_unused_value=-Wno-unused-value
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunused-variable])
CFLAGS=-Wunused-variable
AC_TRY_COMPILE(,, aros_unused_variable="yes", aros_unused_variable="no")
AC_MSG_RESULT($aros_unused_variable)
if test "x-$aros_unused_variable" = "x-yes" ; then
    aros_cflags_unused_variable=-Wno-unused-variable
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunused-function])
CFLAGS=-Wunused-function
AC_TRY_COMPILE(,, aros_unused_function="yes", aros_unused_function="no")
AC_MSG_RESULT($aros_unused_function)
if test "x-$aros_unused_function" = "x-yes" ; then
    aros_cflags_unused_function=-Wno-unused-function
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunused-parameter])
CFLAGS=-Wunused-parameter
AC_TRY_COMPILE(,, aros_unused_parameter="yes", aros_unused_parameter="no")
AC_MSG_RESULT($aros_unused_parameter)
if test "x-$aros_unused_parameter" = "x-yes" ; then
    aros_cflags_unused_parameter=-Wno-unused-parameter
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wuninitialized])
CFLAGS=-Wuninitialized
AC_TRY_COMPILE(,, aros_uninitialized="yes", aros_uninitialized="no")
AC_MSG_RESULT($aros_uninitialized)
if test "x-$aros_uninitialized" = "x-yes" ; then
    aros_cflags_uninitialized=-Wno-uninitialized
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wmaybe-uninitialized])
CFLAGS=-Wmaybe-uninitialized
AC_TRY_COMPILE(,, aros_maybe_uninitialized="yes", aros_maybe_uninitialized="no")
AC_MSG_RESULT($aros_maybe_uninitialized)
if test "x-$aros_maybe_uninitialized" = "x-yes" ; then
    aros_cflags_maybe_uninitialized=-Wno-maybe-uninitialized
else
    aros_cflags_maybe_uninitialized=$aros_cflags_uninitialized
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wimplicit-function-declaration])
CFLAGS=-Wimplicit-function-declaration
AC_TRY_COMPILE(,, aros_implicit_function_declaration="yes", aros_implicit_function_declaration="no")
AC_MSG_RESULT($aros_implicit_function_declaration)
if test "x-$aros_implicit_function_declaration" = "x-yes" ; then
    aros_cflags_implicit_function_declaration=-Wno-implicit-function-declaration
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wformat])
CFLAGS=-Wformat
AC_TRY_COMPILE(,, aros_format="yes", aros_format="no")
AC_MSG_RESULT($aros_format)
if test "x-$aros_format" = "x-yes" ; then
    aros_cflags_format=-Wno-format
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wparentheses])
CFLAGS=-Wparentheses
AC_TRY_COMPILE(,, aros_parentheses="yes", aros_parentheses="no")
AC_MSG_RESULT($aros_parentheses)
if test "x-$aros_parentheses" = "x-yes" ; then
    aros_cflags_parentheses=-Wno-parentheses
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wchar-subscripts])
CFLAGS=-Wchar-subscripts
AC_TRY_COMPILE(,, aros_char_subscripts="yes", aros_char_subscripts="no")
AC_MSG_RESULT($aros_char_subscripts)
if test "x-$aros_char_subscripts" = "x-yes" ; then
    aros_cflags_char_subscripts=-Wno-char-subscripts
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wendif-labels])
CFLAGS=-Wendif-labels
AC_TRY_COMPILE(,, aros_endif_labels="yes", aros_endif_labels="no")
AC_MSG_RESULT($aros_endif_labels)
if test "x-$aros_endif_labels" = "x-yes" ; then
    aros_cflags_endif_labels=-Wno-endif-labels
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wformat-contains-nul])
CFLAGS=-Wformat-contains-nul
AC_TRY_COMPILE(,, aros_format_contains_nul="yes", aros_format_contains_nul="no")
AC_MSG_RESULT($aros_format_contains_nul)
if test "x-$aros_format_contains_nul" = "x-yes" ; then
    aros_cflags_format_contains_nul=-Wno-format-contains-nul
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wimplicit-int])
CFLAGS=-Wimplicit-int
AC_TRY_COMPILE(,, aros_implicit_int="yes", aros_implicit_int="no")
AC_MSG_RESULT($aros_implicit_int)
if test "x-$aros_implicit_int" = "x-yes" ; then
    aros_cflags_implicit_int=-Wno-implicit-int
fi

AC_MSG_CHECKING([whether ${CC} accepts -Waggressive-loop-optimizations])
CFLAGS=-Waggressive-loop-optimizations
AC_TRY_COMPILE(,, aros_aggressive_loop_optimizations="yes", aros_aggressive_loop_optimizations="no")
AC_MSG_RESULT($aros_aggressive_loop_optimizations)
if test "x-$aros_aggressive_loop_optimizations" = "x-yes" ; then
    aros_cflags_aggressive_loop_optimizations=-Wno-aggressive-loop-optimizations
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wcpp])
CFLAGS=-Wcpp
AC_TRY_COMPILE(,, aros_cpp="yes", aros_cpp="no")
AC_MSG_RESULT($aros_cpp)
if test "x-$aros_cpp" = "x-yes" ; then
    aros_cflags_cpp=-Wno-cpp
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wswitch])
CFLAGS=-Wswitch
AC_TRY_COMPILE(,, aros_switch="yes", aros_switch="no")
AC_MSG_RESULT($aros_switch)
if test "x-$aros_switch" = "x-yes" ; then
    aros_cflags_switch=-Wno-switch
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wdiscarded-qualifiers])
CFLAGS=-Wdiscarded-qualifiers
AC_TRY_COMPILE(,, aros_discarded_qualifiers="yes", aros_discarded_qualifiers="no")
AC_MSG_RESULT($aros_discarded_qualifiers)
if test "x-$aros_discarded_qualifiers" = "x-yes" ; then
    aros_cflags_discarded_qualifiers=-Wno-discarded-qualifiers
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wsequence-point])
CFLAGS=-Wsequence-point
AC_TRY_COMPILE(,, aros_sequence_point="yes", aros_sequence_point="no")
AC_MSG_RESULT($aros_sequence_point)
if test "x-$aros_sequence_point" = "x-yes" ; then
    aros_cflags_sequence_point=-Wno-sequence-point
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunknown-pragmas])
CFLAGS=-Wunknown-pragmas
AC_TRY_COMPILE(,, aros_unknown_pragmas="yes", aros_unknown_pragmas="no")
AC_MSG_RESULT($aros_unknown_pragmas)
if test "x-$aros_unknown_pragmas" = "x-yes" ; then
    aros_cflags_unknown_pragmas=-Wno-unknown-pragmas
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wdiscarded-array-qualifiers])
CFLAGS=-Wdiscarded-array-qualifiers
AC_TRY_COMPILE(,, aros_discarded_array_qualifiers="yes", aros_discarded_array_qualifiers="no")
AC_MSG_RESULT($aros_discarded_array_qualifiers)
if test "x-$aros_discarded_array_qualifiers" = "x-yes" ; then
    aros_cflags_discarded_array_qualifiers=-Wno-discarded-array-qualifiers
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wint-conversion])
CFLAGS=-Wint-conversion
AC_TRY_COMPILE(,, aros_int_conversion="yes", aros_int_conversion="no")
AC_MSG_RESULT($aros_int_conversion)
if test "x-$aros_int_conversion" = "x-yes" ; then
    aros_cflags_int_conversion=-Wno-int-conversion
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wint-to-pointer-cast])
CFLAGS=-Wint-to-pointer-cast
AC_TRY_COMPILE(,, aros_int_to_pointer_cast="yes", aros_int_to_pointer_cast="no")
AC_MSG_RESULT($aros_int_to_pointer_cast)
if test "x-$aros_int_to_pointer_cast" = "x-yes" ; then
    aros_cflags_int_to_pointer_cast=-Wno-int-to-pointer-cast
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wpointer-to-int-cast])
CFLAGS=-Wpointer-to-int-cast
AC_TRY_COMPILE(,, aros_pointer_to_int_cast="yes", aros_pointer_to_int_cast="no")
AC_MSG_RESULT($aros_pointer_to_int_cast)
if test "x-$aros_pointer_to_int_cast" = "x-yes" ; then
    aros_cflags_pointer_to_int_cast=-Wno-pointer-to-int-cast
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunused-const-variable])
CFLAGS=-Wunused-const-variable
AC_TRY_COMPILE(,, aros_unused_const_variable="yes", aros_unused_const_variable="no")
AC_MSG_RESULT($aros_unused_const_variable)
if test "x-$aros_unused_const_variable" = "x-yes" ; then
    aros_cflags_unused_const_variable=-Wno-unused-const-variable
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wwrite-strings])
CFLAGS=-Wwrite-strings
AC_TRY_COMPILE(,, aros_write_strings="yes", aros_write_strings="no")
AC_MSG_RESULT($aros_write_strings)
if test "x-$aros_write_strings" = "x-yes" ; then
    aros_cflags_write_strings=-Wno-write-strings
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wcomment])
CFLAGS=-Wcomment
AC_TRY_COMPILE(,, aros_comment="yes", aros_comment="no")
AC_MSG_RESULT($aros_comment)
if test "x-$aros_comment" = "x-yes" ; then
    aros_cflags_comment=-Wno-comment
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wincompatible-pointer-types])
CFLAGS=-Wincompatible-pointer-types
AC_TRY_COMPILE(,, aros_incompatible_pointer_types="yes", aros_incompatible_pointer_types="no")
AC_MSG_RESULT($aros_incompatible_pointer_types)
if test "x-$aros_incompatible_pointer_types" = "x-yes" ; then
    aros_cflags_incompatible_pointer_types=-Wno-incompatible-pointer-types
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wbool-compare])
CFLAGS=-Wbool-compare
AC_TRY_COMPILE(,, aros_bool_compare="yes", aros_bool_compare="no")
AC_MSG_RESULT($aros_bool_compare)
if test "x-$aros_bool_compare" = "x-yes" ; then
    aros_cflags_bool_compare=-Wno-bool-compare
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wlogical-not-parentheses])
CFLAGS=-Wlogical-not-parentheses
AC_TRY_COMPILE(,, aros_logical_not_parentheses="yes", aros_logical_not_parentheses="no")
AC_MSG_RESULT($aros_logical_not_parentheses)
if test "x-$aros_logical_not_parentheses" = "x-yes" ; then
    aros_cflags_logical_not_parentheses=-Wno-logical-not-parentheses
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wpointer-sign])
CFLAGS=-Wpointer-sign
AC_TRY_COMPILE(,, aros_pointer_sign="yes", aros_pointer_sign="no")
AC_MSG_RESULT($aros_pointer_sign)
if test "x-$aros_pointer_sign" = "x-yes" ; then
    aros_cflags_pointer_sign=-Wno-pointer-sign
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wshift-overflow])
CFLAGS=-Wshift-overflow
AC_TRY_COMPILE(,, aros_shift_overflow="yes", aros_shift_overflow="no")
AC_MSG_RESULT($aros_shift_overflow)
if test "x-$aros_shift_overflow" = "x-yes" ; then
    aros_cflags_shift_overflow=-Wno-shift-overflow
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wframe-address])
CFLAGS=-Wframe-address
AC_TRY_COMPILE(,, aros_frame_address="yes", aros_frame_address="no")
AC_MSG_RESULT($aros_frame_address)
if test "x-$aros_frame_address" = "x-yes" ; then
    aros_cflags_frame_address=-Wno-frame-address
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wdeprecated-declarations])
CFLAGS=-Wdeprecated-declarations
AC_TRY_COMPILE(,, aros_deprecated_declarations="yes", aros_deprecated_declarations="no")
AC_MSG_RESULT($aros_deprecated_declarations)
if test "x-$aros_deprecated_declarations" = "x-yes" ; then
    aros_cflags_deprecated_declarations=-Wno-deprecated-declarations
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wsign-compare])
CFLAGS=-Wsign-compare
AC_TRY_COMPILE(,, aros_sign_compare="yes", aros_sign_compare="no")
AC_MSG_RESULT($aros_sign_compare)
if test "x-$aros_sign_compare" = "x-yes" ; then
    aros_cflags_sign_compare=-Wno-sign-compare
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wattributes])
CFLAGS=-Wattributes
AC_TRY_COMPILE(,, aros_attributes="yes", aros_attributes="no")
AC_MSG_RESULT($aros_attributes)
if test "x-$aros_attributes" = "x-yes" ; then
    aros_cflags_attributes=-Wno-attributes
fi

AC_MSG_CHECKING([whether ${CC} accepts -Woverflow])
CFLAGS=-Woverflow
AC_TRY_COMPILE(,, aros_overflow="yes", aros_overflow="no")
AC_MSG_RESULT($aros_overflow)
if test "x-$aros_overflow" = "x-yes" ; then
    aros_cflags_overflow=-Wno-overflow
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wunused-local-typedefs])
CFLAGS=-Wunused-local-typedefs
AC_TRY_COMPILE(,, aros_unused_local_typedefs="yes", aros_unused_local_typedefs="no")
AC_MSG_RESULT($aros_unused_local_typedefs)
if test "x-$aros_unused_local_typedefs" = "x-yes" ; then
    aros_cflags_unused_local_typedefs=-Wno-unused-local-typedefs
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wmissing-braces])
CFLAGS=-Wmissing-braces
AC_TRY_COMPILE(,, aros_missing_braces="yes", aros_missing_braces="no")
AC_MSG_RESULT($aros_missing_braces)
if test "x-$aros_missing_braces" = "x-yes" ; then
    aros_cflags_missing_braces=-Wno-missing-braces
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wconversion-null])
CFLAGS=-Wconversion-null
AC_TRY_COMPILE(,, aros_conversion_null="yes", aros_conversion_null="no")
AC_MSG_RESULT($aros_conversion_null)
if test "x-$aros_conversion_null" = "x-yes" ; then
    aros_cflags_conversion_null=-Wno-conversion-null
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wnarrowing])
CFLAGS=-Wnarrowing
AC_TRY_COMPILE(,, aros_narrowing="yes", aros_narrowing="no")
AC_MSG_RESULT($aros_narrowing)
if test "x-$aros_narrowing" = "x-yes" ; then
    aros_cflags_narrowing=-Wno-narrowing
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wvolatile-register-var])
CFLAGS=-Wvolatile-register-var
AC_TRY_COMPILE(,, aros_volatile_register_var="yes", aros_volatile_register_var="no")
AC_MSG_RESULT($aros_volatile_register_var)
if test "x-$aros_volatile_register_var" = "x-yes" ; then
    aros_cflags_volatile_register_var=-Wno-volatile-register-var
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wsizeof-pointer-memaccess])
CFLAGS=-Wsizeof-pointer-memaccess
AC_TRY_COMPILE(,, aros_sizeof_pointer_memaccess="yes", aros_sizeof_pointer_memaccess="no")
AC_MSG_RESULT($aros_sizeof_pointer_memaccess)
if test "x-$aros_sizeof_pointer_memaccess" = "x-yes" ; then
    aros_cflags_sizeof_pointer_memaccess=-Wno-sizeof-pointer-memaccess
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wreturn-type])
CFLAGS=-Wreturn-type
AC_TRY_COMPILE(,, aros_return_type="yes", aros_return_type="no")
AC_MSG_RESULT($aros_return_type)
if test "x-$aros_return_type" = "x-yes" ; then
    aros_cflags_return_type=-Wno-return-type
fi

AC_MSG_CHECKING([whether ${CC} accepts -Wformat-zero-length])
CFLAGS=-Wformat-zero-length
AC_TRY_COMPILE(,, aros_format_zero_length="yes", aros_format_zero_length="no")
AC_MSG_RESULT($aros_format_zero_length)
if test "x-$aros_format_zero_length" = "x-yes" ; then
    aros_cflags_format_zero_length=-Wno-format-zero-length
fi

AC_SUBST(aros_cflags_lto)
AC_SUBST(aros_cflags_loop_block)
AC_SUBST(aros_cflags_loop_interchange)
AC_SUBST(aros_cflags_loop_strip_mine)

AC_SUBST(aros_cflags_iquote)
AC_SUBST(aros_cflags_iquote_end)

AC_SUBST(aros_cflags_unused_command_line_argument)
AC_SUBST(aros_cflags_unknown_warning_option)
AC_SUBST(aros_cflags_unused_but_set_variable)
AC_SUBST(aros_cflags_strict_aliasing)
AC_SUBST(aros_cflags_array_bounds)
AC_SUBST(aros_cflags_enum_compare)
AC_SUBST(aros_cflags_strict_prototypes)
AC_SUBST(aros_cflags_strict_overflow)
AC_SUBST(aros_cflags_format_security)
AC_SUBST(aros_cflags_misleading_indentation)
AC_SUBST(aros_cflags_nonnull_compare)
AC_SUBST(aros_cflags_unused)
AC_SUBST(aros_cflags_unused_value)
AC_SUBST(aros_cflags_unused_variable)
AC_SUBST(aros_cflags_unused_function)
AC_SUBST(aros_cflags_unused_parameter)
AC_SUBST(aros_cflags_uninitialized)
AC_SUBST(aros_cflags_maybe_uninitialized)
AC_SUBST(aros_cflags_implicit_function_declaration)
AC_SUBST(aros_cflags_format)
AC_SUBST(aros_cflags_parentheses)
AC_SUBST(aros_cflags_char_subscripts)
AC_SUBST(aros_cflags_endif_labels)
AC_SUBST(aros_cflags_format_contains_nul)
AC_SUBST(aros_cflags_implicit_int)
AC_SUBST(aros_cflags_aggressive_loop_optimizations)
AC_SUBST(aros_cflags_cpp)
AC_SUBST(aros_cflags_switch)
AC_SUBST(aros_cflags_discarded_qualifiers)
AC_SUBST(aros_cflags_sequence_point)
AC_SUBST(aros_cflags_unknown_pragmas)
AC_SUBST(aros_cflags_discarded_array_qualifiers)
AC_SUBST(aros_cflags_int_conversion)
AC_SUBST(aros_cflags_int_to_pointer_cast)
AC_SUBST(aros_cflags_pointer_to_int_cast)
AC_SUBST(aros_cflags_unused_const_variable)
AC_SUBST(aros_cflags_write_strings)
AC_SUBST(aros_cflags_comment)
AC_SUBST(aros_cflags_incompatible_pointer_types)
AC_SUBST(aros_cflags_bool_compare)
AC_SUBST(aros_cflags_logical_not_parentheses)
AC_SUBST(aros_cflags_pointer_sign)
AC_SUBST(aros_cflags_shift_overflow)
AC_SUBST(aros_cflags_frame_address)
AC_SUBST(aros_cflags_deprecated_declarations)
AC_SUBST(aros_cflags_sign_compare)
AC_SUBST(aros_cflags_attributes)
AC_SUBST(aros_cflags_overflow)
AC_SUBST(aros_cflags_unused_local_typedefs)
AC_SUBST(aros_cflags_missing_braces)
AC_SUBST(aros_cflags_conversion_null)
AC_SUBST(aros_cflags_narrowing)
AC_SUBST(aros_cflags_volatile_register_var)
AC_SUBST(aros_cflags_sizeof_pointer_memaccess)
AC_SUBST(aros_cflags_return_type)
AC_SUBST(aros_cflags_format_zero_length)

AC_CONFIG_FILES(
    ${aros_targetcfg_dir}/compiler.cfg:compiler.cfg.in
)

AC_OUTPUT
