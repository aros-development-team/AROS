<contents>
<item>
    <dir>amiga</dir>
    Code to make AROS work on the Amiga itself. Currently
	the emulation is nonexistent, but we work on boot code
	(found in <shell>boot/</shell>).

</item>

<item>
    <file>config.h</file>
    <p>This is a generated include file. It's generated by
	<filename>AROS/configure</filename> and will appear in the include
	tree as <filename>aros/config.h</filename>. The following information
	can be found in this file:</p>

	<description>
	<li>
	<item>AROS_FLAVOUR</item> What version of AROS should be
		generated ? A native (binary compatible) one
		(AROS_FLAVOUR_NATIVE) ? A standalone OS
		(AROS_FLAVOUR_STANDALONE) ? An emulation which
		runs under another OS (AROS_FLAVOUR_EMULATION) ?
		A link library which allows to link native
		applications (ie. ones which behave like any
		other app on another OS) (AROS_FLAVOUR_LINKLIB) ?

		Note that not all flavours are available on all
		hardwares/OS combinations. To use this <code>#define</code>,
		write something like
		<code>#if AROS_FLAVOUR==AROS_FLAVOUR_NATIVE</code>.
	</li>

	</description>

</item>

<item>
    <dir>dummy</dir>
    C source for kernel functions. These will not produce
	correct code to compile the kernel but when you compile
	and disassemble these, you will have a good starting point
	to write the assembler functions for the kernel.

</item>

<item>
    <dir>freebsd</dir>
    Code to make AROS work as an emulation under
	FreeBSD.

</item>

<item>
    <file>host.cfg</file>
    <p>This file is included by all makefiles and
	generated by <filename>AROS/configure</filename>. It defines the
	following Make variables:</p>

	<description>
	<li>
	<item>$(APP_CFLAGS)</item> Flags which replace
		<shell>$(COMMON_CFLAGS)</shell> when code for inside
		the AROS shell is to be compiled (not linked).
	</li>

	<li>
	<item>$(ARCH)</item> What kind of OS is this ? Values are
		for example <shell>linux</shell>, <shell>freebsd</shell>,
		<shell>hpux</shell>, <shell>netbsd</shell>, <shell>amiga</shell>, etc.

	</li>

	<li>
	<item>$(COMMON_AFLAGS)</item> Flags which must always be passed
		to <shell>$(AS)</shell>.

	</li>

	<li>
	<item>$(COMMON_CFLAGS)</item> Flags, which must always appear
		in <shell>$(CFLAGS)</shell> for <shell>$(CC)</shell>.

	</li>

	<li>
	<item>$(FLAVOUR)</item> What flavour of AROS should be
		generated ? The possible values are <shell>native</shell>,
		<shell>standalone</shell>, <shell>emulation</shell> or
		<shell>linklib</shell>.

	</li>

	<li>
	<item>$(GUI_CCFLAGS)</item> Flags, which must be passed to
		$(CC) when code is to be compiled which
		uses the native GUI (eg. 
                <shell>-I/usr/X11R6/include</shell>).

	</li>

	<li>
	<item>$(GUI_INCDIR)</item> Directory where the include files for
		the native GUI can be found.

	</li>

	<li>
	<item>$(GUI_LIBDIR)</item> Directory where link libraries for the
		GUI of the native OS can be found (eg.
		<shell>/usr/X11R6/lib</shell>).

	</li>

	<li>
	<item>$(GUI_LIBFLAGS)</item> Libraries against which to link
		if you need the native GUI (eg.
		<shell>-lX11</shell>).

	</li>

	<li>
	<item>$(GUI_LDFLAGS)</item> Flags, which must be passed to the
		linker when linking code which requires the native
		GUI (eg. the kernel or applications for flavour
		linklib).

	</li>

	<li>
	<item>$(ILDFLAGS)</item> Flags which must be passed to
		<shell>$(CC)</shell> when code is to be linked
		for use in the AROS shell.

	</li>

	<li>
	<item>$(KERNEL)</item> What kind of CPU is this ? Possible
		values are for example <shell>m68k-native</shell>,
		<shell>m68k-emul</shell>, <shell>i386</shell>, <shell>hppa9</shell>, etc.

	</li>

	<li>
	<item>$(MKDEPEND)</item> Program to be called when Make
		wants to find out which include files should
		be taken into account when it's time to decide
		if a file must be updated or not (eg.
		<filename>makedepend</filename>).

	</li>

	<li>
	<item>$(RANLIB)</item> Program to run on link libraries created
		with <shell>$(AR)</shell>. Most of the time this will
		either be <filename>ranlib</filename> or <filename>true</filename>.

	</li>

	<li>
	<item>$(SYS_AS)</item> The name of the systems' assembler.
		You should not use this value but the context
		sensitive <shell>$(AS)</shell> which contains the
		assembler to use in the current context.

	</li>

	<li>
	<item>$(SYS_CC)</item> The name of the systems' C compiler. This
		may be different from <shell>$(CC)</shell>, because
		<shell>$(CC)</shell> is context dependent (eg. if you
		compile code in the AROS shell, it's value is
		different from when you compile AROS kernel code).

	</li>
	</description>

</item>

<item>
    <dir>i386</dir>
    Version of the kernel for i386 CPUs. It consists
	mainly of a bunch of assembler files which implement
	functions that can't be done in C (eg. semaphores, stack
	handling or task switching). Note that this is the only
	directory which may contain assembler files and which is
	different for every architecture. If you begin your work on
	some new architecture, make such a directory for your
	hardware and put all hardware dependent files in there. It
	is a rule that you can do anything inside this directory as
	long as it has no influence on the other files and
	directories. The directory must support the standard rules
	<shell>all</shell> and <shell>clean</shell> and read
	<filename>AROS/config/make.cfg</filename>. All files generated by the
	makefile should go into <filename>$(OSGENDIR)</filename>.

</item>

<item>
    <file>linux/ -</file>
    

</item>

<item>
    <dir>m68k-emul</dir>
    Untested assembler code for machines which have an
	680x0 CPU but which are not Amigas (Mac, for example).

</item>

<item>
    <dir>m68k-native</dir>
    Assembler code for Amiga hardware.

</item>

<item>
    <file>machine.c</file>
    This is compiled during the setup phase. It will determine certain
    features of the C compiler (alignment of fields in structures and
    on the stack).
</item>

<item>
    <file>make.cfg</file>
    <p>Global settings for the Makefiles. Each makefile reads this
	file before it does anything else (well, almost... most 
	makefiles set a path to this file first :-) ) It sets up some
	interesting paths:</p>

	<description>
	<li>
	<item>$(OSGENDIR)</item> Use this path for all files which should go
		into the OS itself.
	</li>
	</description>

</item>
</contents>
