##begin config
basename BSDSocket
libbase SocketBase
libbasetype struct bsdsocketBase
options noopenclose
version 3.0
##end config

##begin cdef
#include <devices/timer.h>
#include <utility/tagitem.h>

#include <aros/preprocessor/variadic/cast2iptr.hpp>
#include <sys/socket.h>

/* Stub macros for 'emulation' of some functions */
#define select(nfds,rfds,wfds,efds,timeout) WaitSelect(nfds,rfds,wfds,efds,timeout,NULL)
#define inet_ntoa(addr) Inet_NtoA(((struct in_addr)addr).s_addr)

#if !defined(NO_INLINE_STDARG) && !defined(BSDSOCKET_NO_INLINE_STDARG)
#define syslog(arg1, arg2, ...) \
({ \
    IPTR __args[] = { AROS_PP_VARIADIC_CAST2IPTR(__VA_ARGS__) }; \
    vsyslog(arg1, arg2, __args); \
})
#endif /* !NO_INLINE_STDARG */

##end cdef

##begin cdefprivate
#include "bsdsocket_intern.h"
##end cdefprivate

##begin functionlist
int socket(int domain, int type, int protocol) (D0, D1, D2)
int bind(int s, struct sockaddr *name, int namelen) (D0, A0, D1)
int listen(int s, int backlog) (D0, D1)
int accept(int s, struct sockaddr *addr, int *addrlen) (D0, A0, A1)
int connect(int s, struct sockaddr *name, int namelen) (D0, A0, D1)
int sendto(int s, const void *msg, int len, int flags, const struct sockaddr *to, int tolen) (D0, A0, D1, D2, A1, D3)
int send(int s, const void *msg, int len, int flags) (D0, A0, D1, D2)
int recvfrom(int s, void *buf, int len, int flags, struct sockaddr *from, int *fromlen) (D0, A0, D1, D2, A1, A2)
int recv(int s, void *buf, int len, int flags) (D0, A0, D1, D2)
int shutdown(int s, int how) (D0, D1)
int setsockopt(int s, int level, int optname, void *optval, int optlen) (D0, D1, D2, A0, D3)
int getsockopt(int s, int level, int optname, void *optval, void *optlen) (D0, D1, D2, A0, A1)
int getsockname(int s, struct sockaddr *name, int *namelen) (D0, A0, A1)
int getpeername(int s, struct sockaddr *name, int *namelen) (D0, A0, A1)
int IoctlSocket(int s, unsigned long request, char *argp) (D0, D1, A0)
int CloseSocket(int s) (D0)
int WaitSelect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout, ULONG *sigmask) (D0, A0, A1, A2, A3, D1)
void SetSocketSignals(ULONG intrmask, ULONG iomask, ULONG urgmask) (D0, D1, D2)
int getdtablesize() ()
LONG ObtainSocket(LONG id, LONG domain, LONG type, LONG protocol) (D0, D1, D2, D3)
LONG ReleaseSocket(LONG sd, LONG id) (D0, D1)
LONG ReleaseCopyOfSocket(LONG sd, LONG id) (D0, D1)
LONG Errno() ()
void SetErrnoPtr(void *ptr, int size) (A0, D0)
char *Inet_NtoA(unsigned long in) (D0)
unsigned long inet_addr(const char *cp) (A0)
unsigned long Inet_LnaOf(unsigned long in) (D0)
unsigned long Inet_NetOf(unsigned long in) (D0)
unsigned long Inet_MakeAddr(int net, int lna) (D0, D1)
unsigned long inet_network(const char *cp) (A0)
struct hostent *gethostbyname(char *name) (A0)
struct hostent *gethostbyaddr(char *addr, int len, int type) (A0, D0, D1)
struct netent *getnetbyname(char *name) (A0)
struct netent *getnetbyaddr(long net, int type) (D0, D1)
struct servent *getservbyname(char *name, char *proto) (A0, A1)
struct servent *getservbyport(int port, char *proto) (D0, A0)
struct protoent *getprotobyname(char *name) (A0)
struct protoent *getprotobynumber(int proto) (D0)
void vsyslog(int level, const char *format, LONG *args) (D0, A0, A1)
int Dup2Socket(int fd1, int fd2) (D0, D1)
int sendmsg(int s, const struct msghdr *msg, int flags) (D0, A0, D1)
int recvmsg(int s, struct msghdr *msg, int flags) (D0, A0, D1)
int gethostname(char *name, int namelen) (A0, D0)
long gethostid() ()
ULONG SocketBaseTagList(struct TagItem *tagList) (A0)
LONG GetSocketEvents(ULONG *eventsp) (A0)
##end functionlist
