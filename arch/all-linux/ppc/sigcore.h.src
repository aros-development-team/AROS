/*
    Copyright © 1995-2006, The AROS Development Team. All rights reserved.
    $Id$

    Desc: Macros to handle unix signals
    Lang: english
*/

#ifndef _SIGCORE_H
#define _SIGCORE_H

#define USE_SA_SIGINFO 1

#if USE_SA_SIGINFO
#define SIGCORE_NEED_SA_SIGINFO 1
#endif
#include <ucontext.h>

#include <signal.h>
#include "etask.h"

/* Put a value of type SP_TYPE on the stack or get it off the stack. */

#define _PUSH(sp,val)	(*--sp = (SP_TYPE)(val))
#define _POP(sp)	(*sp++)

#ifndef _SIGNAL_H
#define _SIGNAL_H
#endif
#include <bits/sigcontext.h>

/* sigcontext_t is the type of the signals' context. Linux offers no way
   to get this context in a legal way, so I have to use tricks. */
typedef @sigcontext@ sigcontext_t;
typedef @sighandler@ SignalHandler;
 
/* name and type of the signal handler */
#define SIGHANDLER	linux_sighandler
#define SIGHANDLER_T	SignalHandler

#if USE_SA_SIGINFO
#define GLOBAL_SIGNAL_INIT \
	static void sighandler (int sig, sigcontext_t * sc);    		\
										\
	static void SIGHANDLER (int sig, siginfo_t *blub, struct ucontext *u) 	\
	{ 									\
	    sighandler(sig, (sigcontext_t *)&u->uc_pad); 			\
	}

#else

// Browsing the memory sc pattern was found at offset 24 + 64.
// This did only work for -O0.
#define GLOBAL_SIGNAL_INIT \
	static void sighandler (int sig, sigcontext_t * sc);    \
								\
	static void SIGHANDLER (int sig)			\
	{							\
	    sigcontext_t *sc =					\
		(sigcontext_t *) ((BYTE *) &sig + 24 + 64);	\
	    sighandler(sig, sc);				\
	}
#endif

/* Type of the values which can be stored on the stack. A variable
   which is to be used as a stack pointer must be declared as
   "SP_TYPE *". */

#define SP_TYPE	long

/* How many general purpose registers are to be saved on the stack
   when a task switch happens. */

#define CPU_NUMREGS	0

/* This structure is used to save/restore registers, because the stack is too
   small. */

struct AROS_cpu_context
{
    struct pt_regs regs;
    double fpregs[32];
};

#define SIZEOF_ALL_REGISTERS	(sizeof (struct AROS_cpu_context))
#define GetCpuContext(task)	((struct AROS_cpu_context *)\
				 (GetIntETask(task)->iet_Context))
#define GetSP(task)		(*(SP_TYPE **)&task->tc_SPReg)


/* Macros to access the stack pointer and program counter,
   PC is the current address in the program code. */

#define SP(sc)	(sc->regs->gpr[1])
#define PC(sc)	(sc->regs->nip)

/* Macros to enable or disable all signals after the signal handler
   has returned and the normal execution commences. */

#define SC_DISABLE(sc)	(sc->oldmask = ~0L)
#define SC_ENABLE(sc)	(sc->oldmask = 0L)

/* This stuff is not used on Linux/m68k, because the signal handler context
   doesn't contain enough registers. Some assembler is needed for the signal
   handler instead. */

#define SAVE_CPU(task,sc)\
{								\
    long i;							\
    for (i = 0; i < 32; i++)					\
	GetCpuContext(task)->regs.gpr[i] = sc->regs->gpr[i];	\
    GetCpuContext(task)->regs.nip 	= sc->regs->nip;	\
    GetCpuContext(task)->regs.msr	= sc->regs->msr;	\
    GetCpuContext(task)->regs.orig_gpr3	= sc->regs->orig_gpr3;	\
    GetCpuContext(task)->regs.ctr	= sc->regs->ctr;	\
    GetCpuContext(task)->regs.link	= sc->regs->link;	\
    GetCpuContext(task)->regs.xer	= sc->regs->xer;	\
    GetCpuContext(task)->regs.ccr	= sc->regs->ccr;	\
    GetCpuContext(task)->regs.trap	= sc->regs->trap;	\
    GetCpuContext(task)->regs.dar	= sc->regs->dar;	\
    GetCpuContext(task)->regs.dsisr	= sc->regs->dsisr;	\
    GetCpuContext(task)->regs.result	= sc->regs->result;	\
}

#define SAVE_FPU(task,sc)\
{\
    long i;\
    for (i = 0; i < 32; i++)\
	GetCpuContext(task)->fpregs[i] = *(double*)&(sc->regs->gpr[PT_FPR0 + 2 * i]);\
}

#define RESTORE_CPU(task,sc)\
{								\
    long i;							\
    for (i = 0; i < 32; i++)					\
	sc->regs->gpr[i] = GetCpuContext(task)->regs.gpr[i];	\
    sc->regs->nip	= GetCpuContext(task)->regs.nip; 	\
    sc->regs->msr	= GetCpuContext(task)->regs.msr;	\
    sc->regs->orig_gpr3 = GetCpuContext(task)->regs.orig_gpr3;	\
    sc->regs->ctr	= GetCpuContext(task)->regs.ctr;	\
    sc->regs->link	= GetCpuContext(task)->regs.link;	\
    sc->regs->xer	= GetCpuContext(task)->regs.xer;	\
    sc->regs->ccr	= GetCpuContext(task)->regs.ccr;	\
    sc->regs->trap	= GetCpuContext(task)->regs.trap;	\
    sc->regs->dar	= GetCpuContext(task)->regs.dar;	\
    sc->regs->dsisr	= GetCpuContext(task)->regs.dsisr;	\
    sc->regs->result	= GetCpuContext(task)->regs.result;	\
}

#define RESTORE_FPU(task,sc)\
{\
    long i;\
    for (i = 0; i < 32; i++)\
	*(double*)&(sc->regs->gpr[PT_FPR0 + 2 * i]) = GetCpuContext(task)->fpregs[i];\
}

// you might think pushing addr is not necessary
// but we need to decrement the stack pointer
// twice otherwise we get a memory trash
#define PREPARE_RETURN_ADDRESS(task, addr)\
{\
    _PUSH(GetSP(task), addr);\
    _PUSH(GetSP(task), addr);\
    GetCpuContext(task)->regs.link = addr;\
}

#define PREPARE_INITIAL_ARGS(task, args, numargs)\
{\
    long i;\
    for (i = 0; i < numargs; i++)\
	GetCpuContext(task)->regs.gpr[3+i] = args[i];\
}

#define PREPARE_INITIAL_FRAME(sp,pc)\
{\
    GetCpuContext(task)->regs.gpr[1] = sp;\
    GetCpuContext(task)->regs.nip    = pc;\
}

/* Prepare the cpu context
   Sys V PPC ABI says r2 is reserved
   so we copy the current one and it
   will never be changed again */
#define PREPARE_INITIAL_CONTEXT(task,pc)		\
{\
    __asm__ __volatile__ (				\
    "stw 2,%0 \n\t"	   				\
    : "=m"(GetCpuContext(task)->regs.gpr[2])		\
    :							\
    : "memory");					\
    {							\
	long i;						\
	for (i = 0; i < 32; i++)			\
	    GetCpuContext(task)->fpregs[i] = 0.0;	\
    }\
}

/* This macro is similar to PREPARE_INITIAL_FRAME() but also saves
   all general purpose registers. Use this macro when you want to
   leave the current tasks' context to save the registers. Note that
   the argument "sp" of the macro is just the name of the stack
   pointer. The macro will load it from the sigcontext "sc". You
   must store the value of "sp" after the macro and hand it to
   RESTOREREGS() below to restore this context. */

#define SAVEREGS(task,sc)\
{\
    GetSP(task) = (SP_TYPE *)SP(sc); \
    SAVE_CPU(task,sc);		     \
    SAVE_FPU(task,sc);               \
}

/* This macro does the opposite to SAVEREGS(). It restores all
   general purpose registers. After that, you can enter the new
   tasks' context. Both "sp" and "sc" must be initialized.
   The macro will save the new SP into the sigcontext "sc". */

#define RESTOREREGS(task,sc)\
{\
    RESTORE_FPU(task,sc);		  \
    RESTORE_CPU(task,sc);		  \
    SP(sc) = (typeof(SP(sc)))GetSP(task); \
}
    
/* This macro prints the current signals' context */

#define PRINT_SC(sc) \
	printf ("SC: SP=%08lx  PC=%08lx\n" \
	    , SP(sc), PC(sc) \
	)

/* This macro prints the current stack (after SAVEREGS()) */

#define PRINT_STACK(sp)	/**/

#endif /* _SIGCORE_H */
