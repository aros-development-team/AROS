# $Id$
include $(TOP)/config/make.cfg

FILES    := kernel_startup platform_init kernel_cpu kernel_debug kernel_memory kernel_bootmem \
	    intr acpi_tables mmu smp
FUNCS	 := getcpucount getcpunumber
ASMFILES := core_interrupts

MAINDIR	      := rom/kernel
USER_AFLAGS   := -I$(GENINCDIR)
USER_INCLUDES := $(PRIV_KERNEL_INCLUDES) -I$(SRCDIR)/arch/all-native/kernel \
		 -isystem $(SRCDIR)/arch/all-native/bootconsole/include

#MM kernel-kernel-pc-x86_64 : kernel-pc-acpica-includes includes-asm_h-$(CPU) includes kernel-kernel-includes linklibs-bootconsole
#MM kernel-kernel-pc-x86_64-kobj : includes-asm_h-$(CPU) includes kernel-kernel-includes linklibs-bootconsole
#MM kernel-kernel-pc-x86_64-quick : kernel-kernel-native-quick
#MM kernel-kernel-pc-x86_64-kobj-quick : kernel-kernel-native-quick

%build_archspecific \
  mainmmake=kernel-kernel maindir=$(MAINDIR) \
  arch=pc-x86_64 files="$(FILES) $(FUNCS)" asmfiles=$(ASMFILES)

# This builds SMP bootstrap code

OBJDIR  := $(GENDIR)/$(CURDIR)
DESTDIR := $(GENDIR)/$(MAINDIR)/arch

#MM
kernel-kernel-pc-x86_64 :: $(OBJDIR) $(DESTDIR)/smpboot.bin.o
#MM
kernel-kernel-pc-x86_64-kobj :: $(OBJDIR) $(DESTDIR)/smpboot.bin.o

%rule_assemble_multi basenames=smpbootstrap targetdir=$(OBJDIR)

# Without -N the linker tries to page-align .text section and produces a huge file (over 2MB)
%rule_link_binary file=$(DESTDIR)/smpboot.bin.o name=smpbootstrap objs=$(OBJDIR)/smpbootstrap.o

$(OBJDIR):
	@$(ECHO) Creating $@...
	@$(MKDIR) $@

%common
