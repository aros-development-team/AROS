# $Id$
include $(TOP)/config/make.cfg

FILES	     := bootstrap cpu memory_io support
USER_CFLAGS  := -m32 -isystem $(SRCDIR)/arch/all-native/bootconsole/include -isystem $(SRCDIR)/bootstrap/include -DMULTIBOOT_64BIT
USER_LDFLAGS := -melf_i386 -N -e kernel_bootstrap -Map $(OSGENDIR)/boot/bootstrap-pc-x86_64.map -T $(SRCDIR)/$(CURDIR)/ldscript.lds
LIBDIR       := $(GENDIR)/lib32
LIBS         := bootconsole rom bootstrap
OBJDIR       := $(GENDIR)/$(CURDIR)
USER_OBJS    := $(OBJDIR)/vesa.bin.o

BOOTSTRAP_NAME := $(BINDIR)/boot/bootstrap-pc-x86_64

#MM kernel-bootstrap-x86_64: linklibs-clib32 linklibs-bootconsole32 linklibs-bootstrap32
kernel-bootstrap-x86_64: $(BOOTSTRAP_NAME)

#MM
kernel-bootstrap-x86_64-quick: $(BOOTSTRAP_NAME)

OBJS      := $(addsuffix .o,$(addprefix $(OBJDIR)/,$(FILES)))
DEPS      := $(addsuffix .d,$(addprefix $(OBJDIR)/,$(FILES) vesa))
LIBDEPS   := $(addsuffix .a,$(addprefix $(LIBDIR)/lib,$(LIBS)))
LDLIBS    := $(addprefix -l,$(LIBS))

$(BOOTSTRAP_NAME): $(OBJS) $(USER_OBJS) $(BINDIR)/boot $(OSGENDIR)/boot $(LIBDEPS)
	@$(ECHO) Linking $@...
	@$(KERNEL_LD) $(USER_LDFLAGS) -o $@ $(OBJS) $(USER_OBJS) -L$(LIBDIR) $(LDLIBS)
	#@strip --strip-unneeded -R .note -R .comment $@

# Switch to the i386 linker mode
AROS_LD := $(KERNEL_LD) -m elf_i386

%rule_link_binary file=$(OBJDIR)/vesa.bin.o name=vesa objs=$(OBJDIR)/vesa.o \
	start=0x1000 ldflags="-m elf_i386"

%rule_compile basename=% targetdir=$(OBJDIR)

-include $(DEPS)

GLOB_MKDIRS += $(BINDIR)/boot $(OSGENDIR)/boot

%common
