*	$NetBSD: MONADIC.R3V6,v 1.2 1994/10/26 07:48:44 cgd Exp $

*	MOTOROLA MICROPROCESSOR & MEMORY TECHNOLOGY GROUP
*	M68000 Hi-Performance Microprocessor Division
*	M68040 Software Package 
*
*	M68040 Software Package Copyright (c) 1993, 1994 Motorola Inc.
*	All rights reserved.
*
*	THE SOFTWARE is provided on an "AS IS" basis and without warranty.
*	To the maximum extent permitted by applicable law,
*	MOTOROLA DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED,
*	INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
*	PARTICULAR PURPOSE and any warranty against infringement with
*	regard to the SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF)
*	and any accompanying written materials. 
*
*	To the maximum extent permitted by applicable law,
*	IN NO EVENT SHALL MOTOROLA BE LIABLE FOR ANY DAMAGES WHATSOEVER
*	(INCLUDING WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS
*	PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR
*	OTHER PECUNIARY LOSS) ARISING OF THE USE OR INABILITY TO USE THE
*	SOFTWARE.  Motorola assumes no responsibility for the maintenance
*	and support of the SOFTWARE.  
*
*	You are hereby granted a copyright license to use, modify, and
*	distribute the SOFTWARE so long as this entire notice is retained
*	without alteration in any modified and/or redistributed versions,
*	and that such modified versions are clearly identified as such.
*	No licenses are granted by implication, estoppel or otherwise
*	under any patents or trademarks of Motorola, Inc.

*
*	MONADIC.R3V6 1.3 4/30/91
*
*	MONADIC.R3V6 --- MONADIC template for MCD R3V6 native C compiler
*
*	The MCD compiler is old.  It returns float and double values
*	as a double stored in d0/d1.  There is no support for single or extended
*	precision operations.  It's not clear whether the float registers
*	should be preserved, so for speed, they're not.
*

	xref	tag
	xref	_OPr_
	xref	_OPz_
	xref	_OPi_
	xref	_OPn_
	xref	_OPm_

	xdef	_OPd_
_OPd_:
	link	a6,#-LOCAL_SIZE
	fmove.l	fpcr,d1		; user's rounding mode/precision
	fmove.l	#0,fpcr		; force rounding mode/prec to extended,rn
*
*	copy, convert and tag input argument
*
	fmove.d	8(a6),fp0
	fmove.x	fp0,ETEMP(a6)
	lea	ETEMP(a6),a0
	bsr	tag
	move.b	d0,STAG(a6)
	tst.b	d0
	bne.b	_TMP_2
	bsr	_OPr_		; normalized (regular) number
	bra.b	_TMP_6
_TMP_2:
	cmp.b	#$20,d0		; zero?
	bne.b	_TMP_3
	bsr	_OPz_
	bra.b	_TMP_6
_TMP_3:
	cmp.b	#$40,d0		; infinity?
	bne.b	_TMP_4
	bsr	_OPi_
	bra.b	_TMP_6
_TMP_4:
	cmp.b	#$60,d0		; NaN?
	bne.b	_TMP_5
	bsr	_OPn_
	bra.b	_TMP_6
_TMP_5:
	bsr	_OPm_		; assuming a denorm...

_TMP_6:
	fmove.d	fp0,USER_D0(a6)	; result goes into d0/d1 pair
	movem.l	USER_D0(a6),d0-d1
	unlk	a6
	rts

