*	$NetBSD: DYADIC.GEN,v 1.2 1994/10/26 07:48:29 cgd Exp $

*	MOTOROLA MICROPROCESSOR & MEMORY TECHNOLOGY GROUP
*	M68000 Hi-Performance Microprocessor Division
*	M68040 Software Package 
*
*	M68040 Software Package Copyright (c) 1993, 1994 Motorola Inc.
*	All rights reserved.
*
*	THE SOFTWARE is provided on an "AS IS" basis and without warranty.
*	To the maximum extent permitted by applicable law,
*	MOTOROLA DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED,
*	INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
*	PARTICULAR PURPOSE and any warranty against infringement with
*	regard to the SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF)
*	and any accompanying written materials. 
*
*	To the maximum extent permitted by applicable law,
*	IN NO EVENT SHALL MOTOROLA BE LIABLE FOR ANY DAMAGES WHATSOEVER
*	(INCLUDING WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS
*	PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR
*	OTHER PECUNIARY LOSS) ARISING OF THE USE OR INABILITY TO USE THE
*	SOFTWARE.  Motorola assumes no responsibility for the maintenance
*	and support of the SOFTWARE.  
*
*	You are hereby granted a copyright license to use, modify, and
*	distribute the SOFTWARE so long as this entire notice is retained
*	without alteration in any modified and/or redistributed versions,
*	and that such modified versions are clearly identified as such.
*	No licenses are granted by implication, estoppel or otherwise
*	under any patents or trademarks of Motorola, Inc.

*
*	DYADIC.GEN 1.2 4/30/91
*
*	DYADIC.GEN --- generic DYADIC template
*
*	This version saves all registers that will be used by the emulation
*	routines and restores all but FP0 on exit.  The FPSR is
*	updated to reflect the result of the operation.  Return value
*	is placed in FP0 for single, double and extended results.
*	
*	The package subroutines expect the incoming FPCR to be zeroed
*	since they need extended precision to work properly.  The
*	'final' FPCR is expected in USER_FPCR(a6) so that the calculated result
*	can be properly sized and rounded.  Also, if the incoming FPCR
*	has enabled any exceptions, the exception will be taken on the
*	final fmovem in this template.
*
*	Customizations:  
*		1. Remove the movem.l at the entry and exit of
*		   each routine if your compiler treats those 
*		   registers as scratch.
*		2. Likewise, don't save FP0/FP1 if they are scratch
*		   registers.
*		3. Delete updating of the fpsr if you only care about
*		   the result.
*		4. Remove the _OPs_ and _OPx_ entry points if your compiler
*		   treats everything as doubles.
*		5. Move the result to d0/d1 if the compiler is that old.
*

	xref	_OPa_
	xref	tag

	xdef	_OPs_
_OPs_:
	link	a6,#-LOCAL_SIZE
	movem.l	d0-d1/a0-a1,USER_DA(a6)
	fmovem.x fp0-fp3,USER_FP0(a6)
	fmovem.l fpsr/fpcr,USER_FPSR(a6) ; user's rounding mode/precision
	fmove.l	#0,fpcr		; force rounding mode/prec to extended,rn
*
*	copy, convert and tag input arguments
*
	fmove.s	8(a6),fp0
	fmove.x	fp0,FPTEMP(a6)
	lea	FPTEMP(a6),a0
	bsr	tag
	move.b	d0,DTAG(a6)

	fmove.s	12(a6),fp0
	fmove.x	fp0,ETEMP(a6)
	lea	ETEMP(a6),a0
	bsr	tag
	move.b	d0,STAG(a6)

	bsr	_OPa_

	fmove.l	fpsr,d0		; update status register
	or.b	FPSR_AEXCEPT(a6),d0	;add previously accrued exceptions
	swap.w	d0
	or.b	FPSR_QBYTE(a6),d0	; pickup sign of quotient byte
	swap.w	d0
	fmove.l	d0,fpsr
*
*	Result is now in FP0
*
	movem.l	USER_DA(a6),d0-d1/a0-a1
	fmovem.x USER_FP1(a6),fp1-fp3	; note: FP0 not restored
	unlk	a6
	rts

	xdef	_OPd_
_OPd_:
	link	a6,#-LOCAL_SIZE
	movem.l	d0-d1/a0-a1,USER_DA(a6)
	fmovem.x fp0-fp3,USER_FP0(a6)
	fmovem.l fpsr/fpcr,USER_FPSR(a6) ; user's rounding mode/precision
	fmove.l	#0,fpcr		; force rounding mode/prec to extended,rn
*
*	copy, convert and tag input arguments
*
	fmove.d	8(a6),fp0
	fmove.x	fp0,FPTEMP(a6)
	lea	FPTEMP(a6),a0
	bsr	tag
	move.b	d0,DTAG(a6)

	fmove.d	16(a6),fp0
	fmove.x	fp0,ETEMP(a6)
	lea	ETEMP(a6),a0
	bsr	tag
	move.b	d0,STAG(a6)

	bsr	_OPa_

	fmove.l	fpsr,d0		; update status register
	or.b	FPSR_AEXCEPT(a6),d0	;add previously accrued exceptions
	swap.w	d0
	or.b	FPSR_QBYTE(a6),d0	; pickup sign of quotient byte
	swap.w	d0
	fmove.l	d0,fpsr
*
*	Result is now in FP0
*
	movem.l	USER_DA(a6),d0-d1/a0-a1
	fmovem.x USER_FP1(a6),fp1-fp3	; note: FP0 not restored
	unlk	a6
	rts

	xdef	_OPx_
_OPx_:
	link	a6,#-LOCAL_SIZE
	movem.l	d0-d1/a0-a1,USER_DA(a6)
	fmovem.x fp0-fp3,USER_FP0(a6)
	fmovem.l fpsr/fpcr,USER_FPSR(a6) ; user's rounding mode/precision
	fmove.l	#0,fpcr		; force rounding mode/prec to extended,rn
*
*	copy, convert and tag input arguments
*
	fmove.x	8(a6),fp0
	fmove.x	fp0,FPTEMP(a6)
	lea	FPTEMP(a6),a0
	bsr	tag
	move.b	d0,DTAG(a6)

	fmove.x	20(a6),fp0
	fmove.x	fp0,ETEMP(a6)
	lea	ETEMP(a6),a0
	bsr	tag
	move.b	d0,STAG(a6)

	bsr	_OPa_

	fmove.l	fpsr,d0		; update status register
	or.b	FPSR_AEXCEPT(a6),d0	;add previously accrued exceptions
	swap.w	d0
	or.b	FPSR_QBYTE(a6),d0	; pickup sign of quotient byte
	swap.w	d0
	fmove.l	d0,fpsr
*
*	Result is now in FP0
*
	movem.l	USER_DA(a6),d0-d1/a0-a1
	fmovem.x USER_FP1(a6),fp1-fp3	; note: FP0 not restored
	unlk	a6
	rts

