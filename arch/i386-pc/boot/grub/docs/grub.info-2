This is grub.info, produced by makeinfo version 4.1 from grub.texi.

INFO-DIR-SECTION Kernel
START-INFO-DIR-ENTRY
* GRUB: (grub).                 The GRand Unified Bootloader
* grub-install: (grub)Invoking grub-install.    Install GRUB on your drive
* grub-md5-crypt: (grub)Invoking grub-md5-crypt.        Encrypt a password
                                                        in MD5 format
* grub-terminfo: (grub)Invoking grub-terminfo.  Generate a terminfo
                                                command from a
                                                terminfo name
* mbchk: (grub)Invoking mbchk.  Check for the format of a Multiboot kernel
END-INFO-DIR-ENTRY

   Copyright (C) 1999,2000,2001,2002 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: grub.info,  Node: Images,  Next: Filesystem,  Prev: Security,  Up: Top

GRUB image files
****************

   GRUB consists of several images: two essential stages, optional
stages called "Stage 1.5", and two network boot images. Here is a short
overview of them. *Note Internals::, for more details.

`stage1'
     This is an essential image used for booting up GRUB. Usually, this
     is embedded in a MBR or the boot sector of a partition. Because a
     PC boot sector is 512 bytes, the size of this image is exactly 512
     bytes.

     All `stage1' must do is to load Stage 2 or Stage 1.5 from a local
     disk. Because of the size restriction, `stage1' encodes the
     location of Stage 2 (or Stage 1.5) in a block list format, so it
     never understand any filesystem structure.

`stage2'
     This is the core image of GRUB. This does all things but booting up
     itself. Usually, this is put in a filesystem, but that is not
     required.

`e2fs_stage1_5'
`fat_stage1_5'
`ffs_stage1_5'
`jfs_stage1_5'
`minix_stage1_5'
`reiserfs_stage1_5'
`vstafs_stage1_5'
`xfs_stage1_5'
     These are called "Stage 1.5", because the purpose is a bridge
     between `stage1' and `stage2', that is to say, Stage 1.5 is loaded
     by Stage 1 and Stage 1.5 loads Stage 2. The difference between
     `stage1' and `*_stage1_5' is that the former doesn't understand
     any filesystem but the latter does an filesystem (e.g.
     `e2fs_stage1_5' understands ext2fs). So you can move the location
     of Stage 2 to another safely, even after GRUB has been installed.

     While Stage 2 cannot generally be embedded in a fixed area as the
     size is so large, Stage 1.5 can be installed into the area right
     after a MBR, or the boot loader area of a ReiserFS or a FFS.

`nbgrub'
     This is a network boot image for the Network Image Proposal used
     by some network boot loaders, such as Etherboot. This is mostly
     the same as Stage 2, but this also sets up a network and loads a
     configuration file from the network.

`pxegrub'
     This is another network boot image for the Preboot Execution
     Environment used by several Netboot ROMs. This is identical to
     `nbgrub', except for the format.


File: grub.info,  Node: Filesystem,  Next: Interface,  Prev: Images,  Up: Top

Filesystem syntax and semantics
*******************************

   GRUB uses a special syntax for specifying disk drives which can be
accessed by BIOS. Because of BIOS limitations, GRUB cannot distinguish
between IDE, ESDI, SCSI, or others. You must know yourself which BIOS
device is equivalent to which OS device. Normally, that will be clear if
you see the files in a device or use the command `find' (*note find::).

* Menu:

* Device syntax::               How to specify devices
* File name syntax::            How to specify files
* Block list syntax::           How to specify block lists


File: grub.info,  Node: Device syntax,  Next: File name syntax,  Up: Filesystem

How to specify devices
======================

   The device syntax is like this:

     `(DEVICE[,PART-NUM][,BSD-SUBPART-LETTER])'

   `[]' means the parameter is optional. DEVICE should be either `fd'
or `hd' followed by a digit, like `fd0'.  But you can also set DEVICE
to a hexadecimal or a decimal, which is a BIOS drive number, so the
following are equivalent:

     (hd0)
     (0x80)
     (128)

   PART-NUM represents the partition number of DEVICE, starting from
zero for primary partitions and from four for extended partitions, and
BSD-SUBPART-LETTER represents the BSD disklabel subpartition, such as
`a' or `e'.

   A shortcut for specifying BSD subpartitions is
`(DEVICE,BSD-SUBPART-LETTER)', in this case, GRUB searches for the
first PC partition containing a BSD disklabel, then finds the
subpartition BSD-SUBPART-LETTER. Here is an example:

     (hd0,a)

   The syntax like `(hd0)' represents using the entire disk (or the MBR
when installing GRUB), while the syntax like `(hd0,0)' represents using
the partition of the disk (or the boot sector of the partition when
installing GRUB).

   If you enabled the network support, the special drive, `(nd)', is
also available. Before using the network drive, you must initialize the
network. *Note Network::, for more information.


File: grub.info,  Node: File name syntax,  Next: Block list syntax,  Prev: Device syntax,  Up: Filesystem

How to specify files
====================

   There are two ways to specify files, by "absolute file name" and by
"block list".

   An absolute file name resembles a Unix absolute file name, using `/'
for the directory separator (not `\' as in DOS). One example is
`(hd0,0)/boot/grub/menu.lst'. This means the file `/boot/grub/menu.lst'
in the first partition of the first hard disk. If you omit the device
name in an absolute file name, GRUB uses GRUB's "root device"
implicitly. So if you set the root device to, say, `(hd1,0)' by the
command `root' (*note root::), then `/boot/kernel' is the same as
`(hd1,0)/boot/kernel'.


File: grub.info,  Node: Block list syntax,  Prev: File name syntax,  Up: Filesystem

How to specify block lists
==========================

   A block list is used for specifying a file that doesn't appear in the
filesystem, like a chainloader. The syntax is
`[OFFSET]+LENGTH[,[OFFSET]+LENGTH]...'.  Here is an example:

     `0+100,200+1,300+300'

   This represents that GRUB should read blocks 0 through 99, block 200,
and blocks 300 through 599. If you omit an offset, then GRUB assumes
the offset is zero.

   Like the file name syntax (*note File name syntax::), if a blocklist
does not contain a device name, then GRUB uses GRUB's "root device". So
`(hd0,1)+1' is the same as `+1' when the root device is `(hd0,1)'.


File: grub.info,  Node: Interface,  Next: Commands,  Prev: Filesystem,  Up: Top

GRUB's user interface
*********************

   GRUB has both a simple menu interface for choosing preset entries
from a configuration file, and a highly flexible command-line for
performing any desired combination of boot commands.

   GRUB looks for its configuration file as soon as it is loaded. If one
is found, then the full menu interface is activated using whatever
entries were found in the file. If you choose the "command-line" menu
option, or if the configuration file was not found, then GRUB drops to
the command-line interface.

* Menu:

* Command-line interface::      The flexible command-line interface
* Menu interface::              The simple menu interface
* Menu entry editor::           Editing a menu entry
* Hidden menu interface::       The hidden menu interface


File: grub.info,  Node: Command-line interface,  Next: Menu interface,  Up: Interface

The flexible command-line interface
===================================

   The command-line interface provides a prompt and after it an editable
text area much like a command-line in Unix or DOS. Each command is
immediately executed after it is entered(1) (*note Command-line
interface-Footnote-1::). The commands (*note Command-line and menu
entry commands::) are a subset of those available in the configuration
file, used with exactly the same syntax.

   Cursor movement and editing of the text on the line can be done via a
subset of the functions available in the Bash shell:

<C-f>
<PC right key>
     Move forward one character.

<C-b>
<PC left key>
     Move back one character.

<C-a>
<HOME>
     Move to the start of the line.

<C-e>
<END>
     Move the the end of the line.

<C-d>
<DEL>
     Delete the character underneath the cursor.

<C-h>
<BS>
     Delete the character to the left of the cursor.

<C-k>
     Kill the text from the current cursor position to the end of the
     line.

<C-u>
     Kill backward from the cursor to the beginning of the line.

<C-y>
     Yank the killed text back into the buffer at the cursor.

<C-p>
<PC up key>
     Move up through the history list.

<C-n>
<PC down key>
     Move down through the history list.

   When typing commands interactively, if the cursor is within or before
the first word in the command-line, pressing the <TAB> key (or <C-i>)
will display a listing of the available commands, and if the cursor is
after the first word, the `<TAB>' will provide a completion listing of
disks, partitions, and file names depending on the context.

   Note that you cannot use the completion functionality in the TFTP
filesystem. This is because TFTP doesn't support file name listing for
the security.


File: grub.info,  Node: Command-line interface-Footnotes,  Up: Command-line interface

   (1) However, this behavior will be changed in the future version, in
a user-invisible way.


File: grub.info,  Node: Menu interface,  Next: Menu entry editor,  Prev: Command-line interface,  Up: Interface

The simple menu interface
=========================

   The menu interface is quite easy to use. Its commands are both
reasonably intuitive and described on screen.

   Basically, the menu interface provides a list of "boot entries" to
the user to choose from. Use the arrow keys to select the entry of
choice, then press <RET> to run it.  An optional timeout is available
to boot the default entry (the first one if not set), which is aborted
by pressing any key.

   Commands are available to enter a bare command-line by pressing <c>
(which operates exactly like the non-config-file version of GRUB, but
allows one to return to the menu if desired by pressing <ESC>) or to
edit any of the "boot entries" by pressing <e>.

   If you protect the menu interface with a password (*note Security::),
all you can do is choose an entry by pressing <RET>, or press <p> to
enter the password.


File: grub.info,  Node: Menu entry editor,  Next: Hidden menu interface,  Prev: Menu interface,  Up: Interface

Editing a menu entry
====================

   The menu entry editor looks much like the main menu interface, but
the lines in the menu are individual commands in the selected entry
instead of entry names.

   If an <ESC> is pressed in the editor, it aborts all the changes made
to the configuration entry and returns to the main menu interface.

   When a particular line is selected, the editor places the user at a
special version of the GRUB command-line to edit that line.  When the
user hits <RET>, GRUB replaces the line in question in the boot entry
with the changes (unless it was aborted via <ESC>, in which case the
changes are thrown away).

   If you want to add a new line to the menu entry, press <o> if adding
a line after the current line or press <O> if before the current line.

   To delete a line, hit the key <d>. Although GRUB does not support
"undo" unfortunately, you can do almost the same thing by just
returning to the main menu.


File: grub.info,  Node: Hidden menu interface,  Prev: Menu entry editor,  Up: Interface

The hidden menu interface
=========================

   When your terminal is dumb or you request GRUB of hiding the menu
interface explicitly with the command `hiddenmenu' (*note
hiddenmenu::), GRUB doesn't show the menu interface (*note Menu
interface::) and automatically boots the default entry, unless
interrupted by pressing <ESC>.

   When you interrupt the timeout and your terminal is dumb, GRUB falls
back to the command-line interface (*note Command-line interface::).


File: grub.info,  Node: Commands,  Next: Troubleshooting,  Prev: Interface,  Up: Top

The list of available commands
******************************

   In this chapter, we list all commands that are available in GRUB.

   Commands belong to different groups. A few can only be used in the
global section of the configuration file (or "menu"); most of them can
be entered on the command-line and can be either used in the menu or in
the menu entries.

* Menu:

* Menu-specific commands::
* General commands::
* Command-line and menu entry commands::


File: grub.info,  Node: Menu-specific commands,  Next: General commands,  Up: Commands

The list of commands for the menu only
======================================

   The semantics used in parsing the configuration file are the
following:

   * The menu-specific commands have to be used before any others.

   * The files _must_ be in plain-text format.

   * `#' at the beginning of a line in a configuration file means it is
     only a comment.

   * Options are separated by spaces.

   * All numbers can be either decimal or hexadecimal. A hexadecimal
     number must be preceded by `0x', and is case-insensitive.

   * Extra options or text at the end of the line is ignored unless
     otherwise specified.

   * Unrecognized commands are added to the current entry, except
     before entries start, where they are ignored.

   These commands can only be used in the menu:

* Menu:

* default::                     Set the default entry
* fallback::                    Set the fallback entry
* hiddenmenu::                  Hide the menu interface
* timeout::                     Set the timeout
* title::                       Start a menu entry


File: grub.info,  Node: default,  Next: fallback,  Up: Menu-specific commands

default
-------

 - Command: default num
     Set the default entry to the entry number NUM. Numbering starts
     from 0, and the entry number 0 is the default if the command is not
     used.

     You can specify `saved' instead of a number. In this case, the
     default entry is the entry saved with the command `savedefault'.
     *Note savedefault::, for more information.


File: grub.info,  Node: fallback,  Next: hiddenmenu,  Prev: default,  Up: Menu-specific commands

fallback
--------

 - Command: fallback num
     Go into unattended boot mode: if the default boot entry has any
     errors, instead of waiting for the user to do anything,
     immediately start over using the NUM entry (same numbering as the
     `default' command (*note default::)). This obviously won't help if
     the machine was rebooted by a kernel that GRUB loaded.


File: grub.info,  Node: hiddenmenu,  Next: timeout,  Prev: fallback,  Up: Menu-specific commands

hiddenmenu
----------

 - Command: hiddenmenu
     Don't display the menu. If the command is used, no menu will be
     displayed on the control terminal, and the default entry will be
     booted after the timeout expired. The user can still request the
     menu to be displayed by pressing <ESC> before the timeout expires.
     See also *Note Hidden menu interface::.


File: grub.info,  Node: timeout,  Next: title,  Prev: hiddenmenu,  Up: Menu-specific commands

timeout
-------

 - Command: timeout sec
     Set a timeout, in SEC seconds, before automatically booting the
     default entry (normally the first entry defined).


File: grub.info,  Node: title,  Prev: timeout,  Up: Menu-specific commands

title
-----

 - Command: title name ...
     Start a new boot entry, and set its name to the contents of the
     rest of the line, starting with the first non-space character.


File: grub.info,  Node: General commands,  Next: Command-line and menu entry commands,  Prev: Menu-specific commands,  Up: Commands

The list of general commands
============================

   Commands usable both in the menu and in the command-line.

* Menu:

* bootp::                       Initialize a network device via BOOTP
* color::                       Color the menu interface
* device::                      Specify a file as a drive
* dhcp::                        Initialize a network device via DHCP
* hide::                        Hide a partition
* ifconfig::                    Configure a network device manually
* pager::                       Change the state of the internal pager
* partnew::                     Make a primary partition
* parttype::                    Change the type of a partition
* password::                    Set a password for the menu interface
* rarp::                        Initialize a network device via RARP
* serial::                      Set up a serial device
* setkey::                      Configure the key map
* terminal::                    Choose a terminal
* terminfo::                    Define escape sequences for a terminal
* tftpserver::                  Specify a TFTP server
* unhide::                      Unhide a partition


File: grub.info,  Node: bootp,  Next: color,  Up: General commands

bootp
-----

 - Command: bootp [`--with-configfile']
     Initialize a network device via the "BOOTP" protocol. This command
     is only available if GRUB is compiled with netboot support. See
     also *Note Network::.

     If you specify `--with-configfile' to this command, GRUB will
     fetch and load a configuration file specified by your BOOTP server
     with the vendor tag `150'.


File: grub.info,  Node: color,  Next: device,  Prev: bootp,  Up: General commands

color
-----

 - Command: color normal [highlight]
     Change the menu colors. The color NORMAL is used for most lines in
     the menu (*note Menu interface::), and the color HIGHLIGHT is used
     to highlight the line where the cursor points. If you omit
     HIGHLIGHT, then the inverted color of NORMAL is used for the
     highlighted line. The format of a color is
     `FOREGROUND/BACKGROUND'. FOREGROUND and BACKGROUND are symbolic
     color names. A symbolic color name must be one of these:

        * black

        * blue

        * green

        * cyan

        * red

        * magenta

        * brown

        * light-gray

          *These below can be specified only for the foreground.*

        * dark-gray

        * light-blue

        * light-green

        * light-cyan

        * light-red

        * light-magenta

        * yellow

        * white

     But only the first eight names can be used for BACKGROUND. You can
     prefix `blink-' to FOREGROUND if you want a blinking foreground
     color.

     This command can be used in the configuration file and on the
     command line, so you may write something like this in your
     configuration file:

          # Set default colors.
          color light-gray/blue black/light-gray
          
          # Change the colors.
          title OS-BS like
          color magenta/blue black/magenta


File: grub.info,  Node: device,  Next: dhcp,  Prev: color,  Up: General commands

device
------

 - Command: device drive file
     In the grub shell, specify the file FILE as the actual drive for a
     BIOS drive DRIVE. You can use this command to create a disk image,
     and/or to fix the drives guessed by GRUB when GRUB fails to
     determine them correctly, like this:

          grub> device (fd0) /floppy-image
          grub> device (hd0) /dev/sd0

     This command can be used only in the grub shell (*note Invoking
     the grub shell::).


File: grub.info,  Node: dhcp,  Next: hide,  Prev: device,  Up: General commands

dhcp
----

 - Command: dhcp [--with-configfile]
     Initialize a network device via the "DHCP" protocol. Currently,
     this command is just an alias for `bootp', since the two protocols
     are very similar. This command is only available if GRUB is
     compiled with netboot support. See also *Note Network::.

     If you specify `--with-configfile' to this command, GRUB will
     fetch and load a configuration file specified by your DHCP server
     with the vendor tag `150'.


File: grub.info,  Node: hide,  Next: ifconfig,  Prev: dhcp,  Up: General commands

hide
----

 - Command: hide partition
     Hide the partition PARTITION by setting the "hidden" bit in its
     partition type code. This is useful only when booting DOS or
     Windows and multiple primary FAT partitions exist in one disk. See
     also *Note DOS/Windows::.


File: grub.info,  Node: ifconfig,  Next: pager,  Prev: hide,  Up: General commands

ifconfig
--------

 - Command: ifconfig [`--server=server'] [`--gateway=gateway']
          [`--mask=mask'] [`--address=address']
     Configure the IP address, the netmask, the gateway, and the server
     address of a network device manually. The values must be in dotted
     decimal format, like `192.168.11.178'. The order of the options is
     not important. This command shows current network configuration,
     if no option is specified. See also *Note Network::.


File: grub.info,  Node: pager,  Next: partnew,  Prev: ifconfig,  Up: General commands

pager
-----

 - Command: pager [flag]
     Toggle or set the state of the internal pager. If FLAG is `on',
     the internal pager is enabled. If FLAG is `off', it is disabled.
     If no argument is given, the state is toggled.


File: grub.info,  Node: partnew,  Next: parttype,  Prev: pager,  Up: General commands

partnew
-------

 - Command: partnew part type from to
     Create a new primary partition. PART is a partition specification
     in GRUB syntax (*note Naming convention::); TYPE is the partition
     type and must be a number in the range `0-0xff'; FROM and TO are
     the starting and ending sectors, expressed as an absolute sector
     number.


File: grub.info,  Node: parttype,  Next: password,  Prev: partnew,  Up: General commands

parttype
--------

 - Command: parttype part type
     Change the type of an existing partition.  PART is a partition
     specification in GRUB syntax (*note Naming convention::); TYPE is
     the new partition type and must be a number in the range 0-0xff.


File: grub.info,  Node: password,  Next: rarp,  Prev: parttype,  Up: General commands

password
--------

 - Command: password [`--md5'] passwd [new-config-file]
     If used in the first section of a menu file, disable all
     interactive editing control (menu entry editor and command-line)
     and entries protected by the command `lock'. If the password
     PASSWD is entered, it loads the NEW-CONFIG-FILE as a new config
     file and restarts the GRUB Stage 2, if NEW-CONFIG-FILE is
     specified. Otherwise, GRUB will just unlock the privileged
     instructions.  You can also use this command in the script
     section, in which case it will ask for the password, before
     continueing.  The option `--md5' tells GRUB that PASSWD is
     encrypted with `md5crypt' (*note md5crypt::).


File: grub.info,  Node: rarp,  Next: serial,  Prev: password,  Up: General commands

rarp
----

 - Command: rarp
     Initialize a network device via the "RARP" protocol.  This command
     is only available if GRUB is compiled with netboot support. See
     also *Note Network::.


File: grub.info,  Node: serial,  Next: setkey,  Prev: rarp,  Up: General commands

serial
------

 - Command: serial [`--unit=unit'] [`--port=port'] [`--speed=speed']
          [`--word=word'] [`--parity=parity'] [`--stop=stop']
          [`--device=dev']
     Initialize a serial device. UNIT is a number in the range 0-3
     specifying which serial port to use; default is 0, that corresponds
     the port often called COM1. PORT is the I/O port where the UART is
     to be found; if specified it takes precedence over UNIT.  SPEED is
     the transmission speed; default is 9600. WORD and STOP are the
     number of data bits and stop bits. Data bits must be in the range
     5-8 and stop bits are 1 or 2. Default is 8 data bits and one stop
     bit. PARITY is one of `no', `odd', `even' and defaults to `no'.
     The option `--device' can only be used in the grub shell and is
     used to specify the tty device to be used in the host operating
     system (*note Invoking the grub shell::).

     The serial port is not used as a communication channel unless the
     `terminal' command is used (*note terminal::).

     This command is only available if GRUB is compiled with serial
     support. See also *Note Serial terminal::.


File: grub.info,  Node: setkey,  Next: terminal,  Prev: serial,  Up: General commands

setkey
------

 - Command: setkey [to_key from_key]
     Change the keyboard map. The key FROM_KEY is mapped to the key
     TO_KEY. If no argument is specified, reset key mappings. Note that
     this command _does not_ exchange the keys. If you want to exchange
     the keys, run this command again with the arguments exchanged,
     like this:

          grub> setkey capslock control
          grub> setkey control capslock

     A key must be an alphabet, a digit, or one of these symbols:
     `escape', `exclam', `at', `numbersign', `dollar', `percent',
     `caret', `ampersand', `asterisk', `parenleft', `parenright',
     `minus', `underscore', `equal', `plus', `backspace', `tab',
     `bracketleft', `braceleft', `bracketright', `braceright', `enter',
     `control', `semicolon', `colon', `quote', `doublequote',
     `backquote', `tilde', `shift', `backslash', `bar', `comma',
     `less', `period', `greater', `slash', `question', `alt', `space',
     `capslock', `FX' (`X' is a digit), and `delete'. This table
     describes to which character each of the symbols corresponds:

    `exclam'
          `!'

    `at'
          `@'

    `numbersign'
          `#'

    `dollar'
          `$'

    `percent'
          `%'

    `caret'
          `^'

    `ampersand'
          `&'

    `asterisk'
          `*'

    `parenleft'
          `('

    `parenright'
          `)'

    `minus'
          `-'

    `underscore'
          `_'

    `equal'
          `='

    `plus'
          `+'

    `bracketleft'
          `['

    `braceleft'
          `{'

    `bracketright'
          `]'

    `braceright'
          `}'

    `semicolon'
          `;'

    `colon'
          `:'

    `quote'
          `''

    `doublequote'
          `"'

    `backquote'
          ``'

    `tilde'
          `~'

    `backslash'
          `\'

    `bar'
          `|'

    `comma'
          `,'

    `less'
          `<'

    `period'
          `.'

    `greater'
          `>'

    `slash'
          `/'

    `question'
          `?'

    `space'
          ` '


File: grub.info,  Node: terminal,  Next: terminfo,  Prev: setkey,  Up: General commands

terminal
--------

 - Command: terminal [`--dumb'] [`--no-echo'] [`--no-edit']
          [`--timeout=secs'] [`--lines=lines'] [`--silent'] [`console']
          [`serial'] [`hercules']
     Select a terminal for user interaction. The terminal is assumed to
     be VT100-compatible unless `--dumb' is specified. If both
     `console' and `serial' are specified, then GRUB will use the one
     where a key is entered first or the first when the timeout
     expires. If neither are specified, the current setting is
     reported. This command is only available if GRUB is compiled with
     serial support. See also *Note Serial terminal::.

     This may not make sense for most users, but GRUB supports Hercules
     console as well. Hercules console is usable like the ordinary
     console, and the usage is quite similar to that for serial
     terminals: specify `hercules' as the argument.

     The option `--lines' defines the number of lines in your terminal,
     and it is used for the internal pager function. If you don't
     specify this option, the number is assumed as 24.

     The option `--silent' suppresses the message to prompt you to hit
     any key. This might be useful if your system has no terminal
     device.

     The option `--no-echo' has GRUB not to echo back input characters.
     This implies the option `--no-edit'.

     The option `--no-edit' disables the BASH-like editing feature.


File: grub.info,  Node: terminfo,  Next: tftpserver,  Prev: terminal,  Up: General commands

terminfo
--------

 - Command: terminfo `--name=name' `--cursor-address=seq'
          [`--clear-screen=seq'] [`--enter-standout-mode=seq']
          [`--exit-standout-mode=seq']
     Define the capabilities of your terminal. Use this command to
     define escape sequences, if it is not vt100-compatible. You may
     use `\e' for <ESC> and `^X' for a control character.

     You can use the utility `grub-terminfo' to generate appropriate
     arguments to this command. *Note Invoking grub-terminfo::.

     If no option is specified, the current settings are printed.


File: grub.info,  Node: tftpserver,  Next: unhide,  Prev: terminfo,  Up: General commands

tftpserver
----------

 - Command: tftpserver ipaddr
     *Caution:* This command exists only for backward compatibility.
     Use `ifconfig' (*note ifconfig::) instead.

     Override a TFTP server address returned by a BOOTP/DHCP/RARP
     server. The argument IPADDR must be in dotted decimal format, like
     `192.168.0.15'.  This command is only available if GRUB is compiled
     with netboot support. See also *Note Network::.


File: grub.info,  Node: unhide,  Prev: tftpserver,  Up: General commands

unhide
------

 - Command: unhide partition
     Unhide the partition PARTITION by clearing the "hidden" bit in its
     partition type code. This is useful only when booting DOS or
     Windows and multiple primary partitions exist in one disk. See also
     *Note DOS/Windows::.


File: grub.info,  Node: Command-line and menu entry commands,  Prev: General commands,  Up: Commands

The list of command-line and menu entry commands
================================================

   These commands are usable in the command-line and in menu entries.
If you forget a command, you can run the command `help' (*note help::).

* Menu:

* blocklist::                   Get the block list notation of a file
* boot::                        Start up your operating system
* cat::                         Show the contents of a file
* chainloader::                 Chain-load another boot loader
* cmp::                         Compare two files
* configfile::                  Load a configuration file
* debug::                       Toggle the debug flag
* displayapm::                  Display APM information
* displaymem::                  Display memory configuration
* embed::                       Embed Stage 1.5
* find::                        Find a file
* fstest::                      Test a filesystem
* geometry::                    Manipulate the geometry of a drive
* halt::                        Shut down your computer
* help::                        Show help messages
* impsprobe::                   Probe SMP
* initrd::                      Load an initrd
* install::                     Install GRUB
* ioprobe::                     Probe I/O ports used for a drive
* kernel::                      Load a kernel
* lock::                        Lock a menu entry
* makeactive::                  Make a partition active
* map::                         Map a drive to another
* md5crypt::                    Encrypt a password in MD5 format
* module::                      Load a module
* modulenounzip::               Load a module without decompression
* pause::                       Wait for a key press
* quit::                        Exit from the grub shell
* reboot::                      Reboot your computer
* read::                        Read data from memory
* root::                        Set GRUB's root device
* rootnoverify::                Set GRUB's root device without mounting
* savedefault::                 Save current entry as the default entry
* setup::                       Set up GRUB's installation automatically
* testload::                    Load a file for testing a filesystem
* testvbe::                     Test VESA BIOS EXTENSION
* uppermem::                    Set the upper memory size
* vbeprobe::                    Probe VESA BIOS EXTENSION


File: grub.info,  Node: blocklist,  Next: boot,  Up: Command-line and menu entry commands

blocklist
---------

 - Command: blocklist file
     Print the block list notation of the file FILE. *Note Block list
     syntax::.


File: grub.info,  Node: boot,  Next: cat,  Prev: blocklist,  Up: Command-line and menu entry commands

boot
----

 - Command: boot
     Boot the OS/chain-loader which has been loaded. Only necessary if
     running the fully interactive command-line (it is implicit at the
     end of a menu entry).


File: grub.info,  Node: cat,  Next: chainloader,  Prev: boot,  Up: Command-line and menu entry commands

cat
---

 - Command: cat file
     Display the contents of the file FILE. This command may be useful
     to remind you of your OS's root partition:

          grub> cat /etc/fstab


File: grub.info,  Node: chainloader,  Next: cmp,  Prev: cat,  Up: Command-line and menu entry commands

chainloader
-----------

 - Command: chainloader [`--force'] file
     Load FILE as a chain-loader. Like any other file loaded by the
     filesystem code, it can use the blocklist notation to grab the
     first sector of the current partition with `+1'. If you specify the
     option `--force', then load FILE forcibly, whether it has a
     correct signature or not. This is required when you want to load a
     defective boot loader, such as SCO UnixWare 7.1 (*note SCO
     UnixWare::).


File: grub.info,  Node: cmp,  Next: configfile,  Prev: chainloader,  Up: Command-line and menu entry commands

cmp
---

 - Command: cmp file1 file2
     Compare the file FILE1 with the file FILE2. If they differ in
     size, print the sizes like this:

          Differ in size: 0x1234 [foo], 0x4321 [bar]

     If the sizes are equal but the bytes at an offset differ, then
     print the bytes like this:

          Differ at the offset 777: 0xbe [foo], 0xef [bar]

     If they are completely identical, nothing will be printed.


File: grub.info,  Node: configfile,  Next: debug,  Prev: cmp,  Up: Command-line and menu entry commands

configfile
----------

 - Command: configfile file
     Load FILE as a configuration file.


File: grub.info,  Node: debug,  Next: displayapm,  Prev: configfile,  Up: Command-line and menu entry commands

debug
-----

 - Command: debug
     Toggle debug mode (by default it is off). When debug mode is on,
     some extra messages are printed to show disk activity. This global
     debug flag is mainly useful for GRUB developers when testing new
     code.


File: grub.info,  Node: displayapm,  Next: displaymem,  Prev: debug,  Up: Command-line and menu entry commands

displayapm
----------

 - Command: displayapm
     Display APM BIOS information.


File: grub.info,  Node: displaymem,  Next: embed,  Prev: displayapm,  Up: Command-line and menu entry commands

displaymem
----------

 - Command: displaymem
     Display what GRUB thinks the system address space map of the
     machine is, including all regions of physical RAM installed. GRUB's
     "upper/lower memory" display uses the standard BIOS interface for
     the available memory in the first megabyte, or "lower memory", and
     a synthesized number from various BIOS interfaces of the memory
     starting at 1MB and going up to the first chipset hole for "upper
     memory" (the standard PC "upper memory" interface is limited to
     reporting a maximum of 64MB).


File: grub.info,  Node: embed,  Next: find,  Prev: displaymem,  Up: Command-line and menu entry commands

embed
-----

 - Command: embed stage1_5 device
     Embed the Stage 1.5 STAGE1_5 in the sectors after the MBR if
     DEVICE is a drive, or in the "boot loader" area if DEVICE is a FFS
     partition or a ReiserFS partition.(1) (*note embed-Footnote-1::)
     Print the number of sectors which STAGE1_5 occupies, if successful.

     Usually, you don't need to run this command directly. *Note
     setup::.


File: grub.info,  Node: embed-Footnotes,  Up: embed

   (1) The latter feature has not been implemented yet.


File: grub.info,  Node: find,  Next: fstest,  Prev: embed,  Up: Command-line and menu entry commands

find
----

 - Command: find filename
     Search for the file name FILENAME in all of partitions and print
     the list of the devices which contain the file. The file name
     FILENAME should be an absolute file name like `/boot/grub/stage1'.


File: grub.info,  Node: fstest,  Next: geometry,  Prev: find,  Up: Command-line and menu entry commands

fstest
------

 - Command: fstest
     Toggle filesystem test mode.  Filesystem test mode, when turned
     on, prints out data corresponding to all the device reads and what
     values are being sent to the low-level routines. The format is
     `<PARTITION-OFFSET-SECTOR, BYTE-OFFSET, BYTE-LENGTH>' for
     high-level reads inside a partition, and `[DISK-OFFSET-SECTOR]'
     for low-level sector requests from the disk.  Filesystem test mode
     is turned off by any use of the `install' (*note install::) or
     `testload' (*note testload::) commands.


File: grub.info,  Node: geometry,  Next: halt,  Prev: fstest,  Up: Command-line and menu entry commands

geometry
--------

 - Command: geometry drive [cylinder head sector [total_sector]]
     Print the information for the drive DRIVE. In the grub shell, you
     can set the geometry of the drive arbitrarily. The number of the
     cylinders, the one of the heads, the one of the sectors and the
     one of the total sectors are set to CYLINDER, HEAD, SECTOR and
     TOTAL_SECTOR, respectively. If you omit TOTAL_SECTOR, then it will
     be calculated based on the C/H/S values automatically.


File: grub.info,  Node: halt,  Next: help,  Prev: geometry,  Up: Command-line and menu entry commands

halt
----

 - Command: halt `--no-apm'
     The command halts the computer. If the `--no-apm' option is
     specified, no APM BIOS call is performed. Otherwise, the computer
     is shut down using APM.


File: grub.info,  Node: help,  Next: impsprobe,  Prev: halt,  Up: Command-line and menu entry commands

help
----

 - Command: help `--all' [pattern ...]
     Display helpful information about builtin commands. If you do not
     specify PATTERN, this command shows short descriptions of most of
     available commands. If you specify the option `--all' to this
     command, short descriptions of rarely used commands (such as *Note
     testload::) are displayed as well.

     If you specify any PATTERNS, it displays longer information about
     each of the commands which match those PATTERNS.


File: grub.info,  Node: impsprobe,  Next: initrd,  Prev: help,  Up: Command-line and menu entry commands

impsprobe
---------

 - Command: impsprobe
     Probe the Intel Multiprocessor Specification 1.1 or 1.4
     configuration table and boot the various CPUs which are found into
     a tight loop. This command can be used only in the Stage 2.


File: grub.info,  Node: initrd,  Next: install,  Prev: impsprobe,  Up: Command-line and menu entry commands

initrd
------

 - Command: initrd file ...
     Load an initial ramdisk for a Linux format boot image and set the
     appropriate parameters in the Linux setup area in memory. See also
     *Note GNU/Linux::.


File: grub.info,  Node: install,  Next: ioprobe,  Prev: initrd,  Up: Command-line and menu entry commands

install
-------

 - Command: install [`--force-lba'] [`--stage2=os_stage2_file']
          stage1_file [`d'] dest_dev stage2_file [addr] [`p']
          [config_file] [real_config_file]
     This command is fairly complex, and you should not use this command
     unless you are familiar with GRUB. Use `setup' (*note setup::)
     instead.

     In short, it will perform a full install presuming the Stage 2 or
     Stage 1.5(1) (*note install-Footnote-1::) is in its final install
     location.

     In slightly more detail, it will load STAGE1_FILE, validate that
     it is a GRUB Stage 1 of the right version number, install a
     blocklist for loading STAGE2_FILE as a Stage 2. If the option `d'
     is present, the Stage 1 will always look for the actual disk
     STAGE2_FILE was installed on, rather than using the booting drive.
     The Stage 2 will be loaded at address ADDR, which must be `0x8000'
     for a true Stage 2, and `0x2000' for a Stage 1.5. If ADDR is not
     present, GRUB will determine the address automatically. It then
     writes the completed Stage 1 to the first block of the device
     DEST_DEV. If the options `p' or CONFIG_FILE are present, then it
     reads the first block of stage2, modifies it with the values of
     the partition STAGE2_FILE was found on (for `p') or places the
     string CONFIG_FILE into the area telling the stage2 where to look
     for a configuration file at boot time. Likewise, if
     REAL_CONFIG_FILE is present and STAGE2_FILE is a Stage 1.5, then
     the Stage 2 CONFIG_FILE is patched with the configuration file
     name REAL_CONFIG_FILE. This command preserves the DOS BPB (and for
     hard disks, the partition table) of the sector the Stage 1 is to
     be installed into.

     *Caution:* Several buggy BIOSes don't pass a booting drive
     properly when booting from a hard disk drive. Therefore, you will
     have to specify the option `d', whether your Stage2 resides at the
     booting drive or not, if you have such a BIOS unfortunately. We
     know these are defective in that:


          Fujitsu LifeBook 400 BIOS version 31J0103A


          HP Vectra XU 6/200 BIOS version GG.06.11

     *Caution2:* A number of BIOSes don't return a correct LBA support
     bitmap even if they do have the support. So GRUB provides a
     solution to ignore the wrong bitmap, that is, the option
     `--force-lba'. Don't use this option if you know that your BIOS
     doesn't have LBA support.

     *Caution3:* You must specify the option `--stage2' in the grub
     shell, if you cannot unmount the filesystem where your stage2 file
     resides. The argument should be the file name in your operating
     system.


File: grub.info,  Node: install-Footnotes,  Up: install

   (1) They're loaded the same way, so we will refer to the Stage 1.5
as a Stage 2 from now on.


File: grub.info,  Node: ioprobe,  Next: kernel,  Prev: install,  Up: Command-line and menu entry commands

ioprobe
-------

 - Command: ioprobe drive
     Probe I/O ports used for the drive DRIVE. This command will list
     the I/O ports on the screen. For technical information, *Note
     Internals::.


File: grub.info,  Node: kernel,  Next: lock,  Prev: ioprobe,  Up: Command-line and menu entry commands

kernel
------

 - Command: kernel [`--type=type'] [`--no-mem-option'] file ...
     Attempt to load the primary boot image (Multiboot a.out or ELF,
     Linux zImage or bzImage, FreeBSD a.out, NetBSD a.out, etc.) from
     FILE. The rest of the line is passed verbatim as the "kernel
     command-line". Any modules must be reloaded after using this
     command.

     This command also accepts the option `--type' so that you can
     specify the kernel type of FILE explicitly. The argument TYPE must
     be one of these: `netbsd', `freebsd', `openbsd', `linux',
     `biglinux', and `multiboot'. However, you need to specify it only
     if you want to load a NetBSD ELF kernel, because GRUB can
     automatically determine a kernel type in the other cases, quite
     safely.

     The option `--no-mem-option' is effective only for Linux. If the
     option is specified, GRUB doesn't pass the option `mem=' to the
     kernel.


File: grub.info,  Node: lock,  Next: makeactive,  Prev: kernel,  Up: Command-line and menu entry commands

lock
----

 - Command: lock
     Prevent normal users from executing arbitrary menu entries. You
     must use the command `password' if you really want this command to
     be useful (*note password::).

     This command is used in a menu, as shown in this example:

          title This entry is too dangerous to be executed by normal users
          lock
          root (hd0,a)
          kernel /no-security-os

     See also *Note Security::.


File: grub.info,  Node: makeactive,  Next: map,  Prev: lock,  Up: Command-line and menu entry commands

makeactive
----------

 - Command: makeactive
     Set the active partition on the root disk to GRUB's root device.
     This command is limited to _primary_ PC partitions on a hard disk.


File: grub.info,  Node: map,  Next: md5crypt,  Prev: makeactive,  Up: Command-line and menu entry commands

map
---

 - Command: map to_drive from_drive
     Map the drive FROM_DRIVE to the drive TO_DRIVE. This is necessary
     when you chain-load some operating systems, such as DOS, if such
     an OS resides at a non-first drive. Here is an example:

          grub> map (hd0) (hd1)
          grub> map (hd1) (hd0)

     The example exchanges the order between the first hard disk and the
     second hard disk. See also *Note DOS/Windows::.


File: grub.info,  Node: md5crypt,  Next: module,  Prev: map,  Up: Command-line and menu entry commands

md5crypt
--------

 - Command: md5crypt
     Prompt to enter a password, and encrypt it in MD5 format. The
     encrypted password can be used with the command `password' (*note
     password::). See also *Note Security::.


File: grub.info,  Node: module,  Next: modulenounzip,  Prev: md5crypt,  Up: Command-line and menu entry commands

module
------

 - Command: module file ...
     Load a boot module FILE for a Multiboot format boot image (no
     interpretation of the file contents are made, so that user of this
     command must know what the kernel in question expects). The rest
     of the line is passed as the "module command-line", like the
     `kernel' command. You must load a Multiboot kernel image before
     loading any module. See also *Note modulenounzip::.


File: grub.info,  Node: modulenounzip,  Next: pause,  Prev: module,  Up: Command-line and menu entry commands

modulenounzip
-------------

 - Command: modulenounzip file ...
     The same as `module' (*note module::), except that automatic
     decompression is disabled.


File: grub.info,  Node: pause,  Next: quit,  Prev: modulenounzip,  Up: Command-line and menu entry commands

pause
-----

 - Command: pause message ...
     Print the MESSAGE, then wait until a key is pressed. Note that
     placing <^G> (ASCII code 7) in the message will cause the speaker
     to emit the standard beep sound, which is useful when prompting
     the user to change floppies.


File: grub.info,  Node: quit,  Next: reboot,  Prev: pause,  Up: Command-line and menu entry commands

quit
----

 - Command: quit
     Exit from the grub shell `grub' (*note Invoking the grub shell::).
     This command can be used only in the grub shell.


File: grub.info,  Node: reboot,  Next: read,  Prev: quit,  Up: Command-line and menu entry commands

reboot
------

 - Command: reboot
     Reboot the computer.


File: grub.info,  Node: read,  Next: root,  Prev: reboot,  Up: Command-line and menu entry commands

read
----

 - Command: read addr
     Read a 32-bit value from memory at address ADDR and display it in
     hex format.


File: grub.info,  Node: root,  Next: rootnoverify,  Prev: read,  Up: Command-line and menu entry commands

root
----

 - Command: root device [hdbias]
     Set the current "root device" to the device DEVICE, then attempt
     to mount it to get the partition size (for passing the partition
     descriptor in `ES:ESI', used by some chain-loaded boot loaders),
     the BSD drive-type (for booting BSD kernels using their native
     boot format), and correctly determine the PC partition where a BSD
     sub-partition is located. The optional HDBIAS parameter is a
     number to tell a BSD kernel how many BIOS drive numbers are on
     controllers before the current one. For example, if there is an
     IDE disk and a SCSI disk, and your FreeBSD root partition is on
     the SCSI disk, then use a `1' for HDBIAS.

     See also *Note rootnoverify::.


File: grub.info,  Node: rootnoverify,  Next: savedefault,  Prev: root,  Up: Command-line and menu entry commands

rootnoverify
------------

 - Command: rootnoverify device [hdbias]
     Similar to `root' (*note root::), but don't attempt to mount the
     partition. This is useful for when an OS is outside of the area of
     the disk that GRUB can read, but setting the correct root device
     is still desired. Note that the items mentioned in `root' above
     which derived from attempting the mount will _not_ work correctly.


File: grub.info,  Node: savedefault,  Next: setup,  Prev: rootnoverify,  Up: Command-line and menu entry commands

savedefault
-----------

 - Command: savedefault
     Save the current menu entry as a default entry. Here is an example:

          default saved
          timeout 10
          
          title GNU/Linux
          root (hd0,0)
          kernel /boot/vmlinuz root=/dev/sda1 vga=ext
          initrd /boot/initrd
          savedefault
          
          title FreeBSD
          root (hd0,a)
          kernel /boot/loader
          savedefault

     With this configuration, GRUB will choose the entry booted
     previously as the default entry. See also *Note default::.


File: grub.info,  Node: setup,  Next: testload,  Prev: savedefault,  Up: Command-line and menu entry commands

setup
-----

 - Command: setup [`--force-lba'] [`--stage2=os_stage2_file']
          [`--prefix=dir'] install_device [image_device]
     Set up the installation of GRUB automatically. This command uses
     the more flexible command `install' (*note install::) in the
     backend and installs GRUB into the device INSTALL_DEVICE. If
     IMAGE_DEVICE is specified, then find the GRUB images (*note
     Images::) in the device IMAGE_DEVICE, otherwise use the current
     "root device", which can be set by the command `root'. If
     INSTALL_DEVICE is a hard disk, then embed a Stage 1.5 in the disk
     if possible.

     The option `--prefix' specifies the directory under which GRUB
     images are put. If it is not specified, GRUB automatically
     searches them in `/boot/grub' and `/grub'.

     The options `--force-lba' and `--stage2' are just passed to
     `install' if specified. *Note install::, for more information.

