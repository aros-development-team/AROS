#   $Id: mmakefile.src 24161 2006-03-14 14:29:02Z MastaTabs $
#
#   Generate the libarosm for m68k. Not much content so far.
#
include $(TOP)/config/make.cfg

#MM linklibs-arosm-m68000
#MM linklibs-arosm-m68328
#MM linklibs-arosm-m68k

##linklibs-arosm-m68328: arosm-setup-link linklibs-arosm-m68328
##linklibs-arosm-m68000: arosm-setup-link linklibs-arosm-m68000
##linklibs-arosm-m68k: arosm-setup-link linklibs-arosm-m68k


BDID := $(BDID)_
ifneq ($(filter $(TARGET),linklibs-arosm-m68000 linklibs-arosm-m68000-clean),)
BDTARGETID := $(BDID)
endif

# assign and generate the local variables used in this macro
BD_LIBNAME$(BDID)    := arosm
OBJDIR               ?= $(GENDIR)/$(CURDIR)
BD_OBJDIR$(BDID)     := $(OBJDIR)
BD_LIBDIR$(BDID)     := $(LIBDIR)

BD_FILES$(BDID)      := dummy
BD_ASMFILES$(BDID)   := 
BD_SRCS$(BDID)       := $(addsuffix .c,$(BD_FILES$(BDID)))
BD_OBJS$(BDID)       := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(notdir $(BD_FILES$(BDID)) $(BD_ASMFILES$(BDID)))))
BD_DEPS$(BDID)       := $(patsubst %.o,%.d,$(BD_OBJS$(BDID)))

BD_CFLAGS$(BDID)     := $(CFLAGS)
ifeq (,)
BD_DFLAGS$(BDID)     := $(BD_CFLAGS$(BDID))
else
BD_DFLAGS$(BDID)     := 
endif
BD_AFLAGS$(BDID)     := $(AFLAGS)

BD_LINKLIB$(BDID)    := $(BD_LIBDIR$(BDID))/lib$(BD_LIBNAME$(BDID)).a

.PHONY : linklibs-arosm-m68000 linklibs-arosm-m68000-clean

#MM
linklibs-arosm-m68000 : $(BD_LINKLIB$(BDID))

#MM
linklibs-arosm-m68000-clean ::
	@$(RM) $(BD_OBJS$(BDID)) $(BD_DEPS$(BDID))

ifeq ($(TARGET),linklibs-arosm-m68000)
ifneq ($(dir $(BD_FILES$(BDID))),./)
vpath %.c $(filter-out ./,$(dir $(BD_FILES$(BDID))))
endif


ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := %
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir %)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : %.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(TMP_CMD)" $(MKDEPEND) $(TMP_DFLAGS) $< -o $@

ifeq ($(BD_OBJDIR$(BDID)),)
%.o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

else
$(BD_OBJDIR$(BDID))/$(notdir %).o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

endif
endif


$(BD_LIBDIR$(BDID))/libarosm.a : $(BD_OBJS$(BDID))
	@$(ECHO) "Creating library $@..."
	@$(AR) $@ $^
	@$(RANLIB) $@

ifneq ($(BD_DEPS$(BDID)),)
  ifneq (linklibs-arosm-m68000,)
    ifneq ($(findstring $(TARGET),linklibs-arosm-m68000),)
      -include $(BD_DEPS$(BDID))
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS$(BDID))
    endif
  endif
endif

$(BD_OBJS$(BDID)) $(BD_DEPS$(BDID)) : | $(BD_OBJDIR$(BDID))
$(BD_LINKLIB$(BDID)) : | $(BD_LIBDIR$(BDID))
GLOB_MKDIRS += $(BD_OBJDIR$(BDID)) $(BD_LIBDIR$(BDID))


BDID := $(BDID)_
ifneq ($(filter $(TARGET),linklibs-arosm-m68k linklibs-arosm-m68k-clean),)
BDTARGETID := $(BDID)
endif

# assign and generate the local variables used in this macro
BD_LIBNAME$(BDID)    := arosm
OBJDIR               ?= $(GENDIR)/$(CURDIR)
BD_OBJDIR$(BDID)     := $(OBJDIR)
BD_LIBDIR$(BDID)     := $(LIBDIR)

BD_FILES$(BDID)      := dummy
BD_ASMFILES$(BDID)   := 
BD_SRCS$(BDID)       := $(addsuffix .c,$(BD_FILES$(BDID)))
BD_OBJS$(BDID)       := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(notdir $(BD_FILES$(BDID)) $(BD_ASMFILES$(BDID)))))
BD_DEPS$(BDID)       := $(patsubst %.o,%.d,$(BD_OBJS$(BDID)))

BD_CFLAGS$(BDID)     := $(CFLAGS)
ifeq (,)
BD_DFLAGS$(BDID)     := $(BD_CFLAGS$(BDID))
else
BD_DFLAGS$(BDID)     := 
endif
BD_AFLAGS$(BDID)     := $(AFLAGS)

BD_LINKLIB$(BDID)    := $(BD_LIBDIR$(BDID))/lib$(BD_LIBNAME$(BDID)).a

.PHONY : linklibs-arosm-m68k linklibs-arosm-m68k-clean

#MM
linklibs-arosm-m68k : $(BD_LINKLIB$(BDID))

#MM
linklibs-arosm-m68k-clean ::
	@$(RM) $(BD_OBJS$(BDID)) $(BD_DEPS$(BDID))

ifeq ($(TARGET),linklibs-arosm-m68k)
ifneq ($(dir $(BD_FILES$(BDID))),./)
vpath %.c $(filter-out ./,$(dir $(BD_FILES$(BDID))))
endif


ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := %
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir %)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : %.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(TMP_CMD)" $(MKDEPEND) $(TMP_DFLAGS) $< -o $@

ifeq ($(BD_OBJDIR$(BDID)),)
%.o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

else
$(BD_OBJDIR$(BDID))/$(notdir %).o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(AS) $(BD_AFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

endif
endif


$(BD_LIBDIR$(BDID))/libarosm.a : $(BD_OBJS$(BDID))
	@$(ECHO) "Creating library $@..."
	@$(AR) $@ $^
	@$(RANLIB) $@

ifneq ($(BD_DEPS$(BDID)),)
  ifneq (linklibs-arosm-m68k,)
    ifneq ($(findstring $(TARGET),linklibs-arosm-m68k),)
      -include $(BD_DEPS$(BDID))
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS$(BDID))
    endif
  endif
endif

$(BD_OBJS$(BDID)) $(BD_DEPS$(BDID)) : | $(BD_OBJDIR$(BDID))
$(BD_LINKLIB$(BDID)) : | $(BD_LIBDIR$(BDID))
GLOB_MKDIRS += $(BD_OBJDIR$(BDID)) $(BD_LIBDIR$(BDID))


##MM
##arosm-setup-link :
##	@$(RM) $(AROSDIR)/lib/libm.a
##	@ln -s libarosm.a $(AROSDIR)/lib/libm.a

# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

include $(TOP)/config/make.tail

BDID := $(BDTARGETID)
