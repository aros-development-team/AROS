##begin config
version 1.0
residentpri 125
basename ACPICA
libbasetype struct ACPICABase
##end config

##begin cdef
#include <libraries/acpica.h>
#include <utility/hooks.h>
##end cdef

##begin cdefprivate
#include "acpica_intern.h"
##end cdefprivate

##begin functionlist
ACPI_STATUS AcpiInitializeSubsystem()
ACPI_STATUS AcpiInstallInitializationHandler(ACPI_INIT_HANDLER Handler, UINT32 Function)
ACPI_STATUS AcpiEnableSubsystem(UINT32 Flags)
ACPI_STATUS AcpiInitializeObjects(UINT32 Flags)
ACPI_STATUS AcpiSubsystemStatus()
ACPI_STATUS AcpiTerminate()
ACPI_STATUS AcpiInstallInterface(ACPI_STRING InterfaceName)
ACPI_STATUS AcpiRemoveInterface(ACPI_STRING InterfaceName)
ACPI_STATUS AcpiInstallInterfaceHandler(ACPI_INTERFACE_HANDLER Handler)
ACPI_STATUS AcpiInitializeTables(ACPI_TABLE_DESC *InitialTableArray, UINT32 InitialTableCount, BOOLEAN AllowResize)
ACPI_STATUS AcpiReallocateRootTable()
ACPI_STATUS AcpiFindRootPointer(ACPI_PHYSICAL_ADDRESS *TableAddress)
ACPI_STATUS AcpiLoadTables()
ACPI_STATUS AcpiLoadTable(ACPI_TABLE_HEADER *Table)
ACPI_STATUS AcpiUnloadParentTable(ACPI_HANDLE Object)
ACPI_STATUS AcpiGetTableHeader(char *Signature, UINT32 Instance, ACPI_TABLE_HEADER *OutTableHeader)
ACPI_STATUS AcpiGetTable(char *Signature, UINT32 Instance, ACPI_TABLE_HEADER **Table)
ACPI_STATUS AcpiGetTableByIndex(UINT32 TableIndex, ACPI_TABLE_HEADER **OutTable)
ACPI_STATUS AcpiInstallTableHandler(ACPI_TABLE_HANDLER Handler, void *Context)
ACPI_STATUS AcpiRemoveTableHandler(ACPI_TABLE_HANDLER Handler)
ACPI_STATUS AcpiEvaluateObject(ACPI_HANDLE Object, ACPI_STRING Pathname, ACPI_OBJECT_LIST *MethodParams, ACPI_BUFFER *ReturnBuffer)
ACPI_STATUS AcpiEvaluateObjectTyped(ACPI_HANDLE Object, ACPI_STRING Pathname, ACPI_OBJECT_LIST *MethodParams, ACPI_BUFFER *ReturnBuffer, ACPI_OBJECT_TYPE ReturnType)
ACPI_STATUS AcpiGetObjectInfo(ACPI_HANDLE Object, ACPI_DEVICE_INFO **OutBuffer)
ACPI_STATUS AcpiGetNextObject(ACPI_OBJECT_TYPE Type, ACPI_HANDLE Parent, ACPI_HANDLE Child, ACPI_HANDLE *OutHandle)
ACPI_STATUS AcpiGetParent(ACPI_HANDLE Child, ACPI_HANDLE *OutParent)
ACPI_STATUS AcpiGetType(ACPI_HANDLE Object, ACPI_OBJECT_TYPE *OutType)
ACPI_STATUS AcpiGetHandle(ACPI_HANDLE Parent, ACPI_STRING Pathname, ACPI_HANDLE *OutHandle)
ACPI_STATUS AcpiGetName(ACPI_HANDLE Object, UINT32 NameType, ACPI_BUFFER *OutName)
ACPI_STATUS AcpiGetDevices(char *HID, ACPI_WALK_CALLBACK UserFunction, void *UserContext, void **ReturnValue)
ACPI_STATUS AcpiAttachData(ACPI_HANDLE Object, ACPI_OBJECT_HANDLER Handler, void *Data)
ACPI_STATUS AcpiDetachData(ACPI_HANDLE Object, ACPI_OBJECT_HANDLER Handler)
ACPI_STATUS AcpiGetData(ACPI_HANDLE Object, ACPI_OBJECT_HANDLER Handler, void **Data)
ACPI_STATUS AcpiInstallMethod(UINT8 *TableBuffer)
ACPI_STATUS AcpiWalkNamespace(ACPI_OBJECT_TYPE Type, ACPI_HANDLE StartObject, UINT32 MaxDepth, ACPI_WALK_CALLBACK PreOrderVisit, ACPI_WALK_CALLBACK PostOrderVisit, void *UserContext, void **ReturnValue)
ACPI_STATUS AcpiAcquireMutex(ACPI_HANDLE Parent, ACPI_STRING Pathname, UINT16 Timeout)
ACPI_STATUS AcpiReleaseMutex(ACPI_HANDLE Parent, ACPI_STRING Pathname)
ACPI_STATUS AcpiEnable()
ACPI_STATUS AcpiDisable()
ACPI_STATUS AcpiReset()
ACPI_STATUS AcpiReadBitRegister(UINT32 RegisterId, UINT32 *ReturnValue)
ACPI_STATUS AcpiWriteBitRegister(UINT32 RegisterId, UINT32 Value)
ACPI_STATUS AcpiRead(UINT64 *ReturnValue, ACPI_GENERIC_ADDRESS *Register)
ACPI_STATUS AcpiWrite(UINT64 Value, ACPI_GENERIC_ADDRESS *Register)
ACPI_STATUS AcpiAcquireGlobalLock(UINT16 Timeout, UINT32 *OutHandle)
ACPI_STATUS AcpiReleaseGlobalLock(UINT32 Handle)
ACPI_STATUS AcpiGetTimerResolution(UINT32 *OutValue)
ACPI_STATUS AcpiGetTimerDuration(UINT32 StartTicks, UINT32 EndTicks, UINT32 *OutValue)
ACPI_STATUS AcpiGetTimer(UINT32 *OutValue)
ACPI_STATUS AcpiEnableEvent(UINT32 Event, UINT32 Flags)
ACPI_STATUS AcpiDisableEvent(UINT32 Event, UINT32 Flags)
ACPI_STATUS AcpiClearEvent(UINT32 Event)
ACPI_STATUS AcpiGetEventStatus(UINT32 Event, ACPI_EVENT_STATUS *EventStatus)
ACPI_STATUS AcpiInstallFixedEventHandler(UINT32 Event, ACPI_EVENT_HANDLER Handler, void *Context)
ACPI_STATUS AcpiRemoveFixedEventHandler(UINT32 Event, ACPI_EVENT_HANDLER Handler)
ACPI_STATUS AcpiUpdateAllGpes()
ACPI_STATUS AcpiEnableGpe(ACPI_HANDLE GpeDevice, UINT32 GpeNumber)
ACPI_STATUS AcpiDisableGpe(ACPI_HANDLE GpeDevice, UINT32 GpeNumber)
ACPI_STATUS AcpiClearGpe(ACPI_HANDLE GpeDevice, UINT32 GpeNumber)
ACPI_STATUS AcpiSetGpe(ACPI_HANDLE GpeDevice, UINT32 GpeNumber, UINT8 Action)
ACPI_STATUS AcpiFinishGpe(ACPI_HANDLE GpeDevice, UINT32 GpeNumber)
ACPI_STATUS AcpiGetGpeStatus(ACPI_HANDLE GpeDevice, UINT32 GpeNumber, ACPI_EVENT_STATUS *EventStatus)
ACPI_STATUS AcpiGetGpeDevice(UINT32 Index, ACPI_HANDLE *GpeDevice)
ACPI_STATUS AcpiDisableAllGpes()
ACPI_STATUS AcpiEnableAllRuntimeGpes()
ACPI_STATUS AcpiInstallGpeBlock(ACPI_HANDLE GpeDevice, ACPI_GENERIC_ADDRESS *GpeBlockAddress, UINT32 RegisterCount, UINT32 Interrupt)
ACPI_STATUS AcpiRemoveGpeBlock(ACPI_HANDLE GpeDevice)
ACPI_STATUS AcpiInstallGpeHandler(ACPI_HANDLE GpeDevice, UINT32 GpeNumber, UINT32 Type, ACPI_GPE_HANDLER Handler, void *Context)
ACPI_STATUS AcpiRemoveGpeHandler(ACPI_HANDLE GpeDevice, UINT32 GpeNumber, ACPI_GPE_HANDLER Handler)
ACPI_STATUS AcpiInstallGlobalEventHandler(ACPI_GBL_EVENT_HANDLER Handler, void *Context)
ACPI_STATUS AcpiInstallNotifyHandler(ACPI_HANDLE Object, UINT32 Type, ACPI_NOTIFY_HANDLER Handler, void *Context)
ACPI_STATUS AcpiRemoveNotifyHandler(ACPI_HANDLE Object, UINT32 Type, ACPI_NOTIFY_HANDLER Handler)
ACPI_STATUS AcpiInstallAddressSpaceHandler(ACPI_HANDLE Object, ACPI_ADR_SPACE_TYPE SpaceId, ACPI_ADR_SPACE_HANDLER Handler, ACPI_ADR_SPACE_SETUP Setup, void *Context)
ACPI_STATUS AcpiRemoveAddressSpaceHandler(ACPI_HANDLE Object, ACPI_ADR_SPACE_TYPE SpaceId, ACPI_ADR_SPACE_HANDLER Handler)
ACPI_STATUS AcpiInstallExceptionHandler(ACPI_EXCEPTION_HANDLER Handler)
ACPI_STATUS AcpiGetCurrentResources(ACPI_HANDLE Device, ACPI_BUFFER *OutBuffer)
ACPI_STATUS AcpiGetPossibleResources(ACPI_HANDLE Device, ACPI_BUFFER *OutBuffer)
ACPI_STATUS AcpiSetCurrentResources(ACPI_HANDLE Device, ACPI_BUFFER *Buffer)
ACPI_STATUS AcpiGetEventResources(ACPI_HANDLE Device, ACPI_BUFFER *OutBuffer)
ACPI_STATUS AcpiGetIrqRoutingTable(ACPI_HANDLE Device, ACPI_BUFFER *OutBuffer)
ACPI_STATUS AcpiGetVendorResource(ACPI_HANDLE Device, char *Name, ACPI_VENDOR_UUID *Uuid, ACPI_BUFFER *OutBuffer)
ACPI_STATUS AcpiBufferToResource(UINT8 *AmlBuffer, UINT16 AmlBufferLength, ACPI_RESOURCE **OutResource)
ACPI_STATUS AcpiResourceToAddress64(ACPI_RESOURCE *Resource, ACPI_RESOURCE_ADDRESS64 *OutResource)
ACPI_STATUS AcpiWalkResources(ACPI_HANDLE Device, char *Name, ACPI_WALK_RESOURCE_CALLBACK UserFunction, void *UserContext)
UINT32 AcpiCheckAddressRange(ACPI_ADR_SPACE_TYPE SpaceId, ACPI_PHYSICAL_ADDRESS Address, ACPI_SIZE Length, BOOLEAN EmitWarning)
ACPI_STATUS AcpiDebugTrace(char *Name, UINT32 DebugLevel, UINT32 DebugLayer, UINT32 Flags)
ACPI_STATUS AcpiDecodePldBuffer(UINT8 *Buffer, ACPI_SIZE Length, ACPI_PLD_INFO **ReturnBuffer)
const char *AcpiFormatException(ACPI_STATUS Status)
ACPI_STATUS AcpiGetStatistics(ACPI_STATISTICS *OutStats)
ACPI_STATUS AcpiGetSystemInfo(ACPI_BUFFER *OutBuffer)
ACPI_STATUS AcpiPurgeCachedObjects()
LONG AcpiScanTables(const char *Signature, const struct Hook *Hook, APTR UserData)
##end functionlist
