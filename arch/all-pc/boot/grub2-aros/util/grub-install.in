#! /bin/sh

# Install GRUB on your drive.
# Copyright (C) 1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

# Initialize some variables.
transform="@program_transform_name@"

prefix="@prefix@"
exec_prefix="@exec_prefix@"
datarootdir="@datarootdir@"
sbindir="@sbindir@"
bindir="@bindir@"
libdir="@libdir@"
sysconfdir="@sysconfdir@"
PACKAGE_NAME=@PACKAGE_NAME@
PACKAGE_TARNAME=@PACKAGE_TARNAME@
PACKAGE_VERSION=@PACKAGE_VERSION@

export TEXTDOMAIN=@PACKAGE@
export TEXTDOMAINDIR="@localedir@"

host_os=@host_os@
source_dir=
target=
datadir="@datadir@"
if [ "x$pkgdatadir" = x ]; then
    pkgdatadir="${datadir}/@PACKAGE@"
fi
localedir="@datadir@/locale"

self="`basename $0`"

grub_mkimage="${bindir}/`echo grub-mkimage | sed ${transform}`"
grub_probe="${sbindir}/`echo grub-probe | sed ${transform}`"
grub_editenv="${bindir}/`echo grub-editenv | sed ${transform}`"
grub_mkrelpath="${bindir}/`echo grub-mkrelpath | sed ${transform}`"
rootdir=
bootdir=
grubdir="`echo "/@bootdirname@/@grubdirname@" | sed 's,//*,/,g'`"
modules=

install_device=
force_lba=
recheck=no
debug=no
debug_image=

update_nvram=yes

removable=no
efi_quiet=

# Get GRUB_DISTRIBUTOR.
if test -f "${sysconfdir}/default/grub" ; then
    . "${sysconfdir}/default/grub"
fi

bootloader_id="$(echo "$GRUB_DISTRIBUTOR" | tr 'A-Z' 'a-z' | cut -d' ' -f1)"
if test -z "$bootloader_id"; then
    bootloader_id=grub
fi

disk_module=unspecified

. "${pkgdatadir}/grub-mkconfig_lib"

# Usage: usage
# Print the usage.
usage () {
    # TRANSLATORS: INSTALL_DEVICE isn't an identifier and is the DEVICE you
    # install to.
    gettext_printf "Usage: %s [OPTION] [INSTALL_DEVICE]" "$self"
    echo
    gettext "Install GRUB on your drive." ; echo
    echo
    print_option_help "-h, --help" "$(gettext "print this message and exit")"
    print_option_help "-v, --version" "$(gettext "print the version information and exit")"
    print_option_help "--modules=$(gettext "MODULES")" "$(gettext "pre-load specified modules MODULES")"
    dirmsg="$(gettext_printf "install GRUB images under the directory DIR/%s instead of the %s directory" "@grubdirname@" "$grubdir")"
    print_option_help "--boot-directory=$(gettext "DIR")" "$dirmsg"
    # TRANSLATORS: "TARGET" as in "target platform".
    target_trans="$(gettext "TARGET")"
    # TRANSLATORS: "current" refers to the platform user's currently running on
    print_option_help "--target=$target_trans" "$(gettext "install GRUB for TARGET platform [default=current]")"
    print_option_help "--directory=$(gettext "DIR")" "$(gettext "use GRUB images from DIR. Takes precedence over target")"
    print_option_help "--grub-setup=$(gettext "FILE")" "$(gettext "use FILE as grub-setup")"
    print_option_help "--grub-mkimage=$(gettext "FILE")" "$(gettext "use FILE as grub-mkimage")"
    print_option_help "--grub-mkrelpath=$(gettext "FILE")" "$(gettext "use FILE as grub-mkrelpath")"
    print_option_help "--grub-probe=$(gettext "FILE")" "$(gettext "use FILE as grub-probe")"
    # TRANSLATORS: "may break" doesn't just mean that option wouldn't have any
    # effect but that it will make the resulting install unbootable from HDD.
    print_option_help "--allow-floppy" "$(gettext "make the drive also bootable as floppy (default for fdX devices). May break on some BIOSes.")"
    print_option_help "--recheck" "$(gettext "delete device map if it already exists")"
    print_option_help "--force" "$(gettext "install even if problems are detected")"
    print_option_help "--force-file-id" "$(gettext "use identifier file even if UUID is available")"
    print_option_help "--disk-module=$(gettext "MODULE")" "$(gettext "disk module to use (biosdisk or native). This option is only available on BIOS target.")"
    print_option_help "--no-nvram" "$(gettext "don't update the \`boot-device' NVRAM variable. This option is only available on IEEE1275 targets.")"
    print_option_help  "--removable" "$(gettext "the installation device is removable. This option is only available on EFI.")"
    print_option_help  "--bootloader-id=$(gettext "ID")" "$(gettext "the ID of bootloader. This option is only available on EFI.")"
    print_option_help "--efi-directory=$(gettext "DIR")" "$(gettext "use DIR as the EFI System Partition root.")"
echo
gettext "INSTALL_DEVICE must be system device filename.";echo
echo

gettext_printf "%s copies GRUB images into %s, and uses grub-setup
to install grub into the boot sector.\n" "$self" "$grubdir";echo
echo
gettext "Report bugs to <bug-grub@gnu.org>."; echo
}

argument () {
  opt="$1"
  shift

  if test $# -eq 0; then
      gettext_printf "%s: option requires an argument -- \`%s'\n" "$0" "$opt" 1>&2
      exit 1
  fi
  echo "$1"
}

allow_floppy=""
force_file_id=
efidir=

# Check the arguments.
while test $# -gt 0
do
    option=$1
    shift

    case "$option" in
    -h | --help)
	usage
	exit 0 ;;
    -v | --version)
	echo "$self (${PACKAGE_NAME}) ${PACKAGE_VERSION}"
	exit 0 ;;

    --modules)
	modules=`argument $option "$@"`; shift;;
    --modules=*)
	modules=`echo "$option" | sed 's/--modules=//'` ;;

    --force-file-id)
	force_file_id=y ;;

# Accept and ignore for compatibility
    --font)
        shift;;
    --font=*)
	;;

# Accept for compatibility
    --root-directory)
	rootdir="`argument $option "$@"`"; shift;;
    --root-directory=*)
	rootdir="`echo "$option" | sed 's/--root-directory=//'`" ;;

    --boot-directory)
	bootdir="`argument $option "$@"`"; shift;;
    --boot-directory=*)
	bootdir="`echo "$option" | sed 's/--boot-directory=//'`" ;;

    --efi-directory)
	efidir="`argument $option "$@"`"; shift;;
    --efi-directory=*)
	efidir="`echo "$option" | sed 's/--efi-directory=//'`" ;;

    --directory | -d)
	source_dir="`argument $option "$@"`"; shift;;
    --directory=*)
	source_dir="`echo "$option" | sed 's/--directory=//'`" ;;

    --target)
	target="`argument $option "$@"`"; shift;;
    --target=*)
	target="`echo "$option" | sed 's/--target=//'`" ;;

    --grub-setup)
	grub_setup="`argument "$option" "$@"`"; shift;;
    --grub-setup=*)
	grub_setup="`echo "$option" | sed 's/--grub-setup=//'`" ;;

    --bootloader-id)
	bootloader_id="`argument $option "$@"`"; shift;;
    --bootloader-id=*)
	bootloader_id="`echo "$option" | sed 's/--bootloader-id=//'`" ;;

    --grub-mkimage)
	grub_mkimage="`argument $option "$@"`"; shift;;
    --grub-mkimage=*)
	grub_mkimage="`echo "$option" | sed 's/--grub-mkimage=//'`" ;;

    --grub-mkrelpath)
	grub_mkrelpath="`argument "$option" "$@"`"; shift;;
    --grub-mkrelpath=*)
	grub_mkrelpath="`echo "$option" | sed 's/--grub-mkrelpath=//'`" ;;

       # Ignore: for compatibility
    --grub-mkdevicemap)
	shift;;
    --grub-mkdevicemap=*)
	;;

    --grub-probe)
	    grub_probe="`argument "$option" "$@"`"; shift;;
    --grub-probe=*)
	grub_probe="`echo "$option" | sed 's/--grub-probe=//'`" ;;

    --no-floppy)
	;;
    --recheck)
	recheck=yes ;;
    --removable)
	removable=yes ;;

    --allow-floppy)
	allow_floppy="--allow-floppy" ;;

    --disk-module)
	disk_module="`argument "$option" "$@"`"; shift;
	;;
    --disk-module=*)
        disk_module="`echo "$option" | sed 's/--disk-module=//'`"
	;;

    --no-nvram)
	update_nvram=no ;;

    # This is an undocumented feature...
    --debug)
	debug=yes ;;
    --debug-image)
	debug_image="`argument "$option" "$@"`"; shift;;
    --debug-image=*)
	debug_image="`echo "$option" | sed 's/--debug-image=//'`" ;;

    -f | --force)
        setup_force="--force" ;;

    -*)
	gettext_printf "Unrecognized option \`%s'\n" "$option" 1>&2
	usage
	exit 1
	;;
    *)
	if test "x$install_device" != x; then
	    gettext "More than one install device?" 1>&2
	    echo 1>&2
	    usage
	    exit 1
	fi
	install_device="${option}" ;;
    esac
done

if [ x$source_dir = x ]; then
    if [ x$target = x ]; then
	case x"`uname -m`" in
	    x"powerpc"* | x"ppc"*)
		target="powerpc-ieee1275";;
	    x"sparc"*)
		target="sparc64-ieee1275";;
	    x"mips"*"el")
		target="mipsel-loongson";;
	    x"mips"*)
		target="mips-arc";;
	    x"ia64"*)
		target="ia64-efi";;
	    x"x86_64"* | x"amd64"*)
                # On Linux, we need the efivars kernel modules.
		# If no EFI is available this module just does nothing
		# besides a small hello and if we detect efi we'll load it
		# anyway later. So it should be safe to
		# try to load it here.
		case "$host_os" in
		    linux*)
			modprobe -q efivars 2>/dev/null || true ;;
		esac
		if [ -d /sys/firmware/efi ]; then
		    target="x86_64-efi"
		else
		    target=i386-pc
		fi
		;;
	    x"i"?"86"*)
                # On Linux, we need the efivars kernel modules.
		# If no EFI is available this module just does nothing
		# besides a small hello and if we detect efi we'll load it
		# anyway later. So it should be safe to
		# try to load it here.
		case "$host_os" in
		    linux*)
			modprobe -q efivars 2>/dev/null || true ;;
		esac
		if [ -d /sys/firmware/efi ]; then
		    target="i386-efi"
		elif [ -e /proc/device-tree ]; then
		    target=i386-pc
		    for x in /proc/device-tree/*; do
			if [ -e "$x" ]; then
			    target="i386-ieee1275"
			fi
		    done
		else
		    target=i386-pc
		fi
		;;
	    *)
		gettext "Unable to determine your platform. Use --target." ;
		echo	;;
	esac
    fi
    source_dir="${libdir}/@PACKAGE@/$target"
fi

if ! [ -d "$source_dir" ]; then
    gettext_printf "%s doesn't exist. Please specify --target or --directory\\n" "source_dir"
    exit 1
fi

. "${source_dir}"/modinfo.sh

if [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-pc" ] ; then
    if [ x$disk_module = xunspecified ]; then
	disk_module=biosdisk
    fi
elif [ "${grub_modinfo_platform}" = "ieee1275" ] || [ "${grub_modinfo_platform}" = "efi" ] || [ "${grub_modinfo_platform}" = "arc" ] ; then
    disk_module=
else
    disk_module=native
fi

if test "x$grub_setup" = x && [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-pc" ]; then
    grub_setup="${sbindir}/`echo grub-bios-setup | sed ${transform}`"
fi

if test "x$grub_setup" = x && [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "sparc64-ieee1275" ]; then
    grub_setup="${sbindir}/`echo grub-sparc64-setup | sed ${transform}`"
fi

if test "x$install_device" = x && ([ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-pc" ] \
    || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "sparc64-ieee1275" ]); then
    gettext "Install device isn't specified." 1>&2
    echo 1>&2
    usage
    exit 1
fi

if ! ([ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-pc" ] \
    || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "sparc64-ieee1275" ] \
    || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "powerpc-ieee1275" ] \
    || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "mips-arc" ]); then
    install_device=
fi

# If the debugging feature is enabled, print commands.
setup_verbose=
if test x"$debug" = xyes; then
    set -x
    setup_verbose="--verbose"
    efi_quiet=-q
fi

if [ -z "$bootdir" ]; then
    # Default bootdir if bootdir not initialized.
    bootdir="/@bootdirname@"

    if [ -n "$rootdir" ] ; then
        # Initialize bootdir if rootdir was initialized.
        bootdir="${rootdir}/@bootdirname@"
    fi
fi

grubdir="`echo "${bootdir}/@grubdirname@" | sed 's,//*,/,g'`"
device_map="${grubdir}/device.map"


# Check if GRUB is installed.
if [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-pc" ] || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "sparc64-ieee1275" ] ; then
    set $grub_setup dummy
    if test -f "$1"; then
        :
    else
        echo "$1: Not found." 1>&2
        exit 1
    fi
fi

set "$grub_mkimage" dummy
if test -f "$1"; then
    :
else
    echo "$1: Not found." 1>&2
    exit 1
fi

if [ x"$grub_modinfo_platform" = xefi ]; then
    # Find the EFI System Partition.
    if test -n "$efidir"; then
	install_device="`"$grub_probe" --target=device --device-map= "${efidir}"`"
    else
	if test -d "${bootdir}/efi"; then
	    install_device="`"$grub_probe" --target=device --device-map= "${bootdir}/efi"`"
            # Is it a mount point?
	    if test "x$install_device" != "x`"$grub_probe" --target=device --device-map= "${bootdir}"`"; then
		efidir="${bootdir}/efi"
	    fi
	elif test -d "${bootdir}/EFI"; then
	    install_device="`"$grub_probe" --target=device --device-map= "${bootdir}/EFI"`"
            # Is it a mount point?
	    if test "x$install_device" != "x`"$grub_probe" --target=device --device-map= "${bootdir}"`"; then
		efidir="${bootdir}/EFI"
	    fi
	elif test -n "$rootdir" && test "x$rootdir" != "x/"; then
        # The EFI System Partition may have been given directly using
        # --root-directory.
	    install_device="`"$grub_probe" --target=device --device-map= "${rootdir}"`"
        # Is it a mount point?
	    if test "x$install_device" != "x`"$grub_probe" --target=device --device-map= "${rootdir}/.."`"; then
		efidir="${rootdir}"
	    fi
	fi

	if test -n "$efidir"; then
	    efi_fs=`"$grub_probe" --target=fs "--device-map=${device_map}" "${efidir}"`
	    if test "x$efi_fs" = xfat; then :; else
		gettext_printf "%s doesn't look like an EFI partition.\n" "${efidir}" 1>&2
		efidir=
	    fi
	fi
    fi

    if test -n "$efidir"; then
        # The EFI specification requires that an EFI System Partition must
        # contain an "EFI" subdirectory, and that OS loaders are stored in
        # subdirectories below EFI.  Vendors are expected to pick names that do
        # not collide with other vendors.  To minimise collisions, we use the
        # name of our distributor if possible.
	efi_distributor="$bootloader_id"
	if test $removable = yes; then
      	   # The specification makes stricter requirements of removable
	   # devices, in order that only one image can be automatically loaded
	   # from them.  The image must always reside under /EFI/BOOT, and it
	   # must have a specific file name depending on the architecture.
	    efi_distributor=BOOT
	    case "$grub_modinfo_target_cpu" in
		i386)
		    efi_file=BOOTIA32.EFI ;;
		x86_64)
		    efi_file=BOOTX64.EFI ;;
	    # GRUB does not yet support these architectures, but they're defined
	    # by the specification so we include them here to ease future
	    # expansion.
		ia64)
		    efi_file=BOOTIA64.EFI ;;
	    esac
	else
	    # It is convenient for each architecture to have a different
	    # efi_file, so that different versions can be installed in parallel.
	    case "$grub_modinfo_target_cpu" in
		i386)
		    efi_file=grubia32.efi ;;
		x86_64)
		    efi_file=grubx64.efi ;;
	 # GRUB does not yet support these architectures, but they're defined
 	 # by the specification so we include them here to ease future
	 # expansion.
		ia64)
		    efi_file=grubia64.efi ;;
		*)
		    efi_file=grub.efi ;;
	    esac
	   # TODO: We should also use efibootmgr, if available, to add a Boot
	   # entry for ourselves.
	fi
	efidir="$efidir/EFI/$efi_distributor"
	mkdir -p "$efidir" || exit 1
    else
        # We don't know what's going on.  Fall back to traditional
        # (non-specification-compliant) behaviour.
	efidir="$grubdir"
	efi_distributor=
	efi_file=grub.efi
    fi
fi

# Create the GRUB directory if it is not present.
mkdir -p "$grubdir" || exit 1
mkdir -p "$grubdir/${grub_modinfo_target_cpu}-$grub_modinfo_platform" || exit 1

# If --recheck is specified, remove the device map, if present.
if test $recheck = yes; then
    rm -f "$device_map"
fi

# Create the device map file if it is not present.
if test -f "$device_map"; then
    # Make sure that there is no duplicated entry.
    tmp=`sed -n '/^([fh]d[0-9]*)/s/\(^(.*)\).*/\1/p' "$device_map" \
	| sort | uniq -d | sed -n 1p`
    if test -n "$tmp"; then
	gettext_printf "The drive %s is defined multiple times in the device map %s\n" "$tmp" "$device_map" 1>&2
	exit 1
    fi
else
    device_map=
fi

# Copy the GRUB images to the GRUB directory.
for file in "${grubdir}"/*.mod "${grubdir}"/*.lst "${grubdir}"/*.img "${grubdir}"/efiemu??.o "${grubdir}"/${grub_modinfo_target_cpu}-$grub_modinfo_platform/*.mod "${grubdir}"/${grub_modinfo_target_cpu}-$grub_modinfo_platform/*.lst "${grubdir}"/${grub_modinfo_target_cpu}-$grub_modinfo_platform/*.img "${grubdir}"/${grub_modinfo_target_cpu}-$grub_modinfo_platform/efiemu??.o; do
    if test -f "$file" && [ "`basename $file`" != menu.lst ]; then
	rm -f "$file" || exit 1
    fi
done
for file in "${source_dir}"/*.mod "${source_dir}"/*.lst; do
    cp -f "$file" "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform" || exit 1
done
if [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-pc" ] || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "sparc64-ieee1275" ] ; then
    for file in "${source_dir}"/*.img "${source_dir}"/efiemu??.o; do
	if test -f "$file"; then
	    cp -f "$file" "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform" || exit 1
	fi
    done
fi

# Copy gettext files
mkdir -p "${grubdir}"/locale/
for dir in "${localedir}"/*; do
    if test -f "$dir/LC_MESSAGES/grub.mo"; then
        cp -f "$dir/LC_MESSAGES/grub.mo" "${grubdir}/locale/${dir##*/}.mo"
    fi
done

if test -f "${pkgdatadir}"/themes/starfield/theme.txt; then
    mkdir -p "${grubdir}"/themes/starfield
    cp "${pkgdatadir}"/themes/starfield/* "${grubdir}"/themes/starfield
fi

if test -f "${pkgdatadir}"/unicode.pf2; then
    mkdir -p "${grubdir}"/fonts
    cp "${pkgdatadir}"/unicode.pf2 "${grubdir}"/fonts
fi

if ! is_path_readable_by_grub "${grubdir}"; then
    gettext_printf "Path \`%s' is not readable by GRUB on boot. Installation is impossible. Aborting.\n" "${grubdir}" 1>&2
    exit 1
fi

# Write device to a variable so we don't have to traverse /dev every time.
grub_device="`"$grub_probe" --device-map="${device_map}" --target=device "${grubdir}"`" || exit 1

if ! test -f "${grubdir}"/grubenv; then
    "$grub_editenv" "${grubdir}"/grubenv create
fi

# Create the core image. First, auto-detect the filesystem module.
fs_module="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=fs --device `"
if test "x$fs_module" = x ; then
    gettext_printf "Auto-detection of a filesystem of %s failed.\n" "${grub_device}" 1>&2
    gettext "Try with --recheck." 1>&2
    echo 1>&2
    gettext_printf "If the problem persists please report this together with the output of %s to <%s>" "\"$grub_probe --device-map=\"${device_map}\" --target=fs -v ${grubdir}\"" "bug-grub@gnu.org" 1>&2
    exit 1
fi

# Then the partition map module.  In order to support partition-less media,
# this command is allowed to fail (--target=fs already grants us that the
# filesystem will be accessible).
partmap_module=
for x in `echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=partmap --device 2> /dev/null`; do
   case "$x" in
       netbsd | openbsd) 
	   partmap_module="$partmap_module part_bsd";;
       "") ;;
       *)
	   partmap_module="$partmap_module part_$x";;
   esac
done

# Device abstraction module, if any (lvm, raid).
devabstraction_module="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=abstraction --device`"

if [ "x$disk_module" = xata ]; then
    disk_module=pata
fi

if [ "x$disk_module" = xnative ]; then
    disk_module="pata ahci ohci"
    if [ "x$grub_modinfo_target_cpu" = "xi386" ] || [ "x$grub_modinfo_target_cpu" = "xx86_64" ]; then
	disk_module="$disk_module uhci"
    fi
    disk_module="$disk_module usbms"
fi

# The order in this list is critical.  Be careful when modifying it.
modules="$modules $disk_module"
modules="$modules $fs_module $partmap_module $devabstraction_module"

relative_grubdir="`"$grub_mkrelpath" "${grubdir}"`" || exit 1
if [ "x${relative_grubdir}" = "x" ] ; then
    relative_grubdir=/
fi

prefix_drive=
config_opt_file=

rm -f "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"

if [ "x${debug_image}" != x ]; then
    echo "set debug='${debug_image}'" >> "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"
    config_opt_file="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"
fi

if [ "x${devabstraction_module}" = "x" ] ; then
    if [ x"${install_device}" != x ]; then
      if echo "${install_device}" | grep -qx "(.*)" ; then
        install_drive="${install_device}"
      else
        install_drive="`"$grub_probe" --device-map="${device_map}" --target=drive --device "${install_device}"`" || exit 1
      fi
      install_drive="`echo "${install_drive}" | sed -e 's/^(\(\([^,\\\\]\|\\\\\\\\\|\\\\,\)*\)\(\(,[a-zA-Z0-9]*\)*\))$/\1/'`"
    fi
    grub_drive="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=drive --device`" || exit 1

    # Strip partition number
    grub_partition="`echo "${grub_drive}" | sed -e 's/^(\(\([^,\\\\]\|\\\\\\\\\|\\\\,\)*\)\(\(,[a-zA-Z0-9]*\)*\))$/\3/'`"
    grub_drive="`echo "${grub_drive}" | sed -e 's/^(\(\([^,\\\\]\|\\\\\\\\\|\\\\,\)*\)\(\(,[a-zA-Z0-9]*\)*\))$/\1/'`"

    if [ x"${install_device}" = x ] && [ x"${grub_modinfo_target_cpu}-$grub_modinfo_platform" = x"powerpc-ieee1275" ]; then
	install_drive="$grub_drive"
    fi

    if ([ "x$disk_module" != x ] && [ "x$disk_module" != xbiosdisk ]) || [ "x${grub_drive}" != "x${install_drive}" ] || ([ "x$grub_modinfo_platform" != xefi ] && [ "x$grub_modinfo_platform" != xpc ] && [ x"${grub_modinfo_platform}" != x"ieee1275" ]); then
        # generic method (used on coreboot and ata mod)
	uuid=
	if [ x"$force_file_id" != xy ]; then
            uuid="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=fs_uuid --device`"
	fi

	if [ x"$disk_module" != x ] && [ x"$disk_module" != xbiosdisk ]; then
            hints="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=baremetal_hints --device`"
	elif [ x"$grub_modinfo_platform" = xpc ]; then
            hints="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=bios_hints --device`"
	elif [ x"$grub_modinfo_platform" = xefi ]; then
            hints="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=efi_hints --device`"
	elif [ x"$grub_modinfo_platform" = xieee1275 ]; then
            hints="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=ieee1275_hints --device`"
	elif [ x"$grub_modinfo_platform" = xloongson ] || [ x"$grub_modinfo_platform" = xqemu ] || [ x"$grub_modinfo_platform" = xcoreboot ] || [ x"$grub_modinfo_platform" = xmultiboot ] || [ x"$grub_modinfo_platform" = xqemu-mips ]; then
            hints="`echo "${grub_device}" | xargs "$grub_probe" --device-map="${device_map}" --target=baremetal_hints --device`"
	else
            gettext "No hints available for your platform. Expect reduced performance." 1>&2
	    echo 1>&2
	    hints=
        fi
	if [ x"$uuid" != x ]; then
            echo "search.fs_uuid ${uuid} root $hints " >> "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"
	    search_module=search_fs_uuid
	else
	    mkdir -p "${grubdir}/uuid"
	    file="`mktemp "${grubdir}/uuid/XXXXXXXXXXXXXXXXXXXXXXXXX"`"
	    relfile="`${grub_mkrelpath} "$file"`"
            echo "search.file '${relfile}' root $hints " >> "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"
	    search_module=search_fs_file
	fi
	echo 'set prefix=($root)'"$(echo "${relative_grubdir}" | sed "s,\\([ \"'\\\\]\\),\\\\\\1,g")" >> "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"
	config_opt_file="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"
        modules="$modules $search_module"
    else
        # we need to hardcode the partition number in the core image's prefix.
	if [ x"$grub_partition" = x ]; then
            prefix_drive="()"
	else
            # Comma is already there
            prefix_drive="($grub_partition)"
	fi
    fi
else
    if [ x$GRUB_CRYPTODISK_ENABLE = xy ]; then
	for uuid in "`echo "${grub_device}" | xargs "${grub_probe}"  --target=cryptodisk_uuid --device`"; do
	    echo "cryptomount -u $uuid" >> "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"
	done
	config_opt_file="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/load.cfg"
    fi

    prefix_drive=`"$grub_probe" --device-map="${device_map}" --target=drive --device "${grub_device}"` || exit 1
fi

case "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" in
    sparc64-ieee1275) mkimage_target=sparc64-ieee1275-raw ;;
    mipsel-loongson) mkimage_target=mipsel-loongson-elf ;;
    *) mkimage_target="${grub_modinfo_target_cpu}-${grub_modinfo_platform}" ;;
esac

case "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" in
    i386-efi | x86_64-efi) imgext=efi ;;
    mipsel-loongson | i386-coreboot | i386-multiboot | i386-ieee1275 \
	| powerpc-ieee1275) imgext=elf ;;
    *) imgext=img ;;
esac

if [ x"$config_opt_file" = x ]; then
    "$grub_mkimage" -d "${source_dir}" -O "${mkimage_target}" --output="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" --prefix="${prefix_drive}${relative_grubdir}" $modules || exit 1
else
    "$grub_mkimage" -c "${config_opt_file}" -d "${source_dir}" -O "${mkimage_target}" --output="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" --prefix="${prefix_drive}${relative_grubdir}" $modules || exit 1
fi

# Backward-compatibility kludges
if [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "mipsel-loongson" ]; then
    cp "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" "${bootdir}"/grub.elf
elif [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-ieee1275" ] || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "powerpc-ieee1275" ]; then
    cp "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" "${grubdir}/grub"
elif [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-efi" ] || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "x86_64-efi" ]; then

    if [ x"$config_opt_file" = x ]; then
	"$grub_mkimage" -d "${source_dir}" -O "${mkimage_target}" --output="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/grub.efi" --prefix="" $modules || exit 1
    else
	"$grub_mkimage" -c "${config_opt_file}" -d "${source_dir}" -O "${mkimage_target}" --output="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/grub.efi" --prefix="" $modules || exit 1
    fi
fi


# Perform the grub_modinfo_platform-dependent install
if [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-pc" ] || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "sparc64-ieee1275" ] ; then
    # Now perform the installation.
    "$grub_setup" ${allow_floppy} ${setup_verbose} ${setup_force} --directory="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform" \
	--device-map="${device_map}" "${install_device}" || exit 1
elif [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "i386-ieee1275" ] || [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "powerpc-ieee1275" ]; then

    # If a install device is defined, copy the core.elf to PReP partition.
    if [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = "powerpc-ieee1275" ] && [ -n "${install_device}" ]; then
        if [ "$("${grub_probe}" -m "${device_map}" -d "${install_device}" -t msdos_parttype)" != "41" ]; then
	       gettext "The chosen partition is not a PReP partition." 1>&2
	       echo 1>&2
	       exit 1
        fi

        if [ "$(file -s "${install_device}" -b | awk '{ print $1 }')" = ELF ] || [ x$("${grub_probe}" -m "${device_map}" -d "${install_device}" -t zero_check) = xtrue ]; then
	        dd if="${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" of="${install_device}" status=noxfer || {
	        gettext "Failed to copy Grub to the PReP partition." 1>&2
	            echo 1>&2
	            exit 1
	        }
        else
	        gettext "The PReP partition is not empty. If you are sure you want to use it, run dd to clear it:" 1>&2
	        echo 1>&2
	        echo "  dd if=/dev/zero of=${install_device}"
	        exit 1
        fi
    fi

    if [ x"$update_nvram" = xyes ]; then
	ofpathname="`which ofpathname`"
	nvsetenv="`which nvsetenv`"
	set "$ofpathname" dummy
	if test -f "$1"; then
	    :
	else
	    echo "$1: Not found." 1>&2
	    exit 1
	fi
	set "$nvsetenv" dummy
	if test -f "$1"; then
	    :
	else
	    echo "$1: Not found." 1>&2
	    exit 1
	fi
	if  [ "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" != "powerpc-ieee1275" ] \
	    || [ -z "${install_device}" ]; then
         # Get the Open Firmware device tree path translation.
	    dev="`echo $grub_device | sed -e 's/\/dev\///' -e 's/[0-9]\+//'`"
	    partno="`echo $grub_device | sed -e 's/.*[^0-9]\([0-9]\+\)$/\1/'`"
	    ofpath="`$ofpathname $dev`" || {
	    # TRANSLATORS: "device tree path" is the name of the device
            # for IEEE1275
		gettext_printf "Couldn't find IEEE1275 device tree path for %s.\nYou will have to set \`boot-device' variable manually.\n" "$dev" 1>&2
		exit 1
	    }

            # Point boot-device at the new grub install
	    boot_device="$ofpath:$partno,"`"$grub_mkrelpath" "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" | sed 's,/,\\\\,g'`

	else

	    dev="`echo "${install_device}" | sed -e 's/\/dev\///' -e 's/[0-9]\+//'`"
	    boot_device="`$ofpathname "$dev"`" || {
	    # TRANSLATORS: "device tree path" is the name of the device
            # for IEEE1275
		gettext_printf "Couldn't find IEEE1275 device tree path for %s.\nYou will have to set \`boot-device' variable manually.\n" "$dev" 1>&2
		exit 1
	    }
	fi

	"$nvsetenv" boot-device "$boot_device" || {
	    # TRANSLATORS: The %s will be replaced by an external program name.
	    gettext_printf "\`%s' failed.\n" "$nvsetenv" 1>&2
	    gettext "You will have to set \`boot-device' variable manually.  At the IEEE1275 prompt, type:" 1>&2
	    echo 1>&2
	    echo "  setenv boot-device $boot_device" 1>&2
	    exit 1
	}
    fi
elif [ x"${grub_modinfo_target_cpu}-${grub_modinfo_platform}" = xmips-arc ]; then
    dvhtool -d "${install_device}" --unix-to-vh "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" grub
    gettext "You will have to set \`SystemPartition' and \`OSLoader' manually." 1>&2
    echo 1>&2
elif [ x"$grub_modinfo_platform" = xefi ]; then
    cp "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" "${efidir}/${efi_file}"
    # For old macs. Suggested by Peter Jones.
    if [ x$grub_modinfo_target_cpu = xi386 ]; then
	cp "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" "${efidir}/boot.efi"
    fi

    # Try to make this image bootable using the EFI Boot Manager, if available.
    efibootmgr="`which efibootmgr`"
    if test "$removable" = no && test -n "$efi_distributor" && \
	test -n "$efibootmgr"; then
        # On Linux, we need the efivars kernel modules.
	case "$host_os" in
	    linux*)
		modprobe -q efivars 2>/dev/null || true ;;
	esac

        # Delete old entries from the same distributor.
	for bootnum in `efibootmgr | grep '^Boot[0-9]' | \
	    fgrep -i " $efi_distributor" | cut -b5-8`; do
	    efibootmgr $efi_quiet -b "$bootnum" -B
	done

        # Add a new entry for the image we just created.  efibootmgr needs to be
        # given the disk device and partition number separately, so we have to
        # fiddle about with grub-probe to get hold of this reasonably reliably.
        # Use fresh device map text to avoid any problems with stale data, since
        # all we need here is a one-to-one mapping.
	efidir_drive="$("$grub_probe" --target=drive --device-map= "$efidir")"
	efidir_disk="$("$grub_probe" --target=disk --device-map= "$efidir")"
	if test -z "$efidir_drive" || test -z "$efidir_disk"; then
	    gettext_printf "Can't find GRUB drive for %s; unable to create EFI Boot Manager entry.\n" "$efidir" >&2
	else
	    efidir_part="$(echo "$efidir_drive" | sed 's/^([^,]*,[^0-9]*//; s/[^0-9].*//')"
	    efibootmgr $efi_quiet -c -d "$efidir_disk" -p "$efidir_part" -w \
		-L "$bootloader_id" -l "\\EFI\\$efi_distributor\\$efi_file"
	fi
    fi
else
    gettext "WARNING: no platform-specific install was performed" 1>&2
    echo 1>&2
fi

gettext "Installation finished. No error reported." 1>&2
echo 1>&2

# Bye.
exit 0
