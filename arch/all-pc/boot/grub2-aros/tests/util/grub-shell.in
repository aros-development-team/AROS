#! /bin/sh
set -e

# Run GRUB script in a Qemu instance
# Copyright (C) 2009,2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

# Initialize some variables.
transform="@program_transform_name@"

prefix="@prefix@"
exec_prefix="@exec_prefix@"
datarootdir="@datarootdir@"
builddir="@builddir@"
PACKAGE_NAME=@PACKAGE_NAME@
PACKAGE_TARNAME=@PACKAGE_TARNAME@
PACKAGE_VERSION=@PACKAGE_VERSION@

# Force build directory components
PATH="${builddir}:$PATH"
export PATH

trim=0

# Usage: usage
# Print the usage.
usage () {
    cat <<EOF
Usage: $0 [OPTION] [SOURCE]
Run GRUB script in a Qemu instance.

  -h, --help              print this message and exit
  -v, --version           print the version information and exit
  --boot=[fd|hd|cd|net]       boot method for Qemu instance
  --modules=MODULES       pre-load specified modules MODULES
  --qemu=FILE             Name of qemu binary
  --qemu-opts=OPTIONS     extra options to pass to Qemu instance
  --files=FILES           add files to the image
  --trim                  trim firmware output

$0 runs input GRUB script or SOURCE file in a Qemu instance and prints
its output.

Report bugs to <bug-grub@gnu.org>.
EOF
}

. "${builddir}/grub-core/modinfo.sh"
qemuopts="${GRUB_QEMU_OPTS}"
serial_port=com0
serial_null=
halt_cmd=halt
case "${grub_modinfo_target_cpu}-${grub_modinfo_platform}" in
    powerpc-ieee1275)
	boot=cd
	qemu=qemu-system-ppc
	console=console
	serial_port=escc-ch-a
	serial_null="-serial null"
	;;

    mips-qemu_mips)
	boot=mips_qemu
	qemu=qemu-system-mips
	qemuopts="$qemuopts -M mips"
	console=vga_text
	;;
    mipsel-qemu_mips)
	boot=mipsel_qemu
	qemu=qemu-system-mipsel
	qemuopts="$qemuopts -M mips"
	console=vga_text
	;;
    mipsel-loongson)
	boot=mipsel_fulong2e
	qemu=qemu-system-mips64el
	qemuopts="$qemuopts -no-reboot -M fulong2e"
	console=
	halt_cmd=reboot
	trim=1
	;;
    i386-coreboot)
	boot=coreboot
	qemu=qemu-system-i386
	console=vga_text
	;;
    i386-multiboot)
	boot=cd
	qemu=qemu-system-i386
	console=vga_text;;

    i386-ieee1275)
	boot=cd
	qemu=qemu-system-i386
	console=console;;

    i386-qemu)
	boot=qemu
	qemu=qemu-system-i386
	console=vga_text;;

    i386-pc)
	boot=cd
	qemu=qemu-system-i386
	console=console;;

    i386-efi)
	qemu=qemu-system-i386
	boot=cd
	console=console
	trim=1
	;;
    x86_64-efi)
	qemu=qemu-system-x86_64
	boot=cd
	console=console
	trim=1
	;;
    *)
	boot=hd
	qemu=qemu-system-i386
	console=console;;
esac

# Check the arguments.
for option in "$@"; do
    case "$option" in
    -h | --help)
	usage
	exit 0 ;;
    -v | --version)
	echo "$0 (GNU GRUB ${PACKAGE_VERSION})"
	exit 0 ;;
    --trim)
	trim=1
	;;
    --modules=*)
	ms=`echo "$option" | sed -e 's/--modules=//' -e 's/,/ /g'`
	modules="$modules $ms" ;;
    --files=*)
	fls=`echo "$option" | sed -e 's/--files=//' -e 's/,/ /g'`
	files="$files $fls" ;;
    --qemu=*)
	qemu=`echo "$option" | sed -e 's/--qemu=//' -e 's/,/ /g'`;;
    --qemu-opts=*)
        qs=`echo "$option" | sed -e 's/--qemu-opts=//'`
        qemuopts="$qemuopts $qs" ;;
    --boot=*)
        dev=`echo "$option" | sed -e 's/--boot=//'`
	if   [ "$dev" = "fd" ] ; then boot=fd;
	elif [ "$dev" = "hd" ] ; then boot=hd;
	elif [ "$dev" = "cd" ] ; then boot=cd;
	elif [ "$dev" = "net" ] ; then boot=net;
	elif [ "$dev" = "qemu" ] ; then boot=qemu;
	elif [ "$dev" = "coreboot" ] ; then boot=coreboot;
	elif [ "$dev" = "mips_qemu" ] ; then boot=mips_qemu;
	elif [ "$dev" = "mipsel_qemu" ] ; then boot=mipsel_qemu;
	elif [ "$dev" = "mipsel_fulong2e" ] ; then boot=mipsel_fulong2e;
	else
	    echo "Unrecognized boot method \`$dev'" 1>&2
	    usage
	    exit 1
	fi ;;
    -*)
	echo "Unrecognized option \`$option'" 1>&2
	usage
	exit 1 ;;
    *)
	if [ "x${source}" != x ] ; then
	    echo "too many parameters at the end" 1>&2
	    usage
	    exit 1
	fi
	source="${option}" ;;
    esac
done

if [ "x${source}" = x ] ; then
    tmpfile=`mktemp "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX"` || exit 1
    while read REPLY; do
	echo "$REPLY" >> ${tmpfile}
    done
    source=${tmpfile}
fi

cfgfile=`mktemp "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX"` || exit 1
cat <<EOF >${cfgfile}
grubshell=yes
insmod serial
serial ${serial_port}
terminfo serial_${serial_port} dumb
terminal_input serial_${serial_port}
terminal_output serial_${serial_port}
EOF

trim_head=664cbea8-132f-4770-8aa4-1696d59ac35c

if [ $trim = 1 ]; then
    echo "echo $trim_head" >>${cfgfile}
fi

rom_directory=`mktemp -d "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX"` || exit 1

for mod in ${modules}
do
    echo "insmod ${mod}" >> ${cfgfile}
done

cat <<EOF >>${cfgfile}
source /boot/grub/testcase.cfg
# Stop serial output to suppress "ACPI shutdown failed" error.
EOF
if [ x$console != x ]; then
    echo "terminal_output $console" >>${cfgfile}
fi
echo "${halt_cmd}" >>${cfgfile}

isofile=`mktemp "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX"` || exit 1
if [ x$boot != xnet ]; then
    pkgdatadir="@builddir@" sh "@builddir@/grub-mkrescue" "--grub-mkimage=${builddir}/grub-mkimage" "--output=${isofile}" "--override-directory=${builddir}/grub-core" \
	--rom-directory="${rom_directory}" \
	"/boot/grub/grub.cfg=${cfgfile}" "/boot/grub/testcase.cfg=${source}" \
	${files} >/dev/null 2>&1
fi
if [ x$boot = xhd ]; then
    device=hda
    bootdev="-boot c"
fi
if [ x$boot = xcd ]; then
    device=cdrom
    bootdev="-boot d"
fi
if [ x$boot = xfd ]; then
    device=fda
    bootdev="-boot a"
fi

if [ x$boot = xqemu ]; then
    bootdev="-bios ${rom_directory}/qemu.img"
    device=cdrom
fi

if [ x$boot = xmipsel_qemu ]; then
    bootdev="-kernel ${rom_directory}/mipsel-qemu_mips.elf"
    device=cdrom
fi

if [ x$boot = xmipsel_fulong2e ]; then
    bootdev="-kernel ${rom_directory}/mipsel-loongson.elf -append machtype=lemote-fuloong-2e"
    device=cdrom
fi

if [ x$boot = xmips_qemu ]; then
    bootdev="-kernel ${rom_directory}/mips-qemu_mips.elf"
    device=cdrom
fi

if [ x$boot = xcoreboot ]; then
    imgfile=`mktemp "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX"` || exit 1
    cp "${GRUB_COREBOOT_ROM}" "${imgfile}"
    "${GRUB_CBFSTOOL}" "${imgfile}" add-payload "${rom_directory}/coreboot.elf" fallback/payload
    bootdev="-bios ${imgfile}"
    device=cdrom
fi

do_trim ()
{
    if [ $trim = 1 ]; then
	awk '{ if (have_head == 1) print $0; } /664cbea8-132f-4770-8aa4-1696d59ac35c/ { have_head=1; }'
    else
	cat
    fi
}

if [ x$boot = xnet ]; then
    netdir=`mktemp -d "${TMPDIR:-/tmp}/tmp.XXXXXXXXXX"` || exit 1
    pkgdatadir="@builddir@" sh "@builddir@/grub-mknetdir" "--grub-mkimage=${builddir}/grub-mkimage" "--directory=${builddir}/grub-core" "--net-directory=$netdir"
    cp "${cfgfile}" "$netdir/boot/grub/grub.cfg"
    cp "${source}" "$netdir/boot/grub/testcase.cfg"
    "${qemu}" ${qemuopts} -nographic ${serial_null} -serial file:/dev/stdout -monitor file:/dev/null -boot n -net "user,tftp=$netdir,bootfile=/boot/grub/${grub_modinfo_target_cpu}-${grub_modinfo_platform}/core.0"  -net nic  | cat | tr -d "\r" | do_trim
else
    "${qemu}" ${qemuopts} -nographic ${serial_null} -serial file:/dev/stdout -monitor file:/dev/null -${device} ${isofile} ${bootdev} | cat | tr -d "\r" | do_trim
fi
rm -f "${isofile}" "${imgfile}"
rm -rf "${rom_directory}"
if [ x$boot = xcoreboot ]; then
    rm -f "${imgfile}"
fi

rm -f "${tmpfile}" "${cfgfile}"
exit 0


