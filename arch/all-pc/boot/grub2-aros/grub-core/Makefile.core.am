
if COND_emu
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += trig.module
MODULE_FILES += trig.module$(EXEEXT)
trig_module_SOURCES  =  ## platform sources
nodist_trig_module_SOURCES  = trigtables.c  ## platform nodist sources
trig_module_LDADD  = 
trig_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
trig_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
trig_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
trig_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += gentrigtables.c 
BUILT_SOURCES += $(nodist_trig_module_SOURCES)
CLEANFILES += $(nodist_trig_module_SOURCES)
MOD_FILES += trig.mod
MARKER_FILES += trig.marker
CLEANFILES += trig.marker

trig.marker: $(trig_module_SOURCES) $(nodist_trig_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trig_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += cs5536.module
MODULE_FILES += cs5536.module$(EXEEXT)
cs5536_module_SOURCES  = bus/cs5536.c  ## platform sources
nodist_cs5536_module_SOURCES  =  ## platform nodist sources
cs5536_module_LDADD  = 
cs5536_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cs5536_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cs5536_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cs5536_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cs5536_module_SOURCES)
CLEANFILES += $(nodist_cs5536_module_SOURCES)
MOD_FILES += cs5536.mod
MARKER_FILES += cs5536.marker
CLEANFILES += cs5536.marker

cs5536.marker: $(cs5536_module_SOURCES) $(nodist_cs5536_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cs5536_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += cs5536.module
MODULE_FILES += cs5536.module$(EXEEXT)
cs5536_module_SOURCES  = bus/cs5536.c  ## platform sources
nodist_cs5536_module_SOURCES  =  ## platform nodist sources
cs5536_module_LDADD  = 
cs5536_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cs5536_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cs5536_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cs5536_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cs5536_module_SOURCES)
CLEANFILES += $(nodist_cs5536_module_SOURCES)
MOD_FILES += cs5536.mod
MARKER_FILES += cs5536.marker
CLEANFILES += cs5536.marker

cs5536.marker: $(cs5536_module_SOURCES) $(nodist_cs5536_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cs5536_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += cs5536.module
MODULE_FILES += cs5536.module$(EXEEXT)
cs5536_module_SOURCES  = bus/cs5536.c  ## platform sources
nodist_cs5536_module_SOURCES  =  ## platform nodist sources
cs5536_module_LDADD  = 
cs5536_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cs5536_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cs5536_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cs5536_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cs5536_module_SOURCES)
CLEANFILES += $(nodist_cs5536_module_SOURCES)
MOD_FILES += cs5536.mod
MARKER_FILES += cs5536.marker
CLEANFILES += cs5536.marker

cs5536.marker: $(cs5536_module_SOURCES) $(nodist_cs5536_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cs5536_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += cs5536.module
MODULE_FILES += cs5536.module$(EXEEXT)
cs5536_module_SOURCES  = bus/cs5536.c  ## platform sources
nodist_cs5536_module_SOURCES  =  ## platform nodist sources
cs5536_module_LDADD  = 
cs5536_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cs5536_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cs5536_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cs5536_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cs5536_module_SOURCES)
CLEANFILES += $(nodist_cs5536_module_SOURCES)
MOD_FILES += cs5536.mod
MARKER_FILES += cs5536.marker
CLEANFILES += cs5536.marker

cs5536.marker: $(cs5536_module_SOURCES) $(nodist_cs5536_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cs5536_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += cs5536.module
MODULE_FILES += cs5536.module$(EXEEXT)
cs5536_module_SOURCES  = bus/cs5536.c  ## platform sources
nodist_cs5536_module_SOURCES  =  ## platform nodist sources
cs5536_module_LDADD  = 
cs5536_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cs5536_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cs5536_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cs5536_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cs5536_module_SOURCES)
CLEANFILES += $(nodist_cs5536_module_SOURCES)
MOD_FILES += cs5536.mod
MARKER_FILES += cs5536.marker
CLEANFILES += cs5536.marker

cs5536.marker: $(cs5536_module_SOURCES) $(nodist_cs5536_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cs5536_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += cs5536.module
MODULE_FILES += cs5536.module$(EXEEXT)
cs5536_module_SOURCES  = bus/cs5536.c  ## platform sources
nodist_cs5536_module_SOURCES  =  ## platform nodist sources
cs5536_module_LDADD  = 
cs5536_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cs5536_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cs5536_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cs5536_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cs5536_module_SOURCES)
CLEANFILES += $(nodist_cs5536_module_SOURCES)
MOD_FILES += cs5536.mod
MARKER_FILES += cs5536.marker
CLEANFILES += cs5536.marker

cs5536.marker: $(cs5536_module_SOURCES) $(nodist_cs5536_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cs5536_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += cs5536.module
MODULE_FILES += cs5536.module$(EXEEXT)
cs5536_module_SOURCES  = bus/cs5536.c  ## platform sources
nodist_cs5536_module_SOURCES  =  ## platform nodist sources
cs5536_module_LDADD  = 
cs5536_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cs5536_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cs5536_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cs5536_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cs5536_module_SOURCES)
CLEANFILES += $(nodist_cs5536_module_SOURCES)
MOD_FILES += cs5536.mod
MARKER_FILES += cs5536.marker
CLEANFILES += cs5536.marker

cs5536.marker: $(cs5536_module_SOURCES) $(nodist_cs5536_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cs5536_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
if COND_GRUB_EMU_USB
platform_PROGRAMS += libusb.module
MODULE_FILES += libusb.module$(EXEEXT)
libusb_module_SOURCES  = bus/usb/emu/usb.c  ## platform sources
nodist_libusb_module_SOURCES  =  ## platform nodist sources
libusb_module_LDADD  = 
libusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
libusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
libusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
libusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libusb_module_SOURCES)
CLEANFILES += $(nodist_libusb_module_SOURCES)
MOD_FILES += libusb.mod
MARKER_FILES += libusb.marker
CLEANFILES += libusb.marker

libusb.marker: $(libusb_module_SOURCES) $(nodist_libusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_mips_loongson
platform_PROGRAMS += lsspd.module
MODULE_FILES += lsspd.module$(EXEEXT)
lsspd_module_SOURCES  = commands/mips/loongson/lsspd.c  ## platform sources
nodist_lsspd_module_SOURCES  =  ## platform nodist sources
lsspd_module_LDADD  = 
lsspd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsspd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsspd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsspd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsspd_module_SOURCES)
CLEANFILES += $(nodist_lsspd_module_SOURCES)
MOD_FILES += lsspd.mod
MARKER_FILES += lsspd.marker
CLEANFILES += lsspd.marker

lsspd.marker: $(lsspd_module_SOURCES) $(nodist_lsspd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsspd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += usb.module
MODULE_FILES += usb.module$(EXEEXT)
usb_module_SOURCES  = bus/usb/usb.c bus/usb/usbtrans.c bus/usb/usbhub.c  ## platform sources
nodist_usb_module_SOURCES  =  ## platform nodist sources
usb_module_LDADD  = 
usb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_module_SOURCES)
CLEANFILES += $(nodist_usb_module_SOURCES)
MOD_FILES += usb.mod
MARKER_FILES += usb.marker
CLEANFILES += usb.marker

usb.marker: $(usb_module_SOURCES) $(nodist_usb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += usb.module
MODULE_FILES += usb.module$(EXEEXT)
usb_module_SOURCES  = bus/usb/usb.c bus/usb/usbtrans.c bus/usb/usbhub.c  ## platform sources
nodist_usb_module_SOURCES  =  ## platform nodist sources
usb_module_LDADD  = 
usb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_module_SOURCES)
CLEANFILES += $(nodist_usb_module_SOURCES)
MOD_FILES += usb.mod
MARKER_FILES += usb.marker
CLEANFILES += usb.marker

usb.marker: $(usb_module_SOURCES) $(nodist_usb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += usb.module
MODULE_FILES += usb.module$(EXEEXT)
usb_module_SOURCES  = bus/usb/usb.c bus/usb/usbtrans.c bus/usb/usbhub.c  ## platform sources
nodist_usb_module_SOURCES  =  ## platform nodist sources
usb_module_LDADD  = 
usb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_module_SOURCES)
CLEANFILES += $(nodist_usb_module_SOURCES)
MOD_FILES += usb.mod
MARKER_FILES += usb.marker
CLEANFILES += usb.marker

usb.marker: $(usb_module_SOURCES) $(nodist_usb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += usb.module
MODULE_FILES += usb.module$(EXEEXT)
usb_module_SOURCES  = bus/usb/usb.c bus/usb/usbtrans.c bus/usb/usbhub.c  ## platform sources
nodist_usb_module_SOURCES  =  ## platform nodist sources
usb_module_LDADD  = 
usb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_module_SOURCES)
CLEANFILES += $(nodist_usb_module_SOURCES)
MOD_FILES += usb.mod
MARKER_FILES += usb.marker
CLEANFILES += usb.marker

usb.marker: $(usb_module_SOURCES) $(nodist_usb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += usb.module
MODULE_FILES += usb.module$(EXEEXT)
usb_module_SOURCES  = bus/usb/usb.c bus/usb/usbtrans.c bus/usb/usbhub.c  ## platform sources
nodist_usb_module_SOURCES  =  ## platform nodist sources
usb_module_LDADD  = 
usb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_module_SOURCES)
CLEANFILES += $(nodist_usb_module_SOURCES)
MOD_FILES += usb.mod
MARKER_FILES += usb.marker
CLEANFILES += usb.marker

usb.marker: $(usb_module_SOURCES) $(nodist_usb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += usb.module
MODULE_FILES += usb.module$(EXEEXT)
usb_module_SOURCES  = bus/usb/usb.c bus/usb/usbtrans.c bus/usb/usbhub.c  ## platform sources
nodist_usb_module_SOURCES  =  ## platform nodist sources
usb_module_LDADD  = 
usb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_module_SOURCES)
CLEANFILES += $(nodist_usb_module_SOURCES)
MOD_FILES += usb.mod
MARKER_FILES += usb.marker
CLEANFILES += usb.marker

usb.marker: $(usb_module_SOURCES) $(nodist_usb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += usb.module
MODULE_FILES += usb.module$(EXEEXT)
usb_module_SOURCES  = bus/usb/usb.c bus/usb/usbtrans.c bus/usb/usbhub.c  ## platform sources
nodist_usb_module_SOURCES  =  ## platform nodist sources
usb_module_LDADD  = 
usb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_module_SOURCES)
CLEANFILES += $(nodist_usb_module_SOURCES)
MOD_FILES += usb.mod
MARKER_FILES += usb.marker
CLEANFILES += usb.marker

usb.marker: $(usb_module_SOURCES) $(nodist_usb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += usb.module
MODULE_FILES += usb.module$(EXEEXT)
usb_module_SOURCES  = bus/usb/usb.c bus/usb/usbtrans.c bus/usb/usbhub.c  ## platform sources
nodist_usb_module_SOURCES  =  ## platform nodist sources
usb_module_LDADD  = 
usb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_module_SOURCES)
CLEANFILES += $(nodist_usb_module_SOURCES)
MOD_FILES += usb.mod
MARKER_FILES += usb.marker
CLEANFILES += usb.marker

usb.marker: $(usb_module_SOURCES) $(nodist_usb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_i386_pc
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_i386_efi
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_i386_qemu
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_i386_coreboot
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_i386_multiboot
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_i386_ieee1275
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_x86_64_efi
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_mips_loongson
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_sparc64_ieee1275
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_powerpc_ieee1275
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_mips_arc
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_ia64_efi
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_mips_qemu_mips
if COND_GRUB_EMU_USB
platform_PROGRAMS += emuusb.module
MODULE_FILES += emuusb.module$(EXEEXT)
emuusb_module_SOURCES  = bus/usb/usb.c  ## platform sources
nodist_emuusb_module_SOURCES  =  ## platform nodist sources
emuusb_module_LDADD  = 
emuusb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emuusb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emuusb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emuusb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emuusb_module_SOURCES)
CLEANFILES += $(nodist_emuusb_module_SOURCES)
MOD_FILES += emuusb.mod
MARKER_FILES += emuusb.marker
CLEANFILES += emuusb.marker

emuusb.marker: $(emuusb_module_SOURCES) $(nodist_emuusb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emuusb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_USB
endif

if COND_i386_pc
platform_PROGRAMS += usbserial_common.module
MODULE_FILES += usbserial_common.module$(EXEEXT)
usbserial_common_module_SOURCES  = bus/usb/serial/common.c  ## platform sources
nodist_usbserial_common_module_SOURCES  =  ## platform nodist sources
usbserial_common_module_LDADD  = 
usbserial_common_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_common_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_common_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_common_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_common_module_SOURCES)
CLEANFILES += $(nodist_usbserial_common_module_SOURCES)
MOD_FILES += usbserial_common.mod
MARKER_FILES += usbserial_common.marker
CLEANFILES += usbserial_common.marker

usbserial_common.marker: $(usbserial_common_module_SOURCES) $(nodist_usbserial_common_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_common_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += usbserial_common.module
MODULE_FILES += usbserial_common.module$(EXEEXT)
usbserial_common_module_SOURCES  = bus/usb/serial/common.c  ## platform sources
nodist_usbserial_common_module_SOURCES  =  ## platform nodist sources
usbserial_common_module_LDADD  = 
usbserial_common_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_common_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_common_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_common_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_common_module_SOURCES)
CLEANFILES += $(nodist_usbserial_common_module_SOURCES)
MOD_FILES += usbserial_common.mod
MARKER_FILES += usbserial_common.marker
CLEANFILES += usbserial_common.marker

usbserial_common.marker: $(usbserial_common_module_SOURCES) $(nodist_usbserial_common_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_common_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += usbserial_common.module
MODULE_FILES += usbserial_common.module$(EXEEXT)
usbserial_common_module_SOURCES  = bus/usb/serial/common.c  ## platform sources
nodist_usbserial_common_module_SOURCES  =  ## platform nodist sources
usbserial_common_module_LDADD  = 
usbserial_common_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_common_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_common_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_common_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_common_module_SOURCES)
CLEANFILES += $(nodist_usbserial_common_module_SOURCES)
MOD_FILES += usbserial_common.mod
MARKER_FILES += usbserial_common.marker
CLEANFILES += usbserial_common.marker

usbserial_common.marker: $(usbserial_common_module_SOURCES) $(nodist_usbserial_common_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_common_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += usbserial_common.module
MODULE_FILES += usbserial_common.module$(EXEEXT)
usbserial_common_module_SOURCES  = bus/usb/serial/common.c  ## platform sources
nodist_usbserial_common_module_SOURCES  =  ## platform nodist sources
usbserial_common_module_LDADD  = 
usbserial_common_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_common_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_common_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_common_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_common_module_SOURCES)
CLEANFILES += $(nodist_usbserial_common_module_SOURCES)
MOD_FILES += usbserial_common.mod
MARKER_FILES += usbserial_common.marker
CLEANFILES += usbserial_common.marker

usbserial_common.marker: $(usbserial_common_module_SOURCES) $(nodist_usbserial_common_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_common_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += usbserial_common.module
MODULE_FILES += usbserial_common.module$(EXEEXT)
usbserial_common_module_SOURCES  = bus/usb/serial/common.c  ## platform sources
nodist_usbserial_common_module_SOURCES  =  ## platform nodist sources
usbserial_common_module_LDADD  = 
usbserial_common_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_common_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_common_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_common_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_common_module_SOURCES)
CLEANFILES += $(nodist_usbserial_common_module_SOURCES)
MOD_FILES += usbserial_common.mod
MARKER_FILES += usbserial_common.marker
CLEANFILES += usbserial_common.marker

usbserial_common.marker: $(usbserial_common_module_SOURCES) $(nodist_usbserial_common_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_common_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += usbserial_common.module
MODULE_FILES += usbserial_common.module$(EXEEXT)
usbserial_common_module_SOURCES  = bus/usb/serial/common.c  ## platform sources
nodist_usbserial_common_module_SOURCES  =  ## platform nodist sources
usbserial_common_module_LDADD  = 
usbserial_common_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_common_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_common_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_common_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_common_module_SOURCES)
CLEANFILES += $(nodist_usbserial_common_module_SOURCES)
MOD_FILES += usbserial_common.mod
MARKER_FILES += usbserial_common.marker
CLEANFILES += usbserial_common.marker

usbserial_common.marker: $(usbserial_common_module_SOURCES) $(nodist_usbserial_common_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_common_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += usbserial_common.module
MODULE_FILES += usbserial_common.module$(EXEEXT)
usbserial_common_module_SOURCES  = bus/usb/serial/common.c  ## platform sources
nodist_usbserial_common_module_SOURCES  =  ## platform nodist sources
usbserial_common_module_LDADD  = 
usbserial_common_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_common_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_common_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_common_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_common_module_SOURCES)
CLEANFILES += $(nodist_usbserial_common_module_SOURCES)
MOD_FILES += usbserial_common.mod
MARKER_FILES += usbserial_common.marker
CLEANFILES += usbserial_common.marker

usbserial_common.marker: $(usbserial_common_module_SOURCES) $(nodist_usbserial_common_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_common_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += usbserial_common.module
MODULE_FILES += usbserial_common.module$(EXEEXT)
usbserial_common_module_SOURCES  = bus/usb/serial/common.c  ## platform sources
nodist_usbserial_common_module_SOURCES  =  ## platform nodist sources
usbserial_common_module_LDADD  = 
usbserial_common_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_common_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_common_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_common_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_common_module_SOURCES)
CLEANFILES += $(nodist_usbserial_common_module_SOURCES)
MOD_FILES += usbserial_common.mod
MARKER_FILES += usbserial_common.marker
CLEANFILES += usbserial_common.marker

usbserial_common.marker: $(usbserial_common_module_SOURCES) $(nodist_usbserial_common_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_common_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += usbserial_pl2303.module
MODULE_FILES += usbserial_pl2303.module$(EXEEXT)
usbserial_pl2303_module_SOURCES  = bus/usb/serial/pl2303.c  ## platform sources
nodist_usbserial_pl2303_module_SOURCES  =  ## platform nodist sources
usbserial_pl2303_module_LDADD  = 
usbserial_pl2303_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_pl2303_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_pl2303_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_pl2303_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_pl2303_module_SOURCES)
CLEANFILES += $(nodist_usbserial_pl2303_module_SOURCES)
MOD_FILES += usbserial_pl2303.mod
MARKER_FILES += usbserial_pl2303.marker
CLEANFILES += usbserial_pl2303.marker

usbserial_pl2303.marker: $(usbserial_pl2303_module_SOURCES) $(nodist_usbserial_pl2303_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_pl2303_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += usbserial_pl2303.module
MODULE_FILES += usbserial_pl2303.module$(EXEEXT)
usbserial_pl2303_module_SOURCES  = bus/usb/serial/pl2303.c  ## platform sources
nodist_usbserial_pl2303_module_SOURCES  =  ## platform nodist sources
usbserial_pl2303_module_LDADD  = 
usbserial_pl2303_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_pl2303_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_pl2303_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_pl2303_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_pl2303_module_SOURCES)
CLEANFILES += $(nodist_usbserial_pl2303_module_SOURCES)
MOD_FILES += usbserial_pl2303.mod
MARKER_FILES += usbserial_pl2303.marker
CLEANFILES += usbserial_pl2303.marker

usbserial_pl2303.marker: $(usbserial_pl2303_module_SOURCES) $(nodist_usbserial_pl2303_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_pl2303_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += usbserial_pl2303.module
MODULE_FILES += usbserial_pl2303.module$(EXEEXT)
usbserial_pl2303_module_SOURCES  = bus/usb/serial/pl2303.c  ## platform sources
nodist_usbserial_pl2303_module_SOURCES  =  ## platform nodist sources
usbserial_pl2303_module_LDADD  = 
usbserial_pl2303_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_pl2303_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_pl2303_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_pl2303_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_pl2303_module_SOURCES)
CLEANFILES += $(nodist_usbserial_pl2303_module_SOURCES)
MOD_FILES += usbserial_pl2303.mod
MARKER_FILES += usbserial_pl2303.marker
CLEANFILES += usbserial_pl2303.marker

usbserial_pl2303.marker: $(usbserial_pl2303_module_SOURCES) $(nodist_usbserial_pl2303_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_pl2303_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += usbserial_pl2303.module
MODULE_FILES += usbserial_pl2303.module$(EXEEXT)
usbserial_pl2303_module_SOURCES  = bus/usb/serial/pl2303.c  ## platform sources
nodist_usbserial_pl2303_module_SOURCES  =  ## platform nodist sources
usbserial_pl2303_module_LDADD  = 
usbserial_pl2303_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_pl2303_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_pl2303_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_pl2303_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_pl2303_module_SOURCES)
CLEANFILES += $(nodist_usbserial_pl2303_module_SOURCES)
MOD_FILES += usbserial_pl2303.mod
MARKER_FILES += usbserial_pl2303.marker
CLEANFILES += usbserial_pl2303.marker

usbserial_pl2303.marker: $(usbserial_pl2303_module_SOURCES) $(nodist_usbserial_pl2303_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_pl2303_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += usbserial_pl2303.module
MODULE_FILES += usbserial_pl2303.module$(EXEEXT)
usbserial_pl2303_module_SOURCES  = bus/usb/serial/pl2303.c  ## platform sources
nodist_usbserial_pl2303_module_SOURCES  =  ## platform nodist sources
usbserial_pl2303_module_LDADD  = 
usbserial_pl2303_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_pl2303_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_pl2303_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_pl2303_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_pl2303_module_SOURCES)
CLEANFILES += $(nodist_usbserial_pl2303_module_SOURCES)
MOD_FILES += usbserial_pl2303.mod
MARKER_FILES += usbserial_pl2303.marker
CLEANFILES += usbserial_pl2303.marker

usbserial_pl2303.marker: $(usbserial_pl2303_module_SOURCES) $(nodist_usbserial_pl2303_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_pl2303_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += usbserial_pl2303.module
MODULE_FILES += usbserial_pl2303.module$(EXEEXT)
usbserial_pl2303_module_SOURCES  = bus/usb/serial/pl2303.c  ## platform sources
nodist_usbserial_pl2303_module_SOURCES  =  ## platform nodist sources
usbserial_pl2303_module_LDADD  = 
usbserial_pl2303_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_pl2303_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_pl2303_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_pl2303_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_pl2303_module_SOURCES)
CLEANFILES += $(nodist_usbserial_pl2303_module_SOURCES)
MOD_FILES += usbserial_pl2303.mod
MARKER_FILES += usbserial_pl2303.marker
CLEANFILES += usbserial_pl2303.marker

usbserial_pl2303.marker: $(usbserial_pl2303_module_SOURCES) $(nodist_usbserial_pl2303_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_pl2303_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += usbserial_pl2303.module
MODULE_FILES += usbserial_pl2303.module$(EXEEXT)
usbserial_pl2303_module_SOURCES  = bus/usb/serial/pl2303.c  ## platform sources
nodist_usbserial_pl2303_module_SOURCES  =  ## platform nodist sources
usbserial_pl2303_module_LDADD  = 
usbserial_pl2303_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_pl2303_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_pl2303_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_pl2303_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_pl2303_module_SOURCES)
CLEANFILES += $(nodist_usbserial_pl2303_module_SOURCES)
MOD_FILES += usbserial_pl2303.mod
MARKER_FILES += usbserial_pl2303.marker
CLEANFILES += usbserial_pl2303.marker

usbserial_pl2303.marker: $(usbserial_pl2303_module_SOURCES) $(nodist_usbserial_pl2303_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_pl2303_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += usbserial_pl2303.module
MODULE_FILES += usbserial_pl2303.module$(EXEEXT)
usbserial_pl2303_module_SOURCES  = bus/usb/serial/pl2303.c  ## platform sources
nodist_usbserial_pl2303_module_SOURCES  =  ## platform nodist sources
usbserial_pl2303_module_LDADD  = 
usbserial_pl2303_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_pl2303_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_pl2303_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_pl2303_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_pl2303_module_SOURCES)
CLEANFILES += $(nodist_usbserial_pl2303_module_SOURCES)
MOD_FILES += usbserial_pl2303.mod
MARKER_FILES += usbserial_pl2303.marker
CLEANFILES += usbserial_pl2303.marker

usbserial_pl2303.marker: $(usbserial_pl2303_module_SOURCES) $(nodist_usbserial_pl2303_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_pl2303_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += usbserial_ftdi.module
MODULE_FILES += usbserial_ftdi.module$(EXEEXT)
usbserial_ftdi_module_SOURCES  = bus/usb/serial/ftdi.c  ## platform sources
nodist_usbserial_ftdi_module_SOURCES  =  ## platform nodist sources
usbserial_ftdi_module_LDADD  = 
usbserial_ftdi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_ftdi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_ftdi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_ftdi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_ftdi_module_SOURCES)
CLEANFILES += $(nodist_usbserial_ftdi_module_SOURCES)
MOD_FILES += usbserial_ftdi.mod
MARKER_FILES += usbserial_ftdi.marker
CLEANFILES += usbserial_ftdi.marker

usbserial_ftdi.marker: $(usbserial_ftdi_module_SOURCES) $(nodist_usbserial_ftdi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_ftdi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += usbserial_ftdi.module
MODULE_FILES += usbserial_ftdi.module$(EXEEXT)
usbserial_ftdi_module_SOURCES  = bus/usb/serial/ftdi.c  ## platform sources
nodist_usbserial_ftdi_module_SOURCES  =  ## platform nodist sources
usbserial_ftdi_module_LDADD  = 
usbserial_ftdi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_ftdi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_ftdi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_ftdi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_ftdi_module_SOURCES)
CLEANFILES += $(nodist_usbserial_ftdi_module_SOURCES)
MOD_FILES += usbserial_ftdi.mod
MARKER_FILES += usbserial_ftdi.marker
CLEANFILES += usbserial_ftdi.marker

usbserial_ftdi.marker: $(usbserial_ftdi_module_SOURCES) $(nodist_usbserial_ftdi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_ftdi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += usbserial_ftdi.module
MODULE_FILES += usbserial_ftdi.module$(EXEEXT)
usbserial_ftdi_module_SOURCES  = bus/usb/serial/ftdi.c  ## platform sources
nodist_usbserial_ftdi_module_SOURCES  =  ## platform nodist sources
usbserial_ftdi_module_LDADD  = 
usbserial_ftdi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_ftdi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_ftdi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_ftdi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_ftdi_module_SOURCES)
CLEANFILES += $(nodist_usbserial_ftdi_module_SOURCES)
MOD_FILES += usbserial_ftdi.mod
MARKER_FILES += usbserial_ftdi.marker
CLEANFILES += usbserial_ftdi.marker

usbserial_ftdi.marker: $(usbserial_ftdi_module_SOURCES) $(nodist_usbserial_ftdi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_ftdi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += usbserial_ftdi.module
MODULE_FILES += usbserial_ftdi.module$(EXEEXT)
usbserial_ftdi_module_SOURCES  = bus/usb/serial/ftdi.c  ## platform sources
nodist_usbserial_ftdi_module_SOURCES  =  ## platform nodist sources
usbserial_ftdi_module_LDADD  = 
usbserial_ftdi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_ftdi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_ftdi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_ftdi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_ftdi_module_SOURCES)
CLEANFILES += $(nodist_usbserial_ftdi_module_SOURCES)
MOD_FILES += usbserial_ftdi.mod
MARKER_FILES += usbserial_ftdi.marker
CLEANFILES += usbserial_ftdi.marker

usbserial_ftdi.marker: $(usbserial_ftdi_module_SOURCES) $(nodist_usbserial_ftdi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_ftdi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += usbserial_ftdi.module
MODULE_FILES += usbserial_ftdi.module$(EXEEXT)
usbserial_ftdi_module_SOURCES  = bus/usb/serial/ftdi.c  ## platform sources
nodist_usbserial_ftdi_module_SOURCES  =  ## platform nodist sources
usbserial_ftdi_module_LDADD  = 
usbserial_ftdi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_ftdi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_ftdi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_ftdi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_ftdi_module_SOURCES)
CLEANFILES += $(nodist_usbserial_ftdi_module_SOURCES)
MOD_FILES += usbserial_ftdi.mod
MARKER_FILES += usbserial_ftdi.marker
CLEANFILES += usbserial_ftdi.marker

usbserial_ftdi.marker: $(usbserial_ftdi_module_SOURCES) $(nodist_usbserial_ftdi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_ftdi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += usbserial_ftdi.module
MODULE_FILES += usbserial_ftdi.module$(EXEEXT)
usbserial_ftdi_module_SOURCES  = bus/usb/serial/ftdi.c  ## platform sources
nodist_usbserial_ftdi_module_SOURCES  =  ## platform nodist sources
usbserial_ftdi_module_LDADD  = 
usbserial_ftdi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_ftdi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_ftdi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_ftdi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_ftdi_module_SOURCES)
CLEANFILES += $(nodist_usbserial_ftdi_module_SOURCES)
MOD_FILES += usbserial_ftdi.mod
MARKER_FILES += usbserial_ftdi.marker
CLEANFILES += usbserial_ftdi.marker

usbserial_ftdi.marker: $(usbserial_ftdi_module_SOURCES) $(nodist_usbserial_ftdi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_ftdi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += usbserial_ftdi.module
MODULE_FILES += usbserial_ftdi.module$(EXEEXT)
usbserial_ftdi_module_SOURCES  = bus/usb/serial/ftdi.c  ## platform sources
nodist_usbserial_ftdi_module_SOURCES  =  ## platform nodist sources
usbserial_ftdi_module_LDADD  = 
usbserial_ftdi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_ftdi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_ftdi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_ftdi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_ftdi_module_SOURCES)
CLEANFILES += $(nodist_usbserial_ftdi_module_SOURCES)
MOD_FILES += usbserial_ftdi.mod
MARKER_FILES += usbserial_ftdi.marker
CLEANFILES += usbserial_ftdi.marker

usbserial_ftdi.marker: $(usbserial_ftdi_module_SOURCES) $(nodist_usbserial_ftdi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_ftdi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += usbserial_ftdi.module
MODULE_FILES += usbserial_ftdi.module$(EXEEXT)
usbserial_ftdi_module_SOURCES  = bus/usb/serial/ftdi.c  ## platform sources
nodist_usbserial_ftdi_module_SOURCES  =  ## platform nodist sources
usbserial_ftdi_module_LDADD  = 
usbserial_ftdi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbserial_ftdi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbserial_ftdi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbserial_ftdi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbserial_ftdi_module_SOURCES)
CLEANFILES += $(nodist_usbserial_ftdi_module_SOURCES)
MOD_FILES += usbserial_ftdi.mod
MARKER_FILES += usbserial_ftdi.marker
CLEANFILES += usbserial_ftdi.marker

usbserial_ftdi.marker: $(usbserial_ftdi_module_SOURCES) $(nodist_usbserial_ftdi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbserial_ftdi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += uhci.module
MODULE_FILES += uhci.module$(EXEEXT)
uhci_module_SOURCES  = bus/usb/uhci.c  ## platform sources
nodist_uhci_module_SOURCES  =  ## platform nodist sources
uhci_module_LDADD  = 
uhci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
uhci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
uhci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
uhci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_uhci_module_SOURCES)
CLEANFILES += $(nodist_uhci_module_SOURCES)
MOD_FILES += uhci.mod
MARKER_FILES += uhci.marker
CLEANFILES += uhci.marker

uhci.marker: $(uhci_module_SOURCES) $(nodist_uhci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(uhci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += uhci.module
MODULE_FILES += uhci.module$(EXEEXT)
uhci_module_SOURCES  = bus/usb/uhci.c  ## platform sources
nodist_uhci_module_SOURCES  =  ## platform nodist sources
uhci_module_LDADD  = 
uhci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
uhci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
uhci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
uhci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_uhci_module_SOURCES)
CLEANFILES += $(nodist_uhci_module_SOURCES)
MOD_FILES += uhci.mod
MARKER_FILES += uhci.marker
CLEANFILES += uhci.marker

uhci.marker: $(uhci_module_SOURCES) $(nodist_uhci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(uhci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += uhci.module
MODULE_FILES += uhci.module$(EXEEXT)
uhci_module_SOURCES  = bus/usb/uhci.c  ## platform sources
nodist_uhci_module_SOURCES  =  ## platform nodist sources
uhci_module_LDADD  = 
uhci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
uhci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
uhci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
uhci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_uhci_module_SOURCES)
CLEANFILES += $(nodist_uhci_module_SOURCES)
MOD_FILES += uhci.mod
MARKER_FILES += uhci.marker
CLEANFILES += uhci.marker

uhci.marker: $(uhci_module_SOURCES) $(nodist_uhci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(uhci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += uhci.module
MODULE_FILES += uhci.module$(EXEEXT)
uhci_module_SOURCES  = bus/usb/uhci.c  ## platform sources
nodist_uhci_module_SOURCES  =  ## platform nodist sources
uhci_module_LDADD  = 
uhci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
uhci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
uhci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
uhci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_uhci_module_SOURCES)
CLEANFILES += $(nodist_uhci_module_SOURCES)
MOD_FILES += uhci.mod
MARKER_FILES += uhci.marker
CLEANFILES += uhci.marker

uhci.marker: $(uhci_module_SOURCES) $(nodist_uhci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(uhci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += uhci.module
MODULE_FILES += uhci.module$(EXEEXT)
uhci_module_SOURCES  = bus/usb/uhci.c  ## platform sources
nodist_uhci_module_SOURCES  =  ## platform nodist sources
uhci_module_LDADD  = 
uhci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
uhci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
uhci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
uhci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_uhci_module_SOURCES)
CLEANFILES += $(nodist_uhci_module_SOURCES)
MOD_FILES += uhci.mod
MARKER_FILES += uhci.marker
CLEANFILES += uhci.marker

uhci.marker: $(uhci_module_SOURCES) $(nodist_uhci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(uhci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += uhci.module
MODULE_FILES += uhci.module$(EXEEXT)
uhci_module_SOURCES  = bus/usb/uhci.c  ## platform sources
nodist_uhci_module_SOURCES  =  ## platform nodist sources
uhci_module_LDADD  = 
uhci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
uhci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
uhci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
uhci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_uhci_module_SOURCES)
CLEANFILES += $(nodist_uhci_module_SOURCES)
MOD_FILES += uhci.mod
MARKER_FILES += uhci.marker
CLEANFILES += uhci.marker

uhci.marker: $(uhci_module_SOURCES) $(nodist_uhci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(uhci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += uhci.module
MODULE_FILES += uhci.module$(EXEEXT)
uhci_module_SOURCES  = bus/usb/uhci.c  ## platform sources
nodist_uhci_module_SOURCES  =  ## platform nodist sources
uhci_module_LDADD  = 
uhci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
uhci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
uhci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
uhci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_uhci_module_SOURCES)
CLEANFILES += $(nodist_uhci_module_SOURCES)
MOD_FILES += uhci.mod
MARKER_FILES += uhci.marker
CLEANFILES += uhci.marker

uhci.marker: $(uhci_module_SOURCES) $(nodist_uhci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(uhci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ohci.module
MODULE_FILES += ohci.module$(EXEEXT)
ohci_module_SOURCES  = bus/usb/ohci.c  ## platform sources
nodist_ohci_module_SOURCES  =  ## platform nodist sources
ohci_module_LDADD  = 
ohci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ohci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ohci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ohci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ohci_module_SOURCES)
CLEANFILES += $(nodist_ohci_module_SOURCES)
MOD_FILES += ohci.mod
MARKER_FILES += ohci.marker
CLEANFILES += ohci.marker

ohci.marker: $(ohci_module_SOURCES) $(nodist_ohci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ohci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ohci.module
MODULE_FILES += ohci.module$(EXEEXT)
ohci_module_SOURCES  = bus/usb/ohci.c  ## platform sources
nodist_ohci_module_SOURCES  =  ## platform nodist sources
ohci_module_LDADD  = 
ohci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ohci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ohci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ohci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ohci_module_SOURCES)
CLEANFILES += $(nodist_ohci_module_SOURCES)
MOD_FILES += ohci.mod
MARKER_FILES += ohci.marker
CLEANFILES += ohci.marker

ohci.marker: $(ohci_module_SOURCES) $(nodist_ohci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ohci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ohci.module
MODULE_FILES += ohci.module$(EXEEXT)
ohci_module_SOURCES  = bus/usb/ohci.c  ## platform sources
nodist_ohci_module_SOURCES  =  ## platform nodist sources
ohci_module_LDADD  = 
ohci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ohci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ohci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ohci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ohci_module_SOURCES)
CLEANFILES += $(nodist_ohci_module_SOURCES)
MOD_FILES += ohci.mod
MARKER_FILES += ohci.marker
CLEANFILES += ohci.marker

ohci.marker: $(ohci_module_SOURCES) $(nodist_ohci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ohci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ohci.module
MODULE_FILES += ohci.module$(EXEEXT)
ohci_module_SOURCES  = bus/usb/ohci.c  ## platform sources
nodist_ohci_module_SOURCES  =  ## platform nodist sources
ohci_module_LDADD  = 
ohci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ohci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ohci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ohci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ohci_module_SOURCES)
CLEANFILES += $(nodist_ohci_module_SOURCES)
MOD_FILES += ohci.mod
MARKER_FILES += ohci.marker
CLEANFILES += ohci.marker

ohci.marker: $(ohci_module_SOURCES) $(nodist_ohci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ohci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ohci.module
MODULE_FILES += ohci.module$(EXEEXT)
ohci_module_SOURCES  = bus/usb/ohci.c  ## platform sources
nodist_ohci_module_SOURCES  =  ## platform nodist sources
ohci_module_LDADD  = 
ohci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ohci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ohci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ohci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ohci_module_SOURCES)
CLEANFILES += $(nodist_ohci_module_SOURCES)
MOD_FILES += ohci.mod
MARKER_FILES += ohci.marker
CLEANFILES += ohci.marker

ohci.marker: $(ohci_module_SOURCES) $(nodist_ohci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ohci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ohci.module
MODULE_FILES += ohci.module$(EXEEXT)
ohci_module_SOURCES  = bus/usb/ohci.c  ## platform sources
nodist_ohci_module_SOURCES  =  ## platform nodist sources
ohci_module_LDADD  = 
ohci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ohci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ohci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ohci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ohci_module_SOURCES)
CLEANFILES += $(nodist_ohci_module_SOURCES)
MOD_FILES += ohci.mod
MARKER_FILES += ohci.marker
CLEANFILES += ohci.marker

ohci.marker: $(ohci_module_SOURCES) $(nodist_ohci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ohci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ohci.module
MODULE_FILES += ohci.module$(EXEEXT)
ohci_module_SOURCES  = bus/usb/ohci.c  ## platform sources
nodist_ohci_module_SOURCES  =  ## platform nodist sources
ohci_module_LDADD  = 
ohci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ohci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ohci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ohci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ohci_module_SOURCES)
CLEANFILES += $(nodist_ohci_module_SOURCES)
MOD_FILES += ohci.mod
MARKER_FILES += ohci.marker
CLEANFILES += ohci.marker

ohci.marker: $(ohci_module_SOURCES) $(nodist_ohci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ohci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ohci.module
MODULE_FILES += ohci.module$(EXEEXT)
ohci_module_SOURCES  = bus/usb/ohci.c  ## platform sources
nodist_ohci_module_SOURCES  =  ## platform nodist sources
ohci_module_LDADD  = 
ohci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ohci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ohci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ohci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ohci_module_SOURCES)
CLEANFILES += $(nodist_ohci_module_SOURCES)
MOD_FILES += ohci.mod
MARKER_FILES += ohci.marker
CLEANFILES += ohci.marker

ohci.marker: $(ohci_module_SOURCES) $(nodist_ohci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ohci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ehci.module
MODULE_FILES += ehci.module$(EXEEXT)
ehci_module_SOURCES  = bus/usb/ehci.c  ## platform sources
nodist_ehci_module_SOURCES  =  ## platform nodist sources
ehci_module_LDADD  = 
ehci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ehci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ehci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ehci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ehci_module_SOURCES)
CLEANFILES += $(nodist_ehci_module_SOURCES)
MOD_FILES += ehci.mod
MARKER_FILES += ehci.marker
CLEANFILES += ehci.marker

ehci.marker: $(ehci_module_SOURCES) $(nodist_ehci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ehci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ehci.module
MODULE_FILES += ehci.module$(EXEEXT)
ehci_module_SOURCES  = bus/usb/ehci.c  ## platform sources
nodist_ehci_module_SOURCES  =  ## platform nodist sources
ehci_module_LDADD  = 
ehci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ehci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ehci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ehci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ehci_module_SOURCES)
CLEANFILES += $(nodist_ehci_module_SOURCES)
MOD_FILES += ehci.mod
MARKER_FILES += ehci.marker
CLEANFILES += ehci.marker

ehci.marker: $(ehci_module_SOURCES) $(nodist_ehci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ehci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ehci.module
MODULE_FILES += ehci.module$(EXEEXT)
ehci_module_SOURCES  = bus/usb/ehci.c  ## platform sources
nodist_ehci_module_SOURCES  =  ## platform nodist sources
ehci_module_LDADD  = 
ehci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ehci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ehci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ehci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ehci_module_SOURCES)
CLEANFILES += $(nodist_ehci_module_SOURCES)
MOD_FILES += ehci.mod
MARKER_FILES += ehci.marker
CLEANFILES += ehci.marker

ehci.marker: $(ehci_module_SOURCES) $(nodist_ehci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ehci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ehci.module
MODULE_FILES += ehci.module$(EXEEXT)
ehci_module_SOURCES  = bus/usb/ehci.c  ## platform sources
nodist_ehci_module_SOURCES  =  ## platform nodist sources
ehci_module_LDADD  = 
ehci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ehci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ehci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ehci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ehci_module_SOURCES)
CLEANFILES += $(nodist_ehci_module_SOURCES)
MOD_FILES += ehci.mod
MARKER_FILES += ehci.marker
CLEANFILES += ehci.marker

ehci.marker: $(ehci_module_SOURCES) $(nodist_ehci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ehci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ehci.module
MODULE_FILES += ehci.module$(EXEEXT)
ehci_module_SOURCES  = bus/usb/ehci.c  ## platform sources
nodist_ehci_module_SOURCES  =  ## platform nodist sources
ehci_module_LDADD  = 
ehci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ehci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ehci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ehci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ehci_module_SOURCES)
CLEANFILES += $(nodist_ehci_module_SOURCES)
MOD_FILES += ehci.mod
MARKER_FILES += ehci.marker
CLEANFILES += ehci.marker

ehci.marker: $(ehci_module_SOURCES) $(nodist_ehci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ehci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ehci.module
MODULE_FILES += ehci.module$(EXEEXT)
ehci_module_SOURCES  = bus/usb/ehci.c  ## platform sources
nodist_ehci_module_SOURCES  =  ## platform nodist sources
ehci_module_LDADD  = 
ehci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ehci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ehci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ehci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ehci_module_SOURCES)
CLEANFILES += $(nodist_ehci_module_SOURCES)
MOD_FILES += ehci.mod
MARKER_FILES += ehci.marker
CLEANFILES += ehci.marker

ehci.marker: $(ehci_module_SOURCES) $(nodist_ehci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ehci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ehci.module
MODULE_FILES += ehci.module$(EXEEXT)
ehci_module_SOURCES  = bus/usb/ehci.c  ## platform sources
nodist_ehci_module_SOURCES  =  ## platform nodist sources
ehci_module_LDADD  = 
ehci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ehci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ehci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ehci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ehci_module_SOURCES)
CLEANFILES += $(nodist_ehci_module_SOURCES)
MOD_FILES += ehci.mod
MARKER_FILES += ehci.marker
CLEANFILES += ehci.marker

ehci.marker: $(ehci_module_SOURCES) $(nodist_ehci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ehci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ehci.module
MODULE_FILES += ehci.module$(EXEEXT)
ehci_module_SOURCES  = bus/usb/ehci.c  ## platform sources
nodist_ehci_module_SOURCES  =  ## platform nodist sources
ehci_module_LDADD  = 
ehci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ehci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ehci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ehci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ehci_module_SOURCES)
CLEANFILES += $(nodist_ehci_module_SOURCES)
MOD_FILES += ehci.mod
MARKER_FILES += ehci.marker
CLEANFILES += ehci.marker

ehci.marker: $(ehci_module_SOURCES) $(nodist_ehci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ehci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += pci.module
MODULE_FILES += pci.module$(EXEEXT)
pci_module_SOURCES  = bus/pci.c  ## platform sources
nodist_pci_module_SOURCES  =  ## platform nodist sources
pci_module_LDADD  = 
pci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pci_module_SOURCES)
CLEANFILES += $(nodist_pci_module_SOURCES)
MOD_FILES += pci.mod
MARKER_FILES += pci.marker
CLEANFILES += pci.marker

pci.marker: $(pci_module_SOURCES) $(nodist_pci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += pci.module
MODULE_FILES += pci.module$(EXEEXT)
pci_module_SOURCES  = bus/pci.c  ## platform sources
nodist_pci_module_SOURCES  =  ## platform nodist sources
pci_module_LDADD  = 
pci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pci_module_SOURCES)
CLEANFILES += $(nodist_pci_module_SOURCES)
MOD_FILES += pci.mod
MARKER_FILES += pci.marker
CLEANFILES += pci.marker

pci.marker: $(pci_module_SOURCES) $(nodist_pci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += pci.module
MODULE_FILES += pci.module$(EXEEXT)
pci_module_SOURCES  = bus/pci.c  ## platform sources
nodist_pci_module_SOURCES  =  ## platform nodist sources
pci_module_LDADD  = 
pci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pci_module_SOURCES)
CLEANFILES += $(nodist_pci_module_SOURCES)
MOD_FILES += pci.mod
MARKER_FILES += pci.marker
CLEANFILES += pci.marker

pci.marker: $(pci_module_SOURCES) $(nodist_pci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += pci.module
MODULE_FILES += pci.module$(EXEEXT)
pci_module_SOURCES  = bus/pci.c  ## platform sources
nodist_pci_module_SOURCES  =  ## platform nodist sources
pci_module_LDADD  = 
pci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pci_module_SOURCES)
CLEANFILES += $(nodist_pci_module_SOURCES)
MOD_FILES += pci.mod
MARKER_FILES += pci.marker
CLEANFILES += pci.marker

pci.marker: $(pci_module_SOURCES) $(nodist_pci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_i386_pc
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_i386_efi
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_i386_qemu
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_i386_coreboot
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_i386_multiboot
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_i386_ieee1275
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_x86_64_efi
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_mips_loongson
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_sparc64_ieee1275
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_powerpc_ieee1275
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_mips_arc
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_ia64_efi
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_mips_qemu_mips
if COND_GRUB_EMU_PCI
platform_PROGRAMS += emupci.module
MODULE_FILES += emupci.module$(EXEEXT)
emupci_module_SOURCES  = bus/emu/pci.c commands/lspci.c  ## platform sources
nodist_emupci_module_SOURCES  =  ## platform nodist sources
emupci_module_LDADD  = 
emupci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emupci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emupci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emupci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emupci_module_SOURCES)
CLEANFILES += $(nodist_emupci_module_SOURCES)
MOD_FILES += emupci.mod
MARKER_FILES += emupci.marker
CLEANFILES += emupci.marker

emupci.marker: $(emupci_module_SOURCES) $(nodist_emupci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emupci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_PCI
endif

if COND_mips_arc
platform_PROGRAMS += lsdev.module
MODULE_FILES += lsdev.module$(EXEEXT)
lsdev_module_SOURCES  = commands/arc/lsdev.c  ## platform sources
nodist_lsdev_module_SOURCES  =  ## platform nodist sources
lsdev_module_LDADD  = 
lsdev_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsdev_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsdev_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsdev_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsdev_module_SOURCES)
CLEANFILES += $(nodist_lsdev_module_SOURCES)
MOD_FILES += lsdev.mod
MARKER_FILES += lsdev.marker
CLEANFILES += lsdev.marker

lsdev.marker: $(lsdev_module_SOURCES) $(nodist_lsdev_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsdev_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += cmostest.module
MODULE_FILES += cmostest.module$(EXEEXT)
cmostest_module_SOURCES  = commands/i386/cmostest.c  ## platform sources
nodist_cmostest_module_SOURCES  =  ## platform nodist sources
cmostest_module_LDADD  = 
cmostest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmostest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmostest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmostest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmostest_module_SOURCES)
CLEANFILES += $(nodist_cmostest_module_SOURCES)
MOD_FILES += cmostest.mod
MARKER_FILES += cmostest.marker
CLEANFILES += cmostest.marker

cmostest.marker: $(cmostest_module_SOURCES) $(nodist_cmostest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmostest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += iorw.module
MODULE_FILES += iorw.module$(EXEEXT)
iorw_module_SOURCES  = commands/iorw.c  ## platform sources
nodist_iorw_module_SOURCES  =  ## platform nodist sources
iorw_module_LDADD  = 
iorw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iorw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iorw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iorw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iorw_module_SOURCES)
CLEANFILES += $(nodist_iorw_module_SOURCES)
MOD_FILES += iorw.mod
MARKER_FILES += iorw.marker
CLEANFILES += iorw.marker

iorw.marker: $(iorw_module_SOURCES) $(nodist_iorw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iorw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += iorw.module
MODULE_FILES += iorw.module$(EXEEXT)
iorw_module_SOURCES  = commands/iorw.c  ## platform sources
nodist_iorw_module_SOURCES  =  ## platform nodist sources
iorw_module_LDADD  = 
iorw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iorw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iorw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iorw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iorw_module_SOURCES)
CLEANFILES += $(nodist_iorw_module_SOURCES)
MOD_FILES += iorw.mod
MARKER_FILES += iorw.marker
CLEANFILES += iorw.marker

iorw.marker: $(iorw_module_SOURCES) $(nodist_iorw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iorw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += iorw.module
MODULE_FILES += iorw.module$(EXEEXT)
iorw_module_SOURCES  = commands/iorw.c  ## platform sources
nodist_iorw_module_SOURCES  =  ## platform nodist sources
iorw_module_LDADD  = 
iorw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iorw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iorw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iorw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iorw_module_SOURCES)
CLEANFILES += $(nodist_iorw_module_SOURCES)
MOD_FILES += iorw.mod
MARKER_FILES += iorw.marker
CLEANFILES += iorw.marker

iorw.marker: $(iorw_module_SOURCES) $(nodist_iorw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iorw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += iorw.module
MODULE_FILES += iorw.module$(EXEEXT)
iorw_module_SOURCES  = commands/iorw.c  ## platform sources
nodist_iorw_module_SOURCES  =  ## platform nodist sources
iorw_module_LDADD  = 
iorw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iorw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iorw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iorw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iorw_module_SOURCES)
CLEANFILES += $(nodist_iorw_module_SOURCES)
MOD_FILES += iorw.mod
MARKER_FILES += iorw.marker
CLEANFILES += iorw.marker

iorw.marker: $(iorw_module_SOURCES) $(nodist_iorw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iorw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += iorw.module
MODULE_FILES += iorw.module$(EXEEXT)
iorw_module_SOURCES  = commands/iorw.c  ## platform sources
nodist_iorw_module_SOURCES  =  ## platform nodist sources
iorw_module_LDADD  = 
iorw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iorw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iorw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iorw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iorw_module_SOURCES)
CLEANFILES += $(nodist_iorw_module_SOURCES)
MOD_FILES += iorw.mod
MARKER_FILES += iorw.marker
CLEANFILES += iorw.marker

iorw.marker: $(iorw_module_SOURCES) $(nodist_iorw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iorw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += iorw.module
MODULE_FILES += iorw.module$(EXEEXT)
iorw_module_SOURCES  = commands/iorw.c  ## platform sources
nodist_iorw_module_SOURCES  =  ## platform nodist sources
iorw_module_LDADD  = 
iorw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iorw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iorw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iorw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iorw_module_SOURCES)
CLEANFILES += $(nodist_iorw_module_SOURCES)
MOD_FILES += iorw.mod
MARKER_FILES += iorw.marker
CLEANFILES += iorw.marker

iorw.marker: $(iorw_module_SOURCES) $(nodist_iorw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iorw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += iorw.module
MODULE_FILES += iorw.module$(EXEEXT)
iorw_module_SOURCES  = commands/iorw.c  ## platform sources
nodist_iorw_module_SOURCES  =  ## platform nodist sources
iorw_module_LDADD  = 
iorw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iorw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iorw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iorw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iorw_module_SOURCES)
CLEANFILES += $(nodist_iorw_module_SOURCES)
MOD_FILES += iorw.mod
MARKER_FILES += iorw.marker
CLEANFILES += iorw.marker

iorw.marker: $(iorw_module_SOURCES) $(nodist_iorw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iorw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += regexp.module
MODULE_FILES += regexp.module$(EXEEXT)
regexp_module_SOURCES  = commands/regexp.c commands/wildcard.c  ## platform sources
nodist_regexp_module_SOURCES  =  ## platform nodist sources
regexp_module_LDADD  = libgnulib.a 
regexp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
regexp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
regexp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
regexp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_regexp_module_SOURCES)
CLEANFILES += $(nodist_regexp_module_SOURCES)
MOD_FILES += regexp.mod
MARKER_FILES += regexp.marker
CLEANFILES += regexp.marker

regexp.marker: $(regexp_module_SOURCES) $(nodist_regexp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(regexp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += acpi.module
MODULE_FILES += acpi.module$(EXEEXT)
acpi_module_SOURCES  = commands/i386/pc/acpi.c commands/acpi.c  ## platform sources
nodist_acpi_module_SOURCES  =  ## platform nodist sources
acpi_module_LDADD  = 
acpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
acpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
acpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
acpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_acpi_module_SOURCES)
CLEANFILES += $(nodist_acpi_module_SOURCES)
MOD_FILES += acpi.mod
MARKER_FILES += acpi.marker
CLEANFILES += acpi.marker

acpi.marker: $(acpi_module_SOURCES) $(nodist_acpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(acpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += acpi.module
MODULE_FILES += acpi.module$(EXEEXT)
acpi_module_SOURCES  = commands/efi/acpi.c commands/acpi.c  ## platform sources
nodist_acpi_module_SOURCES  =  ## platform nodist sources
acpi_module_LDADD  = 
acpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
acpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
acpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
acpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_acpi_module_SOURCES)
CLEANFILES += $(nodist_acpi_module_SOURCES)
MOD_FILES += acpi.mod
MARKER_FILES += acpi.marker
CLEANFILES += acpi.marker

acpi.marker: $(acpi_module_SOURCES) $(nodist_acpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(acpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += acpi.module
MODULE_FILES += acpi.module$(EXEEXT)
acpi_module_SOURCES  = commands/i386/pc/acpi.c commands/acpi.c  ## platform sources
nodist_acpi_module_SOURCES  =  ## platform nodist sources
acpi_module_LDADD  = 
acpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
acpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
acpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
acpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_acpi_module_SOURCES)
CLEANFILES += $(nodist_acpi_module_SOURCES)
MOD_FILES += acpi.mod
MARKER_FILES += acpi.marker
CLEANFILES += acpi.marker

acpi.marker: $(acpi_module_SOURCES) $(nodist_acpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(acpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += acpi.module
MODULE_FILES += acpi.module$(EXEEXT)
acpi_module_SOURCES  = commands/i386/pc/acpi.c commands/acpi.c  ## platform sources
nodist_acpi_module_SOURCES  =  ## platform nodist sources
acpi_module_LDADD  = 
acpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
acpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
acpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
acpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_acpi_module_SOURCES)
CLEANFILES += $(nodist_acpi_module_SOURCES)
MOD_FILES += acpi.mod
MARKER_FILES += acpi.marker
CLEANFILES += acpi.marker

acpi.marker: $(acpi_module_SOURCES) $(nodist_acpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(acpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += acpi.module
MODULE_FILES += acpi.module$(EXEEXT)
acpi_module_SOURCES  = commands/efi/acpi.c commands/acpi.c  ## platform sources
nodist_acpi_module_SOURCES  =  ## platform nodist sources
acpi_module_LDADD  = 
acpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
acpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
acpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
acpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_acpi_module_SOURCES)
CLEANFILES += $(nodist_acpi_module_SOURCES)
MOD_FILES += acpi.mod
MARKER_FILES += acpi.marker
CLEANFILES += acpi.marker

acpi.marker: $(acpi_module_SOURCES) $(nodist_acpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(acpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += acpi.module
MODULE_FILES += acpi.module$(EXEEXT)
acpi_module_SOURCES  = commands/efi/acpi.c commands/acpi.c  ## platform sources
nodist_acpi_module_SOURCES  =  ## platform nodist sources
acpi_module_LDADD  = 
acpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
acpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
acpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
acpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_acpi_module_SOURCES)
CLEANFILES += $(nodist_acpi_module_SOURCES)
MOD_FILES += acpi.mod
MARKER_FILES += acpi.marker
CLEANFILES += acpi.marker

acpi.marker: $(acpi_module_SOURCES) $(nodist_acpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(acpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += lsacpi.module
MODULE_FILES += lsacpi.module$(EXEEXT)
lsacpi_module_SOURCES  = commands/lsacpi.c  ## platform sources
nodist_lsacpi_module_SOURCES  =  ## platform nodist sources
lsacpi_module_LDADD  = 
lsacpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsacpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsacpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsacpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsacpi_module_SOURCES)
CLEANFILES += $(nodist_lsacpi_module_SOURCES)
MOD_FILES += lsacpi.mod
MARKER_FILES += lsacpi.marker
CLEANFILES += lsacpi.marker

lsacpi.marker: $(lsacpi_module_SOURCES) $(nodist_lsacpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsacpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += lsacpi.module
MODULE_FILES += lsacpi.module$(EXEEXT)
lsacpi_module_SOURCES  = commands/lsacpi.c  ## platform sources
nodist_lsacpi_module_SOURCES  =  ## platform nodist sources
lsacpi_module_LDADD  = 
lsacpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsacpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsacpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsacpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsacpi_module_SOURCES)
CLEANFILES += $(nodist_lsacpi_module_SOURCES)
MOD_FILES += lsacpi.mod
MARKER_FILES += lsacpi.marker
CLEANFILES += lsacpi.marker

lsacpi.marker: $(lsacpi_module_SOURCES) $(nodist_lsacpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsacpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += lsacpi.module
MODULE_FILES += lsacpi.module$(EXEEXT)
lsacpi_module_SOURCES  = commands/lsacpi.c  ## platform sources
nodist_lsacpi_module_SOURCES  =  ## platform nodist sources
lsacpi_module_LDADD  = 
lsacpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsacpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsacpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsacpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsacpi_module_SOURCES)
CLEANFILES += $(nodist_lsacpi_module_SOURCES)
MOD_FILES += lsacpi.mod
MARKER_FILES += lsacpi.marker
CLEANFILES += lsacpi.marker

lsacpi.marker: $(lsacpi_module_SOURCES) $(nodist_lsacpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsacpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += lsacpi.module
MODULE_FILES += lsacpi.module$(EXEEXT)
lsacpi_module_SOURCES  = commands/lsacpi.c  ## platform sources
nodist_lsacpi_module_SOURCES  =  ## platform nodist sources
lsacpi_module_LDADD  = 
lsacpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsacpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsacpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsacpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsacpi_module_SOURCES)
CLEANFILES += $(nodist_lsacpi_module_SOURCES)
MOD_FILES += lsacpi.mod
MARKER_FILES += lsacpi.marker
CLEANFILES += lsacpi.marker

lsacpi.marker: $(lsacpi_module_SOURCES) $(nodist_lsacpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsacpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += lsacpi.module
MODULE_FILES += lsacpi.module$(EXEEXT)
lsacpi_module_SOURCES  = commands/lsacpi.c  ## platform sources
nodist_lsacpi_module_SOURCES  =  ## platform nodist sources
lsacpi_module_LDADD  = 
lsacpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsacpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsacpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsacpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsacpi_module_SOURCES)
CLEANFILES += $(nodist_lsacpi_module_SOURCES)
MOD_FILES += lsacpi.mod
MARKER_FILES += lsacpi.marker
CLEANFILES += lsacpi.marker

lsacpi.marker: $(lsacpi_module_SOURCES) $(nodist_lsacpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsacpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += lsacpi.module
MODULE_FILES += lsacpi.module$(EXEEXT)
lsacpi_module_SOURCES  = commands/lsacpi.c  ## platform sources
nodist_lsacpi_module_SOURCES  =  ## platform nodist sources
lsacpi_module_LDADD  = 
lsacpi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsacpi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsacpi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsacpi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsacpi_module_SOURCES)
CLEANFILES += $(nodist_lsacpi_module_SOURCES)
MOD_FILES += lsacpi.mod
MARKER_FILES += lsacpi.marker
CLEANFILES += lsacpi.marker

lsacpi.marker: $(lsacpi_module_SOURCES) $(nodist_lsacpi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsacpi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += lsefisystab.module
MODULE_FILES += lsefisystab.module$(EXEEXT)
lsefisystab_module_SOURCES  = commands/efi/lsefisystab.c  ## platform sources
nodist_lsefisystab_module_SOURCES  =  ## platform nodist sources
lsefisystab_module_LDADD  = 
lsefisystab_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsefisystab_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsefisystab_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsefisystab_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsefisystab_module_SOURCES)
CLEANFILES += $(nodist_lsefisystab_module_SOURCES)
MOD_FILES += lsefisystab.mod
MARKER_FILES += lsefisystab.marker
CLEANFILES += lsefisystab.marker

lsefisystab.marker: $(lsefisystab_module_SOURCES) $(nodist_lsefisystab_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsefisystab_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += lsefisystab.module
MODULE_FILES += lsefisystab.module$(EXEEXT)
lsefisystab_module_SOURCES  = commands/efi/lsefisystab.c  ## platform sources
nodist_lsefisystab_module_SOURCES  =  ## platform nodist sources
lsefisystab_module_LDADD  = 
lsefisystab_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsefisystab_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsefisystab_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsefisystab_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsefisystab_module_SOURCES)
CLEANFILES += $(nodist_lsefisystab_module_SOURCES)
MOD_FILES += lsefisystab.mod
MARKER_FILES += lsefisystab.marker
CLEANFILES += lsefisystab.marker

lsefisystab.marker: $(lsefisystab_module_SOURCES) $(nodist_lsefisystab_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsefisystab_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += lsefisystab.module
MODULE_FILES += lsefisystab.module$(EXEEXT)
lsefisystab_module_SOURCES  = commands/efi/lsefisystab.c  ## platform sources
nodist_lsefisystab_module_SOURCES  =  ## platform nodist sources
lsefisystab_module_LDADD  = 
lsefisystab_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsefisystab_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsefisystab_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsefisystab_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsefisystab_module_SOURCES)
CLEANFILES += $(nodist_lsefisystab_module_SOURCES)
MOD_FILES += lsefisystab.mod
MARKER_FILES += lsefisystab.marker
CLEANFILES += lsefisystab.marker

lsefisystab.marker: $(lsefisystab_module_SOURCES) $(nodist_lsefisystab_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsefisystab_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += lssal.module
MODULE_FILES += lssal.module$(EXEEXT)
lssal_module_SOURCES  = commands/efi/lssal.c  ## platform sources
nodist_lssal_module_SOURCES  =  ## platform nodist sources
lssal_module_LDADD  = 
lssal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lssal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lssal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lssal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lssal_module_SOURCES)
CLEANFILES += $(nodist_lssal_module_SOURCES)
MOD_FILES += lssal.mod
MARKER_FILES += lssal.marker
CLEANFILES += lssal.marker

lssal.marker: $(lssal_module_SOURCES) $(nodist_lssal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lssal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += lssal.module
MODULE_FILES += lssal.module$(EXEEXT)
lssal_module_SOURCES  = commands/efi/lssal.c  ## platform sources
nodist_lssal_module_SOURCES  =  ## platform nodist sources
lssal_module_LDADD  = 
lssal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lssal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lssal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lssal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lssal_module_SOURCES)
CLEANFILES += $(nodist_lssal_module_SOURCES)
MOD_FILES += lssal.mod
MARKER_FILES += lssal.marker
CLEANFILES += lssal.marker

lssal.marker: $(lssal_module_SOURCES) $(nodist_lssal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lssal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += lssal.module
MODULE_FILES += lssal.module$(EXEEXT)
lssal_module_SOURCES  = commands/efi/lssal.c  ## platform sources
nodist_lssal_module_SOURCES  =  ## platform nodist sources
lssal_module_LDADD  = 
lssal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lssal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lssal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lssal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lssal_module_SOURCES)
CLEANFILES += $(nodist_lssal_module_SOURCES)
MOD_FILES += lssal.mod
MARKER_FILES += lssal.marker
CLEANFILES += lssal.marker

lssal.marker: $(lssal_module_SOURCES) $(nodist_lssal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lssal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += lsefimmap.module
MODULE_FILES += lsefimmap.module$(EXEEXT)
lsefimmap_module_SOURCES  = commands/efi/lsefimmap.c  ## platform sources
nodist_lsefimmap_module_SOURCES  =  ## platform nodist sources
lsefimmap_module_LDADD  = 
lsefimmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsefimmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsefimmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsefimmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsefimmap_module_SOURCES)
CLEANFILES += $(nodist_lsefimmap_module_SOURCES)
MOD_FILES += lsefimmap.mod
MARKER_FILES += lsefimmap.marker
CLEANFILES += lsefimmap.marker

lsefimmap.marker: $(lsefimmap_module_SOURCES) $(nodist_lsefimmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsefimmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += lsefimmap.module
MODULE_FILES += lsefimmap.module$(EXEEXT)
lsefimmap_module_SOURCES  = commands/efi/lsefimmap.c  ## platform sources
nodist_lsefimmap_module_SOURCES  =  ## platform nodist sources
lsefimmap_module_LDADD  = 
lsefimmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsefimmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsefimmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsefimmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsefimmap_module_SOURCES)
CLEANFILES += $(nodist_lsefimmap_module_SOURCES)
MOD_FILES += lsefimmap.mod
MARKER_FILES += lsefimmap.marker
CLEANFILES += lsefimmap.marker

lsefimmap.marker: $(lsefimmap_module_SOURCES) $(nodist_lsefimmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsefimmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += lsefimmap.module
MODULE_FILES += lsefimmap.module$(EXEEXT)
lsefimmap_module_SOURCES  = commands/efi/lsefimmap.c  ## platform sources
nodist_lsefimmap_module_SOURCES  =  ## platform nodist sources
lsefimmap_module_LDADD  = 
lsefimmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsefimmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsefimmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsefimmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsefimmap_module_SOURCES)
CLEANFILES += $(nodist_lsefimmap_module_SOURCES)
MOD_FILES += lsefimmap.mod
MARKER_FILES += lsefimmap.marker
CLEANFILES += lsefimmap.marker

lsefimmap.marker: $(lsefimmap_module_SOURCES) $(nodist_lsefimmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsefimmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += blocklist.module
MODULE_FILES += blocklist.module$(EXEEXT)
blocklist_module_SOURCES  = commands/blocklist.c  ## platform sources
nodist_blocklist_module_SOURCES  =  ## platform nodist sources
blocklist_module_LDADD  = 
blocklist_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
blocklist_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
blocklist_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
blocklist_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_blocklist_module_SOURCES)
CLEANFILES += $(nodist_blocklist_module_SOURCES)
MOD_FILES += blocklist.mod
MARKER_FILES += blocklist.marker
CLEANFILES += blocklist.marker

blocklist.marker: $(blocklist_module_SOURCES) $(nodist_blocklist_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blocklist_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = lib/i386/pc/biosnum.c commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += boot.module
MODULE_FILES += boot.module$(EXEEXT)
boot_module_SOURCES  = commands/boot.c  ## platform sources
nodist_boot_module_SOURCES  =  ## platform nodist sources
boot_module_LDADD  = 
boot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
boot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
boot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
boot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_module_SOURCES)
CLEANFILES += $(nodist_boot_module_SOURCES)
MOD_FILES += boot.mod
MARKER_FILES += boot.marker
CLEANFILES += boot.marker

boot.marker: $(boot_module_SOURCES) $(nodist_boot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(boot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += cat.module
MODULE_FILES += cat.module$(EXEEXT)
cat_module_SOURCES  = commands/cat.c  ## platform sources
nodist_cat_module_SOURCES  =  ## platform nodist sources
cat_module_LDADD  = 
cat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cat_module_SOURCES)
CLEANFILES += $(nodist_cat_module_SOURCES)
MOD_FILES += cat.mod
MARKER_FILES += cat.marker
CLEANFILES += cat.marker

cat.marker: $(cat_module_SOURCES) $(nodist_cat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += cmp.module
MODULE_FILES += cmp.module$(EXEEXT)
cmp_module_SOURCES  = commands/cmp.c  ## platform sources
nodist_cmp_module_SOURCES  =  ## platform nodist sources
cmp_module_LDADD  = 
cmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cmp_module_SOURCES)
CLEANFILES += $(nodist_cmp_module_SOURCES)
MOD_FILES += cmp.mod
MARKER_FILES += cmp.marker
CLEANFILES += cmp.marker

cmp.marker: $(cmp_module_SOURCES) $(nodist_cmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += configfile.module
MODULE_FILES += configfile.module$(EXEEXT)
configfile_module_SOURCES  = commands/configfile.c  ## platform sources
nodist_configfile_module_SOURCES  =  ## platform nodist sources
configfile_module_LDADD  = 
configfile_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
configfile_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
configfile_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
configfile_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_configfile_module_SOURCES)
CLEANFILES += $(nodist_configfile_module_SOURCES)
MOD_FILES += configfile.mod
MARKER_FILES += configfile.marker
CLEANFILES += configfile.marker

configfile.marker: $(configfile_module_SOURCES) $(nodist_configfile_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(configfile_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += cpuid.module
MODULE_FILES += cpuid.module$(EXEEXT)
cpuid_module_SOURCES  = commands/i386/cpuid.c  ## platform sources
nodist_cpuid_module_SOURCES  =  ## platform nodist sources
cpuid_module_LDADD  = 
cpuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpuid_module_SOURCES)
CLEANFILES += $(nodist_cpuid_module_SOURCES)
MOD_FILES += cpuid.mod
MARKER_FILES += cpuid.marker
CLEANFILES += cpuid.marker

cpuid.marker: $(cpuid_module_SOURCES) $(nodist_cpuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += cpuid.module
MODULE_FILES += cpuid.module$(EXEEXT)
cpuid_module_SOURCES  = commands/i386/cpuid.c  ## platform sources
nodist_cpuid_module_SOURCES  =  ## platform nodist sources
cpuid_module_LDADD  = 
cpuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpuid_module_SOURCES)
CLEANFILES += $(nodist_cpuid_module_SOURCES)
MOD_FILES += cpuid.mod
MARKER_FILES += cpuid.marker
CLEANFILES += cpuid.marker

cpuid.marker: $(cpuid_module_SOURCES) $(nodist_cpuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += cpuid.module
MODULE_FILES += cpuid.module$(EXEEXT)
cpuid_module_SOURCES  = commands/i386/cpuid.c  ## platform sources
nodist_cpuid_module_SOURCES  =  ## platform nodist sources
cpuid_module_LDADD  = 
cpuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpuid_module_SOURCES)
CLEANFILES += $(nodist_cpuid_module_SOURCES)
MOD_FILES += cpuid.mod
MARKER_FILES += cpuid.marker
CLEANFILES += cpuid.marker

cpuid.marker: $(cpuid_module_SOURCES) $(nodist_cpuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += cpuid.module
MODULE_FILES += cpuid.module$(EXEEXT)
cpuid_module_SOURCES  = commands/i386/cpuid.c  ## platform sources
nodist_cpuid_module_SOURCES  =  ## platform nodist sources
cpuid_module_LDADD  = 
cpuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpuid_module_SOURCES)
CLEANFILES += $(nodist_cpuid_module_SOURCES)
MOD_FILES += cpuid.mod
MARKER_FILES += cpuid.marker
CLEANFILES += cpuid.marker

cpuid.marker: $(cpuid_module_SOURCES) $(nodist_cpuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += cpuid.module
MODULE_FILES += cpuid.module$(EXEEXT)
cpuid_module_SOURCES  = commands/i386/cpuid.c  ## platform sources
nodist_cpuid_module_SOURCES  =  ## platform nodist sources
cpuid_module_LDADD  = 
cpuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpuid_module_SOURCES)
CLEANFILES += $(nodist_cpuid_module_SOURCES)
MOD_FILES += cpuid.mod
MARKER_FILES += cpuid.marker
CLEANFILES += cpuid.marker

cpuid.marker: $(cpuid_module_SOURCES) $(nodist_cpuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += cpuid.module
MODULE_FILES += cpuid.module$(EXEEXT)
cpuid_module_SOURCES  = commands/i386/cpuid.c  ## platform sources
nodist_cpuid_module_SOURCES  =  ## platform nodist sources
cpuid_module_LDADD  = 
cpuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpuid_module_SOURCES)
CLEANFILES += $(nodist_cpuid_module_SOURCES)
MOD_FILES += cpuid.mod
MARKER_FILES += cpuid.marker
CLEANFILES += cpuid.marker

cpuid.marker: $(cpuid_module_SOURCES) $(nodist_cpuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += cpuid.module
MODULE_FILES += cpuid.module$(EXEEXT)
cpuid_module_SOURCES  = commands/i386/cpuid.c  ## platform sources
nodist_cpuid_module_SOURCES  =  ## platform nodist sources
cpuid_module_LDADD  = 
cpuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpuid_module_SOURCES)
CLEANFILES += $(nodist_cpuid_module_SOURCES)
MOD_FILES += cpuid.mod
MARKER_FILES += cpuid.marker
CLEANFILES += cpuid.marker

cpuid.marker: $(cpuid_module_SOURCES) $(nodist_cpuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += date.module
MODULE_FILES += date.module$(EXEEXT)
date_module_SOURCES  = commands/date.c  ## platform sources
nodist_date_module_SOURCES  =  ## platform nodist sources
date_module_LDADD  = 
date_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
date_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
date_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
date_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_date_module_SOURCES)
CLEANFILES += $(nodist_date_module_SOURCES)
MOD_FILES += date.mod
MARKER_FILES += date.marker
CLEANFILES += date.marker

date.marker: $(date_module_SOURCES) $(nodist_date_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(date_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += drivemap.module
MODULE_FILES += drivemap.module$(EXEEXT)
drivemap_module_SOURCES  = commands/i386/pc/drivemap.c commands/i386/pc/drivemap_int13h.S  ## platform sources
nodist_drivemap_module_SOURCES  =  ## platform nodist sources
drivemap_module_LDADD  = 
drivemap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
drivemap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
drivemap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
drivemap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_drivemap_module_SOURCES)
CLEANFILES += $(nodist_drivemap_module_SOURCES)
MOD_FILES += drivemap.mod
MARKER_FILES += drivemap.marker
CLEANFILES += drivemap.marker

drivemap.marker: $(drivemap_module_SOURCES) $(nodist_drivemap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(drivemap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += echo.module
MODULE_FILES += echo.module$(EXEEXT)
echo_module_SOURCES  = commands/echo.c  ## platform sources
nodist_echo_module_SOURCES  =  ## platform nodist sources
echo_module_LDADD  = 
echo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
echo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
echo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
echo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_echo_module_SOURCES)
CLEANFILES += $(nodist_echo_module_SOURCES)
MOD_FILES += echo.mod
MARKER_FILES += echo.marker
CLEANFILES += echo.marker

echo.marker: $(echo_module_SOURCES) $(nodist_echo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(echo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += extcmd.module
MODULE_FILES += extcmd.module$(EXEEXT)
extcmd_module_SOURCES  = commands/extcmd.c lib/arg.c  ## platform sources
nodist_extcmd_module_SOURCES  =  ## platform nodist sources
extcmd_module_LDADD  = 
extcmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
extcmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
extcmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
extcmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_extcmd_module_SOURCES)
CLEANFILES += $(nodist_extcmd_module_SOURCES)
MOD_FILES += extcmd.mod
MARKER_FILES += extcmd.marker
CLEANFILES += extcmd.marker

extcmd.marker: $(extcmd_module_SOURCES) $(nodist_extcmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extcmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += extcmd.module
MODULE_FILES += extcmd.module$(EXEEXT)
extcmd_module_SOURCES  = commands/extcmd.c lib/arg.c  ## platform sources
nodist_extcmd_module_SOURCES  =  ## platform nodist sources
extcmd_module_LDADD  = 
extcmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
extcmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
extcmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
extcmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_extcmd_module_SOURCES)
CLEANFILES += $(nodist_extcmd_module_SOURCES)
MOD_FILES += extcmd.mod
MARKER_FILES += extcmd.marker
CLEANFILES += extcmd.marker

extcmd.marker: $(extcmd_module_SOURCES) $(nodist_extcmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extcmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += extcmd.module
MODULE_FILES += extcmd.module$(EXEEXT)
extcmd_module_SOURCES  = commands/extcmd.c lib/arg.c  ## platform sources
nodist_extcmd_module_SOURCES  =  ## platform nodist sources
extcmd_module_LDADD  = 
extcmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
extcmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
extcmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
extcmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_extcmd_module_SOURCES)
CLEANFILES += $(nodist_extcmd_module_SOURCES)
MOD_FILES += extcmd.mod
MARKER_FILES += extcmd.marker
CLEANFILES += extcmd.marker

extcmd.marker: $(extcmd_module_SOURCES) $(nodist_extcmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extcmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += extcmd.module
MODULE_FILES += extcmd.module$(EXEEXT)
extcmd_module_SOURCES  = commands/extcmd.c lib/arg.c  ## platform sources
nodist_extcmd_module_SOURCES  =  ## platform nodist sources
extcmd_module_LDADD  = 
extcmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
extcmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
extcmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
extcmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_extcmd_module_SOURCES)
CLEANFILES += $(nodist_extcmd_module_SOURCES)
MOD_FILES += extcmd.mod
MARKER_FILES += extcmd.marker
CLEANFILES += extcmd.marker

extcmd.marker: $(extcmd_module_SOURCES) $(nodist_extcmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extcmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += extcmd.module
MODULE_FILES += extcmd.module$(EXEEXT)
extcmd_module_SOURCES  = commands/extcmd.c lib/arg.c  ## platform sources
nodist_extcmd_module_SOURCES  =  ## platform nodist sources
extcmd_module_LDADD  = 
extcmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
extcmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
extcmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
extcmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_extcmd_module_SOURCES)
CLEANFILES += $(nodist_extcmd_module_SOURCES)
MOD_FILES += extcmd.mod
MARKER_FILES += extcmd.marker
CLEANFILES += extcmd.marker

extcmd.marker: $(extcmd_module_SOURCES) $(nodist_extcmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extcmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += extcmd.module
MODULE_FILES += extcmd.module$(EXEEXT)
extcmd_module_SOURCES  = commands/extcmd.c lib/arg.c  ## platform sources
nodist_extcmd_module_SOURCES  =  ## platform nodist sources
extcmd_module_LDADD  = 
extcmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
extcmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
extcmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
extcmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_extcmd_module_SOURCES)
CLEANFILES += $(nodist_extcmd_module_SOURCES)
MOD_FILES += extcmd.mod
MARKER_FILES += extcmd.marker
CLEANFILES += extcmd.marker

extcmd.marker: $(extcmd_module_SOURCES) $(nodist_extcmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extcmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += extcmd.module
MODULE_FILES += extcmd.module$(EXEEXT)
extcmd_module_SOURCES  = commands/extcmd.c lib/arg.c  ## platform sources
nodist_extcmd_module_SOURCES  =  ## platform nodist sources
extcmd_module_LDADD  = 
extcmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
extcmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
extcmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
extcmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_extcmd_module_SOURCES)
CLEANFILES += $(nodist_extcmd_module_SOURCES)
MOD_FILES += extcmd.mod
MARKER_FILES += extcmd.marker
CLEANFILES += extcmd.marker

extcmd.marker: $(extcmd_module_SOURCES) $(nodist_extcmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extcmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += extcmd.module
MODULE_FILES += extcmd.module$(EXEEXT)
extcmd_module_SOURCES  = commands/extcmd.c lib/arg.c  ## platform sources
nodist_extcmd_module_SOURCES  =  ## platform nodist sources
extcmd_module_LDADD  = 
extcmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
extcmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
extcmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
extcmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_extcmd_module_SOURCES)
CLEANFILES += $(nodist_extcmd_module_SOURCES)
MOD_FILES += extcmd.mod
MARKER_FILES += extcmd.marker
CLEANFILES += extcmd.marker

extcmd.marker: $(extcmd_module_SOURCES) $(nodist_extcmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extcmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += fixvideo.module
MODULE_FILES += fixvideo.module$(EXEEXT)
fixvideo_module_SOURCES  = commands/efi/fixvideo.c  ## platform sources
nodist_fixvideo_module_SOURCES  =  ## platform nodist sources
fixvideo_module_LDADD  = 
fixvideo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fixvideo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fixvideo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fixvideo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fixvideo_module_SOURCES)
CLEANFILES += $(nodist_fixvideo_module_SOURCES)
MOD_FILES += fixvideo.mod
MARKER_FILES += fixvideo.marker
CLEANFILES += fixvideo.marker

fixvideo.marker: $(fixvideo_module_SOURCES) $(nodist_fixvideo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fixvideo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += fixvideo.module
MODULE_FILES += fixvideo.module$(EXEEXT)
fixvideo_module_SOURCES  = commands/efi/fixvideo.c  ## platform sources
nodist_fixvideo_module_SOURCES  =  ## platform nodist sources
fixvideo_module_LDADD  = 
fixvideo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fixvideo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fixvideo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fixvideo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fixvideo_module_SOURCES)
CLEANFILES += $(nodist_fixvideo_module_SOURCES)
MOD_FILES += fixvideo.mod
MARKER_FILES += fixvideo.marker
CLEANFILES += fixvideo.marker

fixvideo.marker: $(fixvideo_module_SOURCES) $(nodist_fixvideo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fixvideo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gptsync.module
MODULE_FILES += gptsync.module$(EXEEXT)
gptsync_module_SOURCES  = commands/gptsync.c  ## platform sources
nodist_gptsync_module_SOURCES  =  ## platform nodist sources
gptsync_module_LDADD  = 
gptsync_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gptsync_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gptsync_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gptsync_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gptsync_module_SOURCES)
CLEANFILES += $(nodist_gptsync_module_SOURCES)
MOD_FILES += gptsync.mod
MARKER_FILES += gptsync.marker
CLEANFILES += gptsync.marker

gptsync.marker: $(gptsync_module_SOURCES) $(nodist_gptsync_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gptsync_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = lib/emu/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = commands/i386/pc/halt.c commands/acpihalt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = commands/acpihalt.c lib/efi/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = lib/i386/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = commands/acpihalt.c lib/i386/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = commands/acpihalt.c lib/i386/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = lib/ieee1275/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = commands/acpihalt.c lib/efi/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = lib/ieee1275/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = lib/ieee1275/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = lib/efi/halt.c commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += halt.module
MODULE_FILES += halt.module$(EXEEXT)
halt_module_SOURCES  = commands/halt.c  ## platform sources
nodist_halt_module_SOURCES  =  ## platform nodist sources
halt_module_LDADD  = 
halt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
halt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
halt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
halt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_halt_module_SOURCES)
CLEANFILES += $(nodist_halt_module_SOURCES)
MOD_FILES += halt.mod
MARKER_FILES += halt.marker
CLEANFILES += halt.marker

halt.marker: $(halt_module_SOURCES) $(nodist_halt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(halt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/i386/reboot.c lib/i386/reboot_trampoline.S commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/i386/reboot.c lib/i386/reboot_trampoline.S commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/i386/reboot.c lib/i386/reboot_trampoline.S commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/i386/reboot.c lib/i386/reboot_trampoline.S commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/i386/reboot.c lib/i386/reboot_trampoline.S commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/i386/reboot.c lib/i386/reboot_trampoline.S commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/efi/reboot.c commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/mips/loongson/reboot.c commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/ieee1275/reboot.c commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/ieee1275/reboot.c commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/mips/arc/reboot.c commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/efi/reboot.c commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += reboot.module
MODULE_FILES += reboot.module$(EXEEXT)
reboot_module_SOURCES  = lib/mips/qemu_mips/reboot.c commands/reboot.c  ## platform sources
nodist_reboot_module_SOURCES  =  ## platform nodist sources
reboot_module_LDADD  = 
reboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reboot_module_SOURCES)
CLEANFILES += $(nodist_reboot_module_SOURCES)
MOD_FILES += reboot.mod
MARKER_FILES += reboot.marker
CLEANFILES += reboot.marker

reboot.marker: $(reboot_module_SOURCES) $(nodist_reboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += hashsum.module
MODULE_FILES += hashsum.module$(EXEEXT)
hashsum_module_SOURCES  = commands/hashsum.c  ## platform sources
nodist_hashsum_module_SOURCES  =  ## platform nodist sources
hashsum_module_LDADD  = 
hashsum_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hashsum_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hashsum_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hashsum_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hashsum_module_SOURCES)
CLEANFILES += $(nodist_hashsum_module_SOURCES)
MOD_FILES += hashsum.mod
MARKER_FILES += hashsum.marker
CLEANFILES += hashsum.marker

hashsum.marker: $(hashsum_module_SOURCES) $(nodist_hashsum_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hashsum_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += hdparm.module
MODULE_FILES += hdparm.module$(EXEEXT)
hdparm_module_SOURCES  = commands/hdparm.c lib/hexdump.c  ## platform sources
nodist_hdparm_module_SOURCES  =  ## platform nodist sources
hdparm_module_LDADD  = 
hdparm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hdparm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hdparm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hdparm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hdparm_module_SOURCES)
CLEANFILES += $(nodist_hdparm_module_SOURCES)
MOD_FILES += hdparm.mod
MARKER_FILES += hdparm.marker
CLEANFILES += hdparm.marker

hdparm.marker: $(hdparm_module_SOURCES) $(nodist_hdparm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hdparm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += help.module
MODULE_FILES += help.module$(EXEEXT)
help_module_SOURCES  = commands/help.c  ## platform sources
nodist_help_module_SOURCES  =  ## platform nodist sources
help_module_LDADD  = 
help_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
help_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
help_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
help_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_help_module_SOURCES)
CLEANFILES += $(nodist_help_module_SOURCES)
MOD_FILES += help.mod
MARKER_FILES += help.marker
CLEANFILES += help.marker

help.marker: $(help_module_SOURCES) $(nodist_help_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(help_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += hexdump.module
MODULE_FILES += hexdump.module$(EXEEXT)
hexdump_module_SOURCES  = commands/hexdump.c lib/hexdump.c  ## platform sources
nodist_hexdump_module_SOURCES  =  ## platform nodist sources
hexdump_module_LDADD  = 
hexdump_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hexdump_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hexdump_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hexdump_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hexdump_module_SOURCES)
CLEANFILES += $(nodist_hexdump_module_SOURCES)
MOD_FILES += hexdump.mod
MARKER_FILES += hexdump.marker
CLEANFILES += hexdump.marker

hexdump.marker: $(hexdump_module_SOURCES) $(nodist_hexdump_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hexdump_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += keystatus.module
MODULE_FILES += keystatus.module$(EXEEXT)
keystatus_module_SOURCES  = commands/keystatus.c  ## platform sources
nodist_keystatus_module_SOURCES  =  ## platform nodist sources
keystatus_module_LDADD  = 
keystatus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keystatus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keystatus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keystatus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keystatus_module_SOURCES)
CLEANFILES += $(nodist_keystatus_module_SOURCES)
MOD_FILES += keystatus.mod
MARKER_FILES += keystatus.marker
CLEANFILES += keystatus.marker

keystatus.marker: $(keystatus_module_SOURCES) $(nodist_keystatus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keystatus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += loadbios.module
MODULE_FILES += loadbios.module$(EXEEXT)
loadbios_module_SOURCES  = commands/efi/loadbios.c  ## platform sources
nodist_loadbios_module_SOURCES  =  ## platform nodist sources
loadbios_module_LDADD  = 
loadbios_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadbios_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadbios_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadbios_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadbios_module_SOURCES)
CLEANFILES += $(nodist_loadbios_module_SOURCES)
MOD_FILES += loadbios.mod
MARKER_FILES += loadbios.marker
CLEANFILES += loadbios.marker

loadbios.marker: $(loadbios_module_SOURCES) $(nodist_loadbios_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadbios_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += loadbios.module
MODULE_FILES += loadbios.module$(EXEEXT)
loadbios_module_SOURCES  = commands/efi/loadbios.c  ## platform sources
nodist_loadbios_module_SOURCES  =  ## platform nodist sources
loadbios_module_LDADD  = 
loadbios_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadbios_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadbios_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadbios_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadbios_module_SOURCES)
CLEANFILES += $(nodist_loadbios_module_SOURCES)
MOD_FILES += loadbios.mod
MARKER_FILES += loadbios.marker
CLEANFILES += loadbios.marker

loadbios.marker: $(loadbios_module_SOURCES) $(nodist_loadbios_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadbios_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += loadenv.module
MODULE_FILES += loadenv.module$(EXEEXT)
loadenv_module_SOURCES  = commands/loadenv.c lib/envblk.c  ## platform sources
nodist_loadenv_module_SOURCES  =  ## platform nodist sources
loadenv_module_LDADD  = 
loadenv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loadenv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loadenv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loadenv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loadenv_module_SOURCES)
CLEANFILES += $(nodist_loadenv_module_SOURCES)
MOD_FILES += loadenv.mod
MARKER_FILES += loadenv.marker
CLEANFILES += loadenv.marker

loadenv.marker: $(loadenv_module_SOURCES) $(nodist_loadenv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loadenv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += ls.module
MODULE_FILES += ls.module$(EXEEXT)
ls_module_SOURCES  = commands/ls.c  ## platform sources
nodist_ls_module_SOURCES  =  ## platform nodist sources
ls_module_LDADD  = 
ls_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ls_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ls_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ls_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ls_module_SOURCES)
CLEANFILES += $(nodist_ls_module_SOURCES)
MOD_FILES += ls.mod
MARKER_FILES += ls.marker
CLEANFILES += ls.marker

ls.marker: $(ls_module_SOURCES) $(nodist_ls_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ls_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += lsmmap.module
MODULE_FILES += lsmmap.module$(EXEEXT)
lsmmap_module_SOURCES  = commands/lsmmap.c  ## platform sources
nodist_lsmmap_module_SOURCES  =  ## platform nodist sources
lsmmap_module_LDADD  = 
lsmmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsmmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsmmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsmmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsmmap_module_SOURCES)
CLEANFILES += $(nodist_lsmmap_module_SOURCES)
MOD_FILES += lsmmap.mod
MARKER_FILES += lsmmap.marker
CLEANFILES += lsmmap.marker

lsmmap.marker: $(lsmmap_module_SOURCES) $(nodist_lsmmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsmmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += lspci.module
MODULE_FILES += lspci.module$(EXEEXT)
lspci_module_SOURCES  = commands/lspci.c  ## platform sources
nodist_lspci_module_SOURCES  =  ## platform nodist sources
lspci_module_LDADD  = 
lspci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lspci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lspci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lspci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lspci_module_SOURCES)
CLEANFILES += $(nodist_lspci_module_SOURCES)
MOD_FILES += lspci.mod
MARKER_FILES += lspci.marker
CLEANFILES += lspci.marker

lspci.marker: $(lspci_module_SOURCES) $(nodist_lspci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lspci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += lspci.module
MODULE_FILES += lspci.module$(EXEEXT)
lspci_module_SOURCES  = commands/lspci.c  ## platform sources
nodist_lspci_module_SOURCES  =  ## platform nodist sources
lspci_module_LDADD  = 
lspci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lspci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lspci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lspci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lspci_module_SOURCES)
CLEANFILES += $(nodist_lspci_module_SOURCES)
MOD_FILES += lspci.mod
MARKER_FILES += lspci.marker
CLEANFILES += lspci.marker

lspci.marker: $(lspci_module_SOURCES) $(nodist_lspci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lspci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += lspci.module
MODULE_FILES += lspci.module$(EXEEXT)
lspci_module_SOURCES  = commands/lspci.c  ## platform sources
nodist_lspci_module_SOURCES  =  ## platform nodist sources
lspci_module_LDADD  = 
lspci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lspci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lspci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lspci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lspci_module_SOURCES)
CLEANFILES += $(nodist_lspci_module_SOURCES)
MOD_FILES += lspci.mod
MARKER_FILES += lspci.marker
CLEANFILES += lspci.marker

lspci.marker: $(lspci_module_SOURCES) $(nodist_lspci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lspci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += lspci.module
MODULE_FILES += lspci.module$(EXEEXT)
lspci_module_SOURCES  = commands/lspci.c  ## platform sources
nodist_lspci_module_SOURCES  =  ## platform nodist sources
lspci_module_LDADD  = 
lspci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lspci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lspci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lspci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lspci_module_SOURCES)
CLEANFILES += $(nodist_lspci_module_SOURCES)
MOD_FILES += lspci.mod
MARKER_FILES += lspci.marker
CLEANFILES += lspci.marker

lspci.marker: $(lspci_module_SOURCES) $(nodist_lspci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lspci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += lspci.module
MODULE_FILES += lspci.module$(EXEEXT)
lspci_module_SOURCES  = commands/lspci.c  ## platform sources
nodist_lspci_module_SOURCES  =  ## platform nodist sources
lspci_module_LDADD  = 
lspci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lspci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lspci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lspci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lspci_module_SOURCES)
CLEANFILES += $(nodist_lspci_module_SOURCES)
MOD_FILES += lspci.mod
MARKER_FILES += lspci.marker
CLEANFILES += lspci.marker

lspci.marker: $(lspci_module_SOURCES) $(nodist_lspci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lspci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += lspci.module
MODULE_FILES += lspci.module$(EXEEXT)
lspci_module_SOURCES  = commands/lspci.c  ## platform sources
nodist_lspci_module_SOURCES  =  ## platform nodist sources
lspci_module_LDADD  = 
lspci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lspci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lspci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lspci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lspci_module_SOURCES)
CLEANFILES += $(nodist_lspci_module_SOURCES)
MOD_FILES += lspci.mod
MARKER_FILES += lspci.marker
CLEANFILES += lspci.marker

lspci.marker: $(lspci_module_SOURCES) $(nodist_lspci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lspci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += lspci.module
MODULE_FILES += lspci.module$(EXEEXT)
lspci_module_SOURCES  = commands/lspci.c  ## platform sources
nodist_lspci_module_SOURCES  =  ## platform nodist sources
lspci_module_LDADD  = 
lspci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lspci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lspci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lspci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lspci_module_SOURCES)
CLEANFILES += $(nodist_lspci_module_SOURCES)
MOD_FILES += lspci.mod
MARKER_FILES += lspci.marker
CLEANFILES += lspci.marker

lspci.marker: $(lspci_module_SOURCES) $(nodist_lspci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lspci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += lspci.module
MODULE_FILES += lspci.module$(EXEEXT)
lspci_module_SOURCES  = commands/lspci.c  ## platform sources
nodist_lspci_module_SOURCES  =  ## platform nodist sources
lspci_module_LDADD  = 
lspci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lspci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lspci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lspci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lspci_module_SOURCES)
CLEANFILES += $(nodist_lspci_module_SOURCES)
MOD_FILES += lspci.mod
MARKER_FILES += lspci.marker
CLEANFILES += lspci.marker

lspci.marker: $(lspci_module_SOURCES) $(nodist_lspci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lspci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += memrw.module
MODULE_FILES += memrw.module$(EXEEXT)
memrw_module_SOURCES  = commands/memrw.c  ## platform sources
nodist_memrw_module_SOURCES  =  ## platform nodist sources
memrw_module_LDADD  = 
memrw_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memrw_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memrw_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memrw_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memrw_module_SOURCES)
CLEANFILES += $(nodist_memrw_module_SOURCES)
MOD_FILES += memrw.mod
MARKER_FILES += memrw.marker
CLEANFILES += memrw.marker

memrw.marker: $(memrw_module_SOURCES) $(nodist_memrw_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memrw_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += minicmd.module
MODULE_FILES += minicmd.module$(EXEEXT)
minicmd_module_SOURCES  = commands/minicmd.c  ## platform sources
nodist_minicmd_module_SOURCES  =  ## platform nodist sources
minicmd_module_LDADD  = 
minicmd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minicmd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minicmd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minicmd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minicmd_module_SOURCES)
CLEANFILES += $(nodist_minicmd_module_SOURCES)
MOD_FILES += minicmd.mod
MARKER_FILES += minicmd.marker
CLEANFILES += minicmd.marker

minicmd.marker: $(minicmd_module_SOURCES) $(nodist_minicmd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minicmd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += parttool.module
MODULE_FILES += parttool.module$(EXEEXT)
parttool_module_SOURCES  = commands/parttool.c  ## platform sources
nodist_parttool_module_SOURCES  =  ## platform nodist sources
parttool_module_LDADD  = 
parttool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
parttool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
parttool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
parttool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_parttool_module_SOURCES)
CLEANFILES += $(nodist_parttool_module_SOURCES)
MOD_FILES += parttool.mod
MARKER_FILES += parttool.marker
CLEANFILES += parttool.marker

parttool.marker: $(parttool_module_SOURCES) $(nodist_parttool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(parttool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += password.module
MODULE_FILES += password.module$(EXEEXT)
password_module_SOURCES  = commands/password.c  ## platform sources
nodist_password_module_SOURCES  =  ## platform nodist sources
password_module_LDADD  = 
password_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_module_SOURCES)
CLEANFILES += $(nodist_password_module_SOURCES)
MOD_FILES += password.mod
MARKER_FILES += password.marker
CLEANFILES += password.marker

password.marker: $(password_module_SOURCES) $(nodist_password_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += password_pbkdf2.module
MODULE_FILES += password_pbkdf2.module$(EXEEXT)
password_pbkdf2_module_SOURCES  = commands/password_pbkdf2.c  ## platform sources
nodist_password_pbkdf2_module_SOURCES  =  ## platform nodist sources
password_pbkdf2_module_LDADD  = 
password_pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
password_pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
password_pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
password_pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_password_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_password_pbkdf2_module_SOURCES)
MOD_FILES += password_pbkdf2.mod
MARKER_FILES += password_pbkdf2.marker
CLEANFILES += password_pbkdf2.marker

password_pbkdf2.marker: $(password_pbkdf2_module_SOURCES) $(nodist_password_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(password_pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += play.module
MODULE_FILES += play.module$(EXEEXT)
play_module_SOURCES  = commands/i386/pc/play.c  ## platform sources
nodist_play_module_SOURCES  =  ## platform nodist sources
play_module_LDADD  = 
play_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
play_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
play_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
play_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_play_module_SOURCES)
CLEANFILES += $(nodist_play_module_SOURCES)
MOD_FILES += play.mod
MARKER_FILES += play.marker
CLEANFILES += play.marker

play.marker: $(play_module_SOURCES) $(nodist_play_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(play_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += play.module
MODULE_FILES += play.module$(EXEEXT)
play_module_SOURCES  = commands/i386/pc/play.c  ## platform sources
nodist_play_module_SOURCES  =  ## platform nodist sources
play_module_LDADD  = 
play_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
play_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
play_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
play_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_play_module_SOURCES)
CLEANFILES += $(nodist_play_module_SOURCES)
MOD_FILES += play.mod
MARKER_FILES += play.marker
CLEANFILES += play.marker

play.marker: $(play_module_SOURCES) $(nodist_play_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(play_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += play.module
MODULE_FILES += play.module$(EXEEXT)
play_module_SOURCES  = commands/i386/pc/play.c  ## platform sources
nodist_play_module_SOURCES  =  ## platform nodist sources
play_module_LDADD  = 
play_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
play_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
play_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
play_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_play_module_SOURCES)
CLEANFILES += $(nodist_play_module_SOURCES)
MOD_FILES += play.mod
MARKER_FILES += play.marker
CLEANFILES += play.marker

play.marker: $(play_module_SOURCES) $(nodist_play_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(play_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += play.module
MODULE_FILES += play.module$(EXEEXT)
play_module_SOURCES  = commands/i386/pc/play.c  ## platform sources
nodist_play_module_SOURCES  =  ## platform nodist sources
play_module_LDADD  = 
play_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
play_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
play_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
play_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_play_module_SOURCES)
CLEANFILES += $(nodist_play_module_SOURCES)
MOD_FILES += play.mod
MARKER_FILES += play.marker
CLEANFILES += play.marker

play.marker: $(play_module_SOURCES) $(nodist_play_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(play_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += play.module
MODULE_FILES += play.module$(EXEEXT)
play_module_SOURCES  = commands/i386/pc/play.c  ## platform sources
nodist_play_module_SOURCES  =  ## platform nodist sources
play_module_LDADD  = 
play_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
play_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
play_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
play_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_play_module_SOURCES)
CLEANFILES += $(nodist_play_module_SOURCES)
MOD_FILES += play.mod
MARKER_FILES += play.marker
CLEANFILES += play.marker

play.marker: $(play_module_SOURCES) $(nodist_play_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(play_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += play.module
MODULE_FILES += play.module$(EXEEXT)
play_module_SOURCES  = commands/i386/pc/play.c  ## platform sources
nodist_play_module_SOURCES  =  ## platform nodist sources
play_module_LDADD  = 
play_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
play_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
play_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
play_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_play_module_SOURCES)
CLEANFILES += $(nodist_play_module_SOURCES)
MOD_FILES += play.mod
MARKER_FILES += play.marker
CLEANFILES += play.marker

play.marker: $(play_module_SOURCES) $(nodist_play_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(play_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += play.module
MODULE_FILES += play.module$(EXEEXT)
play_module_SOURCES  = commands/i386/pc/play.c  ## platform sources
nodist_play_module_SOURCES  =  ## platform nodist sources
play_module_LDADD  = 
play_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
play_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
play_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
play_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_play_module_SOURCES)
CLEANFILES += $(nodist_play_module_SOURCES)
MOD_FILES += play.mod
MARKER_FILES += play.marker
CLEANFILES += play.marker

play.marker: $(play_module_SOURCES) $(nodist_play_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(play_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += probe.module
MODULE_FILES += probe.module$(EXEEXT)
probe_module_SOURCES  = commands/probe.c  ## platform sources
nodist_probe_module_SOURCES  =  ## platform nodist sources
probe_module_LDADD  = 
probe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
probe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
probe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
probe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_probe_module_SOURCES)
CLEANFILES += $(nodist_probe_module_SOURCES)
MOD_FILES += probe.mod
MARKER_FILES += probe.marker
CLEANFILES += probe.marker

probe.marker: $(probe_module_SOURCES) $(nodist_probe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(probe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += read.module
MODULE_FILES += read.module$(EXEEXT)
read_module_SOURCES  = commands/read.c  ## platform sources
nodist_read_module_SOURCES  =  ## platform nodist sources
read_module_LDADD  = 
read_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
read_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
read_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
read_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_read_module_SOURCES)
CLEANFILES += $(nodist_read_module_SOURCES)
MOD_FILES += read.mod
MARKER_FILES += read.marker
CLEANFILES += read.marker

read.marker: $(read_module_SOURCES) $(nodist_read_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(read_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += search.module
MODULE_FILES += search.module$(EXEEXT)
search_module_SOURCES  = commands/search_wrap.c  ## platform sources
nodist_search_module_SOURCES  =  ## platform nodist sources
search_module_LDADD  = 
search_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += commands/search.c 
BUILT_SOURCES += $(nodist_search_module_SOURCES)
CLEANFILES += $(nodist_search_module_SOURCES)
MOD_FILES += search.mod
MARKER_FILES += search.marker
CLEANFILES += search.marker

search.marker: $(search_module_SOURCES) $(nodist_search_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += search_fs_file.module
MODULE_FILES += search_fs_file.module$(EXEEXT)
search_fs_file_module_SOURCES  = commands/search_file.c  ## platform sources
nodist_search_fs_file_module_SOURCES  =  ## platform nodist sources
search_fs_file_module_LDADD  = 
search_fs_file_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_file_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_file_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_file_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_file_module_SOURCES)
CLEANFILES += $(nodist_search_fs_file_module_SOURCES)
MOD_FILES += search_fs_file.mod
MARKER_FILES += search_fs_file.marker
CLEANFILES += search_fs_file.marker

search_fs_file.marker: $(search_fs_file_module_SOURCES) $(nodist_search_fs_file_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_file_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += search_fs_uuid.module
MODULE_FILES += search_fs_uuid.module$(EXEEXT)
search_fs_uuid_module_SOURCES  = commands/search_uuid.c  ## platform sources
nodist_search_fs_uuid_module_SOURCES  =  ## platform nodist sources
search_fs_uuid_module_LDADD  = 
search_fs_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_fs_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_fs_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_fs_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_fs_uuid_module_SOURCES)
CLEANFILES += $(nodist_search_fs_uuid_module_SOURCES)
MOD_FILES += search_fs_uuid.mod
MARKER_FILES += search_fs_uuid.marker
CLEANFILES += search_fs_uuid.marker

search_fs_uuid.marker: $(search_fs_uuid_module_SOURCES) $(nodist_search_fs_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_fs_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += search_label.module
MODULE_FILES += search_label.module$(EXEEXT)
search_label_module_SOURCES  = commands/search_label.c  ## platform sources
nodist_search_label_module_SOURCES  =  ## platform nodist sources
search_label_module_LDADD  = 
search_label_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
search_label_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
search_label_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
search_label_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_search_label_module_SOURCES)
CLEANFILES += $(nodist_search_label_module_SOURCES)
MOD_FILES += search_label.mod
MARKER_FILES += search_label.marker
CLEANFILES += search_label.marker

search_label.marker: $(search_label_module_SOURCES) $(nodist_search_label_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(search_label_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += setpci.module
MODULE_FILES += setpci.module$(EXEEXT)
setpci_module_SOURCES  = commands/setpci.c  ## platform sources
nodist_setpci_module_SOURCES  =  ## platform nodist sources
setpci_module_LDADD  = 
setpci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setpci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setpci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setpci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_setpci_module_SOURCES)
CLEANFILES += $(nodist_setpci_module_SOURCES)
MOD_FILES += setpci.mod
MARKER_FILES += setpci.marker
CLEANFILES += setpci.marker

setpci.marker: $(setpci_module_SOURCES) $(nodist_setpci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setpci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += setpci.module
MODULE_FILES += setpci.module$(EXEEXT)
setpci_module_SOURCES  = commands/setpci.c  ## platform sources
nodist_setpci_module_SOURCES  =  ## platform nodist sources
setpci_module_LDADD  = 
setpci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setpci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setpci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setpci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_setpci_module_SOURCES)
CLEANFILES += $(nodist_setpci_module_SOURCES)
MOD_FILES += setpci.mod
MARKER_FILES += setpci.marker
CLEANFILES += setpci.marker

setpci.marker: $(setpci_module_SOURCES) $(nodist_setpci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setpci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += setpci.module
MODULE_FILES += setpci.module$(EXEEXT)
setpci_module_SOURCES  = commands/setpci.c  ## platform sources
nodist_setpci_module_SOURCES  =  ## platform nodist sources
setpci_module_LDADD  = 
setpci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setpci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setpci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setpci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_setpci_module_SOURCES)
CLEANFILES += $(nodist_setpci_module_SOURCES)
MOD_FILES += setpci.mod
MARKER_FILES += setpci.marker
CLEANFILES += setpci.marker

setpci.marker: $(setpci_module_SOURCES) $(nodist_setpci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setpci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += setpci.module
MODULE_FILES += setpci.module$(EXEEXT)
setpci_module_SOURCES  = commands/setpci.c  ## platform sources
nodist_setpci_module_SOURCES  =  ## platform nodist sources
setpci_module_LDADD  = 
setpci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setpci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setpci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setpci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_setpci_module_SOURCES)
CLEANFILES += $(nodist_setpci_module_SOURCES)
MOD_FILES += setpci.mod
MARKER_FILES += setpci.marker
CLEANFILES += setpci.marker

setpci.marker: $(setpci_module_SOURCES) $(nodist_setpci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setpci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += setpci.module
MODULE_FILES += setpci.module$(EXEEXT)
setpci_module_SOURCES  = commands/setpci.c  ## platform sources
nodist_setpci_module_SOURCES  =  ## platform nodist sources
setpci_module_LDADD  = 
setpci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setpci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setpci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setpci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_setpci_module_SOURCES)
CLEANFILES += $(nodist_setpci_module_SOURCES)
MOD_FILES += setpci.mod
MARKER_FILES += setpci.marker
CLEANFILES += setpci.marker

setpci.marker: $(setpci_module_SOURCES) $(nodist_setpci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setpci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += setpci.module
MODULE_FILES += setpci.module$(EXEEXT)
setpci_module_SOURCES  = commands/setpci.c  ## platform sources
nodist_setpci_module_SOURCES  =  ## platform nodist sources
setpci_module_LDADD  = 
setpci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setpci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setpci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setpci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_setpci_module_SOURCES)
CLEANFILES += $(nodist_setpci_module_SOURCES)
MOD_FILES += setpci.mod
MARKER_FILES += setpci.marker
CLEANFILES += setpci.marker

setpci.marker: $(setpci_module_SOURCES) $(nodist_setpci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setpci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += setpci.module
MODULE_FILES += setpci.module$(EXEEXT)
setpci_module_SOURCES  = commands/setpci.c  ## platform sources
nodist_setpci_module_SOURCES  =  ## platform nodist sources
setpci_module_LDADD  = 
setpci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setpci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setpci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setpci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_setpci_module_SOURCES)
CLEANFILES += $(nodist_setpci_module_SOURCES)
MOD_FILES += setpci.mod
MARKER_FILES += setpci.marker
CLEANFILES += setpci.marker

setpci.marker: $(setpci_module_SOURCES) $(nodist_setpci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setpci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += setpci.module
MODULE_FILES += setpci.module$(EXEEXT)
setpci_module_SOURCES  = commands/setpci.c  ## platform sources
nodist_setpci_module_SOURCES  =  ## platform nodist sources
setpci_module_LDADD  = 
setpci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setpci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setpci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setpci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_setpci_module_SOURCES)
CLEANFILES += $(nodist_setpci_module_SOURCES)
MOD_FILES += setpci.mod
MARKER_FILES += setpci.marker
CLEANFILES += setpci.marker

setpci.marker: $(setpci_module_SOURCES) $(nodist_setpci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setpci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += sleep.module
MODULE_FILES += sleep.module$(EXEEXT)
sleep_module_SOURCES  = commands/sleep.c  ## platform sources
nodist_sleep_module_SOURCES  =  ## platform nodist sources
sleep_module_LDADD  = 
sleep_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sleep_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sleep_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sleep_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sleep_module_SOURCES)
CLEANFILES += $(nodist_sleep_module_SOURCES)
MOD_FILES += sleep.mod
MARKER_FILES += sleep.marker
CLEANFILES += sleep.marker

sleep.marker: $(sleep_module_SOURCES) $(nodist_sleep_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sleep_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += suspend.module
MODULE_FILES += suspend.module$(EXEEXT)
suspend_module_SOURCES  = commands/ieee1275/suspend.c  ## platform sources
nodist_suspend_module_SOURCES  =  ## platform nodist sources
suspend_module_LDADD  = 
suspend_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
suspend_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
suspend_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
suspend_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_suspend_module_SOURCES)
CLEANFILES += $(nodist_suspend_module_SOURCES)
MOD_FILES += suspend.mod
MARKER_FILES += suspend.marker
CLEANFILES += suspend.marker

suspend.marker: $(suspend_module_SOURCES) $(nodist_suspend_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(suspend_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += suspend.module
MODULE_FILES += suspend.module$(EXEEXT)
suspend_module_SOURCES  = commands/ieee1275/suspend.c  ## platform sources
nodist_suspend_module_SOURCES  =  ## platform nodist sources
suspend_module_LDADD  = 
suspend_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
suspend_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
suspend_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
suspend_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_suspend_module_SOURCES)
CLEANFILES += $(nodist_suspend_module_SOURCES)
MOD_FILES += suspend.mod
MARKER_FILES += suspend.marker
CLEANFILES += suspend.marker

suspend.marker: $(suspend_module_SOURCES) $(nodist_suspend_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(suspend_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += escc.module
MODULE_FILES += escc.module$(EXEEXT)
escc_module_SOURCES  = term/ieee1275/escc.c  ## platform sources
nodist_escc_module_SOURCES  =  ## platform nodist sources
escc_module_LDADD  = 
escc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
escc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
escc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
escc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_escc_module_SOURCES)
CLEANFILES += $(nodist_escc_module_SOURCES)
MOD_FILES += escc.mod
MARKER_FILES += escc.marker
CLEANFILES += escc.marker

escc.marker: $(escc_module_SOURCES) $(nodist_escc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(escc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += terminal.module
MODULE_FILES += terminal.module$(EXEEXT)
terminal_module_SOURCES  = commands/terminal.c  ## platform sources
nodist_terminal_module_SOURCES  =  ## platform nodist sources
terminal_module_LDADD  = 
terminal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminal_module_SOURCES)
CLEANFILES += $(nodist_terminal_module_SOURCES)
MOD_FILES += terminal.mod
MARKER_FILES += terminal.marker
CLEANFILES += terminal.marker

terminal.marker: $(terminal_module_SOURCES) $(nodist_terminal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += test.module
MODULE_FILES += test.module$(EXEEXT)
test_module_SOURCES  = commands/test.c  ## platform sources
nodist_test_module_SOURCES  =  ## platform nodist sources
test_module_LDADD  = 
test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_module_SOURCES)
CLEANFILES += $(nodist_test_module_SOURCES)
MOD_FILES += test.mod
MARKER_FILES += test.marker
CLEANFILES += test.marker

test.marker: $(test_module_SOURCES) $(nodist_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += true.module
MODULE_FILES += true.module$(EXEEXT)
true_module_SOURCES  = commands/true.c  ## platform sources
nodist_true_module_SOURCES  =  ## platform nodist sources
true_module_LDADD  = 
true_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
true_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
true_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
true_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_true_module_SOURCES)
CLEANFILES += $(nodist_true_module_SOURCES)
MOD_FILES += true.mod
MARKER_FILES += true.marker
CLEANFILES += true.marker

true.marker: $(true_module_SOURCES) $(nodist_true_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(true_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += usbtest.module
MODULE_FILES += usbtest.module$(EXEEXT)
usbtest_module_SOURCES  = commands/usbtest.c  ## platform sources
nodist_usbtest_module_SOURCES  =  ## platform nodist sources
usbtest_module_LDADD  = 
usbtest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbtest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbtest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbtest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbtest_module_SOURCES)
CLEANFILES += $(nodist_usbtest_module_SOURCES)
MOD_FILES += usbtest.mod
MARKER_FILES += usbtest.marker
CLEANFILES += usbtest.marker

usbtest.marker: $(usbtest_module_SOURCES) $(nodist_usbtest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbtest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += usbtest.module
MODULE_FILES += usbtest.module$(EXEEXT)
usbtest_module_SOURCES  = commands/usbtest.c  ## platform sources
nodist_usbtest_module_SOURCES  =  ## platform nodist sources
usbtest_module_LDADD  = 
usbtest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbtest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbtest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbtest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbtest_module_SOURCES)
CLEANFILES += $(nodist_usbtest_module_SOURCES)
MOD_FILES += usbtest.mod
MARKER_FILES += usbtest.marker
CLEANFILES += usbtest.marker

usbtest.marker: $(usbtest_module_SOURCES) $(nodist_usbtest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbtest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += usbtest.module
MODULE_FILES += usbtest.module$(EXEEXT)
usbtest_module_SOURCES  = commands/usbtest.c  ## platform sources
nodist_usbtest_module_SOURCES  =  ## platform nodist sources
usbtest_module_LDADD  = 
usbtest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbtest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbtest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbtest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbtest_module_SOURCES)
CLEANFILES += $(nodist_usbtest_module_SOURCES)
MOD_FILES += usbtest.mod
MARKER_FILES += usbtest.marker
CLEANFILES += usbtest.marker

usbtest.marker: $(usbtest_module_SOURCES) $(nodist_usbtest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbtest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += usbtest.module
MODULE_FILES += usbtest.module$(EXEEXT)
usbtest_module_SOURCES  = commands/usbtest.c  ## platform sources
nodist_usbtest_module_SOURCES  =  ## platform nodist sources
usbtest_module_LDADD  = 
usbtest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbtest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbtest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbtest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbtest_module_SOURCES)
CLEANFILES += $(nodist_usbtest_module_SOURCES)
MOD_FILES += usbtest.mod
MARKER_FILES += usbtest.marker
CLEANFILES += usbtest.marker

usbtest.marker: $(usbtest_module_SOURCES) $(nodist_usbtest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbtest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += usbtest.module
MODULE_FILES += usbtest.module$(EXEEXT)
usbtest_module_SOURCES  = commands/usbtest.c  ## platform sources
nodist_usbtest_module_SOURCES  =  ## platform nodist sources
usbtest_module_LDADD  = 
usbtest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbtest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbtest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbtest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbtest_module_SOURCES)
CLEANFILES += $(nodist_usbtest_module_SOURCES)
MOD_FILES += usbtest.mod
MARKER_FILES += usbtest.marker
CLEANFILES += usbtest.marker

usbtest.marker: $(usbtest_module_SOURCES) $(nodist_usbtest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbtest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += usbtest.module
MODULE_FILES += usbtest.module$(EXEEXT)
usbtest_module_SOURCES  = commands/usbtest.c  ## platform sources
nodist_usbtest_module_SOURCES  =  ## platform nodist sources
usbtest_module_LDADD  = 
usbtest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbtest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbtest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbtest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbtest_module_SOURCES)
CLEANFILES += $(nodist_usbtest_module_SOURCES)
MOD_FILES += usbtest.mod
MARKER_FILES += usbtest.marker
CLEANFILES += usbtest.marker

usbtest.marker: $(usbtest_module_SOURCES) $(nodist_usbtest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbtest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += usbtest.module
MODULE_FILES += usbtest.module$(EXEEXT)
usbtest_module_SOURCES  = commands/usbtest.c  ## platform sources
nodist_usbtest_module_SOURCES  =  ## platform nodist sources
usbtest_module_LDADD  = 
usbtest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbtest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbtest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbtest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbtest_module_SOURCES)
CLEANFILES += $(nodist_usbtest_module_SOURCES)
MOD_FILES += usbtest.mod
MARKER_FILES += usbtest.marker
CLEANFILES += usbtest.marker

usbtest.marker: $(usbtest_module_SOURCES) $(nodist_usbtest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbtest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += usbtest.module
MODULE_FILES += usbtest.module$(EXEEXT)
usbtest_module_SOURCES  = commands/usbtest.c  ## platform sources
nodist_usbtest_module_SOURCES  =  ## platform nodist sources
usbtest_module_LDADD  = 
usbtest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbtest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbtest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbtest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbtest_module_SOURCES)
CLEANFILES += $(nodist_usbtest_module_SOURCES)
MOD_FILES += usbtest.mod
MARKER_FILES += usbtest.marker
CLEANFILES += usbtest.marker

usbtest.marker: $(usbtest_module_SOURCES) $(nodist_usbtest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbtest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += videoinfo.module
MODULE_FILES += videoinfo.module$(EXEEXT)
videoinfo_module_SOURCES  = commands/videoinfo.c  ## platform sources
nodist_videoinfo_module_SOURCES  =  ## platform nodist sources
videoinfo_module_LDADD  = 
videoinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videoinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videoinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videoinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videoinfo_module_SOURCES)
CLEANFILES += $(nodist_videoinfo_module_SOURCES)
MOD_FILES += videoinfo.mod
MARKER_FILES += videoinfo.marker
CLEANFILES += videoinfo.marker

videoinfo.marker: $(videoinfo_module_SOURCES) $(nodist_videoinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videoinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += videotest.module
MODULE_FILES += videotest.module$(EXEEXT)
videotest_module_SOURCES  = commands/videotest.c  ## platform sources
nodist_videotest_module_SOURCES  =  ## platform nodist sources
videotest_module_LDADD  = 
videotest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
videotest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
videotest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
videotest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_videotest_module_SOURCES)
CLEANFILES += $(nodist_videotest_module_SOURCES)
MOD_FILES += videotest.mod
MARKER_FILES += videotest.marker
CLEANFILES += videotest.marker

videotest.marker: $(videotest_module_SOURCES) $(nodist_videotest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(videotest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += xnu_uuid.module
MODULE_FILES += xnu_uuid.module$(EXEEXT)
xnu_uuid_module_SOURCES  = commands/xnu_uuid.c  ## platform sources
nodist_xnu_uuid_module_SOURCES  =  ## platform nodist sources
xnu_uuid_module_LDADD  = 
xnu_uuid_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_uuid_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_uuid_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_uuid_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xnu_uuid_module_SOURCES)
CLEANFILES += $(nodist_xnu_uuid_module_SOURCES)
MOD_FILES += xnu_uuid.mod
MARKER_FILES += xnu_uuid.marker
CLEANFILES += xnu_uuid.marker

xnu_uuid.marker: $(xnu_uuid_module_SOURCES) $(nodist_xnu_uuid_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_uuid_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += dm_nv.module
MODULE_FILES += dm_nv.module$(EXEEXT)
dm_nv_module_SOURCES  = disk/dmraid_nvidia.c  ## platform sources
nodist_dm_nv_module_SOURCES  =  ## platform nodist sources
dm_nv_module_LDADD  = 
dm_nv_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
dm_nv_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
dm_nv_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
dm_nv_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_dm_nv_module_SOURCES)
CLEANFILES += $(nodist_dm_nv_module_SOURCES)
MOD_FILES += dm_nv.mod
MARKER_FILES += dm_nv.marker
CLEANFILES += dm_nv.marker

dm_nv.marker: $(dm_nv_module_SOURCES) $(nodist_dm_nv_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dm_nv_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += loopback.module
MODULE_FILES += loopback.module$(EXEEXT)
loopback_module_SOURCES  = disk/loopback.c  ## platform sources
nodist_loopback_module_SOURCES  =  ## platform nodist sources
loopback_module_LDADD  = 
loopback_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
loopback_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
loopback_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
loopback_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_loopback_module_SOURCES)
CLEANFILES += $(nodist_loopback_module_SOURCES)
MOD_FILES += loopback.mod
MARKER_FILES += loopback.marker
CLEANFILES += loopback.marker

loopback.marker: $(loopback_module_SOURCES) $(nodist_loopback_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(loopback_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += cryptodisk.module
MODULE_FILES += cryptodisk.module$(EXEEXT)
cryptodisk_module_SOURCES  = disk/cryptodisk.c  ## platform sources
nodist_cryptodisk_module_SOURCES  =  ## platform nodist sources
cryptodisk_module_LDADD  = 
cryptodisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cryptodisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cryptodisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cryptodisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cryptodisk_module_SOURCES)
CLEANFILES += $(nodist_cryptodisk_module_SOURCES)
MOD_FILES += cryptodisk.mod
MARKER_FILES += cryptodisk.marker
CLEANFILES += cryptodisk.marker

cryptodisk.marker: $(cryptodisk_module_SOURCES) $(nodist_cryptodisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cryptodisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += luks.module
MODULE_FILES += luks.module$(EXEEXT)
luks_module_SOURCES  = disk/luks.c disk/AFSplitter.c  ## platform sources
nodist_luks_module_SOURCES  =  ## platform nodist sources
luks_module_LDADD  = 
luks_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
luks_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
luks_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
luks_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_luks_module_SOURCES)
CLEANFILES += $(nodist_luks_module_SOURCES)
MOD_FILES += luks.mod
MARKER_FILES += luks.marker
CLEANFILES += luks.marker

luks.marker: $(luks_module_SOURCES) $(nodist_luks_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(luks_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += geli.module
MODULE_FILES += geli.module$(EXEEXT)
geli_module_SOURCES  = disk/geli.c  ## platform sources
nodist_geli_module_SOURCES  =  ## platform nodist sources
geli_module_LDADD  = 
geli_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
geli_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
geli_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
geli_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_geli_module_SOURCES)
CLEANFILES += $(nodist_geli_module_SOURCES)
MOD_FILES += geli.mod
MARKER_FILES += geli.marker
CLEANFILES += geli.marker

geli.marker: $(geli_module_SOURCES) $(nodist_geli_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(geli_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += lvm.module
MODULE_FILES += lvm.module$(EXEEXT)
lvm_module_SOURCES  = disk/lvm.c  ## platform sources
nodist_lvm_module_SOURCES  =  ## platform nodist sources
lvm_module_LDADD  = 
lvm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lvm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lvm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lvm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lvm_module_SOURCES)
CLEANFILES += $(nodist_lvm_module_SOURCES)
MOD_FILES += lvm.mod
MARKER_FILES += lvm.marker
CLEANFILES += lvm.marker

lvm.marker: $(lvm_module_SOURCES) $(nodist_lvm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lvm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += ldm.module
MODULE_FILES += ldm.module$(EXEEXT)
ldm_module_SOURCES  = disk/ldm.c  ## platform sources
nodist_ldm_module_SOURCES  =  ## platform nodist sources
ldm_module_LDADD  = 
ldm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ldm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ldm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ldm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ldm_module_SOURCES)
CLEANFILES += $(nodist_ldm_module_SOURCES)
MOD_FILES += ldm.mod
MARKER_FILES += ldm.marker
CLEANFILES += ldm.marker

ldm.marker: $(ldm_module_SOURCES) $(nodist_ldm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ldm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += mdraid09.module
MODULE_FILES += mdraid09.module$(EXEEXT)
mdraid09_module_SOURCES  = disk/mdraid_linux.c  ## platform sources
nodist_mdraid09_module_SOURCES  =  ## platform nodist sources
mdraid09_module_LDADD  = 
mdraid09_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_module_SOURCES)
MOD_FILES += mdraid09.mod
MARKER_FILES += mdraid09.marker
CLEANFILES += mdraid09.marker

mdraid09.marker: $(mdraid09_module_SOURCES) $(nodist_mdraid09_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += mdraid09_be.module
MODULE_FILES += mdraid09_be.module$(EXEEXT)
mdraid09_be_module_SOURCES  = disk/mdraid_linux_be.c  ## platform sources
nodist_mdraid09_be_module_SOURCES  =  ## platform nodist sources
mdraid09_be_module_LDADD  = 
mdraid09_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid09_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid09_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid09_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid09_be_module_SOURCES)
CLEANFILES += $(nodist_mdraid09_be_module_SOURCES)
MOD_FILES += mdraid09_be.mod
MARKER_FILES += mdraid09_be.marker
CLEANFILES += mdraid09_be.marker

mdraid09_be.marker: $(mdraid09_be_module_SOURCES) $(nodist_mdraid09_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid09_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += mdraid1x.module
MODULE_FILES += mdraid1x.module$(EXEEXT)
mdraid1x_module_SOURCES  = disk/mdraid1x_linux.c  ## platform sources
nodist_mdraid1x_module_SOURCES  =  ## platform nodist sources
mdraid1x_module_LDADD  = 
mdraid1x_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mdraid1x_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mdraid1x_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mdraid1x_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mdraid1x_module_SOURCES)
CLEANFILES += $(nodist_mdraid1x_module_SOURCES)
MOD_FILES += mdraid1x.mod
MARKER_FILES += mdraid1x.marker
CLEANFILES += mdraid1x.marker

mdraid1x.marker: $(mdraid1x_module_SOURCES) $(nodist_mdraid1x_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mdraid1x_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += diskfilter.module
MODULE_FILES += diskfilter.module$(EXEEXT)
diskfilter_module_SOURCES  = disk/diskfilter.c  ## platform sources
nodist_diskfilter_module_SOURCES  =  ## platform nodist sources
diskfilter_module_LDADD  = 
diskfilter_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
diskfilter_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
diskfilter_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
diskfilter_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskfilter_module_SOURCES)
CLEANFILES += $(nodist_diskfilter_module_SOURCES)
MOD_FILES += diskfilter.mod
MARKER_FILES += diskfilter.marker
CLEANFILES += diskfilter.marker

diskfilter.marker: $(diskfilter_module_SOURCES) $(nodist_diskfilter_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(diskfilter_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += raid5rec.module
MODULE_FILES += raid5rec.module$(EXEEXT)
raid5rec_module_SOURCES  = disk/raid5_recover.c  ## platform sources
nodist_raid5rec_module_SOURCES  =  ## platform nodist sources
raid5rec_module_LDADD  = 
raid5rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid5rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid5rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid5rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid5rec_module_SOURCES)
CLEANFILES += $(nodist_raid5rec_module_SOURCES)
MOD_FILES += raid5rec.mod
MARKER_FILES += raid5rec.marker
CLEANFILES += raid5rec.marker

raid5rec.marker: $(raid5rec_module_SOURCES) $(nodist_raid5rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid5rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += raid6rec.module
MODULE_FILES += raid6rec.module$(EXEEXT)
raid6rec_module_SOURCES  = disk/raid6_recover.c  ## platform sources
nodist_raid6rec_module_SOURCES  =  ## platform nodist sources
raid6rec_module_LDADD  = 
raid6rec_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
raid6rec_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
raid6rec_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
raid6rec_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_raid6rec_module_SOURCES)
CLEANFILES += $(nodist_raid6rec_module_SOURCES)
MOD_FILES += raid6rec.mod
MARKER_FILES += raid6rec.marker
CLEANFILES += raid6rec.marker

raid6rec.marker: $(raid6rec_module_SOURCES) $(nodist_raid6rec_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(raid6rec_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += scsi.module
MODULE_FILES += scsi.module$(EXEEXT)
scsi_module_SOURCES  = disk/scsi.c  ## platform sources
nodist_scsi_module_SOURCES  =  ## platform nodist sources
scsi_module_LDADD  = 
scsi_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
scsi_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
scsi_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
scsi_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_scsi_module_SOURCES)
CLEANFILES += $(nodist_scsi_module_SOURCES)
MOD_FILES += scsi.mod
MARKER_FILES += scsi.marker
CLEANFILES += scsi.marker

scsi.marker: $(scsi_module_SOURCES) $(nodist_scsi_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scsi_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += memdisk.module
MODULE_FILES += memdisk.module$(EXEEXT)
memdisk_module_SOURCES  = disk/memdisk.c  ## platform sources
nodist_memdisk_module_SOURCES  =  ## platform nodist sources
memdisk_module_LDADD  = 
memdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
memdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
memdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
memdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_memdisk_module_SOURCES)
CLEANFILES += $(nodist_memdisk_module_SOURCES)
MOD_FILES += memdisk.mod
MARKER_FILES += memdisk.marker
CLEANFILES += memdisk.marker

memdisk.marker: $(memdisk_module_SOURCES) $(nodist_memdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(memdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += ata.module
MODULE_FILES += ata.module$(EXEEXT)
ata_module_SOURCES  = disk/ata.c  ## platform sources
nodist_ata_module_SOURCES  =  ## platform nodist sources
ata_module_LDADD  = 
ata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ata_module_SOURCES)
CLEANFILES += $(nodist_ata_module_SOURCES)
MOD_FILES += ata.mod
MARKER_FILES += ata.marker
CLEANFILES += ata.marker

ata.marker: $(ata_module_SOURCES) $(nodist_ata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ahci.module
MODULE_FILES += ahci.module$(EXEEXT)
ahci_module_SOURCES  = disk/ahci.c  ## platform sources
nodist_ahci_module_SOURCES  =  ## platform nodist sources
ahci_module_LDADD  = 
ahci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ahci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ahci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ahci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ahci_module_SOURCES)
CLEANFILES += $(nodist_ahci_module_SOURCES)
MOD_FILES += ahci.mod
MARKER_FILES += ahci.marker
CLEANFILES += ahci.marker

ahci.marker: $(ahci_module_SOURCES) $(nodist_ahci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ahci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ahci.module
MODULE_FILES += ahci.module$(EXEEXT)
ahci_module_SOURCES  = disk/ahci.c  ## platform sources
nodist_ahci_module_SOURCES  =  ## platform nodist sources
ahci_module_LDADD  = 
ahci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ahci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ahci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ahci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ahci_module_SOURCES)
CLEANFILES += $(nodist_ahci_module_SOURCES)
MOD_FILES += ahci.mod
MARKER_FILES += ahci.marker
CLEANFILES += ahci.marker

ahci.marker: $(ahci_module_SOURCES) $(nodist_ahci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ahci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ahci.module
MODULE_FILES += ahci.module$(EXEEXT)
ahci_module_SOURCES  = disk/ahci.c  ## platform sources
nodist_ahci_module_SOURCES  =  ## platform nodist sources
ahci_module_LDADD  = 
ahci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ahci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ahci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ahci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ahci_module_SOURCES)
CLEANFILES += $(nodist_ahci_module_SOURCES)
MOD_FILES += ahci.mod
MARKER_FILES += ahci.marker
CLEANFILES += ahci.marker

ahci.marker: $(ahci_module_SOURCES) $(nodist_ahci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ahci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ahci.module
MODULE_FILES += ahci.module$(EXEEXT)
ahci_module_SOURCES  = disk/ahci.c  ## platform sources
nodist_ahci_module_SOURCES  =  ## platform nodist sources
ahci_module_LDADD  = 
ahci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ahci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ahci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ahci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ahci_module_SOURCES)
CLEANFILES += $(nodist_ahci_module_SOURCES)
MOD_FILES += ahci.mod
MARKER_FILES += ahci.marker
CLEANFILES += ahci.marker

ahci.marker: $(ahci_module_SOURCES) $(nodist_ahci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ahci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ahci.module
MODULE_FILES += ahci.module$(EXEEXT)
ahci_module_SOURCES  = disk/ahci.c  ## platform sources
nodist_ahci_module_SOURCES  =  ## platform nodist sources
ahci_module_LDADD  = 
ahci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ahci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ahci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ahci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ahci_module_SOURCES)
CLEANFILES += $(nodist_ahci_module_SOURCES)
MOD_FILES += ahci.mod
MARKER_FILES += ahci.marker
CLEANFILES += ahci.marker

ahci.marker: $(ahci_module_SOURCES) $(nodist_ahci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ahci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ahci.module
MODULE_FILES += ahci.module$(EXEEXT)
ahci_module_SOURCES  = disk/ahci.c  ## platform sources
nodist_ahci_module_SOURCES  =  ## platform nodist sources
ahci_module_LDADD  = 
ahci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ahci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ahci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ahci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ahci_module_SOURCES)
CLEANFILES += $(nodist_ahci_module_SOURCES)
MOD_FILES += ahci.mod
MARKER_FILES += ahci.marker
CLEANFILES += ahci.marker

ahci.marker: $(ahci_module_SOURCES) $(nodist_ahci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ahci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ahci.module
MODULE_FILES += ahci.module$(EXEEXT)
ahci_module_SOURCES  = disk/ahci.c  ## platform sources
nodist_ahci_module_SOURCES  =  ## platform nodist sources
ahci_module_LDADD  = 
ahci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ahci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ahci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ahci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ahci_module_SOURCES)
CLEANFILES += $(nodist_ahci_module_SOURCES)
MOD_FILES += ahci.mod
MARKER_FILES += ahci.marker
CLEANFILES += ahci.marker

ahci.marker: $(ahci_module_SOURCES) $(nodist_ahci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ahci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ahci.module
MODULE_FILES += ahci.module$(EXEEXT)
ahci_module_SOURCES  = disk/ahci.c  ## platform sources
nodist_ahci_module_SOURCES  =  ## platform nodist sources
ahci_module_LDADD  = 
ahci_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ahci_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ahci_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ahci_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ahci_module_SOURCES)
CLEANFILES += $(nodist_ahci_module_SOURCES)
MOD_FILES += ahci.mod
MARKER_FILES += ahci.marker
CLEANFILES += ahci.marker

ahci.marker: $(ahci_module_SOURCES) $(nodist_ahci_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ahci_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += pata.module
MODULE_FILES += pata.module$(EXEEXT)
pata_module_SOURCES  = disk/pata.c  ## platform sources
nodist_pata_module_SOURCES  =  ## platform nodist sources
pata_module_LDADD  = 
pata_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pata_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pata_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pata_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pata_module_SOURCES)
CLEANFILES += $(nodist_pata_module_SOURCES)
MOD_FILES += pata.mod
MARKER_FILES += pata.marker
CLEANFILES += pata.marker

pata.marker: $(pata_module_SOURCES) $(nodist_pata_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pata_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += biosdisk.module
MODULE_FILES += biosdisk.module$(EXEEXT)
biosdisk_module_SOURCES  = disk/i386/pc/biosdisk.c  ## platform sources
nodist_biosdisk_module_SOURCES  =  ## platform nodist sources
biosdisk_module_LDADD  = 
biosdisk_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
biosdisk_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
biosdisk_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
biosdisk_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_biosdisk_module_SOURCES)
CLEANFILES += $(nodist_biosdisk_module_SOURCES)
MOD_FILES += biosdisk.mod
MARKER_FILES += biosdisk.marker
CLEANFILES += biosdisk.marker

biosdisk.marker: $(biosdisk_module_SOURCES) $(nodist_biosdisk_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(biosdisk_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += usbms.module
MODULE_FILES += usbms.module$(EXEEXT)
usbms_module_SOURCES  = disk/usbms.c  ## platform sources
nodist_usbms_module_SOURCES  =  ## platform nodist sources
usbms_module_LDADD  = 
usbms_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbms_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbms_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbms_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbms_module_SOURCES)
CLEANFILES += $(nodist_usbms_module_SOURCES)
MOD_FILES += usbms.mod
MARKER_FILES += usbms.marker
CLEANFILES += usbms.marker

usbms.marker: $(usbms_module_SOURCES) $(nodist_usbms_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbms_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += usbms.module
MODULE_FILES += usbms.module$(EXEEXT)
usbms_module_SOURCES  = disk/usbms.c  ## platform sources
nodist_usbms_module_SOURCES  =  ## platform nodist sources
usbms_module_LDADD  = 
usbms_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbms_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbms_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbms_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbms_module_SOURCES)
CLEANFILES += $(nodist_usbms_module_SOURCES)
MOD_FILES += usbms.mod
MARKER_FILES += usbms.marker
CLEANFILES += usbms.marker

usbms.marker: $(usbms_module_SOURCES) $(nodist_usbms_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbms_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += usbms.module
MODULE_FILES += usbms.module$(EXEEXT)
usbms_module_SOURCES  = disk/usbms.c  ## platform sources
nodist_usbms_module_SOURCES  =  ## platform nodist sources
usbms_module_LDADD  = 
usbms_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbms_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbms_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbms_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbms_module_SOURCES)
CLEANFILES += $(nodist_usbms_module_SOURCES)
MOD_FILES += usbms.mod
MARKER_FILES += usbms.marker
CLEANFILES += usbms.marker

usbms.marker: $(usbms_module_SOURCES) $(nodist_usbms_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbms_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += usbms.module
MODULE_FILES += usbms.module$(EXEEXT)
usbms_module_SOURCES  = disk/usbms.c  ## platform sources
nodist_usbms_module_SOURCES  =  ## platform nodist sources
usbms_module_LDADD  = 
usbms_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbms_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbms_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbms_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbms_module_SOURCES)
CLEANFILES += $(nodist_usbms_module_SOURCES)
MOD_FILES += usbms.mod
MARKER_FILES += usbms.marker
CLEANFILES += usbms.marker

usbms.marker: $(usbms_module_SOURCES) $(nodist_usbms_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbms_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += usbms.module
MODULE_FILES += usbms.module$(EXEEXT)
usbms_module_SOURCES  = disk/usbms.c  ## platform sources
nodist_usbms_module_SOURCES  =  ## platform nodist sources
usbms_module_LDADD  = 
usbms_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbms_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbms_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbms_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbms_module_SOURCES)
CLEANFILES += $(nodist_usbms_module_SOURCES)
MOD_FILES += usbms.mod
MARKER_FILES += usbms.marker
CLEANFILES += usbms.marker

usbms.marker: $(usbms_module_SOURCES) $(nodist_usbms_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbms_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += usbms.module
MODULE_FILES += usbms.module$(EXEEXT)
usbms_module_SOURCES  = disk/usbms.c  ## platform sources
nodist_usbms_module_SOURCES  =  ## platform nodist sources
usbms_module_LDADD  = 
usbms_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbms_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbms_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbms_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbms_module_SOURCES)
CLEANFILES += $(nodist_usbms_module_SOURCES)
MOD_FILES += usbms.mod
MARKER_FILES += usbms.marker
CLEANFILES += usbms.marker

usbms.marker: $(usbms_module_SOURCES) $(nodist_usbms_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbms_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += usbms.module
MODULE_FILES += usbms.module$(EXEEXT)
usbms_module_SOURCES  = disk/usbms.c  ## platform sources
nodist_usbms_module_SOURCES  =  ## platform nodist sources
usbms_module_LDADD  = 
usbms_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbms_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbms_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbms_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbms_module_SOURCES)
CLEANFILES += $(nodist_usbms_module_SOURCES)
MOD_FILES += usbms.mod
MARKER_FILES += usbms.marker
CLEANFILES += usbms.marker

usbms.marker: $(usbms_module_SOURCES) $(nodist_usbms_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbms_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += usbms.module
MODULE_FILES += usbms.module$(EXEEXT)
usbms_module_SOURCES  = disk/usbms.c  ## platform sources
nodist_usbms_module_SOURCES  =  ## platform nodist sources
usbms_module_LDADD  = 
usbms_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usbms_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usbms_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usbms_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usbms_module_SOURCES)
CLEANFILES += $(nodist_usbms_module_SOURCES)
MOD_FILES += usbms.mod
MARKER_FILES += usbms.marker
CLEANFILES += usbms.marker

usbms.marker: $(usbms_module_SOURCES) $(nodist_usbms_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usbms_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += nand.module
MODULE_FILES += nand.module$(EXEEXT)
nand_module_SOURCES  = disk/ieee1275/nand.c  ## platform sources
nodist_nand_module_SOURCES  =  ## platform nodist sources
nand_module_LDADD  = 
nand_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nand_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nand_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nand_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nand_module_SOURCES)
CLEANFILES += $(nodist_nand_module_SOURCES)
MOD_FILES += nand.mod
MARKER_FILES += nand.marker
CLEANFILES += nand.marker

nand.marker: $(nand_module_SOURCES) $(nodist_nand_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nand_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += efiemu.module
MODULE_FILES += efiemu.module$(EXEEXT)
efiemu_module_SOURCES  = efiemu/i386/pc/cfgtables.c efiemu/main.c efiemu/i386/loadcore32.c efiemu/i386/loadcore64.c efiemu/mm.c efiemu/loadcore_common.c efiemu/symbols.c efiemu/loadcore32.c efiemu/loadcore64.c efiemu/prepare32.c efiemu/prepare64.c efiemu/pnvram.c efiemu/i386/coredetect.c  ## platform sources
nodist_efiemu_module_SOURCES  =  ## platform nodist sources
efiemu_module_LDADD  = 
efiemu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efiemu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efiemu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efiemu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += efiemu/prepare.c efiemu/loadcore.c efiemu/runtime/efiemu.S efiemu/runtime/efiemu.c 
BUILT_SOURCES += $(nodist_efiemu_module_SOURCES)
CLEANFILES += $(nodist_efiemu_module_SOURCES)
MOD_FILES += efiemu.mod
MARKER_FILES += efiemu.marker
CLEANFILES += efiemu.marker

efiemu.marker: $(efiemu_module_SOURCES) $(nodist_efiemu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efiemu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += efiemu.module
MODULE_FILES += efiemu.module$(EXEEXT)
efiemu_module_SOURCES  = efiemu/i386/nocfgtables.c efiemu/main.c efiemu/i386/loadcore32.c efiemu/i386/loadcore64.c efiemu/mm.c efiemu/loadcore_common.c efiemu/symbols.c efiemu/loadcore32.c efiemu/loadcore64.c efiemu/prepare32.c efiemu/prepare64.c efiemu/pnvram.c efiemu/i386/coredetect.c  ## platform sources
nodist_efiemu_module_SOURCES  =  ## platform nodist sources
efiemu_module_LDADD  = 
efiemu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efiemu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efiemu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efiemu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += efiemu/prepare.c efiemu/loadcore.c efiemu/runtime/efiemu.S efiemu/runtime/efiemu.c 
BUILT_SOURCES += $(nodist_efiemu_module_SOURCES)
CLEANFILES += $(nodist_efiemu_module_SOURCES)
MOD_FILES += efiemu.mod
MARKER_FILES += efiemu.marker
CLEANFILES += efiemu.marker

efiemu.marker: $(efiemu_module_SOURCES) $(nodist_efiemu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efiemu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += efiemu.module
MODULE_FILES += efiemu.module$(EXEEXT)
efiemu_module_SOURCES  = efiemu/i386/pc/cfgtables.c efiemu/main.c efiemu/i386/loadcore32.c efiemu/i386/loadcore64.c efiemu/mm.c efiemu/loadcore_common.c efiemu/symbols.c efiemu/loadcore32.c efiemu/loadcore64.c efiemu/prepare32.c efiemu/prepare64.c efiemu/pnvram.c efiemu/i386/coredetect.c  ## platform sources
nodist_efiemu_module_SOURCES  =  ## platform nodist sources
efiemu_module_LDADD  = 
efiemu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efiemu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efiemu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efiemu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += efiemu/prepare.c efiemu/loadcore.c efiemu/runtime/efiemu.S efiemu/runtime/efiemu.c 
BUILT_SOURCES += $(nodist_efiemu_module_SOURCES)
CLEANFILES += $(nodist_efiemu_module_SOURCES)
MOD_FILES += efiemu.mod
MARKER_FILES += efiemu.marker
CLEANFILES += efiemu.marker

efiemu.marker: $(efiemu_module_SOURCES) $(nodist_efiemu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efiemu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += efiemu.module
MODULE_FILES += efiemu.module$(EXEEXT)
efiemu_module_SOURCES  = efiemu/i386/pc/cfgtables.c efiemu/main.c efiemu/i386/loadcore32.c efiemu/i386/loadcore64.c efiemu/mm.c efiemu/loadcore_common.c efiemu/symbols.c efiemu/loadcore32.c efiemu/loadcore64.c efiemu/prepare32.c efiemu/prepare64.c efiemu/pnvram.c efiemu/i386/coredetect.c  ## platform sources
nodist_efiemu_module_SOURCES  =  ## platform nodist sources
efiemu_module_LDADD  = 
efiemu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efiemu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efiemu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efiemu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += efiemu/prepare.c efiemu/loadcore.c efiemu/runtime/efiemu.S efiemu/runtime/efiemu.c 
BUILT_SOURCES += $(nodist_efiemu_module_SOURCES)
CLEANFILES += $(nodist_efiemu_module_SOURCES)
MOD_FILES += efiemu.mod
MARKER_FILES += efiemu.marker
CLEANFILES += efiemu.marker

efiemu.marker: $(efiemu_module_SOURCES) $(nodist_efiemu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efiemu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += efiemu.module
MODULE_FILES += efiemu.module$(EXEEXT)
efiemu_module_SOURCES  = efiemu/i386/nocfgtables.c efiemu/main.c efiemu/i386/loadcore32.c efiemu/i386/loadcore64.c efiemu/mm.c efiemu/loadcore_common.c efiemu/symbols.c efiemu/loadcore32.c efiemu/loadcore64.c efiemu/prepare32.c efiemu/prepare64.c efiemu/pnvram.c efiemu/i386/coredetect.c  ## platform sources
nodist_efiemu_module_SOURCES  =  ## platform nodist sources
efiemu_module_LDADD  = 
efiemu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efiemu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efiemu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efiemu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += efiemu/prepare.c efiemu/loadcore.c efiemu/runtime/efiemu.S efiemu/runtime/efiemu.c 
BUILT_SOURCES += $(nodist_efiemu_module_SOURCES)
CLEANFILES += $(nodist_efiemu_module_SOURCES)
MOD_FILES += efiemu.mod
MARKER_FILES += efiemu.marker
CLEANFILES += efiemu.marker

efiemu.marker: $(efiemu_module_SOURCES) $(nodist_efiemu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efiemu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += font.module
MODULE_FILES += font.module$(EXEEXT)
font_module_SOURCES  = font/font.c font/font_cmd.c  ## platform sources
nodist_font_module_SOURCES  =  ## platform nodist sources
font_module_LDADD  = 
font_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
font_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
font_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
font_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_font_module_SOURCES)
CLEANFILES += $(nodist_font_module_SOURCES)
MOD_FILES += font.mod
MARKER_FILES += font.marker
CLEANFILES += font.marker

font.marker: $(font_module_SOURCES) $(nodist_font_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(font_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += affs.module
MODULE_FILES += affs.module$(EXEEXT)
affs_module_SOURCES  = fs/affs.c  ## platform sources
nodist_affs_module_SOURCES  =  ## platform nodist sources
affs_module_LDADD  = 
affs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
affs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
affs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
affs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_affs_module_SOURCES)
CLEANFILES += $(nodist_affs_module_SOURCES)
MOD_FILES += affs.mod
MARKER_FILES += affs.marker
CLEANFILES += affs.marker

affs.marker: $(affs_module_SOURCES) $(nodist_affs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(affs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += afs.module
MODULE_FILES += afs.module$(EXEEXT)
afs_module_SOURCES  = fs/afs.c  ## platform sources
nodist_afs_module_SOURCES  =  ## platform nodist sources
afs_module_LDADD  = 
afs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
afs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
afs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
afs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_afs_module_SOURCES)
CLEANFILES += $(nodist_afs_module_SOURCES)
MOD_FILES += afs.mod
MARKER_FILES += afs.marker
CLEANFILES += afs.marker

afs.marker: $(afs_module_SOURCES) $(nodist_afs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(afs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += bfs.module
MODULE_FILES += bfs.module$(EXEEXT)
bfs_module_SOURCES  = fs/bfs.c  ## platform sources
nodist_bfs_module_SOURCES  =  ## platform nodist sources
bfs_module_LDADD  = 
bfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bfs_module_SOURCES)
CLEANFILES += $(nodist_bfs_module_SOURCES)
MOD_FILES += bfs.mod
MARKER_FILES += bfs.marker
CLEANFILES += bfs.marker

bfs.marker: $(bfs_module_SOURCES) $(nodist_bfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += btrfs.module
MODULE_FILES += btrfs.module$(EXEEXT)
btrfs_module_SOURCES  = fs/btrfs.c lib/crc.c  ## platform sources
nodist_btrfs_module_SOURCES  =  ## platform nodist sources
btrfs_module_LDADD  = 
btrfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
btrfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
btrfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
btrfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_btrfs_module_SOURCES)
CLEANFILES += $(nodist_btrfs_module_SOURCES)
MOD_FILES += btrfs.mod
MARKER_FILES += btrfs.marker
CLEANFILES += btrfs.marker

btrfs.marker: $(btrfs_module_SOURCES) $(nodist_btrfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(btrfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += cpio.module
MODULE_FILES += cpio.module$(EXEEXT)
cpio_module_SOURCES  = fs/cpio.c  ## platform sources
nodist_cpio_module_SOURCES  =  ## platform nodist sources
cpio_module_LDADD  = 
cpio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_module_SOURCES)
CLEANFILES += $(nodist_cpio_module_SOURCES)
MOD_FILES += cpio.mod
MARKER_FILES += cpio.marker
CLEANFILES += cpio.marker

cpio.marker: $(cpio_module_SOURCES) $(nodist_cpio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += cpio_be.module
MODULE_FILES += cpio_be.module$(EXEEXT)
cpio_be_module_SOURCES  = fs/cpio_be.c  ## platform sources
nodist_cpio_be_module_SOURCES  =  ## platform nodist sources
cpio_be_module_LDADD  = 
cpio_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cpio_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cpio_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cpio_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cpio_be_module_SOURCES)
CLEANFILES += $(nodist_cpio_be_module_SOURCES)
MOD_FILES += cpio_be.mod
MARKER_FILES += cpio_be.marker
CLEANFILES += cpio_be.marker

cpio_be.marker: $(cpio_be_module_SOURCES) $(nodist_cpio_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cpio_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += newc.module
MODULE_FILES += newc.module$(EXEEXT)
newc_module_SOURCES  = fs/newc.c  ## platform sources
nodist_newc_module_SOURCES  =  ## platform nodist sources
newc_module_LDADD  = 
newc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
newc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
newc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
newc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_newc_module_SOURCES)
CLEANFILES += $(nodist_newc_module_SOURCES)
MOD_FILES += newc.mod
MARKER_FILES += newc.marker
CLEANFILES += newc.marker

newc.marker: $(newc_module_SOURCES) $(nodist_newc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(newc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += odc.module
MODULE_FILES += odc.module$(EXEEXT)
odc_module_SOURCES  = fs/odc.c  ## platform sources
nodist_odc_module_SOURCES  =  ## platform nodist sources
odc_module_LDADD  = 
odc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
odc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
odc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
odc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_odc_module_SOURCES)
CLEANFILES += $(nodist_odc_module_SOURCES)
MOD_FILES += odc.mod
MARKER_FILES += odc.marker
CLEANFILES += odc.marker

odc.marker: $(odc_module_SOURCES) $(nodist_odc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(odc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += ext2.module
MODULE_FILES += ext2.module$(EXEEXT)
ext2_module_SOURCES  = fs/ext2.c  ## platform sources
nodist_ext2_module_SOURCES  =  ## platform nodist sources
ext2_module_LDADD  = 
ext2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ext2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ext2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ext2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ext2_module_SOURCES)
CLEANFILES += $(nodist_ext2_module_SOURCES)
MOD_FILES += ext2.mod
MARKER_FILES += ext2.marker
CLEANFILES += ext2.marker

ext2.marker: $(ext2_module_SOURCES) $(nodist_ext2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ext2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += fat.module
MODULE_FILES += fat.module$(EXEEXT)
fat_module_SOURCES  = fs/fat.c  ## platform sources
nodist_fat_module_SOURCES  =  ## platform nodist sources
fat_module_LDADD  = 
fat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fat_module_SOURCES)
CLEANFILES += $(nodist_fat_module_SOURCES)
MOD_FILES += fat.mod
MARKER_FILES += fat.marker
CLEANFILES += fat.marker

fat.marker: $(fat_module_SOURCES) $(nodist_fat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += exfat.module
MODULE_FILES += exfat.module$(EXEEXT)
exfat_module_SOURCES  = fs/exfat.c  ## platform sources
nodist_exfat_module_SOURCES  =  ## platform nodist sources
exfat_module_LDADD  = 
exfat_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfat_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfat_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfat_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfat_module_SOURCES)
CLEANFILES += $(nodist_exfat_module_SOURCES)
MOD_FILES += exfat.mod
MARKER_FILES += exfat.marker
CLEANFILES += exfat.marker

exfat.marker: $(exfat_module_SOURCES) $(nodist_exfat_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfat_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += fshelp.module
MODULE_FILES += fshelp.module$(EXEEXT)
fshelp_module_SOURCES  = fs/fshelp.c  ## platform sources
nodist_fshelp_module_SOURCES  =  ## platform nodist sources
fshelp_module_LDADD  = 
fshelp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
fshelp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
fshelp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
fshelp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fshelp_module_SOURCES)
CLEANFILES += $(nodist_fshelp_module_SOURCES)
MOD_FILES += fshelp.mod
MARKER_FILES += fshelp.marker
CLEANFILES += fshelp.marker

fshelp.marker: $(fshelp_module_SOURCES) $(nodist_fshelp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(fshelp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += hfs.module
MODULE_FILES += hfs.module$(EXEEXT)
hfs_module_SOURCES  = fs/hfs.c  ## platform sources
nodist_hfs_module_SOURCES  =  ## platform nodist sources
hfs_module_LDADD  = 
hfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfs_module_SOURCES)
CLEANFILES += $(nodist_hfs_module_SOURCES)
MOD_FILES += hfs.mod
MARKER_FILES += hfs.marker
CLEANFILES += hfs.marker

hfs.marker: $(hfs_module_SOURCES) $(nodist_hfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += hfsplus.module
MODULE_FILES += hfsplus.module$(EXEEXT)
hfsplus_module_SOURCES  = fs/hfsplus.c  ## platform sources
nodist_hfsplus_module_SOURCES  =  ## platform nodist sources
hfsplus_module_LDADD  = 
hfsplus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hfsplus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hfsplus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hfsplus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hfsplus_module_SOURCES)
CLEANFILES += $(nodist_hfsplus_module_SOURCES)
MOD_FILES += hfsplus.mod
MARKER_FILES += hfsplus.marker
CLEANFILES += hfsplus.marker

hfsplus.marker: $(hfsplus_module_SOURCES) $(nodist_hfsplus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hfsplus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += iso9660.module
MODULE_FILES += iso9660.module$(EXEEXT)
iso9660_module_SOURCES  = fs/iso9660.c  ## platform sources
nodist_iso9660_module_SOURCES  =  ## platform nodist sources
iso9660_module_LDADD  = 
iso9660_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
iso9660_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
iso9660_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
iso9660_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_iso9660_module_SOURCES)
CLEANFILES += $(nodist_iso9660_module_SOURCES)
MOD_FILES += iso9660.mod
MARKER_FILES += iso9660.marker
CLEANFILES += iso9660.marker

iso9660.marker: $(iso9660_module_SOURCES) $(nodist_iso9660_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(iso9660_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += jfs.module
MODULE_FILES += jfs.module$(EXEEXT)
jfs_module_SOURCES  = fs/jfs.c  ## platform sources
nodist_jfs_module_SOURCES  =  ## platform nodist sources
jfs_module_LDADD  = 
jfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jfs_module_SOURCES)
CLEANFILES += $(nodist_jfs_module_SOURCES)
MOD_FILES += jfs.mod
MARKER_FILES += jfs.marker
CLEANFILES += jfs.marker

jfs.marker: $(jfs_module_SOURCES) $(nodist_jfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += minix.module
MODULE_FILES += minix.module$(EXEEXT)
minix_module_SOURCES  = fs/minix.c  ## platform sources
nodist_minix_module_SOURCES  =  ## platform nodist sources
minix_module_LDADD  = 
minix_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_module_SOURCES)
CLEANFILES += $(nodist_minix_module_SOURCES)
MOD_FILES += minix.mod
MARKER_FILES += minix.marker
CLEANFILES += minix.marker

minix.marker: $(minix_module_SOURCES) $(nodist_minix_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += minix2.module
MODULE_FILES += minix2.module$(EXEEXT)
minix2_module_SOURCES  = fs/minix2.c  ## platform sources
nodist_minix2_module_SOURCES  =  ## platform nodist sources
minix2_module_LDADD  = 
minix2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_module_SOURCES)
CLEANFILES += $(nodist_minix2_module_SOURCES)
MOD_FILES += minix2.mod
MARKER_FILES += minix2.marker
CLEANFILES += minix2.marker

minix2.marker: $(minix2_module_SOURCES) $(nodist_minix2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += minix3.module
MODULE_FILES += minix3.module$(EXEEXT)
minix3_module_SOURCES  = fs/minix3.c  ## platform sources
nodist_minix3_module_SOURCES  =  ## platform nodist sources
minix3_module_LDADD  = 
minix3_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_module_SOURCES)
CLEANFILES += $(nodist_minix3_module_SOURCES)
MOD_FILES += minix3.mod
MARKER_FILES += minix3.marker
CLEANFILES += minix3.marker

minix3.marker: $(minix3_module_SOURCES) $(nodist_minix3_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += minix_be.module
MODULE_FILES += minix_be.module$(EXEEXT)
minix_be_module_SOURCES  = fs/minix_be.c  ## platform sources
nodist_minix_be_module_SOURCES  =  ## platform nodist sources
minix_be_module_LDADD  = 
minix_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix_be_module_SOURCES)
CLEANFILES += $(nodist_minix_be_module_SOURCES)
MOD_FILES += minix_be.mod
MARKER_FILES += minix_be.marker
CLEANFILES += minix_be.marker

minix_be.marker: $(minix_be_module_SOURCES) $(nodist_minix_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += minix2_be.module
MODULE_FILES += minix2_be.module$(EXEEXT)
minix2_be_module_SOURCES  = fs/minix2_be.c  ## platform sources
nodist_minix2_be_module_SOURCES  =  ## platform nodist sources
minix2_be_module_LDADD  = 
minix2_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix2_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix2_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix2_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix2_be_module_SOURCES)
CLEANFILES += $(nodist_minix2_be_module_SOURCES)
MOD_FILES += minix2_be.mod
MARKER_FILES += minix2_be.marker
CLEANFILES += minix2_be.marker

minix2_be.marker: $(minix2_be_module_SOURCES) $(nodist_minix2_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix2_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += minix3_be.module
MODULE_FILES += minix3_be.module$(EXEEXT)
minix3_be_module_SOURCES  = fs/minix3_be.c  ## platform sources
nodist_minix3_be_module_SOURCES  =  ## platform nodist sources
minix3_be_module_LDADD  = 
minix3_be_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
minix3_be_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
minix3_be_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
minix3_be_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_minix3_be_module_SOURCES)
CLEANFILES += $(nodist_minix3_be_module_SOURCES)
MOD_FILES += minix3_be.mod
MARKER_FILES += minix3_be.marker
CLEANFILES += minix3_be.marker

minix3_be.marker: $(minix3_be_module_SOURCES) $(nodist_minix3_be_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(minix3_be_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += nilfs2.module
MODULE_FILES += nilfs2.module$(EXEEXT)
nilfs2_module_SOURCES  = fs/nilfs2.c  ## platform sources
nodist_nilfs2_module_SOURCES  =  ## platform nodist sources
nilfs2_module_LDADD  = 
nilfs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
nilfs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
nilfs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
nilfs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_nilfs2_module_SOURCES)
CLEANFILES += $(nodist_nilfs2_module_SOURCES)
MOD_FILES += nilfs2.mod
MARKER_FILES += nilfs2.marker
CLEANFILES += nilfs2.marker

nilfs2.marker: $(nilfs2_module_SOURCES) $(nodist_nilfs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nilfs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += ntfs.module
MODULE_FILES += ntfs.module$(EXEEXT)
ntfs_module_SOURCES  = fs/ntfs.c  ## platform sources
nodist_ntfs_module_SOURCES  =  ## platform nodist sources
ntfs_module_LDADD  = 
ntfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfs_module_SOURCES)
CLEANFILES += $(nodist_ntfs_module_SOURCES)
MOD_FILES += ntfs.mod
MARKER_FILES += ntfs.marker
CLEANFILES += ntfs.marker

ntfs.marker: $(ntfs_module_SOURCES) $(nodist_ntfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += ntfscomp.module
MODULE_FILES += ntfscomp.module$(EXEEXT)
ntfscomp_module_SOURCES  = fs/ntfscomp.c  ## platform sources
nodist_ntfscomp_module_SOURCES  =  ## platform nodist sources
ntfscomp_module_LDADD  = 
ntfscomp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntfscomp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntfscomp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntfscomp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntfscomp_module_SOURCES)
CLEANFILES += $(nodist_ntfscomp_module_SOURCES)
MOD_FILES += ntfscomp.mod
MARKER_FILES += ntfscomp.marker
CLEANFILES += ntfscomp.marker

ntfscomp.marker: $(ntfscomp_module_SOURCES) $(nodist_ntfscomp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntfscomp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += reiserfs.module
MODULE_FILES += reiserfs.module$(EXEEXT)
reiserfs_module_SOURCES  = fs/reiserfs.c  ## platform sources
nodist_reiserfs_module_SOURCES  =  ## platform nodist sources
reiserfs_module_LDADD  = 
reiserfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
reiserfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
reiserfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
reiserfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_reiserfs_module_SOURCES)
CLEANFILES += $(nodist_reiserfs_module_SOURCES)
MOD_FILES += reiserfs.mod
MARKER_FILES += reiserfs.marker
CLEANFILES += reiserfs.marker

reiserfs.marker: $(reiserfs_module_SOURCES) $(nodist_reiserfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(reiserfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += romfs.module
MODULE_FILES += romfs.module$(EXEEXT)
romfs_module_SOURCES  = fs/romfs.c  ## platform sources
nodist_romfs_module_SOURCES  =  ## platform nodist sources
romfs_module_LDADD  = 
romfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
romfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
romfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
romfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_romfs_module_SOURCES)
CLEANFILES += $(nodist_romfs_module_SOURCES)
MOD_FILES += romfs.mod
MARKER_FILES += romfs.marker
CLEANFILES += romfs.marker

romfs.marker: $(romfs_module_SOURCES) $(nodist_romfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(romfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += sfs.module
MODULE_FILES += sfs.module$(EXEEXT)
sfs_module_SOURCES  = fs/sfs.c  ## platform sources
nodist_sfs_module_SOURCES  =  ## platform nodist sources
sfs_module_LDADD  = 
sfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sfs_module_SOURCES)
CLEANFILES += $(nodist_sfs_module_SOURCES)
MOD_FILES += sfs.mod
MARKER_FILES += sfs.marker
CLEANFILES += sfs.marker

sfs.marker: $(sfs_module_SOURCES) $(nodist_sfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += squash4.module
MODULE_FILES += squash4.module$(EXEEXT)
squash4_module_SOURCES  = fs/squash4.c  ## platform sources
nodist_squash4_module_SOURCES  =  ## platform nodist sources
squash4_module_LDADD  = 
squash4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef 
squash4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
squash4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
squash4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_squash4_module_SOURCES)
CLEANFILES += $(nodist_squash4_module_SOURCES)
MOD_FILES += squash4.mod
MARKER_FILES += squash4.marker
CLEANFILES += squash4.marker

squash4.marker: $(squash4_module_SOURCES) $(nodist_squash4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(squash4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += tar.module
MODULE_FILES += tar.module$(EXEEXT)
tar_module_SOURCES  = fs/tar.c  ## platform sources
nodist_tar_module_SOURCES  =  ## platform nodist sources
tar_module_LDADD  = 
tar_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tar_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tar_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tar_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tar_module_SOURCES)
CLEANFILES += $(nodist_tar_module_SOURCES)
MOD_FILES += tar.mod
MARKER_FILES += tar.marker
CLEANFILES += tar.marker

tar.marker: $(tar_module_SOURCES) $(nodist_tar_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tar_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += udf.module
MODULE_FILES += udf.module$(EXEEXT)
udf_module_SOURCES  = fs/udf.c  ## platform sources
nodist_udf_module_SOURCES  =  ## platform nodist sources
udf_module_LDADD  = 
udf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
udf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
udf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
udf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_udf_module_SOURCES)
CLEANFILES += $(nodist_udf_module_SOURCES)
MOD_FILES += udf.mod
MARKER_FILES += udf.marker
CLEANFILES += udf.marker

udf.marker: $(udf_module_SOURCES) $(nodist_udf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(udf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += ufs1.module
MODULE_FILES += ufs1.module$(EXEEXT)
ufs1_module_SOURCES  = fs/ufs.c  ## platform sources
nodist_ufs1_module_SOURCES  =  ## platform nodist sources
ufs1_module_LDADD  = 
ufs1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs1_module_SOURCES)
CLEANFILES += $(nodist_ufs1_module_SOURCES)
MOD_FILES += ufs1.mod
MARKER_FILES += ufs1.marker
CLEANFILES += ufs1.marker

ufs1.marker: $(ufs1_module_SOURCES) $(nodist_ufs1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += ufs2.module
MODULE_FILES += ufs2.module$(EXEEXT)
ufs2_module_SOURCES  = fs/ufs2.c  ## platform sources
nodist_ufs2_module_SOURCES  =  ## platform nodist sources
ufs2_module_LDADD  = 
ufs2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ufs2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ufs2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ufs2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ufs2_module_SOURCES)
CLEANFILES += $(nodist_ufs2_module_SOURCES)
MOD_FILES += ufs2.mod
MARKER_FILES += ufs2.marker
CLEANFILES += ufs2.marker

ufs2.marker: $(ufs2_module_SOURCES) $(nodist_ufs2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ufs2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += xfs.module
MODULE_FILES += xfs.module$(EXEEXT)
xfs_module_SOURCES  = fs/xfs.c  ## platform sources
nodist_xfs_module_SOURCES  =  ## platform nodist sources
xfs_module_LDADD  = 
xfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xfs_module_SOURCES)
CLEANFILES += $(nodist_xfs_module_SOURCES)
MOD_FILES += xfs.mod
MARKER_FILES += xfs.marker
CLEANFILES += xfs.marker

xfs.marker: $(xfs_module_SOURCES) $(nodist_xfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += zfs.module
MODULE_FILES += zfs.module$(EXEEXT)
zfs_module_SOURCES  = fs/zfs/zfs.c fs/zfs/zfs_lzjb.c fs/zfs/zfs_sha256.c fs/zfs/zfs_fletcher.c  ## platform sources
nodist_zfs_module_SOURCES  =  ## platform nodist sources
zfs_module_LDADD  = 
zfs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfs_module_SOURCES)
CLEANFILES += $(nodist_zfs_module_SOURCES)
MOD_FILES += zfs.mod
MARKER_FILES += zfs.marker
CLEANFILES += zfs.marker

zfs.marker: $(zfs_module_SOURCES) $(nodist_zfs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += zfscrypt.module
MODULE_FILES += zfscrypt.module$(EXEEXT)
zfscrypt_module_SOURCES  = fs/zfs/zfscrypt.c  ## platform sources
nodist_zfscrypt_module_SOURCES  =  ## platform nodist sources
zfscrypt_module_LDADD  = 
zfscrypt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfscrypt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfscrypt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfscrypt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfscrypt_module_SOURCES)
CLEANFILES += $(nodist_zfscrypt_module_SOURCES)
MOD_FILES += zfscrypt.mod
MARKER_FILES += zfscrypt.marker
CLEANFILES += zfscrypt.marker

zfscrypt.marker: $(zfscrypt_module_SOURCES) $(nodist_zfscrypt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfscrypt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += zfsinfo.module
MODULE_FILES += zfsinfo.module$(EXEEXT)
zfsinfo_module_SOURCES  = fs/zfs/zfsinfo.c  ## platform sources
nodist_zfsinfo_module_SOURCES  =  ## platform nodist sources
zfsinfo_module_LDADD  = 
zfsinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
zfsinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
zfsinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
zfsinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_zfsinfo_module_SOURCES)
CLEANFILES += $(nodist_zfsinfo_module_SOURCES)
MOD_FILES += zfsinfo.mod
MARKER_FILES += zfsinfo.marker
CLEANFILES += zfsinfo.marker

zfsinfo.marker: $(zfsinfo_module_SOURCES) $(nodist_zfsinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(zfsinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += pxe.module
MODULE_FILES += pxe.module$(EXEEXT)
pxe_module_SOURCES  = net/drivers/i386/pc/pxe.c  ## platform sources
nodist_pxe_module_SOURCES  =  ## platform nodist sources
pxe_module_LDADD  = 
pxe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pxe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pxe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pxe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pxe_module_SOURCES)
CLEANFILES += $(nodist_pxe_module_SOURCES)
MOD_FILES += pxe.mod
MARKER_FILES += pxe.marker
CLEANFILES += pxe.marker

pxe.marker: $(pxe_module_SOURCES) $(nodist_pxe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pxe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gettext.module
MODULE_FILES += gettext.module$(EXEEXT)
gettext_module_SOURCES  = gettext/gettext.c  ## platform sources
nodist_gettext_module_SOURCES  =  ## platform nodist sources
gettext_module_LDADD  = 
gettext_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gettext_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gettext_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gettext_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gettext_module_SOURCES)
CLEANFILES += $(nodist_gettext_module_SOURCES)
MOD_FILES += gettext.mod
MARKER_FILES += gettext.marker
CLEANFILES += gettext.marker

gettext.marker: $(gettext_module_SOURCES) $(nodist_gettext_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gettext_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gfxmenu.module
MODULE_FILES += gfxmenu.module$(EXEEXT)
gfxmenu_module_SOURCES  = gfxmenu/gfxmenu.c gfxmenu/model.c gfxmenu/view.c gfxmenu/font.c gfxmenu/icon_manager.c gfxmenu/theme_loader.c gfxmenu/widget-box.c gfxmenu/gui_canvas.c gfxmenu/gui_circular_progress.c gfxmenu/gui_box.c gfxmenu/gui_label.c gfxmenu/gui_list.c gfxmenu/gui_image.c gfxmenu/gui_progress_bar.c gfxmenu/gui_util.c gfxmenu/gui_string_util.c  ## platform sources
nodist_gfxmenu_module_SOURCES  =  ## platform nodist sources
gfxmenu_module_LDADD  = 
gfxmenu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxmenu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxmenu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxmenu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxmenu_module_SOURCES)
CLEANFILES += $(nodist_gfxmenu_module_SOURCES)
MOD_FILES += gfxmenu.mod
MARKER_FILES += gfxmenu.marker
CLEANFILES += gfxmenu.marker

gfxmenu.marker: $(gfxmenu_module_SOURCES) $(nodist_gfxmenu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxmenu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += hello.module
MODULE_FILES += hello.module$(EXEEXT)
hello_module_SOURCES  = hello/hello.c  ## platform sources
nodist_hello_module_SOURCES  =  ## platform nodist sources
hello_module_LDADD  = 
hello_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
hello_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
hello_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
hello_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_hello_module_SOURCES)
CLEANFILES += $(nodist_hello_module_SOURCES)
MOD_FILES += hello.mod
MARKER_FILES += hello.marker
CLEANFILES += hello.marker

hello.marker: $(hello_module_SOURCES) $(nodist_hello_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hello_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gzio.module
MODULE_FILES += gzio.module$(EXEEXT)
gzio_module_SOURCES  = io/gzio.c  ## platform sources
nodist_gzio_module_SOURCES  =  ## platform nodist sources
gzio_module_LDADD  = 
gzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gzio_module_SOURCES)
CLEANFILES += $(nodist_gzio_module_SOURCES)
MOD_FILES += gzio.mod
MARKER_FILES += gzio.marker
CLEANFILES += gzio.marker

gzio.marker: $(gzio_module_SOURCES) $(nodist_gzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += bufio.module
MODULE_FILES += bufio.module$(EXEEXT)
bufio_module_SOURCES  = io/bufio.c  ## platform sources
nodist_bufio_module_SOURCES  =  ## platform nodist sources
bufio_module_LDADD  = 
bufio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bufio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bufio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bufio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bufio_module_SOURCES)
CLEANFILES += $(nodist_bufio_module_SOURCES)
MOD_FILES += bufio.mod
MARKER_FILES += bufio.marker
CLEANFILES += bufio.marker

bufio.marker: $(bufio_module_SOURCES) $(nodist_bufio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bufio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += elf.module
MODULE_FILES += elf.module$(EXEEXT)
elf_module_SOURCES  = kern/elf.c  ## platform sources
nodist_elf_module_SOURCES  =  ## platform nodist sources
elf_module_LDADD  = 
elf_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
elf_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
elf_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
elf_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_elf_module_SOURCES)
CLEANFILES += $(nodist_elf_module_SOURCES)
MOD_FILES += elf.mod
MARKER_FILES += elf.marker
CLEANFILES += elf.marker

elf.marker: $(elf_module_SOURCES) $(nodist_elf_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(elf_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += crypto.module
MODULE_FILES += crypto.module$(EXEEXT)
crypto_module_SOURCES  = lib/crypto.c  ## platform sources
nodist_crypto_module_SOURCES  =  ## platform nodist sources
crypto_module_LDADD  = 
crypto_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crypto_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crypto_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crypto_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/libgcrypt-grub/cipher/crypto.lst 
BUILT_SOURCES += $(nodist_crypto_module_SOURCES)
CLEANFILES += $(nodist_crypto_module_SOURCES)
MOD_FILES += crypto.mod
MARKER_FILES += crypto.marker
CLEANFILES += crypto.marker

crypto.marker: $(crypto_module_SOURCES) $(nodist_crypto_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += pbkdf2.module
MODULE_FILES += pbkdf2.module$(EXEEXT)
pbkdf2_module_SOURCES  = lib/pbkdf2.c  ## platform sources
nodist_pbkdf2_module_SOURCES  =  ## platform nodist sources
pbkdf2_module_LDADD  = 
pbkdf2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pbkdf2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pbkdf2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pbkdf2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pbkdf2_module_SOURCES)
CLEANFILES += $(nodist_pbkdf2_module_SOURCES)
MOD_FILES += pbkdf2.mod
MARKER_FILES += pbkdf2.marker
CLEANFILES += pbkdf2.marker

pbkdf2.marker: $(pbkdf2_module_SOURCES) $(nodist_pbkdf2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pbkdf2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/i386/relocator_asm.S lib/i386/relocator16.S lib/i386/relocator32.S lib/i386/relocator64.S lib/i386/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/efi/relocator.c lib/i386/relocator_asm.S lib/i386/relocator16.S lib/i386/relocator32.S lib/i386/relocator64.S lib/i386/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/i386/relocator_asm.S lib/i386/relocator16.S lib/i386/relocator32.S lib/i386/relocator64.S lib/i386/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/i386/relocator_asm.S lib/i386/relocator16.S lib/i386/relocator32.S lib/i386/relocator64.S lib/i386/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/i386/relocator_asm.S lib/i386/relocator16.S lib/i386/relocator32.S lib/i386/relocator64.S lib/i386/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/ieee1275/relocator.c lib/i386/relocator_asm.S lib/i386/relocator16.S lib/i386/relocator32.S lib/i386/relocator64.S lib/i386/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/x86_64/relocator_asm.S lib/efi/relocator.c lib/i386/relocator16.S lib/i386/relocator32.S lib/i386/relocator64.S lib/i386/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/mips/relocator_asm.S lib/mips/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/powerpc/relocator_asm.S lib/powerpc/relocator.c lib/ieee1275/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/mips/relocator_asm.S lib/mips/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += relocator.module
MODULE_FILES += relocator.module$(EXEEXT)
relocator_module_SOURCES  = lib/mips/relocator_asm.S lib/mips/relocator.c lib/relocator.c  ## platform sources
nodist_relocator_module_SOURCES  =  ## platform nodist sources
relocator_module_LDADD  = 
relocator_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
relocator_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
relocator_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
relocator_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/relocator_common.S kern/powerpc/cache_flush.S 
BUILT_SOURCES += $(nodist_relocator_module_SOURCES)
CLEANFILES += $(nodist_relocator_module_SOURCES)
MOD_FILES += relocator.mod
MARKER_FILES += relocator.marker
CLEANFILES += relocator.marker

relocator.marker: $(relocator_module_SOURCES) $(nodist_relocator_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(relocator_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/efi/datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/efi/datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/ieee1275/datetime.c lib/ieee1275/cmos.c lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/ieee1275/datetime.c lib/ieee1275/cmos.c lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/arc/datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/efi/datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += datetime.module
MODULE_FILES += datetime.module$(EXEEXT)
datetime_module_SOURCES  = lib/cmos_datetime.c  ## platform sources
nodist_datetime_module_SOURCES  =  ## platform nodist sources
datetime_module_LDADD  = 
datetime_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datetime_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datetime_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datetime_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datetime_module_SOURCES)
CLEANFILES += $(nodist_datetime_module_SOURCES)
MOD_FILES += datetime.mod
MARKER_FILES += datetime.marker
CLEANFILES += datetime.marker

datetime.marker: $(datetime_module_SOURCES) $(nodist_datetime_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datetime_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += setjmp.module
MODULE_FILES += setjmp.module$(EXEEXT)
setjmp_module_SOURCES  = lib/setjmp.S  ## platform sources
nodist_setjmp_module_SOURCES  =  ## platform nodist sources
setjmp_module_LDADD  = 
setjmp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
setjmp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
setjmp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
setjmp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += lib/i386/setjmp.S lib/mips/setjmp.S lib/x86_64/setjmp.S lib/sparc64/setjmp.S lib/powerpc/setjmp.S lib/ia64/setjmp.S lib/ia64/longjmp.S 
BUILT_SOURCES += $(nodist_setjmp_module_SOURCES)
CLEANFILES += $(nodist_setjmp_module_SOURCES)
MOD_FILES += setjmp.mod
MARKER_FILES += setjmp.marker
CLEANFILES += setjmp.marker

setjmp.marker: $(setjmp_module_SOURCES) $(nodist_setjmp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(setjmp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += aout.module
MODULE_FILES += aout.module$(EXEEXT)
aout_module_SOURCES  = loader/aout.c  ## platform sources
nodist_aout_module_SOURCES  =  ## platform nodist sources
aout_module_LDADD  = 
aout_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
aout_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
aout_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
aout_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_aout_module_SOURCES)
CLEANFILES += $(nodist_aout_module_SOURCES)
MOD_FILES += aout.mod
MARKER_FILES += aout.marker
CLEANFILES += aout.marker

aout.marker: $(aout_module_SOURCES) $(nodist_aout_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(aout_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += aout.module
MODULE_FILES += aout.module$(EXEEXT)
aout_module_SOURCES  = loader/aout.c  ## platform sources
nodist_aout_module_SOURCES  =  ## platform nodist sources
aout_module_LDADD  = 
aout_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
aout_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
aout_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
aout_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_aout_module_SOURCES)
CLEANFILES += $(nodist_aout_module_SOURCES)
MOD_FILES += aout.mod
MARKER_FILES += aout.marker
CLEANFILES += aout.marker

aout.marker: $(aout_module_SOURCES) $(nodist_aout_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(aout_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += aout.module
MODULE_FILES += aout.module$(EXEEXT)
aout_module_SOURCES  = loader/aout.c  ## platform sources
nodist_aout_module_SOURCES  =  ## platform nodist sources
aout_module_LDADD  = 
aout_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
aout_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
aout_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
aout_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_aout_module_SOURCES)
CLEANFILES += $(nodist_aout_module_SOURCES)
MOD_FILES += aout.mod
MARKER_FILES += aout.marker
CLEANFILES += aout.marker

aout.marker: $(aout_module_SOURCES) $(nodist_aout_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(aout_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += aout.module
MODULE_FILES += aout.module$(EXEEXT)
aout_module_SOURCES  = loader/aout.c  ## platform sources
nodist_aout_module_SOURCES  =  ## platform nodist sources
aout_module_LDADD  = 
aout_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
aout_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
aout_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
aout_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_aout_module_SOURCES)
CLEANFILES += $(nodist_aout_module_SOURCES)
MOD_FILES += aout.mod
MARKER_FILES += aout.marker
CLEANFILES += aout.marker

aout.marker: $(aout_module_SOURCES) $(nodist_aout_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(aout_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += aout.module
MODULE_FILES += aout.module$(EXEEXT)
aout_module_SOURCES  = loader/aout.c  ## platform sources
nodist_aout_module_SOURCES  =  ## platform nodist sources
aout_module_LDADD  = 
aout_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
aout_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
aout_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
aout_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_aout_module_SOURCES)
CLEANFILES += $(nodist_aout_module_SOURCES)
MOD_FILES += aout.mod
MARKER_FILES += aout.marker
CLEANFILES += aout.marker

aout.marker: $(aout_module_SOURCES) $(nodist_aout_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(aout_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += aout.module
MODULE_FILES += aout.module$(EXEEXT)
aout_module_SOURCES  = loader/aout.c  ## platform sources
nodist_aout_module_SOURCES  =  ## platform nodist sources
aout_module_LDADD  = 
aout_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
aout_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
aout_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
aout_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_aout_module_SOURCES)
CLEANFILES += $(nodist_aout_module_SOURCES)
MOD_FILES += aout.mod
MARKER_FILES += aout.marker
CLEANFILES += aout.marker

aout.marker: $(aout_module_SOURCES) $(nodist_aout_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(aout_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += aout.module
MODULE_FILES += aout.module$(EXEEXT)
aout_module_SOURCES  = loader/aout.c  ## platform sources
nodist_aout_module_SOURCES  =  ## platform nodist sources
aout_module_LDADD  = 
aout_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
aout_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
aout_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
aout_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_aout_module_SOURCES)
CLEANFILES += $(nodist_aout_module_SOURCES)
MOD_FILES += aout.mod
MARKER_FILES += aout.marker
CLEANFILES += aout.marker

aout.marker: $(aout_module_SOURCES) $(nodist_aout_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(aout_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += bsd.module
MODULE_FILES += bsd.module$(EXEEXT)
bsd_module_SOURCES  = loader/i386/bsd.c loader/i386/bsd32.c loader/i386/bsd64.c  ## platform sources
nodist_bsd_module_SOURCES  =  ## platform nodist sources
bsd_module_LDADD  = 
bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/i386/bsdXX.c loader/i386/bsd_pagetable.c 
BUILT_SOURCES += $(nodist_bsd_module_SOURCES)
CLEANFILES += $(nodist_bsd_module_SOURCES)
MOD_FILES += bsd.mod
MARKER_FILES += bsd.marker
CLEANFILES += bsd.marker

bsd.marker: $(bsd_module_SOURCES) $(nodist_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += bsd.module
MODULE_FILES += bsd.module$(EXEEXT)
bsd_module_SOURCES  = loader/i386/bsd.c loader/i386/bsd32.c loader/i386/bsd64.c  ## platform sources
nodist_bsd_module_SOURCES  =  ## platform nodist sources
bsd_module_LDADD  = 
bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/i386/bsdXX.c loader/i386/bsd_pagetable.c 
BUILT_SOURCES += $(nodist_bsd_module_SOURCES)
CLEANFILES += $(nodist_bsd_module_SOURCES)
MOD_FILES += bsd.mod
MARKER_FILES += bsd.marker
CLEANFILES += bsd.marker

bsd.marker: $(bsd_module_SOURCES) $(nodist_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += bsd.module
MODULE_FILES += bsd.module$(EXEEXT)
bsd_module_SOURCES  = loader/i386/bsd.c loader/i386/bsd32.c loader/i386/bsd64.c  ## platform sources
nodist_bsd_module_SOURCES  =  ## platform nodist sources
bsd_module_LDADD  = 
bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/i386/bsdXX.c loader/i386/bsd_pagetable.c 
BUILT_SOURCES += $(nodist_bsd_module_SOURCES)
CLEANFILES += $(nodist_bsd_module_SOURCES)
MOD_FILES += bsd.mod
MARKER_FILES += bsd.marker
CLEANFILES += bsd.marker

bsd.marker: $(bsd_module_SOURCES) $(nodist_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += bsd.module
MODULE_FILES += bsd.module$(EXEEXT)
bsd_module_SOURCES  = loader/i386/bsd.c loader/i386/bsd32.c loader/i386/bsd64.c  ## platform sources
nodist_bsd_module_SOURCES  =  ## platform nodist sources
bsd_module_LDADD  = 
bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/i386/bsdXX.c loader/i386/bsd_pagetable.c 
BUILT_SOURCES += $(nodist_bsd_module_SOURCES)
CLEANFILES += $(nodist_bsd_module_SOURCES)
MOD_FILES += bsd.mod
MARKER_FILES += bsd.marker
CLEANFILES += bsd.marker

bsd.marker: $(bsd_module_SOURCES) $(nodist_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += bsd.module
MODULE_FILES += bsd.module$(EXEEXT)
bsd_module_SOURCES  = loader/i386/bsd.c loader/i386/bsd32.c loader/i386/bsd64.c  ## platform sources
nodist_bsd_module_SOURCES  =  ## platform nodist sources
bsd_module_LDADD  = 
bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/i386/bsdXX.c loader/i386/bsd_pagetable.c 
BUILT_SOURCES += $(nodist_bsd_module_SOURCES)
CLEANFILES += $(nodist_bsd_module_SOURCES)
MOD_FILES += bsd.mod
MARKER_FILES += bsd.marker
CLEANFILES += bsd.marker

bsd.marker: $(bsd_module_SOURCES) $(nodist_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += bsd.module
MODULE_FILES += bsd.module$(EXEEXT)
bsd_module_SOURCES  = loader/i386/bsd.c loader/i386/bsd32.c loader/i386/bsd64.c  ## platform sources
nodist_bsd_module_SOURCES  =  ## platform nodist sources
bsd_module_LDADD  = 
bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/i386/bsdXX.c loader/i386/bsd_pagetable.c 
BUILT_SOURCES += $(nodist_bsd_module_SOURCES)
CLEANFILES += $(nodist_bsd_module_SOURCES)
MOD_FILES += bsd.mod
MARKER_FILES += bsd.marker
CLEANFILES += bsd.marker

bsd.marker: $(bsd_module_SOURCES) $(nodist_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += bsd.module
MODULE_FILES += bsd.module$(EXEEXT)
bsd_module_SOURCES  = loader/i386/bsd.c loader/i386/bsd32.c loader/i386/bsd64.c  ## platform sources
nodist_bsd_module_SOURCES  =  ## platform nodist sources
bsd_module_LDADD  = 
bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/i386/bsdXX.c loader/i386/bsd_pagetable.c 
BUILT_SOURCES += $(nodist_bsd_module_SOURCES)
CLEANFILES += $(nodist_bsd_module_SOURCES)
MOD_FILES += bsd.mod
MARKER_FILES += bsd.marker
CLEANFILES += bsd.marker

bsd.marker: $(bsd_module_SOURCES) $(nodist_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += plan9.module
MODULE_FILES += plan9.module$(EXEEXT)
plan9_module_SOURCES  = loader/i386/pc/plan9.c  ## platform sources
nodist_plan9_module_SOURCES  =  ## platform nodist sources
plan9_module_LDADD  = 
plan9_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
plan9_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
plan9_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
plan9_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_plan9_module_SOURCES)
CLEANFILES += $(nodist_plan9_module_SOURCES)
MOD_FILES += plan9.mod
MARKER_FILES += plan9.marker
CLEANFILES += plan9.marker

plan9.marker: $(plan9_module_SOURCES) $(nodist_plan9_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(plan9_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += linux16.module
MODULE_FILES += linux16.module$(EXEEXT)
linux16_module_SOURCES  = loader/i386/pc/linux.c lib/cmdline.c  ## platform sources
nodist_linux16_module_SOURCES  =  ## platform nodist sources
linux16_module_LDADD  = 
linux16_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux16_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux16_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux16_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux16_module_SOURCES)
CLEANFILES += $(nodist_linux16_module_SOURCES)
MOD_FILES += linux16.mod
MARKER_FILES += linux16.marker
CLEANFILES += linux16.marker

linux16.marker: $(linux16_module_SOURCES) $(nodist_linux16_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux16_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += ntldr.module
MODULE_FILES += ntldr.module$(EXEEXT)
ntldr_module_SOURCES  = loader/i386/pc/ntldr.c  ## platform sources
nodist_ntldr_module_SOURCES  =  ## platform nodist sources
ntldr_module_LDADD  = 
ntldr_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ntldr_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ntldr_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ntldr_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ntldr_module_SOURCES)
CLEANFILES += $(nodist_ntldr_module_SOURCES)
MOD_FILES += ntldr.mod
MARKER_FILES += ntldr.marker
CLEANFILES += ntldr.marker

ntldr.marker: $(ntldr_module_SOURCES) $(nodist_ntldr_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ntldr_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += freedos.module
MODULE_FILES += freedos.module$(EXEEXT)
freedos_module_SOURCES  = loader/i386/pc/freedos.c  ## platform sources
nodist_freedos_module_SOURCES  =  ## platform nodist sources
freedos_module_LDADD  = 
freedos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
freedos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
freedos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
freedos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_freedos_module_SOURCES)
CLEANFILES += $(nodist_freedos_module_SOURCES)
MOD_FILES += freedos.mod
MARKER_FILES += freedos.marker
CLEANFILES += freedos.marker

freedos.marker: $(freedos_module_SOURCES) $(nodist_freedos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(freedos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += pxechain.module
MODULE_FILES += pxechain.module$(EXEEXT)
pxechain_module_SOURCES  = loader/i386/pc/pxechainloader.c  ## platform sources
nodist_pxechain_module_SOURCES  =  ## platform nodist sources
pxechain_module_LDADD  = 
pxechain_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
pxechain_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
pxechain_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
pxechain_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pxechain_module_SOURCES)
CLEANFILES += $(nodist_pxechain_module_SOURCES)
MOD_FILES += pxechain.mod
MARKER_FILES += pxechain.marker
CLEANFILES += pxechain.marker

pxechain.marker: $(pxechain_module_SOURCES) $(nodist_pxechain_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pxechain_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += multiboot2.module
MODULE_FILES += multiboot2.module$(EXEEXT)
multiboot2_module_SOURCES  = loader/multiboot.c loader/multiboot_mbi2.c  ## platform sources
nodist_multiboot2_module_SOURCES  =  ## platform nodist sources
multiboot2_module_LDADD  = 
multiboot2_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot2_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot2_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -DGRUB_USE_MULTIBOOT2 
multiboot2_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_multiboot2_module_SOURCES)
CLEANFILES += $(nodist_multiboot2_module_SOURCES)
MOD_FILES += multiboot2.mod
MARKER_FILES += multiboot2.marker
CLEANFILES += multiboot2.marker

multiboot2.marker: $(multiboot2_module_SOURCES) $(nodist_multiboot2_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot2_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += multiboot.module
MODULE_FILES += multiboot.module$(EXEEXT)
multiboot_module_SOURCES  = loader/i386/multiboot_mbi.c loader/multiboot.c  ## platform sources
nodist_multiboot_module_SOURCES  =  ## platform nodist sources
multiboot_module_LDADD  = 
multiboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
multiboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/multiboot_elfxx.c 
BUILT_SOURCES += $(nodist_multiboot_module_SOURCES)
CLEANFILES += $(nodist_multiboot_module_SOURCES)
MOD_FILES += multiboot.mod
MARKER_FILES += multiboot.marker
CLEANFILES += multiboot.marker

multiboot.marker: $(multiboot_module_SOURCES) $(nodist_multiboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += multiboot.module
MODULE_FILES += multiboot.module$(EXEEXT)
multiboot_module_SOURCES  = loader/i386/multiboot_mbi.c loader/multiboot.c  ## platform sources
nodist_multiboot_module_SOURCES  =  ## platform nodist sources
multiboot_module_LDADD  = 
multiboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
multiboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/multiboot_elfxx.c 
BUILT_SOURCES += $(nodist_multiboot_module_SOURCES)
CLEANFILES += $(nodist_multiboot_module_SOURCES)
MOD_FILES += multiboot.mod
MARKER_FILES += multiboot.marker
CLEANFILES += multiboot.marker

multiboot.marker: $(multiboot_module_SOURCES) $(nodist_multiboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += multiboot.module
MODULE_FILES += multiboot.module$(EXEEXT)
multiboot_module_SOURCES  = loader/i386/multiboot_mbi.c loader/multiboot.c  ## platform sources
nodist_multiboot_module_SOURCES  =  ## platform nodist sources
multiboot_module_LDADD  = 
multiboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
multiboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/multiboot_elfxx.c 
BUILT_SOURCES += $(nodist_multiboot_module_SOURCES)
CLEANFILES += $(nodist_multiboot_module_SOURCES)
MOD_FILES += multiboot.mod
MARKER_FILES += multiboot.marker
CLEANFILES += multiboot.marker

multiboot.marker: $(multiboot_module_SOURCES) $(nodist_multiboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += multiboot.module
MODULE_FILES += multiboot.module$(EXEEXT)
multiboot_module_SOURCES  = loader/i386/multiboot_mbi.c loader/multiboot.c  ## platform sources
nodist_multiboot_module_SOURCES  =  ## platform nodist sources
multiboot_module_LDADD  = 
multiboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
multiboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/multiboot_elfxx.c 
BUILT_SOURCES += $(nodist_multiboot_module_SOURCES)
CLEANFILES += $(nodist_multiboot_module_SOURCES)
MOD_FILES += multiboot.mod
MARKER_FILES += multiboot.marker
CLEANFILES += multiboot.marker

multiboot.marker: $(multiboot_module_SOURCES) $(nodist_multiboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += multiboot.module
MODULE_FILES += multiboot.module$(EXEEXT)
multiboot_module_SOURCES  = loader/i386/multiboot_mbi.c loader/multiboot.c  ## platform sources
nodist_multiboot_module_SOURCES  =  ## platform nodist sources
multiboot_module_LDADD  = 
multiboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
multiboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/multiboot_elfxx.c 
BUILT_SOURCES += $(nodist_multiboot_module_SOURCES)
CLEANFILES += $(nodist_multiboot_module_SOURCES)
MOD_FILES += multiboot.mod
MARKER_FILES += multiboot.marker
CLEANFILES += multiboot.marker

multiboot.marker: $(multiboot_module_SOURCES) $(nodist_multiboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += multiboot.module
MODULE_FILES += multiboot.module$(EXEEXT)
multiboot_module_SOURCES  = loader/i386/multiboot_mbi.c loader/multiboot.c  ## platform sources
nodist_multiboot_module_SOURCES  =  ## platform nodist sources
multiboot_module_LDADD  = 
multiboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
multiboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/multiboot_elfxx.c 
BUILT_SOURCES += $(nodist_multiboot_module_SOURCES)
CLEANFILES += $(nodist_multiboot_module_SOURCES)
MOD_FILES += multiboot.mod
MARKER_FILES += multiboot.marker
CLEANFILES += multiboot.marker

multiboot.marker: $(multiboot_module_SOURCES) $(nodist_multiboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += multiboot.module
MODULE_FILES += multiboot.module$(EXEEXT)
multiboot_module_SOURCES  = loader/i386/multiboot_mbi.c loader/multiboot.c  ## platform sources
nodist_multiboot_module_SOURCES  =  ## platform nodist sources
multiboot_module_LDADD  = 
multiboot_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
multiboot_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
multiboot_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
multiboot_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/multiboot_elfxx.c 
BUILT_SOURCES += $(nodist_multiboot_module_SOURCES)
CLEANFILES += $(nodist_multiboot_module_SOURCES)
MOD_FILES += multiboot.mod
MARKER_FILES += multiboot.marker
CLEANFILES += multiboot.marker

multiboot.marker: $(multiboot_module_SOURCES) $(nodist_multiboot_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiboot_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = lib/i386/pc/vesa_modes_table.c loader/i386/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/i386/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/i386/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/i386/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/i386/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/i386/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/i386/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/mips/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/sparc64/ieee1275/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/powerpc/ieee1275/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/mips/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/ia64/efi/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += linux.module
MODULE_FILES += linux.module$(EXEEXT)
linux_module_SOURCES  = loader/mips/linux.c lib/cmdline.c  ## platform sources
nodist_linux_module_SOURCES  =  ## platform nodist sources
linux_module_LDADD  = 
linux_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
linux_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
linux_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
linux_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_linux_module_SOURCES)
CLEANFILES += $(nodist_linux_module_SOURCES)
MOD_FILES += linux.mod
MARKER_FILES += linux.marker
CLEANFILES += linux.marker

linux.marker: $(linux_module_SOURCES) $(nodist_linux_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linux_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += xnu.module
MODULE_FILES += xnu.module$(EXEEXT)
xnu_module_SOURCES  = loader/xnu_resume.c loader/i386/xnu.c loader/macho32.c loader/macho64.c loader/macho.c loader/xnu.c loader/lzss.c  ## platform sources
nodist_xnu_module_SOURCES  =  ## platform nodist sources
xnu_module_LDADD  = 
xnu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/machoXX.c 
BUILT_SOURCES += $(nodist_xnu_module_SOURCES)
CLEANFILES += $(nodist_xnu_module_SOURCES)
MOD_FILES += xnu.mod
MARKER_FILES += xnu.marker
CLEANFILES += xnu.marker

xnu.marker: $(xnu_module_SOURCES) $(nodist_xnu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += xnu.module
MODULE_FILES += xnu.module$(EXEEXT)
xnu_module_SOURCES  = loader/xnu_resume.c loader/i386/xnu.c loader/macho32.c loader/macho64.c loader/macho.c loader/xnu.c loader/lzss.c  ## platform sources
nodist_xnu_module_SOURCES  =  ## platform nodist sources
xnu_module_LDADD  = 
xnu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/machoXX.c 
BUILT_SOURCES += $(nodist_xnu_module_SOURCES)
CLEANFILES += $(nodist_xnu_module_SOURCES)
MOD_FILES += xnu.mod
MARKER_FILES += xnu.marker
CLEANFILES += xnu.marker

xnu.marker: $(xnu_module_SOURCES) $(nodist_xnu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += xnu.module
MODULE_FILES += xnu.module$(EXEEXT)
xnu_module_SOURCES  = loader/xnu_resume.c loader/i386/xnu.c loader/macho32.c loader/macho64.c loader/macho.c loader/xnu.c loader/lzss.c  ## platform sources
nodist_xnu_module_SOURCES  =  ## platform nodist sources
xnu_module_LDADD  = 
xnu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/machoXX.c 
BUILT_SOURCES += $(nodist_xnu_module_SOURCES)
CLEANFILES += $(nodist_xnu_module_SOURCES)
MOD_FILES += xnu.mod
MARKER_FILES += xnu.marker
CLEANFILES += xnu.marker

xnu.marker: $(xnu_module_SOURCES) $(nodist_xnu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += xnu.module
MODULE_FILES += xnu.module$(EXEEXT)
xnu_module_SOURCES  = loader/xnu_resume.c loader/i386/xnu.c loader/macho32.c loader/macho64.c loader/macho.c loader/xnu.c loader/lzss.c  ## platform sources
nodist_xnu_module_SOURCES  =  ## platform nodist sources
xnu_module_LDADD  = 
xnu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/machoXX.c 
BUILT_SOURCES += $(nodist_xnu_module_SOURCES)
CLEANFILES += $(nodist_xnu_module_SOURCES)
MOD_FILES += xnu.mod
MARKER_FILES += xnu.marker
CLEANFILES += xnu.marker

xnu.marker: $(xnu_module_SOURCES) $(nodist_xnu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += xnu.module
MODULE_FILES += xnu.module$(EXEEXT)
xnu_module_SOURCES  = loader/xnu_resume.c loader/i386/xnu.c loader/macho32.c loader/macho64.c loader/macho.c loader/xnu.c loader/lzss.c  ## platform sources
nodist_xnu_module_SOURCES  =  ## platform nodist sources
xnu_module_LDADD  = 
xnu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/machoXX.c 
BUILT_SOURCES += $(nodist_xnu_module_SOURCES)
CLEANFILES += $(nodist_xnu_module_SOURCES)
MOD_FILES += xnu.mod
MARKER_FILES += xnu.marker
CLEANFILES += xnu.marker

xnu.marker: $(xnu_module_SOURCES) $(nodist_xnu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += xnu.module
MODULE_FILES += xnu.module$(EXEEXT)
xnu_module_SOURCES  = loader/xnu_resume.c loader/i386/xnu.c loader/macho32.c loader/macho64.c loader/macho.c loader/xnu.c loader/lzss.c  ## platform sources
nodist_xnu_module_SOURCES  =  ## platform nodist sources
xnu_module_LDADD  = 
xnu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/machoXX.c 
BUILT_SOURCES += $(nodist_xnu_module_SOURCES)
CLEANFILES += $(nodist_xnu_module_SOURCES)
MOD_FILES += xnu.mod
MARKER_FILES += xnu.marker
CLEANFILES += xnu.marker

xnu.marker: $(xnu_module_SOURCES) $(nodist_xnu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += xnu.module
MODULE_FILES += xnu.module$(EXEEXT)
xnu_module_SOURCES  = loader/xnu_resume.c loader/i386/xnu.c loader/macho32.c loader/macho64.c loader/macho.c loader/xnu.c loader/lzss.c  ## platform sources
nodist_xnu_module_SOURCES  =  ## platform nodist sources
xnu_module_LDADD  = 
xnu_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
xnu_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xnu_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
xnu_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += loader/machoXX.c 
BUILT_SOURCES += $(nodist_xnu_module_SOURCES)
CLEANFILES += $(nodist_xnu_module_SOURCES)
MOD_FILES += xnu.mod
MARKER_FILES += xnu.marker
CLEANFILES += xnu.marker

xnu.marker: $(xnu_module_SOURCES) $(nodist_xnu_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xnu_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += appleldr.module
MODULE_FILES += appleldr.module$(EXEEXT)
appleldr_module_SOURCES  = loader/efi/appleloader.c  ## platform sources
nodist_appleldr_module_SOURCES  =  ## platform nodist sources
appleldr_module_LDADD  = 
appleldr_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
appleldr_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
appleldr_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
appleldr_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_appleldr_module_SOURCES)
CLEANFILES += $(nodist_appleldr_module_SOURCES)
MOD_FILES += appleldr.mod
MARKER_FILES += appleldr.marker
CLEANFILES += appleldr.marker

appleldr.marker: $(appleldr_module_SOURCES) $(nodist_appleldr_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(appleldr_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += appleldr.module
MODULE_FILES += appleldr.module$(EXEEXT)
appleldr_module_SOURCES  = loader/efi/appleloader.c  ## platform sources
nodist_appleldr_module_SOURCES  =  ## platform nodist sources
appleldr_module_LDADD  = 
appleldr_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
appleldr_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
appleldr_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
appleldr_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_appleldr_module_SOURCES)
CLEANFILES += $(nodist_appleldr_module_SOURCES)
MOD_FILES += appleldr.mod
MARKER_FILES += appleldr.marker
CLEANFILES += appleldr.marker

appleldr.marker: $(appleldr_module_SOURCES) $(nodist_appleldr_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(appleldr_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += chain.module
MODULE_FILES += chain.module$(EXEEXT)
chain_module_SOURCES  = loader/i386/pc/chainloader.c  ## platform sources
nodist_chain_module_SOURCES  =  ## platform nodist sources
chain_module_LDADD  = 
chain_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
chain_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
chain_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
chain_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_chain_module_SOURCES)
CLEANFILES += $(nodist_chain_module_SOURCES)
MOD_FILES += chain.mod
MARKER_FILES += chain.marker
CLEANFILES += chain.marker

chain.marker: $(chain_module_SOURCES) $(nodist_chain_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(chain_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += chain.module
MODULE_FILES += chain.module$(EXEEXT)
chain_module_SOURCES  = loader/efi/chainloader.c  ## platform sources
nodist_chain_module_SOURCES  =  ## platform nodist sources
chain_module_LDADD  = 
chain_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
chain_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
chain_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
chain_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_chain_module_SOURCES)
CLEANFILES += $(nodist_chain_module_SOURCES)
MOD_FILES += chain.mod
MARKER_FILES += chain.marker
CLEANFILES += chain.marker

chain.marker: $(chain_module_SOURCES) $(nodist_chain_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(chain_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += chain.module
MODULE_FILES += chain.module$(EXEEXT)
chain_module_SOURCES  = loader/i386/coreboot/chainloader.c  ## platform sources
nodist_chain_module_SOURCES  =  ## platform nodist sources
chain_module_LDADD  = 
chain_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
chain_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
chain_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
chain_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_chain_module_SOURCES)
CLEANFILES += $(nodist_chain_module_SOURCES)
MOD_FILES += chain.mod
MARKER_FILES += chain.marker
CLEANFILES += chain.marker

chain.marker: $(chain_module_SOURCES) $(nodist_chain_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(chain_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += chain.module
MODULE_FILES += chain.module$(EXEEXT)
chain_module_SOURCES  = loader/efi/chainloader.c  ## platform sources
nodist_chain_module_SOURCES  =  ## platform nodist sources
chain_module_LDADD  = 
chain_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
chain_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
chain_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
chain_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_chain_module_SOURCES)
CLEANFILES += $(nodist_chain_module_SOURCES)
MOD_FILES += chain.mod
MARKER_FILES += chain.marker
CLEANFILES += chain.marker

chain.marker: $(chain_module_SOURCES) $(nodist_chain_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(chain_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += chain.module
MODULE_FILES += chain.module$(EXEEXT)
chain_module_SOURCES  = loader/efi/chainloader.c  ## platform sources
nodist_chain_module_SOURCES  =  ## platform nodist sources
chain_module_LDADD  = 
chain_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
chain_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
chain_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
chain_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_chain_module_SOURCES)
CLEANFILES += $(nodist_chain_module_SOURCES)
MOD_FILES += chain.mod
MARKER_FILES += chain.marker
CLEANFILES += chain.marker

chain.marker: $(chain_module_SOURCES) $(nodist_chain_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(chain_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/i386/pc/mmap.c mmap/i386/pc/mmap_helper.S mmap/i386/uppermem.c mmap/i386/mmap.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/efi/mmap.c mmap/i386/uppermem.c mmap/i386/mmap.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/i386/uppermem.c mmap/i386/mmap.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/i386/uppermem.c mmap/i386/mmap.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/i386/uppermem.c mmap/i386/mmap.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/i386/uppermem.c mmap/i386/mmap.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/efi/mmap.c mmap/i386/uppermem.c mmap/i386/mmap.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/mips/uppermem.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/mips/uppermem.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/efi/mmap.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += mmap.module
MODULE_FILES += mmap.module$(EXEEXT)
mmap_module_SOURCES  = mmap/mips/uppermem.c mmap/mmap.c  ## platform sources
nodist_mmap_module_SOURCES  =  ## platform nodist sources
mmap_module_LDADD  = 
mmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
mmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
mmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
mmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_mmap_module_SOURCES)
CLEANFILES += $(nodist_mmap_module_SOURCES)
MOD_FILES += mmap.mod
MARKER_FILES += mmap.marker
CLEANFILES += mmap.marker

mmap.marker: $(mmap_module_SOURCES) $(nodist_mmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += normal.module
MODULE_FILES += normal.module$(EXEEXT)
normal_module_SOURCES  = normal/main.c normal/cmdline.c normal/dyncmd.c normal/auth.c normal/autofs.c normal/color.c normal/completion.c normal/datetime.c normal/menu.c normal/menu_entry.c normal/menu_text.c normal/misc.c normal/crypto.c normal/term.c normal/context.c normal/charset.c script/main.c script/script.c script/execute.c script/function.c script/lexer.c script/argv.c commands/menuentry.c unidata.c  ## platform sources
nodist_normal_module_SOURCES  = grub_script.tab.c grub_script.yy.c grub_script.tab.h grub_script.yy.h  ## platform nodist sources
normal_module_LDADD  = 
normal_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-redundant-decls 
normal_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
normal_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_POSIX) 
normal_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += script/yylex.l script/parser.y 
BUILT_SOURCES += $(nodist_normal_module_SOURCES)
CLEANFILES += $(nodist_normal_module_SOURCES)
MOD_FILES += normal.mod
MARKER_FILES += normal.marker
CLEANFILES += normal.marker

normal.marker: $(normal_module_SOURCES) $(nodist_normal_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(normal_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_acorn.module
MODULE_FILES += part_acorn.module$(EXEEXT)
part_acorn_module_SOURCES  = partmap/acorn.c  ## platform sources
nodist_part_acorn_module_SOURCES  =  ## platform nodist sources
part_acorn_module_LDADD  = 
part_acorn_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_acorn_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_acorn_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_acorn_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_acorn_module_SOURCES)
CLEANFILES += $(nodist_part_acorn_module_SOURCES)
MOD_FILES += part_acorn.mod
MARKER_FILES += part_acorn.marker
CLEANFILES += part_acorn.marker

part_acorn.marker: $(part_acorn_module_SOURCES) $(nodist_part_acorn_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_acorn_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_amiga.module
MODULE_FILES += part_amiga.module$(EXEEXT)
part_amiga_module_SOURCES  = partmap/amiga.c  ## platform sources
nodist_part_amiga_module_SOURCES  =  ## platform nodist sources
part_amiga_module_LDADD  = 
part_amiga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_amiga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_amiga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_amiga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_amiga_module_SOURCES)
CLEANFILES += $(nodist_part_amiga_module_SOURCES)
MOD_FILES += part_amiga.mod
MARKER_FILES += part_amiga.marker
CLEANFILES += part_amiga.marker

part_amiga.marker: $(part_amiga_module_SOURCES) $(nodist_part_amiga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_amiga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_apple.module
MODULE_FILES += part_apple.module$(EXEEXT)
part_apple_module_SOURCES  = partmap/apple.c  ## platform sources
nodist_part_apple_module_SOURCES  =  ## platform nodist sources
part_apple_module_LDADD  = 
part_apple_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_apple_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_apple_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_apple_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_apple_module_SOURCES)
CLEANFILES += $(nodist_part_apple_module_SOURCES)
MOD_FILES += part_apple.mod
MARKER_FILES += part_apple.marker
CLEANFILES += part_apple.marker

part_apple.marker: $(part_apple_module_SOURCES) $(nodist_part_apple_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_apple_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_gpt.module
MODULE_FILES += part_gpt.module$(EXEEXT)
part_gpt_module_SOURCES  = partmap/gpt.c  ## platform sources
nodist_part_gpt_module_SOURCES  =  ## platform nodist sources
part_gpt_module_LDADD  = 
part_gpt_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_gpt_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_gpt_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_gpt_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_gpt_module_SOURCES)
CLEANFILES += $(nodist_part_gpt_module_SOURCES)
MOD_FILES += part_gpt.mod
MARKER_FILES += part_gpt.marker
CLEANFILES += part_gpt.marker

part_gpt.marker: $(part_gpt_module_SOURCES) $(nodist_part_gpt_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_gpt_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_msdos.module
MODULE_FILES += part_msdos.module$(EXEEXT)
part_msdos_module_SOURCES  = partmap/msdos.c  ## platform sources
nodist_part_msdos_module_SOURCES  =  ## platform nodist sources
part_msdos_module_LDADD  = 
part_msdos_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_msdos_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_msdos_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_msdos_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_msdos_module_SOURCES)
CLEANFILES += $(nodist_part_msdos_module_SOURCES)
MOD_FILES += part_msdos.mod
MARKER_FILES += part_msdos.marker
CLEANFILES += part_msdos.marker

part_msdos.marker: $(part_msdos_module_SOURCES) $(nodist_part_msdos_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_msdos_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_sun.module
MODULE_FILES += part_sun.module$(EXEEXT)
part_sun_module_SOURCES  = partmap/sun.c  ## platform sources
nodist_part_sun_module_SOURCES  =  ## platform nodist sources
part_sun_module_LDADD  = 
part_sun_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sun_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sun_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sun_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sun_module_SOURCES)
CLEANFILES += $(nodist_part_sun_module_SOURCES)
MOD_FILES += part_sun.mod
MARKER_FILES += part_sun.marker
CLEANFILES += part_sun.marker

part_sun.marker: $(part_sun_module_SOURCES) $(nodist_part_sun_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sun_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_plan.module
MODULE_FILES += part_plan.module$(EXEEXT)
part_plan_module_SOURCES  = partmap/plan.c  ## platform sources
nodist_part_plan_module_SOURCES  =  ## platform nodist sources
part_plan_module_LDADD  = 
part_plan_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_plan_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_plan_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_plan_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_plan_module_SOURCES)
CLEANFILES += $(nodist_part_plan_module_SOURCES)
MOD_FILES += part_plan.mod
MARKER_FILES += part_plan.marker
CLEANFILES += part_plan.marker

part_plan.marker: $(part_plan_module_SOURCES) $(nodist_part_plan_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_plan_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_dvh.module
MODULE_FILES += part_dvh.module$(EXEEXT)
part_dvh_module_SOURCES  = partmap/dvh.c  ## platform sources
nodist_part_dvh_module_SOURCES  =  ## platform nodist sources
part_dvh_module_LDADD  = 
part_dvh_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_dvh_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_dvh_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_dvh_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_dvh_module_SOURCES)
CLEANFILES += $(nodist_part_dvh_module_SOURCES)
MOD_FILES += part_dvh.mod
MARKER_FILES += part_dvh.marker
CLEANFILES += part_dvh.marker

part_dvh.marker: $(part_dvh_module_SOURCES) $(nodist_part_dvh_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_dvh_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_bsd.module
MODULE_FILES += part_bsd.module$(EXEEXT)
part_bsd_module_SOURCES  = partmap/bsdlabel.c  ## platform sources
nodist_part_bsd_module_SOURCES  =  ## platform nodist sources
part_bsd_module_LDADD  = 
part_bsd_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_bsd_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_bsd_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_bsd_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_bsd_module_SOURCES)
CLEANFILES += $(nodist_part_bsd_module_SOURCES)
MOD_FILES += part_bsd.mod
MARKER_FILES += part_bsd.marker
CLEANFILES += part_bsd.marker

part_bsd.marker: $(part_bsd_module_SOURCES) $(nodist_part_bsd_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_bsd_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += part_sunpc.module
MODULE_FILES += part_sunpc.module$(EXEEXT)
part_sunpc_module_SOURCES  = partmap/sunpc.c  ## platform sources
nodist_part_sunpc_module_SOURCES  =  ## platform nodist sources
part_sunpc_module_LDADD  = 
part_sunpc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
part_sunpc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
part_sunpc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
part_sunpc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_part_sunpc_module_SOURCES)
CLEANFILES += $(nodist_part_sunpc_module_SOURCES)
MOD_FILES += part_sunpc.mod
MARKER_FILES += part_sunpc.marker
CLEANFILES += part_sunpc.marker

part_sunpc.marker: $(part_sunpc_module_SOURCES) $(nodist_part_sunpc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(part_sunpc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += msdospart.module
MODULE_FILES += msdospart.module$(EXEEXT)
msdospart_module_SOURCES  = parttool/msdospart.c  ## platform sources
nodist_msdospart_module_SOURCES  =  ## platform nodist sources
msdospart_module_LDADD  = 
msdospart_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
msdospart_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
msdospart_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
msdospart_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_msdospart_module_SOURCES)
CLEANFILES += $(nodist_msdospart_module_SOURCES)
MOD_FILES += msdospart.mod
MARKER_FILES += msdospart.marker
CLEANFILES += msdospart.marker

msdospart.marker: $(msdospart_module_SOURCES) $(nodist_msdospart_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(msdospart_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += at_keyboard.module
MODULE_FILES += at_keyboard.module$(EXEEXT)
at_keyboard_module_SOURCES  = term/at_keyboard.c  ## platform sources
nodist_at_keyboard_module_SOURCES  =  ## platform nodist sources
at_keyboard_module_LDADD  = 
at_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
at_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
at_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
at_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_at_keyboard_module_SOURCES)
CLEANFILES += $(nodist_at_keyboard_module_SOURCES)
MOD_FILES += at_keyboard.mod
MARKER_FILES += at_keyboard.marker
CLEANFILES += at_keyboard.marker

at_keyboard.marker: $(at_keyboard_module_SOURCES) $(nodist_at_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(at_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += at_keyboard.module
MODULE_FILES += at_keyboard.module$(EXEEXT)
at_keyboard_module_SOURCES  = term/at_keyboard.c  ## platform sources
nodist_at_keyboard_module_SOURCES  =  ## platform nodist sources
at_keyboard_module_LDADD  = 
at_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
at_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
at_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
at_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_at_keyboard_module_SOURCES)
CLEANFILES += $(nodist_at_keyboard_module_SOURCES)
MOD_FILES += at_keyboard.mod
MARKER_FILES += at_keyboard.marker
CLEANFILES += at_keyboard.marker

at_keyboard.marker: $(at_keyboard_module_SOURCES) $(nodist_at_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(at_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += at_keyboard.module
MODULE_FILES += at_keyboard.module$(EXEEXT)
at_keyboard_module_SOURCES  = term/at_keyboard.c  ## platform sources
nodist_at_keyboard_module_SOURCES  =  ## platform nodist sources
at_keyboard_module_LDADD  = 
at_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
at_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
at_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
at_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_at_keyboard_module_SOURCES)
CLEANFILES += $(nodist_at_keyboard_module_SOURCES)
MOD_FILES += at_keyboard.mod
MARKER_FILES += at_keyboard.marker
CLEANFILES += at_keyboard.marker

at_keyboard.marker: $(at_keyboard_module_SOURCES) $(nodist_at_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(at_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += at_keyboard.module
MODULE_FILES += at_keyboard.module$(EXEEXT)
at_keyboard_module_SOURCES  = term/at_keyboard.c  ## platform sources
nodist_at_keyboard_module_SOURCES  =  ## platform nodist sources
at_keyboard_module_LDADD  = 
at_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
at_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
at_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
at_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_at_keyboard_module_SOURCES)
CLEANFILES += $(nodist_at_keyboard_module_SOURCES)
MOD_FILES += at_keyboard.mod
MARKER_FILES += at_keyboard.marker
CLEANFILES += at_keyboard.marker

at_keyboard.marker: $(at_keyboard_module_SOURCES) $(nodist_at_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(at_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += at_keyboard.module
MODULE_FILES += at_keyboard.module$(EXEEXT)
at_keyboard_module_SOURCES  = term/at_keyboard.c  ## platform sources
nodist_at_keyboard_module_SOURCES  =  ## platform nodist sources
at_keyboard_module_LDADD  = 
at_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
at_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
at_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
at_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_at_keyboard_module_SOURCES)
CLEANFILES += $(nodist_at_keyboard_module_SOURCES)
MOD_FILES += at_keyboard.mod
MARKER_FILES += at_keyboard.marker
CLEANFILES += at_keyboard.marker

at_keyboard.marker: $(at_keyboard_module_SOURCES) $(nodist_at_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(at_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += at_keyboard.module
MODULE_FILES += at_keyboard.module$(EXEEXT)
at_keyboard_module_SOURCES  = term/at_keyboard.c  ## platform sources
nodist_at_keyboard_module_SOURCES  =  ## platform nodist sources
at_keyboard_module_LDADD  = 
at_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
at_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
at_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
at_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_at_keyboard_module_SOURCES)
CLEANFILES += $(nodist_at_keyboard_module_SOURCES)
MOD_FILES += at_keyboard.mod
MARKER_FILES += at_keyboard.marker
CLEANFILES += at_keyboard.marker

at_keyboard.marker: $(at_keyboard_module_SOURCES) $(nodist_at_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(at_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += at_keyboard.module
MODULE_FILES += at_keyboard.module$(EXEEXT)
at_keyboard_module_SOURCES  = term/at_keyboard.c  ## platform sources
nodist_at_keyboard_module_SOURCES  =  ## platform nodist sources
at_keyboard_module_LDADD  = 
at_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
at_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
at_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
at_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_at_keyboard_module_SOURCES)
CLEANFILES += $(nodist_at_keyboard_module_SOURCES)
MOD_FILES += at_keyboard.mod
MARKER_FILES += at_keyboard.marker
CLEANFILES += at_keyboard.marker

at_keyboard.marker: $(at_keyboard_module_SOURCES) $(nodist_at_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(at_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gfxterm.module
MODULE_FILES += gfxterm.module$(EXEEXT)
gfxterm_module_SOURCES  = term/gfxterm.c  ## platform sources
nodist_gfxterm_module_SOURCES  =  ## platform nodist sources
gfxterm_module_LDADD  = 
gfxterm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gfxterm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gfxterm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gfxterm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gfxterm_module_SOURCES)
CLEANFILES += $(nodist_gfxterm_module_SOURCES)
MOD_FILES += gfxterm.mod
MARKER_FILES += gfxterm.marker
CLEANFILES += gfxterm.marker

gfxterm.marker: $(gfxterm_module_SOURCES) $(nodist_gfxterm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gfxterm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/ns8250.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/efi/serial.c term/ns8250.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/ns8250.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/ns8250.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/ns8250.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/ieee1275/serial.c term/ns8250.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/efi/serial.c term/ns8250.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/ieee1275/serial.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/ieee1275/serial.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += serial.module
MODULE_FILES += serial.module$(EXEEXT)
serial_module_SOURCES  = term/efi/serial.c term/serial.c  ## platform sources
nodist_serial_module_SOURCES  =  ## platform nodist sources
serial_module_LDADD  = 
serial_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
serial_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
serial_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
serial_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_serial_module_SOURCES)
CLEANFILES += $(nodist_serial_module_SOURCES)
MOD_FILES += serial.mod
MARKER_FILES += serial.marker
CLEANFILES += serial.marker

serial.marker: $(serial_module_SOURCES) $(nodist_serial_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(serial_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += sendkey.module
MODULE_FILES += sendkey.module$(EXEEXT)
sendkey_module_SOURCES  = commands/i386/pc/sendkey.c  ## platform sources
nodist_sendkey_module_SOURCES  =  ## platform nodist sources
sendkey_module_LDADD  = 
sendkey_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sendkey_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sendkey_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sendkey_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sendkey_module_SOURCES)
CLEANFILES += $(nodist_sendkey_module_SOURCES)
MOD_FILES += sendkey.mod
MARKER_FILES += sendkey.marker
CLEANFILES += sendkey.marker

sendkey.marker: $(sendkey_module_SOURCES) $(nodist_sendkey_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sendkey_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += terminfo.module
MODULE_FILES += terminfo.module$(EXEEXT)
terminfo_module_SOURCES  = term/terminfo.c term/tparm.c  ## platform sources
nodist_terminfo_module_SOURCES  =  ## platform nodist sources
terminfo_module_LDADD  = 
terminfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminfo_module_SOURCES)
CLEANFILES += $(nodist_terminfo_module_SOURCES)
MOD_FILES += terminfo.mod
MARKER_FILES += terminfo.marker
CLEANFILES += terminfo.marker

terminfo.marker: $(terminfo_module_SOURCES) $(nodist_terminfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += terminfo.module
MODULE_FILES += terminfo.module$(EXEEXT)
terminfo_module_SOURCES  = term/terminfo.c term/tparm.c  ## platform sources
nodist_terminfo_module_SOURCES  =  ## platform nodist sources
terminfo_module_LDADD  = 
terminfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminfo_module_SOURCES)
CLEANFILES += $(nodist_terminfo_module_SOURCES)
MOD_FILES += terminfo.mod
MARKER_FILES += terminfo.marker
CLEANFILES += terminfo.marker

terminfo.marker: $(terminfo_module_SOURCES) $(nodist_terminfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += terminfo.module
MODULE_FILES += terminfo.module$(EXEEXT)
terminfo_module_SOURCES  = term/terminfo.c term/tparm.c  ## platform sources
nodist_terminfo_module_SOURCES  =  ## platform nodist sources
terminfo_module_LDADD  = 
terminfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminfo_module_SOURCES)
CLEANFILES += $(nodist_terminfo_module_SOURCES)
MOD_FILES += terminfo.mod
MARKER_FILES += terminfo.marker
CLEANFILES += terminfo.marker

terminfo.marker: $(terminfo_module_SOURCES) $(nodist_terminfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += terminfo.module
MODULE_FILES += terminfo.module$(EXEEXT)
terminfo_module_SOURCES  = term/terminfo.c term/tparm.c  ## platform sources
nodist_terminfo_module_SOURCES  =  ## platform nodist sources
terminfo_module_LDADD  = 
terminfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminfo_module_SOURCES)
CLEANFILES += $(nodist_terminfo_module_SOURCES)
MOD_FILES += terminfo.mod
MARKER_FILES += terminfo.marker
CLEANFILES += terminfo.marker

terminfo.marker: $(terminfo_module_SOURCES) $(nodist_terminfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += terminfo.module
MODULE_FILES += terminfo.module$(EXEEXT)
terminfo_module_SOURCES  = term/terminfo.c term/tparm.c  ## platform sources
nodist_terminfo_module_SOURCES  =  ## platform nodist sources
terminfo_module_LDADD  = 
terminfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminfo_module_SOURCES)
CLEANFILES += $(nodist_terminfo_module_SOURCES)
MOD_FILES += terminfo.mod
MARKER_FILES += terminfo.marker
CLEANFILES += terminfo.marker

terminfo.marker: $(terminfo_module_SOURCES) $(nodist_terminfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += terminfo.module
MODULE_FILES += terminfo.module$(EXEEXT)
terminfo_module_SOURCES  = term/terminfo.c term/tparm.c  ## platform sources
nodist_terminfo_module_SOURCES  =  ## platform nodist sources
terminfo_module_LDADD  = 
terminfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminfo_module_SOURCES)
CLEANFILES += $(nodist_terminfo_module_SOURCES)
MOD_FILES += terminfo.mod
MARKER_FILES += terminfo.marker
CLEANFILES += terminfo.marker

terminfo.marker: $(terminfo_module_SOURCES) $(nodist_terminfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += terminfo.module
MODULE_FILES += terminfo.module$(EXEEXT)
terminfo_module_SOURCES  = term/terminfo.c term/tparm.c  ## platform sources
nodist_terminfo_module_SOURCES  =  ## platform nodist sources
terminfo_module_LDADD  = 
terminfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminfo_module_SOURCES)
CLEANFILES += $(nodist_terminfo_module_SOURCES)
MOD_FILES += terminfo.mod
MARKER_FILES += terminfo.marker
CLEANFILES += terminfo.marker

terminfo.marker: $(terminfo_module_SOURCES) $(nodist_terminfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += terminfo.module
MODULE_FILES += terminfo.module$(EXEEXT)
terminfo_module_SOURCES  = term/terminfo.c term/tparm.c  ## platform sources
nodist_terminfo_module_SOURCES  =  ## platform nodist sources
terminfo_module_LDADD  = 
terminfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
terminfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
terminfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
terminfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_terminfo_module_SOURCES)
CLEANFILES += $(nodist_terminfo_module_SOURCES)
MOD_FILES += terminfo.mod
MARKER_FILES += terminfo.marker
CLEANFILES += terminfo.marker

terminfo.marker: $(terminfo_module_SOURCES) $(nodist_terminfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(terminfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += usb_keyboard.module
MODULE_FILES += usb_keyboard.module$(EXEEXT)
usb_keyboard_module_SOURCES  = term/usb_keyboard.c  ## platform sources
nodist_usb_keyboard_module_SOURCES  =  ## platform nodist sources
usb_keyboard_module_LDADD  = 
usb_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_keyboard_module_SOURCES)
CLEANFILES += $(nodist_usb_keyboard_module_SOURCES)
MOD_FILES += usb_keyboard.mod
MARKER_FILES += usb_keyboard.marker
CLEANFILES += usb_keyboard.marker

usb_keyboard.marker: $(usb_keyboard_module_SOURCES) $(nodist_usb_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += usb_keyboard.module
MODULE_FILES += usb_keyboard.module$(EXEEXT)
usb_keyboard_module_SOURCES  = term/usb_keyboard.c  ## platform sources
nodist_usb_keyboard_module_SOURCES  =  ## platform nodist sources
usb_keyboard_module_LDADD  = 
usb_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_keyboard_module_SOURCES)
CLEANFILES += $(nodist_usb_keyboard_module_SOURCES)
MOD_FILES += usb_keyboard.mod
MARKER_FILES += usb_keyboard.marker
CLEANFILES += usb_keyboard.marker

usb_keyboard.marker: $(usb_keyboard_module_SOURCES) $(nodist_usb_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += usb_keyboard.module
MODULE_FILES += usb_keyboard.module$(EXEEXT)
usb_keyboard_module_SOURCES  = term/usb_keyboard.c  ## platform sources
nodist_usb_keyboard_module_SOURCES  =  ## platform nodist sources
usb_keyboard_module_LDADD  = 
usb_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_keyboard_module_SOURCES)
CLEANFILES += $(nodist_usb_keyboard_module_SOURCES)
MOD_FILES += usb_keyboard.mod
MARKER_FILES += usb_keyboard.marker
CLEANFILES += usb_keyboard.marker

usb_keyboard.marker: $(usb_keyboard_module_SOURCES) $(nodist_usb_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += usb_keyboard.module
MODULE_FILES += usb_keyboard.module$(EXEEXT)
usb_keyboard_module_SOURCES  = term/usb_keyboard.c  ## platform sources
nodist_usb_keyboard_module_SOURCES  =  ## platform nodist sources
usb_keyboard_module_LDADD  = 
usb_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_keyboard_module_SOURCES)
CLEANFILES += $(nodist_usb_keyboard_module_SOURCES)
MOD_FILES += usb_keyboard.mod
MARKER_FILES += usb_keyboard.marker
CLEANFILES += usb_keyboard.marker

usb_keyboard.marker: $(usb_keyboard_module_SOURCES) $(nodist_usb_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += usb_keyboard.module
MODULE_FILES += usb_keyboard.module$(EXEEXT)
usb_keyboard_module_SOURCES  = term/usb_keyboard.c  ## platform sources
nodist_usb_keyboard_module_SOURCES  =  ## platform nodist sources
usb_keyboard_module_LDADD  = 
usb_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_keyboard_module_SOURCES)
CLEANFILES += $(nodist_usb_keyboard_module_SOURCES)
MOD_FILES += usb_keyboard.mod
MARKER_FILES += usb_keyboard.marker
CLEANFILES += usb_keyboard.marker

usb_keyboard.marker: $(usb_keyboard_module_SOURCES) $(nodist_usb_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += usb_keyboard.module
MODULE_FILES += usb_keyboard.module$(EXEEXT)
usb_keyboard_module_SOURCES  = term/usb_keyboard.c  ## platform sources
nodist_usb_keyboard_module_SOURCES  =  ## platform nodist sources
usb_keyboard_module_LDADD  = 
usb_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_keyboard_module_SOURCES)
CLEANFILES += $(nodist_usb_keyboard_module_SOURCES)
MOD_FILES += usb_keyboard.mod
MARKER_FILES += usb_keyboard.marker
CLEANFILES += usb_keyboard.marker

usb_keyboard.marker: $(usb_keyboard_module_SOURCES) $(nodist_usb_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += usb_keyboard.module
MODULE_FILES += usb_keyboard.module$(EXEEXT)
usb_keyboard_module_SOURCES  = term/usb_keyboard.c  ## platform sources
nodist_usb_keyboard_module_SOURCES  =  ## platform nodist sources
usb_keyboard_module_LDADD  = 
usb_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_keyboard_module_SOURCES)
CLEANFILES += $(nodist_usb_keyboard_module_SOURCES)
MOD_FILES += usb_keyboard.mod
MARKER_FILES += usb_keyboard.marker
CLEANFILES += usb_keyboard.marker

usb_keyboard.marker: $(usb_keyboard_module_SOURCES) $(nodist_usb_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += usb_keyboard.module
MODULE_FILES += usb_keyboard.module$(EXEEXT)
usb_keyboard_module_SOURCES  = term/usb_keyboard.c  ## platform sources
nodist_usb_keyboard_module_SOURCES  =  ## platform nodist sources
usb_keyboard_module_LDADD  = 
usb_keyboard_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
usb_keyboard_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
usb_keyboard_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
usb_keyboard_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_usb_keyboard_module_SOURCES)
CLEANFILES += $(nodist_usb_keyboard_module_SOURCES)
MOD_FILES += usb_keyboard.mod
MARKER_FILES += usb_keyboard.marker
CLEANFILES += usb_keyboard.marker

usb_keyboard.marker: $(usb_keyboard_module_SOURCES) $(nodist_usb_keyboard_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(usb_keyboard_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += vga.module
MODULE_FILES += vga.module$(EXEEXT)
vga_module_SOURCES  = video/i386/pc/vga.c  ## platform sources
nodist_vga_module_SOURCES  =  ## platform nodist sources
vga_module_LDADD  = 
vga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
vga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
vga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
vga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_vga_module_SOURCES)
CLEANFILES += $(nodist_vga_module_SOURCES)
MOD_FILES += vga.mod
MARKER_FILES += vga.marker
CLEANFILES += vga.marker

vga.marker: $(vga_module_SOURCES) $(nodist_vga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(vga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += vga.module
MODULE_FILES += vga.module$(EXEEXT)
vga_module_SOURCES  = video/i386/pc/vga.c  ## platform sources
nodist_vga_module_SOURCES  =  ## platform nodist sources
vga_module_LDADD  = 
vga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
vga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
vga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
vga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_vga_module_SOURCES)
CLEANFILES += $(nodist_vga_module_SOURCES)
MOD_FILES += vga.mod
MARKER_FILES += vga.marker
CLEANFILES += vga.marker

vga.marker: $(vga_module_SOURCES) $(nodist_vga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(vga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += vga.module
MODULE_FILES += vga.module$(EXEEXT)
vga_module_SOURCES  = video/i386/pc/vga.c  ## platform sources
nodist_vga_module_SOURCES  =  ## platform nodist sources
vga_module_LDADD  = 
vga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
vga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
vga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
vga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_vga_module_SOURCES)
CLEANFILES += $(nodist_vga_module_SOURCES)
MOD_FILES += vga.mod
MARKER_FILES += vga.marker
CLEANFILES += vga.marker

vga.marker: $(vga_module_SOURCES) $(nodist_vga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(vga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += vga_text.module
MODULE_FILES += vga_text.module$(EXEEXT)
vga_text_module_SOURCES  = term/i386/pc/vga_text.c term/i386/vga_common.c  ## platform sources
nodist_vga_text_module_SOURCES  =  ## platform nodist sources
vga_text_module_LDADD  = 
vga_text_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
vga_text_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
vga_text_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
vga_text_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_vga_text_module_SOURCES)
CLEANFILES += $(nodist_vga_text_module_SOURCES)
MOD_FILES += vga_text.mod
MARKER_FILES += vga_text.marker
CLEANFILES += vga_text.marker

vga_text.marker: $(vga_text_module_SOURCES) $(nodist_vga_text_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(vga_text_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += video_cirrus.module
MODULE_FILES += video_cirrus.module$(EXEEXT)
video_cirrus_module_SOURCES  = video/cirrus.c  ## platform sources
nodist_video_cirrus_module_SOURCES  =  ## platform nodist sources
video_cirrus_module_LDADD  = 
video_cirrus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_cirrus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_cirrus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_cirrus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_cirrus_module_SOURCES)
CLEANFILES += $(nodist_video_cirrus_module_SOURCES)
MOD_FILES += video_cirrus.mod
MARKER_FILES += video_cirrus.marker
CLEANFILES += video_cirrus.marker

video_cirrus.marker: $(video_cirrus_module_SOURCES) $(nodist_video_cirrus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_cirrus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += video_cirrus.module
MODULE_FILES += video_cirrus.module$(EXEEXT)
video_cirrus_module_SOURCES  = video/cirrus.c  ## platform sources
nodist_video_cirrus_module_SOURCES  =  ## platform nodist sources
video_cirrus_module_LDADD  = 
video_cirrus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_cirrus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_cirrus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_cirrus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_cirrus_module_SOURCES)
CLEANFILES += $(nodist_video_cirrus_module_SOURCES)
MOD_FILES += video_cirrus.mod
MARKER_FILES += video_cirrus.marker
CLEANFILES += video_cirrus.marker

video_cirrus.marker: $(video_cirrus_module_SOURCES) $(nodist_video_cirrus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_cirrus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += video_cirrus.module
MODULE_FILES += video_cirrus.module$(EXEEXT)
video_cirrus_module_SOURCES  = video/cirrus.c  ## platform sources
nodist_video_cirrus_module_SOURCES  =  ## platform nodist sources
video_cirrus_module_LDADD  = 
video_cirrus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_cirrus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_cirrus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_cirrus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_cirrus_module_SOURCES)
CLEANFILES += $(nodist_video_cirrus_module_SOURCES)
MOD_FILES += video_cirrus.mod
MARKER_FILES += video_cirrus.marker
CLEANFILES += video_cirrus.marker

video_cirrus.marker: $(video_cirrus_module_SOURCES) $(nodist_video_cirrus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_cirrus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += video_cirrus.module
MODULE_FILES += video_cirrus.module$(EXEEXT)
video_cirrus_module_SOURCES  = video/cirrus.c  ## platform sources
nodist_video_cirrus_module_SOURCES  =  ## platform nodist sources
video_cirrus_module_LDADD  = 
video_cirrus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_cirrus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_cirrus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_cirrus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_cirrus_module_SOURCES)
CLEANFILES += $(nodist_video_cirrus_module_SOURCES)
MOD_FILES += video_cirrus.mod
MARKER_FILES += video_cirrus.marker
CLEANFILES += video_cirrus.marker

video_cirrus.marker: $(video_cirrus_module_SOURCES) $(nodist_video_cirrus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_cirrus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += video_cirrus.module
MODULE_FILES += video_cirrus.module$(EXEEXT)
video_cirrus_module_SOURCES  = video/cirrus.c  ## platform sources
nodist_video_cirrus_module_SOURCES  =  ## platform nodist sources
video_cirrus_module_LDADD  = 
video_cirrus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_cirrus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_cirrus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_cirrus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_cirrus_module_SOURCES)
CLEANFILES += $(nodist_video_cirrus_module_SOURCES)
MOD_FILES += video_cirrus.mod
MARKER_FILES += video_cirrus.marker
CLEANFILES += video_cirrus.marker

video_cirrus.marker: $(video_cirrus_module_SOURCES) $(nodist_video_cirrus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_cirrus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += video_cirrus.module
MODULE_FILES += video_cirrus.module$(EXEEXT)
video_cirrus_module_SOURCES  = video/cirrus.c  ## platform sources
nodist_video_cirrus_module_SOURCES  =  ## platform nodist sources
video_cirrus_module_LDADD  = 
video_cirrus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_cirrus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_cirrus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_cirrus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_cirrus_module_SOURCES)
CLEANFILES += $(nodist_video_cirrus_module_SOURCES)
MOD_FILES += video_cirrus.mod
MARKER_FILES += video_cirrus.marker
CLEANFILES += video_cirrus.marker

video_cirrus.marker: $(video_cirrus_module_SOURCES) $(nodist_video_cirrus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_cirrus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += video_cirrus.module
MODULE_FILES += video_cirrus.module$(EXEEXT)
video_cirrus_module_SOURCES  = video/cirrus.c  ## platform sources
nodist_video_cirrus_module_SOURCES  =  ## platform nodist sources
video_cirrus_module_LDADD  = 
video_cirrus_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_cirrus_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_cirrus_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_cirrus_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_cirrus_module_SOURCES)
CLEANFILES += $(nodist_video_cirrus_module_SOURCES)
MOD_FILES += video_cirrus.mod
MARKER_FILES += video_cirrus.marker
CLEANFILES += video_cirrus.marker

video_cirrus.marker: $(video_cirrus_module_SOURCES) $(nodist_video_cirrus_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_cirrus_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += video_bochs.module
MODULE_FILES += video_bochs.module$(EXEEXT)
video_bochs_module_SOURCES  = video/bochs.c  ## platform sources
nodist_video_bochs_module_SOURCES  =  ## platform nodist sources
video_bochs_module_LDADD  = 
video_bochs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_bochs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_bochs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_bochs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_bochs_module_SOURCES)
CLEANFILES += $(nodist_video_bochs_module_SOURCES)
MOD_FILES += video_bochs.mod
MARKER_FILES += video_bochs.marker
CLEANFILES += video_bochs.marker

video_bochs.marker: $(video_bochs_module_SOURCES) $(nodist_video_bochs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_bochs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += video_bochs.module
MODULE_FILES += video_bochs.module$(EXEEXT)
video_bochs_module_SOURCES  = video/bochs.c  ## platform sources
nodist_video_bochs_module_SOURCES  =  ## platform nodist sources
video_bochs_module_LDADD  = 
video_bochs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_bochs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_bochs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_bochs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_bochs_module_SOURCES)
CLEANFILES += $(nodist_video_bochs_module_SOURCES)
MOD_FILES += video_bochs.mod
MARKER_FILES += video_bochs.marker
CLEANFILES += video_bochs.marker

video_bochs.marker: $(video_bochs_module_SOURCES) $(nodist_video_bochs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_bochs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += video_bochs.module
MODULE_FILES += video_bochs.module$(EXEEXT)
video_bochs_module_SOURCES  = video/bochs.c  ## platform sources
nodist_video_bochs_module_SOURCES  =  ## platform nodist sources
video_bochs_module_LDADD  = 
video_bochs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_bochs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_bochs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_bochs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_bochs_module_SOURCES)
CLEANFILES += $(nodist_video_bochs_module_SOURCES)
MOD_FILES += video_bochs.mod
MARKER_FILES += video_bochs.marker
CLEANFILES += video_bochs.marker

video_bochs.marker: $(video_bochs_module_SOURCES) $(nodist_video_bochs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_bochs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += video_bochs.module
MODULE_FILES += video_bochs.module$(EXEEXT)
video_bochs_module_SOURCES  = video/bochs.c  ## platform sources
nodist_video_bochs_module_SOURCES  =  ## platform nodist sources
video_bochs_module_LDADD  = 
video_bochs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_bochs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_bochs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_bochs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_bochs_module_SOURCES)
CLEANFILES += $(nodist_video_bochs_module_SOURCES)
MOD_FILES += video_bochs.mod
MARKER_FILES += video_bochs.marker
CLEANFILES += video_bochs.marker

video_bochs.marker: $(video_bochs_module_SOURCES) $(nodist_video_bochs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_bochs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += video_bochs.module
MODULE_FILES += video_bochs.module$(EXEEXT)
video_bochs_module_SOURCES  = video/bochs.c  ## platform sources
nodist_video_bochs_module_SOURCES  =  ## platform nodist sources
video_bochs_module_LDADD  = 
video_bochs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_bochs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_bochs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_bochs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_bochs_module_SOURCES)
CLEANFILES += $(nodist_video_bochs_module_SOURCES)
MOD_FILES += video_bochs.mod
MARKER_FILES += video_bochs.marker
CLEANFILES += video_bochs.marker

video_bochs.marker: $(video_bochs_module_SOURCES) $(nodist_video_bochs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_bochs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += video_bochs.module
MODULE_FILES += video_bochs.module$(EXEEXT)
video_bochs_module_SOURCES  = video/bochs.c  ## platform sources
nodist_video_bochs_module_SOURCES  =  ## platform nodist sources
video_bochs_module_LDADD  = 
video_bochs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_bochs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_bochs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_bochs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_bochs_module_SOURCES)
CLEANFILES += $(nodist_video_bochs_module_SOURCES)
MOD_FILES += video_bochs.mod
MARKER_FILES += video_bochs.marker
CLEANFILES += video_bochs.marker

video_bochs.marker: $(video_bochs_module_SOURCES) $(nodist_video_bochs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_bochs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += video_bochs.module
MODULE_FILES += video_bochs.module$(EXEEXT)
video_bochs_module_SOURCES  = video/bochs.c  ## platform sources
nodist_video_bochs_module_SOURCES  =  ## platform nodist sources
video_bochs_module_LDADD  = 
video_bochs_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_bochs_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_bochs_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_bochs_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_bochs_module_SOURCES)
CLEANFILES += $(nodist_video_bochs_module_SOURCES)
MOD_FILES += video_bochs.mod
MARKER_FILES += video_bochs.marker
CLEANFILES += video_bochs.marker

video_bochs.marker: $(video_bochs_module_SOURCES) $(nodist_video_bochs_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_bochs_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += functional_test.module
MODULE_FILES += functional_test.module$(EXEEXT)
functional_test_module_SOURCES  = tests/lib/functional_test.c tests/lib/test.c  ## platform sources
nodist_functional_test_module_SOURCES  =  ## platform nodist sources
functional_test_module_LDADD  = 
functional_test_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
functional_test_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
functional_test_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
functional_test_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_functional_test_module_SOURCES)
CLEANFILES += $(nodist_functional_test_module_SOURCES)
MOD_FILES += functional_test.mod
MARKER_FILES += functional_test.marker
CLEANFILES += functional_test.marker

functional_test.marker: $(functional_test_module_SOURCES) $(nodist_functional_test_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(functional_test_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += exfctest.module
MODULE_FILES += exfctest.module$(EXEEXT)
exfctest_module_SOURCES  = tests/example_functional_test.c  ## platform sources
nodist_exfctest_module_SOURCES  =  ## platform nodist sources
exfctest_module_LDADD  = 
exfctest_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
exfctest_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
exfctest_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
exfctest_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_exfctest_module_SOURCES)
CLEANFILES += $(nodist_exfctest_module_SOURCES)
MOD_FILES += exfctest.mod
MARKER_FILES += exfctest.marker
CLEANFILES += exfctest.marker

exfctest.marker: $(exfctest_module_SOURCES) $(nodist_exfctest_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(exfctest_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += bitmap.module
MODULE_FILES += bitmap.module$(EXEEXT)
bitmap_module_SOURCES  = video/bitmap.c  ## platform sources
nodist_bitmap_module_SOURCES  =  ## platform nodist sources
bitmap_module_LDADD  = 
bitmap_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_module_SOURCES)
CLEANFILES += $(nodist_bitmap_module_SOURCES)
MOD_FILES += bitmap.mod
MARKER_FILES += bitmap.marker
CLEANFILES += bitmap.marker

bitmap.marker: $(bitmap_module_SOURCES) $(nodist_bitmap_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += bitmap_scale.module
MODULE_FILES += bitmap_scale.module$(EXEEXT)
bitmap_scale_module_SOURCES  = video/bitmap_scale.c  ## platform sources
nodist_bitmap_scale_module_SOURCES  =  ## platform nodist sources
bitmap_scale_module_LDADD  = 
bitmap_scale_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
bitmap_scale_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
bitmap_scale_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
bitmap_scale_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_bitmap_scale_module_SOURCES)
CLEANFILES += $(nodist_bitmap_scale_module_SOURCES)
MOD_FILES += bitmap_scale.mod
MARKER_FILES += bitmap_scale.marker
CLEANFILES += bitmap_scale.marker

bitmap_scale.marker: $(bitmap_scale_module_SOURCES) $(nodist_bitmap_scale_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bitmap_scale_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += efi_gop.module
MODULE_FILES += efi_gop.module$(EXEEXT)
efi_gop_module_SOURCES  = video/efi_gop.c  ## platform sources
nodist_efi_gop_module_SOURCES  =  ## platform nodist sources
efi_gop_module_LDADD  = 
efi_gop_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efi_gop_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efi_gop_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efi_gop_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_efi_gop_module_SOURCES)
CLEANFILES += $(nodist_efi_gop_module_SOURCES)
MOD_FILES += efi_gop.mod
MARKER_FILES += efi_gop.marker
CLEANFILES += efi_gop.marker

efi_gop.marker: $(efi_gop_module_SOURCES) $(nodist_efi_gop_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efi_gop_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += efi_gop.module
MODULE_FILES += efi_gop.module$(EXEEXT)
efi_gop_module_SOURCES  = video/efi_gop.c  ## platform sources
nodist_efi_gop_module_SOURCES  =  ## platform nodist sources
efi_gop_module_LDADD  = 
efi_gop_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efi_gop_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efi_gop_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efi_gop_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_efi_gop_module_SOURCES)
CLEANFILES += $(nodist_efi_gop_module_SOURCES)
MOD_FILES += efi_gop.mod
MARKER_FILES += efi_gop.marker
CLEANFILES += efi_gop.marker

efi_gop.marker: $(efi_gop_module_SOURCES) $(nodist_efi_gop_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efi_gop_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += efi_gop.module
MODULE_FILES += efi_gop.module$(EXEEXT)
efi_gop_module_SOURCES  = video/efi_gop.c  ## platform sources
nodist_efi_gop_module_SOURCES  =  ## platform nodist sources
efi_gop_module_LDADD  = 
efi_gop_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efi_gop_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efi_gop_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efi_gop_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_efi_gop_module_SOURCES)
CLEANFILES += $(nodist_efi_gop_module_SOURCES)
MOD_FILES += efi_gop.mod
MARKER_FILES += efi_gop.marker
CLEANFILES += efi_gop.marker

efi_gop.marker: $(efi_gop_module_SOURCES) $(nodist_efi_gop_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efi_gop_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += efi_uga.module
MODULE_FILES += efi_uga.module$(EXEEXT)
efi_uga_module_SOURCES  = video/efi_uga.c  ## platform sources
nodist_efi_uga_module_SOURCES  =  ## platform nodist sources
efi_uga_module_LDADD  = 
efi_uga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efi_uga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efi_uga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efi_uga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_efi_uga_module_SOURCES)
CLEANFILES += $(nodist_efi_uga_module_SOURCES)
MOD_FILES += efi_uga.mod
MARKER_FILES += efi_uga.marker
CLEANFILES += efi_uga.marker

efi_uga.marker: $(efi_uga_module_SOURCES) $(nodist_efi_uga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efi_uga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += efi_uga.module
MODULE_FILES += efi_uga.module$(EXEEXT)
efi_uga_module_SOURCES  = video/efi_uga.c  ## platform sources
nodist_efi_uga_module_SOURCES  =  ## platform nodist sources
efi_uga_module_LDADD  = 
efi_uga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efi_uga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efi_uga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efi_uga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_efi_uga_module_SOURCES)
CLEANFILES += $(nodist_efi_uga_module_SOURCES)
MOD_FILES += efi_uga.mod
MARKER_FILES += efi_uga.marker
CLEANFILES += efi_uga.marker

efi_uga.marker: $(efi_uga_module_SOURCES) $(nodist_efi_uga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efi_uga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += jpeg.module
MODULE_FILES += jpeg.module$(EXEEXT)
jpeg_module_SOURCES  = video/readers/jpeg.c  ## platform sources
nodist_jpeg_module_SOURCES  =  ## platform nodist sources
jpeg_module_LDADD  = 
jpeg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
jpeg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
jpeg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
jpeg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_jpeg_module_SOURCES)
CLEANFILES += $(nodist_jpeg_module_SOURCES)
MOD_FILES += jpeg.mod
MARKER_FILES += jpeg.marker
CLEANFILES += jpeg.marker

jpeg.marker: $(jpeg_module_SOURCES) $(nodist_jpeg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(jpeg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += png.module
MODULE_FILES += png.module$(EXEEXT)
png_module_SOURCES  = video/readers/png.c  ## platform sources
nodist_png_module_SOURCES  =  ## platform nodist sources
png_module_LDADD  = 
png_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
png_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
png_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
png_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_png_module_SOURCES)
CLEANFILES += $(nodist_png_module_SOURCES)
MOD_FILES += png.mod
MARKER_FILES += png.marker
CLEANFILES += png.marker

png.marker: $(png_module_SOURCES) $(nodist_png_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(png_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += tga.module
MODULE_FILES += tga.module$(EXEEXT)
tga_module_SOURCES  = video/readers/tga.c  ## platform sources
nodist_tga_module_SOURCES  =  ## platform nodist sources
tga_module_LDADD  = 
tga_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tga_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tga_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tga_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tga_module_SOURCES)
CLEANFILES += $(nodist_tga_module_SOURCES)
MOD_FILES += tga.mod
MARKER_FILES += tga.marker
CLEANFILES += tga.marker

tga.marker: $(tga_module_SOURCES) $(nodist_tga_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tga_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += vbe.module
MODULE_FILES += vbe.module$(EXEEXT)
vbe_module_SOURCES  = video/i386/pc/vbe.c  ## platform sources
nodist_vbe_module_SOURCES  =  ## platform nodist sources
vbe_module_LDADD  = 
vbe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
vbe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
vbe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
vbe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_vbe_module_SOURCES)
CLEANFILES += $(nodist_vbe_module_SOURCES)
MOD_FILES += vbe.mod
MARKER_FILES += vbe.marker
CLEANFILES += vbe.marker

vbe.marker: $(vbe_module_SOURCES) $(nodist_vbe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(vbe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += vbe.module
MODULE_FILES += vbe.module$(EXEEXT)
vbe_module_SOURCES  = video/i386/pc/vbe.c  ## platform sources
nodist_vbe_module_SOURCES  =  ## platform nodist sources
vbe_module_LDADD  = 
vbe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
vbe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
vbe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
vbe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_vbe_module_SOURCES)
CLEANFILES += $(nodist_vbe_module_SOURCES)
MOD_FILES += vbe.mod
MARKER_FILES += vbe.marker
CLEANFILES += vbe.marker

vbe.marker: $(vbe_module_SOURCES) $(nodist_vbe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(vbe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += vbe.module
MODULE_FILES += vbe.module$(EXEEXT)
vbe_module_SOURCES  = video/i386/pc/vbe.c  ## platform sources
nodist_vbe_module_SOURCES  =  ## platform nodist sources
vbe_module_LDADD  = 
vbe_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
vbe_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
vbe_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
vbe_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_vbe_module_SOURCES)
CLEANFILES += $(nodist_vbe_module_SOURCES)
MOD_FILES += vbe.mod
MARKER_FILES += vbe.marker
CLEANFILES += vbe.marker

vbe.marker: $(vbe_module_SOURCES) $(nodist_vbe_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(vbe_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += video_fb.module
MODULE_FILES += video_fb.module$(EXEEXT)
video_fb_module_SOURCES  = video/fb/video_fb.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c  ## platform sources
nodist_video_fb_module_SOURCES  =  ## platform nodist sources
video_fb_module_LDADD  = 
video_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_fb_module_SOURCES)
CLEANFILES += $(nodist_video_fb_module_SOURCES)
MOD_FILES += video_fb.mod
MARKER_FILES += video_fb.marker
CLEANFILES += video_fb.marker

video_fb.marker: $(video_fb_module_SOURCES) $(nodist_video_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += video.module
MODULE_FILES += video.module$(EXEEXT)
video_module_SOURCES  = video/video.c video/colors.c  ## platform sources
nodist_video_module_SOURCES  =  ## platform nodist sources
video_module_LDADD  = 
video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_video_module_SOURCES)
CLEANFILES += $(nodist_video_module_SOURCES)
MOD_FILES += video.mod
MARKER_FILES += video.marker
CLEANFILES += video.marker

video.marker: $(video_module_SOURCES) $(nodist_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ieee1275_fb.module
MODULE_FILES += ieee1275_fb.module$(EXEEXT)
ieee1275_fb_module_SOURCES  = video/ieee1275.c  ## platform sources
nodist_ieee1275_fb_module_SOURCES  =  ## platform nodist sources
ieee1275_fb_module_LDADD  = 
ieee1275_fb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ieee1275_fb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ieee1275_fb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ieee1275_fb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ieee1275_fb_module_SOURCES)
CLEANFILES += $(nodist_ieee1275_fb_module_SOURCES)
MOD_FILES += ieee1275_fb.mod
MARKER_FILES += ieee1275_fb.marker
CLEANFILES += ieee1275_fb.marker

ieee1275_fb.marker: $(ieee1275_fb_module_SOURCES) $(nodist_ieee1275_fb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ieee1275_fb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
if COND_GRUB_EMU_SDL
platform_PROGRAMS += sdl.module
MODULE_FILES += sdl.module$(EXEEXT)
sdl_module_SOURCES  = video/emu/sdl.c  ## platform sources
nodist_sdl_module_SOURCES  =  ## platform nodist sources
sdl_module_LDADD  = 
sdl_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
sdl_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
sdl_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
sdl_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_sdl_module_SOURCES)
CLEANFILES += $(nodist_sdl_module_SOURCES)
MOD_FILES += sdl.mod
MARKER_FILES += sdl.marker
CLEANFILES += sdl.marker

sdl.marker: $(sdl_module_SOURCES) $(nodist_sdl_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sdl_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_GRUB_EMU_SDL
endif

if COND_emu
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += datehook.module
MODULE_FILES += datehook.module$(EXEEXT)
datehook_module_SOURCES  = hook/datehook.c  ## platform sources
nodist_datehook_module_SOURCES  =  ## platform nodist sources
datehook_module_LDADD  = 
datehook_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
datehook_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
datehook_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
datehook_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_datehook_module_SOURCES)
CLEANFILES += $(nodist_datehook_module_SOURCES)
MOD_FILES += datehook.mod
MARKER_FILES += datehook.marker
CLEANFILES += datehook.marker

datehook.marker: $(datehook_module_SOURCES) $(nodist_datehook_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(datehook_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += net.module
MODULE_FILES += net.module$(EXEEXT)
net_module_SOURCES  = net/net.c net/dns.c net/bootp.c net/ip.c net/udp.c net/tcp.c net/icmp.c net/icmp6.c net/ethernet.c net/arp.c net/netbuff.c  ## platform sources
nodist_net_module_SOURCES  =  ## platform nodist sources
net_module_LDADD  = 
net_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
net_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
net_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
net_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_net_module_SOURCES)
CLEANFILES += $(nodist_net_module_SOURCES)
MOD_FILES += net.mod
MARKER_FILES += net.marker
CLEANFILES += net.marker

net.marker: $(net_module_SOURCES) $(nodist_net_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(net_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += tftp.module
MODULE_FILES += tftp.module$(EXEEXT)
tftp_module_SOURCES  = net/tftp.c  ## platform sources
nodist_tftp_module_SOURCES  =  ## platform nodist sources
tftp_module_LDADD  = 
tftp_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
tftp_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
tftp_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
tftp_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_tftp_module_SOURCES)
CLEANFILES += $(nodist_tftp_module_SOURCES)
MOD_FILES += tftp.mod
MARKER_FILES += tftp.marker
CLEANFILES += tftp.marker

tftp.marker: $(tftp_module_SOURCES) $(nodist_tftp_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tftp_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += http.module
MODULE_FILES += http.module$(EXEEXT)
http_module_SOURCES  = net/http.c  ## platform sources
nodist_http_module_SOURCES  =  ## platform nodist sources
http_module_LDADD  = 
http_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
http_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
http_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
http_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_http_module_SOURCES)
CLEANFILES += $(nodist_http_module_SOURCES)
MOD_FILES += http.mod
MARKER_FILES += http.marker
CLEANFILES += http.marker

http.marker: $(http_module_SOURCES) $(nodist_http_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(http_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += ofnet.module
MODULE_FILES += ofnet.module$(EXEEXT)
ofnet_module_SOURCES  = net/drivers/ieee1275/ofnet.c  ## platform sources
nodist_ofnet_module_SOURCES  =  ## platform nodist sources
ofnet_module_LDADD  = 
ofnet_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ofnet_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ofnet_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ofnet_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ofnet_module_SOURCES)
CLEANFILES += $(nodist_ofnet_module_SOURCES)
MOD_FILES += ofnet.mod
MARKER_FILES += ofnet.marker
CLEANFILES += ofnet.marker

ofnet.marker: $(ofnet_module_SOURCES) $(nodist_ofnet_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ofnet_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += ofnet.module
MODULE_FILES += ofnet.module$(EXEEXT)
ofnet_module_SOURCES  = net/drivers/ieee1275/ofnet.c  ## platform sources
nodist_ofnet_module_SOURCES  =  ## platform nodist sources
ofnet_module_LDADD  = 
ofnet_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ofnet_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ofnet_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ofnet_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ofnet_module_SOURCES)
CLEANFILES += $(nodist_ofnet_module_SOURCES)
MOD_FILES += ofnet.mod
MARKER_FILES += ofnet.marker
CLEANFILES += ofnet.marker

ofnet.marker: $(ofnet_module_SOURCES) $(nodist_ofnet_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ofnet_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += ofnet.module
MODULE_FILES += ofnet.module$(EXEEXT)
ofnet_module_SOURCES  = net/drivers/ieee1275/ofnet.c  ## platform sources
nodist_ofnet_module_SOURCES  =  ## platform nodist sources
ofnet_module_LDADD  = 
ofnet_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
ofnet_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
ofnet_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
ofnet_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_ofnet_module_SOURCES)
CLEANFILES += $(nodist_ofnet_module_SOURCES)
MOD_FILES += ofnet.mod
MARKER_FILES += ofnet.marker
CLEANFILES += ofnet.marker

ofnet.marker: $(ofnet_module_SOURCES) $(nodist_ofnet_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ofnet_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += efinet.module
MODULE_FILES += efinet.module$(EXEEXT)
efinet_module_SOURCES  = net/drivers/efi/efinet.c  ## platform sources
nodist_efinet_module_SOURCES  =  ## platform nodist sources
efinet_module_LDADD  = 
efinet_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efinet_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efinet_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efinet_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_efinet_module_SOURCES)
CLEANFILES += $(nodist_efinet_module_SOURCES)
MOD_FILES += efinet.mod
MARKER_FILES += efinet.marker
CLEANFILES += efinet.marker

efinet.marker: $(efinet_module_SOURCES) $(nodist_efinet_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efinet_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += efinet.module
MODULE_FILES += efinet.module$(EXEEXT)
efinet_module_SOURCES  = net/drivers/efi/efinet.c  ## platform sources
nodist_efinet_module_SOURCES  =  ## platform nodist sources
efinet_module_LDADD  = 
efinet_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efinet_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efinet_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efinet_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_efinet_module_SOURCES)
CLEANFILES += $(nodist_efinet_module_SOURCES)
MOD_FILES += efinet.mod
MARKER_FILES += efinet.marker
CLEANFILES += efinet.marker

efinet.marker: $(efinet_module_SOURCES) $(nodist_efinet_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efinet_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += efinet.module
MODULE_FILES += efinet.module$(EXEEXT)
efinet_module_SOURCES  = net/drivers/efi/efinet.c  ## platform sources
nodist_efinet_module_SOURCES  =  ## platform nodist sources
efinet_module_LDADD  = 
efinet_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
efinet_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
efinet_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
efinet_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_efinet_module_SOURCES)
CLEANFILES += $(nodist_efinet_module_SOURCES)
MOD_FILES += efinet.mod
MARKER_FILES += efinet.marker
CLEANFILES += efinet.marker

efinet.marker: $(efinet_module_SOURCES) $(nodist_efinet_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(efinet_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += emunet.module
MODULE_FILES += emunet.module$(EXEEXT)
emunet_module_SOURCES  = net/drivers/emu/emunet.c  ## platform sources
nodist_emunet_module_SOURCES  =  ## platform nodist sources
emunet_module_LDADD  = 
emunet_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
emunet_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
emunet_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
emunet_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_emunet_module_SOURCES)
CLEANFILES += $(nodist_emunet_module_SOURCES)
MOD_FILES += emunet.mod
MARKER_FILES += emunet.marker
CLEANFILES += emunet.marker

emunet.marker: $(emunet_module_SOURCES) $(nodist_emunet_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(emunet_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += legacycfg.module
MODULE_FILES += legacycfg.module$(EXEEXT)
legacycfg_module_SOURCES  = lib/i386/pc/vesa_modes_table.c commands/legacycfg.c lib/legacy_parse.c  ## platform sources
nodist_legacycfg_module_SOURCES  =  ## platform nodist sources
legacycfg_module_LDADD  = 
legacycfg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
legacycfg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
legacycfg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
legacycfg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_legacycfg_module_SOURCES)
CLEANFILES += $(nodist_legacycfg_module_SOURCES)
MOD_FILES += legacycfg.mod
MARKER_FILES += legacycfg.marker
CLEANFILES += legacycfg.marker

legacycfg.marker: $(legacycfg_module_SOURCES) $(nodist_legacycfg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(legacycfg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += legacycfg.module
MODULE_FILES += legacycfg.module$(EXEEXT)
legacycfg_module_SOURCES  = commands/legacycfg.c lib/legacy_parse.c  ## platform sources
nodist_legacycfg_module_SOURCES  =  ## platform nodist sources
legacycfg_module_LDADD  = 
legacycfg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
legacycfg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
legacycfg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
legacycfg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_legacycfg_module_SOURCES)
CLEANFILES += $(nodist_legacycfg_module_SOURCES)
MOD_FILES += legacycfg.mod
MARKER_FILES += legacycfg.marker
CLEANFILES += legacycfg.marker

legacycfg.marker: $(legacycfg_module_SOURCES) $(nodist_legacycfg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(legacycfg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += test_blockarg.module
MODULE_FILES += test_blockarg.module$(EXEEXT)
test_blockarg_module_SOURCES  = tests/test_blockarg.c  ## platform sources
nodist_test_blockarg_module_SOURCES  =  ## platform nodist sources
test_blockarg_module_LDADD  = 
test_blockarg_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
test_blockarg_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
test_blockarg_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
test_blockarg_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_test_blockarg_module_SOURCES)
CLEANFILES += $(nodist_test_blockarg_module_SOURCES)
MOD_FILES += test_blockarg.mod
MARKER_FILES += test_blockarg.marker
CLEANFILES += test_blockarg.marker

test_blockarg.marker: $(test_blockarg_module_SOURCES) $(nodist_test_blockarg_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_blockarg_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += xzio.module
MODULE_FILES += xzio.module$(EXEEXT)
xzio_module_SOURCES  = io/xzio.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c  ## platform sources
nodist_xzio_module_SOURCES  =  ## platform nodist sources
xzio_module_LDADD  = 
xzio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) -Wno-unreachable-code 
xzio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
xzio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed 
xzio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xzio_module_SOURCES)
CLEANFILES += $(nodist_xzio_module_SOURCES)
MOD_FILES += xzio.mod
MARKER_FILES += xzio.marker
CLEANFILES += xzio.marker

xzio.marker: $(xzio_module_SOURCES) $(nodist_xzio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xzio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += lzopio.module
MODULE_FILES += lzopio.module$(EXEEXT)
lzopio_module_SOURCES  = io/lzopio.c lib/minilzo/minilzo.c  ## platform sources
nodist_lzopio_module_SOURCES  =  ## platform nodist sources
lzopio_module_LDADD  = 
lzopio_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_POSIX) -Wno-undef -Wno-redundant-decls -Wno-error 
lzopio_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lzopio_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/minilzo -DMINILZO_HAVE_CONFIG_H 
lzopio_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzopio_module_SOURCES)
CLEANFILES += $(nodist_lzopio_module_SOURCES)
MOD_FILES += lzopio.mod
MARKER_FILES += lzopio.marker
CLEANFILES += lzopio.marker

lzopio.marker: $(lzopio_module_SOURCES) $(nodist_lzopio_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lzopio_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += testload.module
MODULE_FILES += testload.module$(EXEEXT)
testload_module_SOURCES  = commands/testload.c  ## platform sources
nodist_testload_module_SOURCES  =  ## platform nodist sources
testload_module_LDADD  = 
testload_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
testload_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
testload_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
testload_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_testload_module_SOURCES)
CLEANFILES += $(nodist_testload_module_SOURCES)
MOD_FILES += testload.mod
MARKER_FILES += testload.marker
CLEANFILES += testload.marker

testload.marker: $(testload_module_SOURCES) $(nodist_testload_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testload_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += backtrace.module
MODULE_FILES += backtrace.module$(EXEEXT)
backtrace_module_SOURCES  = lib/i386/backtrace.c lib/backtrace.c  ## platform sources
nodist_backtrace_module_SOURCES  =  ## platform nodist sources
backtrace_module_LDADD  = 
backtrace_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
backtrace_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
backtrace_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
backtrace_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_backtrace_module_SOURCES)
CLEANFILES += $(nodist_backtrace_module_SOURCES)
MOD_FILES += backtrace.mod
MARKER_FILES += backtrace.marker
CLEANFILES += backtrace.marker

backtrace.marker: $(backtrace_module_SOURCES) $(nodist_backtrace_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(backtrace_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += backtrace.module
MODULE_FILES += backtrace.module$(EXEEXT)
backtrace_module_SOURCES  = lib/i386/backtrace.c lib/backtrace.c  ## platform sources
nodist_backtrace_module_SOURCES  =  ## platform nodist sources
backtrace_module_LDADD  = 
backtrace_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
backtrace_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
backtrace_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
backtrace_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_backtrace_module_SOURCES)
CLEANFILES += $(nodist_backtrace_module_SOURCES)
MOD_FILES += backtrace.mod
MARKER_FILES += backtrace.marker
CLEANFILES += backtrace.marker

backtrace.marker: $(backtrace_module_SOURCES) $(nodist_backtrace_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(backtrace_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += backtrace.module
MODULE_FILES += backtrace.module$(EXEEXT)
backtrace_module_SOURCES  = lib/i386/backtrace.c lib/backtrace.c  ## platform sources
nodist_backtrace_module_SOURCES  =  ## platform nodist sources
backtrace_module_LDADD  = 
backtrace_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
backtrace_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
backtrace_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
backtrace_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_backtrace_module_SOURCES)
CLEANFILES += $(nodist_backtrace_module_SOURCES)
MOD_FILES += backtrace.mod
MARKER_FILES += backtrace.marker
CLEANFILES += backtrace.marker

backtrace.marker: $(backtrace_module_SOURCES) $(nodist_backtrace_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(backtrace_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += backtrace.module
MODULE_FILES += backtrace.module$(EXEEXT)
backtrace_module_SOURCES  = lib/i386/backtrace.c lib/backtrace.c  ## platform sources
nodist_backtrace_module_SOURCES  =  ## platform nodist sources
backtrace_module_LDADD  = 
backtrace_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
backtrace_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
backtrace_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
backtrace_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_backtrace_module_SOURCES)
CLEANFILES += $(nodist_backtrace_module_SOURCES)
MOD_FILES += backtrace.mod
MARKER_FILES += backtrace.marker
CLEANFILES += backtrace.marker

backtrace.marker: $(backtrace_module_SOURCES) $(nodist_backtrace_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(backtrace_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += backtrace.module
MODULE_FILES += backtrace.module$(EXEEXT)
backtrace_module_SOURCES  = lib/i386/backtrace.c lib/backtrace.c  ## platform sources
nodist_backtrace_module_SOURCES  =  ## platform nodist sources
backtrace_module_LDADD  = 
backtrace_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
backtrace_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
backtrace_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
backtrace_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_backtrace_module_SOURCES)
CLEANFILES += $(nodist_backtrace_module_SOURCES)
MOD_FILES += backtrace.mod
MARKER_FILES += backtrace.marker
CLEANFILES += backtrace.marker

backtrace.marker: $(backtrace_module_SOURCES) $(nodist_backtrace_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(backtrace_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += backtrace.module
MODULE_FILES += backtrace.module$(EXEEXT)
backtrace_module_SOURCES  = lib/i386/backtrace.c lib/backtrace.c  ## platform sources
nodist_backtrace_module_SOURCES  =  ## platform nodist sources
backtrace_module_LDADD  = 
backtrace_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
backtrace_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
backtrace_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
backtrace_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_backtrace_module_SOURCES)
CLEANFILES += $(nodist_backtrace_module_SOURCES)
MOD_FILES += backtrace.mod
MARKER_FILES += backtrace.marker
CLEANFILES += backtrace.marker

backtrace.marker: $(backtrace_module_SOURCES) $(nodist_backtrace_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(backtrace_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += backtrace.module
MODULE_FILES += backtrace.module$(EXEEXT)
backtrace_module_SOURCES  = lib/i386/backtrace.c lib/backtrace.c  ## platform sources
nodist_backtrace_module_SOURCES  =  ## platform nodist sources
backtrace_module_LDADD  = 
backtrace_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
backtrace_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
backtrace_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
backtrace_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_backtrace_module_SOURCES)
CLEANFILES += $(nodist_backtrace_module_SOURCES)
MOD_FILES += backtrace.mod
MARKER_FILES += backtrace.marker
CLEANFILES += backtrace.marker

backtrace.marker: $(backtrace_module_SOURCES) $(nodist_backtrace_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(backtrace_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += lsapm.module
MODULE_FILES += lsapm.module$(EXEEXT)
lsapm_module_SOURCES  = commands/i386/pc/lsapm.c  ## platform sources
nodist_lsapm_module_SOURCES  =  ## platform nodist sources
lsapm_module_LDADD  = 
lsapm_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
lsapm_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
lsapm_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
lsapm_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lsapm_module_SOURCES)
CLEANFILES += $(nodist_lsapm_module_SOURCES)
MOD_FILES += lsapm.mod
MARKER_FILES += lsapm.marker
CLEANFILES += lsapm.marker

lsapm.marker: $(lsapm_module_SOURCES) $(nodist_lsapm_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lsapm_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += keylayouts.module
MODULE_FILES += keylayouts.module$(EXEEXT)
keylayouts_module_SOURCES  = commands/keylayouts.c  ## platform sources
nodist_keylayouts_module_SOURCES  =  ## platform nodist sources
keylayouts_module_LDADD  = 
keylayouts_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
keylayouts_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
keylayouts_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
keylayouts_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_keylayouts_module_SOURCES)
CLEANFILES += $(nodist_keylayouts_module_SOURCES)
MOD_FILES += keylayouts.mod
MARKER_FILES += keylayouts.marker
CLEANFILES += keylayouts.marker

keylayouts.marker: $(keylayouts_module_SOURCES) $(nodist_keylayouts_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(keylayouts_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += priority_queue.module
MODULE_FILES += priority_queue.module$(EXEEXT)
priority_queue_module_SOURCES  = lib/priority_queue.c  ## platform sources
nodist_priority_queue_module_SOURCES  =  ## platform nodist sources
priority_queue_module_LDADD  = 
priority_queue_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
priority_queue_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
priority_queue_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
priority_queue_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_priority_queue_module_SOURCES)
CLEANFILES += $(nodist_priority_queue_module_SOURCES)
MOD_FILES += priority_queue.mod
MARKER_FILES += priority_queue.marker
CLEANFILES += priority_queue.marker

priority_queue.marker: $(priority_queue_module_SOURCES) $(nodist_priority_queue_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(priority_queue_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += time.module
MODULE_FILES += time.module$(EXEEXT)
time_module_SOURCES  = commands/time.c  ## platform sources
nodist_time_module_SOURCES  =  ## platform nodist sources
time_module_LDADD  = 
time_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
time_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
time_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
time_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_time_module_SOURCES)
CLEANFILES += $(nodist_time_module_SOURCES)
MOD_FILES += time.mod
MARKER_FILES += time.marker
CLEANFILES += time.marker

time.marker: $(time_module_SOURCES) $(nodist_time_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(time_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_i386_pc
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_i386_efi
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_i386_qemu
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_i386_coreboot
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_i386_multiboot
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_i386_ieee1275
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_x86_64_efi
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_mips_loongson
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_sparc64_ieee1275
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_powerpc_ieee1275
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_mips_arc
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_ia64_efi
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_mips_qemu_mips
if COND_ENABLE_CACHE_STATS
platform_PROGRAMS += cacheinfo.module
MODULE_FILES += cacheinfo.module$(EXEEXT)
cacheinfo_module_SOURCES  = commands/cacheinfo.c  ## platform sources
nodist_cacheinfo_module_SOURCES  =  ## platform nodist sources
cacheinfo_module_LDADD  = 
cacheinfo_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
cacheinfo_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
cacheinfo_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
cacheinfo_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cacheinfo_module_SOURCES)
CLEANFILES += $(nodist_cacheinfo_module_SOURCES)
MOD_FILES += cacheinfo.mod
MARKER_FILES += cacheinfo.marker
CLEANFILES += cacheinfo.marker

cacheinfo.marker: $(cacheinfo_module_SOURCES) $(nodist_cacheinfo_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cacheinfo_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif COND_ENABLE_CACHE_STATS
endif

if COND_emu
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += adler32.module
MODULE_FILES += adler32.module$(EXEEXT)
adler32_module_SOURCES  = lib/adler32.c  ## platform sources
nodist_adler32_module_SOURCES  =  ## platform nodist sources
adler32_module_LDADD  = 
adler32_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
adler32_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
adler32_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
adler32_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_adler32_module_SOURCES)
CLEANFILES += $(nodist_adler32_module_SOURCES)
MOD_FILES += adler32.mod
MARKER_FILES += adler32.marker
CLEANFILES += adler32.marker

adler32.marker: $(adler32_module_SOURCES) $(nodist_adler32_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(adler32_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += crc64.module
MODULE_FILES += crc64.module$(EXEEXT)
crc64_module_SOURCES  = lib/crc64.c  ## platform sources
nodist_crc64_module_SOURCES  =  ## platform nodist sources
crc64_module_LDADD  = 
crc64_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
crc64_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
crc64_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
crc64_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_crc64_module_SOURCES)
CLEANFILES += $(nodist_crc64_module_SOURCES)
MOD_FILES += crc64.mod
MARKER_FILES += crc64.marker
CLEANFILES += crc64.marker

crc64.marker: $(crc64_module_SOURCES) $(nodist_crc64_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crc64_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += all_video.module
MODULE_FILES += all_video.module$(EXEEXT)
all_video_module_SOURCES  = lib/fake_module.c  ## platform sources
nodist_all_video_module_SOURCES  =  ## platform nodist sources
all_video_module_LDADD  = 
all_video_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
all_video_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
all_video_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
all_video_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_all_video_module_SOURCES)
CLEANFILES += $(nodist_all_video_module_SOURCES)
MOD_FILES += all_video.mod
MARKER_FILES += all_video.marker
CLEANFILES += all_video.marker

all_video.marker: $(all_video_module_SOURCES) $(nodist_all_video_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(all_video_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gdb.module
MODULE_FILES += gdb.module$(EXEEXT)
gdb_module_SOURCES  = gdb/i386/idt.c gdb/i386/machdep.S gdb/i386/signal.c gdb/cstub.c gdb/gdb.c  ## platform sources
nodist_gdb_module_SOURCES  =  ## platform nodist sources
gdb_module_LDADD  = 
gdb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gdb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gdb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gdb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gdb_module_SOURCES)
CLEANFILES += $(nodist_gdb_module_SOURCES)
MOD_FILES += gdb.mod
MARKER_FILES += gdb.marker
CLEANFILES += gdb.marker

gdb.marker: $(gdb_module_SOURCES) $(nodist_gdb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gdb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gdb.module
MODULE_FILES += gdb.module$(EXEEXT)
gdb_module_SOURCES  = gdb/i386/idt.c gdb/i386/machdep.S gdb/i386/signal.c gdb/cstub.c gdb/gdb.c  ## platform sources
nodist_gdb_module_SOURCES  =  ## platform nodist sources
gdb_module_LDADD  = 
gdb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gdb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gdb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gdb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gdb_module_SOURCES)
CLEANFILES += $(nodist_gdb_module_SOURCES)
MOD_FILES += gdb.mod
MARKER_FILES += gdb.marker
CLEANFILES += gdb.marker

gdb.marker: $(gdb_module_SOURCES) $(nodist_gdb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gdb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gdb.module
MODULE_FILES += gdb.module$(EXEEXT)
gdb_module_SOURCES  = gdb/i386/idt.c gdb/i386/machdep.S gdb/i386/signal.c gdb/cstub.c gdb/gdb.c  ## platform sources
nodist_gdb_module_SOURCES  =  ## platform nodist sources
gdb_module_LDADD  = 
gdb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gdb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gdb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gdb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gdb_module_SOURCES)
CLEANFILES += $(nodist_gdb_module_SOURCES)
MOD_FILES += gdb.mod
MARKER_FILES += gdb.marker
CLEANFILES += gdb.marker

gdb.marker: $(gdb_module_SOURCES) $(nodist_gdb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gdb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gdb.module
MODULE_FILES += gdb.module$(EXEEXT)
gdb_module_SOURCES  = gdb/i386/idt.c gdb/i386/machdep.S gdb/i386/signal.c gdb/cstub.c gdb/gdb.c  ## platform sources
nodist_gdb_module_SOURCES  =  ## platform nodist sources
gdb_module_LDADD  = 
gdb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gdb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gdb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gdb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gdb_module_SOURCES)
CLEANFILES += $(nodist_gdb_module_SOURCES)
MOD_FILES += gdb.mod
MARKER_FILES += gdb.marker
CLEANFILES += gdb.marker

gdb.marker: $(gdb_module_SOURCES) $(nodist_gdb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gdb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gdb.module
MODULE_FILES += gdb.module$(EXEEXT)
gdb_module_SOURCES  = gdb/i386/idt.c gdb/i386/machdep.S gdb/i386/signal.c gdb/cstub.c gdb/gdb.c  ## platform sources
nodist_gdb_module_SOURCES  =  ## platform nodist sources
gdb_module_LDADD  = 
gdb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gdb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gdb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gdb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gdb_module_SOURCES)
CLEANFILES += $(nodist_gdb_module_SOURCES)
MOD_FILES += gdb.mod
MARKER_FILES += gdb.marker
CLEANFILES += gdb.marker

gdb.marker: $(gdb_module_SOURCES) $(nodist_gdb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gdb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gdb.module
MODULE_FILES += gdb.module$(EXEEXT)
gdb_module_SOURCES  = gdb/i386/idt.c gdb/i386/machdep.S gdb/i386/signal.c gdb/cstub.c gdb/gdb.c  ## platform sources
nodist_gdb_module_SOURCES  =  ## platform nodist sources
gdb_module_LDADD  = 
gdb_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) 
gdb_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gdb_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) 
gdb_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gdb_module_SOURCES)
CLEANFILES += $(nodist_gdb_module_SOURCES)
MOD_FILES += gdb.mod
MARKER_FILES += gdb.marker
CLEANFILES += gdb.marker

gdb.marker: $(gdb_module_SOURCES) $(nodist_gdb_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gdb_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_arcfour.module
MODULE_FILES += gcry_arcfour.module$(EXEEXT)
gcry_arcfour_module_SOURCES  = lib/libgcrypt-grub/cipher/arcfour.c  ## platform sources
nodist_gcry_arcfour_module_SOURCES  =  ## platform nodist sources
gcry_arcfour_module_LDADD  = 
gcry_arcfour_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_arcfour_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_arcfour_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_arcfour_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_arcfour_module_SOURCES)
CLEANFILES += $(nodist_gcry_arcfour_module_SOURCES)
MOD_FILES += gcry_arcfour.mod
MARKER_FILES += gcry_arcfour.marker
CLEANFILES += gcry_arcfour.marker

gcry_arcfour.marker: $(gcry_arcfour_module_SOURCES) $(nodist_gcry_arcfour_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_arcfour_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_blowfish.module
MODULE_FILES += gcry_blowfish.module$(EXEEXT)
gcry_blowfish_module_SOURCES  = lib/libgcrypt-grub/cipher/blowfish.c  ## platform sources
nodist_gcry_blowfish_module_SOURCES  =  ## platform nodist sources
gcry_blowfish_module_LDADD  = 
gcry_blowfish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_blowfish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_blowfish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_blowfish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_blowfish_module_SOURCES)
CLEANFILES += $(nodist_gcry_blowfish_module_SOURCES)
MOD_FILES += gcry_blowfish.mod
MARKER_FILES += gcry_blowfish.marker
CLEANFILES += gcry_blowfish.marker

gcry_blowfish.marker: $(gcry_blowfish_module_SOURCES) $(nodist_gcry_blowfish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_blowfish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_camellia.module
MODULE_FILES += gcry_camellia.module$(EXEEXT)
gcry_camellia_module_SOURCES  = lib/libgcrypt-grub/cipher/camellia-glue.c lib/libgcrypt-grub/cipher/camellia.c  ## platform sources
nodist_gcry_camellia_module_SOURCES  =  ## platform nodist sources
gcry_camellia_module_LDADD  = 
gcry_camellia_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_camellia_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_camellia_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_camellia_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_camellia_module_SOURCES)
CLEANFILES += $(nodist_gcry_camellia_module_SOURCES)
MOD_FILES += gcry_camellia.mod
MARKER_FILES += gcry_camellia.marker
CLEANFILES += gcry_camellia.marker

gcry_camellia.marker: $(gcry_camellia_module_SOURCES) $(nodist_gcry_camellia_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_camellia_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_cast5.module
MODULE_FILES += gcry_cast5.module$(EXEEXT)
gcry_cast5_module_SOURCES  = lib/libgcrypt-grub/cipher/cast5.c  ## platform sources
nodist_gcry_cast5_module_SOURCES  =  ## platform nodist sources
gcry_cast5_module_LDADD  = 
gcry_cast5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_cast5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_cast5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_cast5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_cast5_module_SOURCES)
CLEANFILES += $(nodist_gcry_cast5_module_SOURCES)
MOD_FILES += gcry_cast5.mod
MARKER_FILES += gcry_cast5.marker
CLEANFILES += gcry_cast5.marker

gcry_cast5.marker: $(gcry_cast5_module_SOURCES) $(nodist_gcry_cast5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_cast5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_crc.module
MODULE_FILES += gcry_crc.module$(EXEEXT)
gcry_crc_module_SOURCES  = lib/libgcrypt-grub/cipher/crc.c  ## platform sources
nodist_gcry_crc_module_SOURCES  =  ## platform nodist sources
gcry_crc_module_LDADD  = 
gcry_crc_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_crc_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_crc_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_crc_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_crc_module_SOURCES)
CLEANFILES += $(nodist_gcry_crc_module_SOURCES)
MOD_FILES += gcry_crc.mod
MARKER_FILES += gcry_crc.marker
CLEANFILES += gcry_crc.marker

gcry_crc.marker: $(gcry_crc_module_SOURCES) $(nodist_gcry_crc_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_crc_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_des.module
MODULE_FILES += gcry_des.module$(EXEEXT)
gcry_des_module_SOURCES  = lib/libgcrypt-grub/cipher/des.c  ## platform sources
nodist_gcry_des_module_SOURCES  =  ## platform nodist sources
gcry_des_module_LDADD  = 
gcry_des_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_des_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_des_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_des_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_des_module_SOURCES)
CLEANFILES += $(nodist_gcry_des_module_SOURCES)
MOD_FILES += gcry_des.mod
MARKER_FILES += gcry_des.marker
CLEANFILES += gcry_des.marker

gcry_des.marker: $(gcry_des_module_SOURCES) $(nodist_gcry_des_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_des_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_rfc2268.module
MODULE_FILES += gcry_rfc2268.module$(EXEEXT)
gcry_rfc2268_module_SOURCES  = lib/libgcrypt-grub/cipher/rfc2268.c  ## platform sources
nodist_gcry_rfc2268_module_SOURCES  =  ## platform nodist sources
gcry_rfc2268_module_LDADD  = 
gcry_rfc2268_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_rfc2268_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rfc2268_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rfc2268_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rfc2268_module_SOURCES)
CLEANFILES += $(nodist_gcry_rfc2268_module_SOURCES)
MOD_FILES += gcry_rfc2268.mod
MARKER_FILES += gcry_rfc2268.marker
CLEANFILES += gcry_rfc2268.marker

gcry_rfc2268.marker: $(gcry_rfc2268_module_SOURCES) $(nodist_gcry_rfc2268_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rfc2268_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_seed.module
MODULE_FILES += gcry_seed.module$(EXEEXT)
gcry_seed_module_SOURCES  = lib/libgcrypt-grub/cipher/seed.c  ## platform sources
nodist_gcry_seed_module_SOURCES  =  ## platform nodist sources
gcry_seed_module_LDADD  = 
gcry_seed_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_seed_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_seed_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_seed_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_seed_module_SOURCES)
CLEANFILES += $(nodist_gcry_seed_module_SOURCES)
MOD_FILES += gcry_seed.mod
MARKER_FILES += gcry_seed.marker
CLEANFILES += gcry_seed.marker

gcry_seed.marker: $(gcry_seed_module_SOURCES) $(nodist_gcry_seed_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_seed_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_sha1.module
MODULE_FILES += gcry_sha1.module$(EXEEXT)
gcry_sha1_module_SOURCES  = lib/libgcrypt-grub/cipher/sha1.c  ## platform sources
nodist_gcry_sha1_module_SOURCES  =  ## platform nodist sources
gcry_sha1_module_LDADD  = 
gcry_sha1_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha1_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha1_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha1_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha1_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha1_module_SOURCES)
MOD_FILES += gcry_sha1.mod
MARKER_FILES += gcry_sha1.marker
CLEANFILES += gcry_sha1.marker

gcry_sha1.marker: $(gcry_sha1_module_SOURCES) $(nodist_gcry_sha1_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha1_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_sha256.module
MODULE_FILES += gcry_sha256.module$(EXEEXT)
gcry_sha256_module_SOURCES  = lib/libgcrypt-grub/cipher/sha256.c  ## platform sources
nodist_gcry_sha256_module_SOURCES  =  ## platform nodist sources
gcry_sha256_module_LDADD  = 
gcry_sha256_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha256_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha256_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha256_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha256_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha256_module_SOURCES)
MOD_FILES += gcry_sha256.mod
MARKER_FILES += gcry_sha256.marker
CLEANFILES += gcry_sha256.marker

gcry_sha256.marker: $(gcry_sha256_module_SOURCES) $(nodist_gcry_sha256_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha256_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_sha512.module
MODULE_FILES += gcry_sha512.module$(EXEEXT)
gcry_sha512_module_SOURCES  = lib/libgcrypt-grub/cipher/sha512.c  ## platform sources
nodist_gcry_sha512_module_SOURCES  =  ## platform nodist sources
gcry_sha512_module_LDADD  = 
gcry_sha512_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_sha512_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_sha512_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_sha512_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_sha512_module_SOURCES)
CLEANFILES += $(nodist_gcry_sha512_module_SOURCES)
MOD_FILES += gcry_sha512.mod
MARKER_FILES += gcry_sha512.marker
CLEANFILES += gcry_sha512.marker

gcry_sha512.marker: $(gcry_sha512_module_SOURCES) $(nodist_gcry_sha512_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_sha512_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_tiger.module
MODULE_FILES += gcry_tiger.module$(EXEEXT)
gcry_tiger_module_SOURCES  = lib/libgcrypt-grub/cipher/tiger.c  ## platform sources
nodist_gcry_tiger_module_SOURCES  =  ## platform nodist sources
gcry_tiger_module_LDADD  = 
gcry_tiger_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_tiger_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_tiger_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_tiger_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_tiger_module_SOURCES)
CLEANFILES += $(nodist_gcry_tiger_module_SOURCES)
MOD_FILES += gcry_tiger.mod
MARKER_FILES += gcry_tiger.marker
CLEANFILES += gcry_tiger.marker

gcry_tiger.marker: $(gcry_tiger_module_SOURCES) $(nodist_gcry_tiger_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_tiger_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_twofish.module
MODULE_FILES += gcry_twofish.module$(EXEEXT)
gcry_twofish_module_SOURCES  = lib/libgcrypt-grub/cipher/twofish.c  ## platform sources
nodist_gcry_twofish_module_SOURCES  =  ## platform nodist sources
gcry_twofish_module_LDADD  = 
gcry_twofish_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_twofish_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_twofish_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_twofish_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_twofish_module_SOURCES)
CLEANFILES += $(nodist_gcry_twofish_module_SOURCES)
MOD_FILES += gcry_twofish.mod
MARKER_FILES += gcry_twofish.marker
CLEANFILES += gcry_twofish.marker

gcry_twofish.marker: $(gcry_twofish_module_SOURCES) $(nodist_gcry_twofish_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_twofish_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_whirlpool.module
MODULE_FILES += gcry_whirlpool.module$(EXEEXT)
gcry_whirlpool_module_SOURCES  = lib/libgcrypt-grub/cipher/whirlpool.c  ## platform sources
nodist_gcry_whirlpool_module_SOURCES  =  ## platform nodist sources
gcry_whirlpool_module_LDADD  = 
gcry_whirlpool_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_whirlpool_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_whirlpool_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_whirlpool_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_whirlpool_module_SOURCES)
CLEANFILES += $(nodist_gcry_whirlpool_module_SOURCES)
MOD_FILES += gcry_whirlpool.mod
MARKER_FILES += gcry_whirlpool.marker
CLEANFILES += gcry_whirlpool.marker

gcry_whirlpool.marker: $(gcry_whirlpool_module_SOURCES) $(nodist_gcry_whirlpool_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_whirlpool_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_md4.module
MODULE_FILES += gcry_md4.module$(EXEEXT)
gcry_md4_module_SOURCES  = lib/libgcrypt-grub/cipher/md4.c  ## platform sources
nodist_gcry_md4_module_SOURCES  =  ## platform nodist sources
gcry_md4_module_LDADD  = 
gcry_md4_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md4_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md4_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md4_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md4_module_SOURCES)
CLEANFILES += $(nodist_gcry_md4_module_SOURCES)
MOD_FILES += gcry_md4.mod
MARKER_FILES += gcry_md4.marker
CLEANFILES += gcry_md4.marker

gcry_md4.marker: $(gcry_md4_module_SOURCES) $(nodist_gcry_md4_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md4_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_md5.module
MODULE_FILES += gcry_md5.module$(EXEEXT)
gcry_md5_module_SOURCES  = lib/libgcrypt-grub/cipher/md5.c  ## platform sources
nodist_gcry_md5_module_SOURCES  =  ## platform nodist sources
gcry_md5_module_LDADD  = 
gcry_md5_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_md5_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_md5_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_md5_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_md5_module_SOURCES)
CLEANFILES += $(nodist_gcry_md5_module_SOURCES)
MOD_FILES += gcry_md5.mod
MARKER_FILES += gcry_md5.marker
CLEANFILES += gcry_md5.marker

gcry_md5.marker: $(gcry_md5_module_SOURCES) $(nodist_gcry_md5_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_md5_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_rmd160.module
MODULE_FILES += gcry_rmd160.module$(EXEEXT)
gcry_rmd160_module_SOURCES  = lib/libgcrypt-grub/cipher/rmd160.c  ## platform sources
nodist_gcry_rmd160_module_SOURCES  =  ## platform nodist sources
gcry_rmd160_module_LDADD  = 
gcry_rmd160_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rmd160_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rmd160_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rmd160_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rmd160_module_SOURCES)
CLEANFILES += $(nodist_gcry_rmd160_module_SOURCES)
MOD_FILES += gcry_rmd160.mod
MARKER_FILES += gcry_rmd160.marker
CLEANFILES += gcry_rmd160.marker

gcry_rmd160.marker: $(gcry_rmd160_module_SOURCES) $(nodist_gcry_rmd160_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rmd160_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_rijndael.module
MODULE_FILES += gcry_rijndael.module$(EXEEXT)
gcry_rijndael_module_SOURCES  = lib/libgcrypt-grub/cipher/rijndael.c  ## platform sources
nodist_gcry_rijndael_module_SOURCES  =  ## platform nodist sources
gcry_rijndael_module_LDADD  = 
gcry_rijndael_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) -Wno-cast-align -Wno-strict-aliasing 
gcry_rijndael_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_rijndael_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_rijndael_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_rijndael_module_SOURCES)
CLEANFILES += $(nodist_gcry_rijndael_module_SOURCES)
MOD_FILES += gcry_rijndael.mod
MARKER_FILES += gcry_rijndael.marker
CLEANFILES += gcry_rijndael.marker

gcry_rijndael.marker: $(gcry_rijndael_module_SOURCES) $(nodist_gcry_rijndael_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_rijndael_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_pc
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_efi
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_qemu
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_coreboot
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_multiboot
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_i386_ieee1275
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_x86_64_efi
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_loongson
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_arc
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_ia64_efi
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_mips_qemu_mips
platform_PROGRAMS += gcry_serpent.module
MODULE_FILES += gcry_serpent.module$(EXEEXT)
gcry_serpent_module_SOURCES  = lib/libgcrypt-grub/cipher/serpent.c  ## platform sources
nodist_gcry_serpent_module_SOURCES  =  ## platform nodist sources
gcry_serpent_module_LDADD  = 
gcry_serpent_module_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_MODULE) $(CFLAGS_GCRY) 
gcry_serpent_module_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_MODULE) 
gcry_serpent_module_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_MODULE) $(CPPFLAGS_GCRY) 
gcry_serpent_module_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_MODULE) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_gcry_serpent_module_SOURCES)
CLEANFILES += $(nodist_gcry_serpent_module_SOURCES)
MOD_FILES += gcry_serpent.mod
MARKER_FILES += gcry_serpent.marker
CLEANFILES += gcry_serpent.marker

gcry_serpent.marker: $(gcry_serpent_module_SOURCES) $(nodist_gcry_serpent_module_SOURCES)
	$(TARGET_CPP) -DGRUB_LST_GENERATOR $(CPPFLAGS_MARKER) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gcry_serpent_module_CPPFLAGS) $(CPPFLAGS) $^ > $@.new || (rm -f $@; exit 1)
	grep 'MARKER' $@.new > $@; rm -f $@.new
endif

if COND_emu
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = 
kernel_exec_SOURCES += disk/host.c gnulib/progname.c gnulib/error.c kern/emu/cache_s.S kern/emu/hostdisk.c kern/emu/hostfs.c kern/emu/main.c kern/emu/argp_common.c kern/emu/misc.c kern/emu/mm.c kern/emu/time.c kern/emu/cache.c term/emu/console.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  =  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) $(CFLAGS_GNULIB) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-r,-d 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) $(CPPFLAGS_GNULIB) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then      $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $< $@;    elif test ! -z '$(TARGET_OBJ2ELF)'; then      cp $< $@.bin; $(TARGET_OBJ2ELF) $@.bin && cp $@.bin $@ || (rm -f $@.bin; exit 1);    else cp $< $@; fi
endif

if COND_i386_pc
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/i386/pc/startup.S 
kernel_exec_SOURCES += kern/generic/rtc_get_time_ms.c term/i386/vga_common.c kern/i386/pc/init.c kern/i386/pc/mmap.c kern/i386/tsc.c term/i386/pc/console.c kern/i386/dl.c kern/i386/pit.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),0x9000 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_i386_efi
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/i386/efi/startup.S 
kernel_exec_SOURCES += kern/i386/tsc.c kern/i386/efi/init.c bus/pci.c disk/efi/efidisk.c kern/efi/efi.c kern/efi/init.c kern/efi/mm.c term/efi/console.c kern/i386/dl.c kern/i386/pit.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-r,-d 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) --strip-unneeded -K start -R .note -R .comment -R .note.gnu.gold-version 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_i386_qemu
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/i386/qemu/startup.S 
kernel_exec_SOURCES += bus/pci.c kern/vga_init.c kern/i386/qemu/mmap.c kern/i386/tsc.c kern/i386/coreboot/init.c term/i386/pc/vga_text.c term/i386/vga_common.c kern/i386/dl.c kern/i386/pit.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),0x8200 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) -DGRUB_BOOT_MACHINE_LINK_ADDR=$(GRUB_BOOT_MACHINE_LINK_ADDR) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_i386_coreboot
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/i386/coreboot/startup.S 
kernel_exec_SOURCES += kern/i386/coreboot/mmap.c kern/i386/tsc.c kern/i386/coreboot/init.c term/i386/pc/vga_text.c term/i386/vga_common.c kern/i386/dl.c kern/i386/pit.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-Ttext=0x8200 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_i386_multiboot
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/i386/coreboot/startup.S 
kernel_exec_SOURCES += kern/i386/multiboot_mmap.c kern/i386/tsc.c kern/i386/coreboot/init.c term/i386/pc/vga_text.c term/i386/vga_common.c kern/i386/dl.c kern/i386/pit.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-Ttext=0x8200 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_i386_ieee1275
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/i386/ieee1275/startup.S 
kernel_exec_SOURCES += disk/ieee1275/ofdisk.c kern/ieee1275/cmain.c kern/ieee1275/ieee1275.c kern/ieee1275/mmap.c kern/ieee1275/openfw.c term/ieee1275/console.c kern/ieee1275/init.c kern/i386/dl.c term/terminfo.c term/tparm.c commands/extcmd.c lib/arg.c kern/i386/pit.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-Ttext=0x10000 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_x86_64_efi
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/x86_64/efi/startup.S 
kernel_exec_SOURCES += kern/i386/tsc.c kern/x86_64/dl.c kern/x86_64/efi/callwrap.S kern/i386/efi/init.c bus/pci.c disk/efi/efidisk.c kern/efi/efi.c kern/efi/init.c kern/efi/mm.c term/efi/console.c kern/i386/pit.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-r,-d 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) --strip-unneeded -K start -R .note -R .comment -R .note.gnu.gold-version 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_mips_loongson
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/mips/startup.S 
kernel_exec_SOURCES += term/ns8250.c bus/bonito.c bus/cs5536.c bus/pci.c kern/mips/loongson/init.c term/at_keyboard.c term/serial.c video/sm712.c video/sis315pro.c video/radeon_fuloong2e.c commands/keylayouts.c term/gfxterm.c font/font.c font/font_cmd.c io/bufio.c video/bitmap.c video/bitmap_scale.c video/colors.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c video/fb/video_fb.c video/video.c commands/boot.c kern/generic/rtc_get_time_ms.c kern/mips/cache.S kern/mips/dl.c kern/mips/init.c term/terminfo.c term/tparm.c commands/extcmd.c lib/arg.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-Ttext,0x80200000 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) -DUSE_ASCII_FAILBACK 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/sparc64/ieee1275/crt0.S 
kernel_exec_SOURCES += kern/sparc64/cache.S kern/sparc64/dl.c kern/sparc64/ieee1275/ieee1275.c disk/ieee1275/ofdisk.c kern/ieee1275/cmain.c kern/ieee1275/ieee1275.c kern/ieee1275/mmap.c kern/ieee1275/openfw.c term/ieee1275/console.c kern/ieee1275/init.c term/terminfo.c term/tparm.c commands/extcmd.c lib/arg.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-Ttext,0x4400 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_powerpc_ieee1275
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/powerpc/ieee1275/startup.S 
kernel_exec_SOURCES += kern/powerpc/cache.S kern/powerpc/dl.c disk/ieee1275/ofdisk.c kern/ieee1275/cmain.c kern/ieee1275/ieee1275.c kern/ieee1275/mmap.c kern/ieee1275/openfw.c term/ieee1275/console.c kern/ieee1275/init.c term/terminfo.c term/tparm.c commands/extcmd.c lib/arg.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-Ttext,0x200000 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_mips_arc
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/mips/startup.S 
kernel_exec_SOURCES += kern/mips/arc/init.c term/arc/console.c disk/arc/arcdisk.c kern/generic/rtc_get_time_ms.c kern/mips/cache.S kern/mips/dl.c kern/mips/init.c term/terminfo.c term/tparm.c commands/extcmd.c lib/arg.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-Ttext,0x8bd00000 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_ia64_efi
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = 
kernel_exec_SOURCES += kern/ia64/efi/startup.S kern/ia64/efi/init.c kern/ia64/dl.c kern/ia64/dl_helper.c disk/efi/efidisk.c kern/efi/efi.c kern/efi/init.c kern/efi/mm.c term/efi/console.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) -fno-builtin -fpic -minline-int-divide-max-throughput 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-r,-d 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) --strip-unneeded -K start -R .note -R .comment -R .note.gnu.gold-version 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_mips_qemu_mips
platform_PROGRAMS += kernel.exec
kernel_exec_SOURCES  = kern/mips/startup.S 
kernel_exec_SOURCES += kern/mips/qemu_mips/init.c term/ns8250.c term/serial.c term/at_keyboard.c commands/keylayouts.c term/i386/pc/vga_text.c term/i386/vga_common.c kern/vga_init.c term/gfxterm.c font/font.c font/font_cmd.c io/bufio.c video/bitmap.c video/bitmap_scale.c video/colors.c video/fb/fbblit.c video/fb/fbfill.c video/fb/fbutil.c video/fb/video_fb.c video/video.c commands/boot.c kern/generic/rtc_get_time_ms.c kern/mips/cache.S kern/mips/dl.c kern/mips/init.c term/terminfo.c term/tparm.c commands/extcmd.c lib/arg.c kern/mm.c kern/time.c kern/generic/millisleep.c kern/command.c kern/corecmd.c kern/device.c kern/disk.c kern/dl.c kern/env.c kern/err.c kern/file.c kern/fs.c kern/list.c kern/main.c kern/misc.c kern/parser.c kern/partition.c kern/rescue_parser.c kern/rescue_reader.c kern/term.c 
nodist_kernel_exec_SOURCES  = symlist.c  ## platform nodist sources
kernel_exec_LDADD  = $(LDADD_KERNEL) 
kernel_exec_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_KERNEL) 
kernel_exec_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_KERNEL) -Wl,-Ttext,0x80200000 
kernel_exec_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_KERNEL) 
kernel_exec_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_KERNEL) 
kernel_exec_STRIPFLAGS  = $(AM_STRIPFLAGS) $(STRIPFLAGS_KERNEL) 
EXTRA_DIST += video/sm712_init.c video/sis315_init.c kern/i386/int.S kern/i386/realmode.S boot/i386/pc/lzma_decode.S kern/mips/cache_flush.S 
BUILT_SOURCES += $(nodist_kernel_exec_SOURCES)
CLEANFILES += $(nodist_kernel_exec_SOURCES)
platform_DATA += kernel.img
CLEANFILES += kernel.img

kernel.img: kernel.exec$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(STRIP) $(kernel_exec) -o $@.bin $<;   $(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -ed2022 -wd1106 -nu -nd $@.bin $@; else $(STRIP) $(kernel_exec_STRIPFLAGS) -o $@ $<; fi
endif

if COND_i386_pc
platform_PROGRAMS += boot.image
boot_image_SOURCES  = boot/i386/pc/boot.S 
nodist_boot_image_SOURCES  = ## platform nodist sources
boot_image_LDADD  = 
boot_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
boot_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),0x7C00 
boot_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
boot_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
boot_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_image_SOURCES)
CLEANFILES += $(nodist_boot_image_SOURCES)
platform_DATA += boot.img
CLEANFILES += boot.img

boot.img: boot.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(boot_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_i386_qemu
platform_PROGRAMS += boot.image
boot_image_SOURCES  = boot/i386/qemu/boot.S 
nodist_boot_image_SOURCES  = ## platform nodist sources
boot_image_LDADD  = 
boot_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
boot_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),$(GRUB_BOOT_MACHINE_LINK_ADDR) 
boot_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
boot_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) -DGRUB_BOOT_MACHINE_LINK_ADDR=$(GRUB_BOOT_MACHINE_LINK_ADDR) 
boot_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_image_SOURCES)
CLEANFILES += $(nodist_boot_image_SOURCES)
platform_DATA += boot.img
CLEANFILES += boot.img

boot.img: boot.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(boot_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += boot.image
boot_image_SOURCES  = boot/sparc64/ieee1275/boot.S 
nodist_boot_image_SOURCES  = ## platform nodist sources
boot_image_LDADD  = 
boot_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
boot_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE)  -Wl,-Ttext=0x4000 
boot_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
boot_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
boot_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O a.out-sunos-big 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_boot_image_SOURCES)
CLEANFILES += $(nodist_boot_image_SOURCES)
platform_DATA += boot.img
CLEANFILES += boot.img

boot.img: boot.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(boot_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_i386_pc
platform_PROGRAMS += cdboot.image
cdboot_image_SOURCES  = boot/i386/pc/cdboot.S 
nodist_cdboot_image_SOURCES  = ## platform nodist sources
cdboot_image_LDADD  = 
cdboot_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
cdboot_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),0x7C00 
cdboot_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
cdboot_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
cdboot_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_cdboot_image_SOURCES)
CLEANFILES += $(nodist_cdboot_image_SOURCES)
platform_DATA += cdboot.img
CLEANFILES += cdboot.img

cdboot.img: cdboot.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(cdboot_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_i386_pc
platform_PROGRAMS += pxeboot.image
pxeboot_image_SOURCES  = boot/i386/pc/pxeboot.S 
nodist_pxeboot_image_SOURCES  = ## platform nodist sources
pxeboot_image_LDADD  = 
pxeboot_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
pxeboot_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),0x7C00 
pxeboot_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
pxeboot_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
pxeboot_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_pxeboot_image_SOURCES)
CLEANFILES += $(nodist_pxeboot_image_SOURCES)
platform_DATA += pxeboot.img
CLEANFILES += pxeboot.img

pxeboot.img: pxeboot.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(pxeboot_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_i386_pc
platform_PROGRAMS += diskboot.image
diskboot_image_SOURCES  = boot/i386/pc/diskboot.S 
nodist_diskboot_image_SOURCES  = ## platform nodist sources
diskboot_image_LDADD  = 
diskboot_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
diskboot_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),0x8000 
diskboot_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
diskboot_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
diskboot_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskboot_image_SOURCES)
CLEANFILES += $(nodist_diskboot_image_SOURCES)
platform_DATA += diskboot.img
CLEANFILES += diskboot.img

diskboot.img: diskboot.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(diskboot_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_sparc64_ieee1275
platform_PROGRAMS += diskboot.image
diskboot_image_SOURCES  = boot/sparc64/ieee1275/diskboot.S 
nodist_diskboot_image_SOURCES  = ## platform nodist sources
diskboot_image_LDADD  = 
diskboot_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
diskboot_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -Wl,-Ttext=0x4200 
diskboot_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
diskboot_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
diskboot_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_diskboot_image_SOURCES)
CLEANFILES += $(nodist_diskboot_image_SOURCES)
platform_DATA += diskboot.img
CLEANFILES += diskboot.img

diskboot.img: diskboot.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(diskboot_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_i386_pc
platform_PROGRAMS += lnxboot.image
lnxboot_image_SOURCES  = boot/i386/pc/lnxboot.S 
nodist_lnxboot_image_SOURCES  = ## platform nodist sources
lnxboot_image_LDADD  = 
lnxboot_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
lnxboot_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),0x6000 
lnxboot_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
lnxboot_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
lnxboot_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lnxboot_image_SOURCES)
CLEANFILES += $(nodist_lnxboot_image_SOURCES)
platform_DATA += lnxboot.img
CLEANFILES += lnxboot.img

lnxboot.img: lnxboot.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(lnxboot_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_mips_loongson
platform_PROGRAMS += xz_decompress.image
xz_decompress_image_SOURCES  = boot/mips/startup_raw.S boot/decompressor/minilib.c boot/decompressor/xz.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c 
nodist_xz_decompress_image_SOURCES  = ## platform nodist sources
xz_decompress_image_LDADD  = -lgcc 
xz_decompress_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) -Wno-unreachable-code -static-libgcc 
xz_decompress_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -static-libgcc -Wl,-Ttext,0x80100000 
xz_decompress_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -DGRUB_EMBED_DECOMPRESSOR=1 
xz_decompress_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
xz_decompress_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xz_decompress_image_SOURCES)
CLEANFILES += $(nodist_xz_decompress_image_SOURCES)
platform_DATA += xz_decompress.img
CLEANFILES += xz_decompress.img

xz_decompress.img: xz_decompress.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(xz_decompress_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_mips_arc
platform_PROGRAMS += xz_decompress.image
xz_decompress_image_SOURCES  = boot/mips/startup_raw.S boot/decompressor/minilib.c boot/decompressor/xz.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c 
nodist_xz_decompress_image_SOURCES  = ## platform nodist sources
xz_decompress_image_LDADD  = -lgcc 
xz_decompress_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) -Wno-unreachable-code -static-libgcc 
xz_decompress_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -static-libgcc -Wl,-Ttext,0x8bc00000 
xz_decompress_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -DGRUB_EMBED_DECOMPRESSOR=1 
xz_decompress_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
xz_decompress_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xz_decompress_image_SOURCES)
CLEANFILES += $(nodist_xz_decompress_image_SOURCES)
platform_DATA += xz_decompress.img
CLEANFILES += xz_decompress.img

xz_decompress.img: xz_decompress.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(xz_decompress_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_mips_qemu_mips
platform_PROGRAMS += xz_decompress.image
xz_decompress_image_SOURCES  = boot/mips/startup_raw.S boot/decompressor/minilib.c boot/decompressor/xz.c lib/xzembed/xz_dec_bcj.c lib/xzembed/xz_dec_lzma2.c lib/xzembed/xz_dec_stream.c 
nodist_xz_decompress_image_SOURCES  = ## platform nodist sources
xz_decompress_image_LDADD  = -lgcc 
xz_decompress_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) -Wno-unreachable-code -static-libgcc 
xz_decompress_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -static-libgcc -Wl,-Ttext,0x80100000 
xz_decompress_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) -I$(srcdir)/lib/posix_wrap -I$(srcdir)/lib/xzembed -DGRUB_EMBED_DECOMPRESSOR=1 
xz_decompress_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
xz_decompress_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_xz_decompress_image_SOURCES)
CLEANFILES += $(nodist_xz_decompress_image_SOURCES)
platform_DATA += xz_decompress.img
CLEANFILES += xz_decompress.img

xz_decompress.img: xz_decompress.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(xz_decompress_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_mips_loongson
platform_PROGRAMS += none_decompress.image
none_decompress_image_SOURCES  = boot/mips/startup_raw.S boot/decompressor/none.c 
nodist_none_decompress_image_SOURCES  = ## platform nodist sources
none_decompress_image_LDADD  = -lgcc 
none_decompress_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) -static-libgcc 
none_decompress_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -static-libgcc -Wl,-Ttext,0x80100000 
none_decompress_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) -DGRUB_EMBED_DECOMPRESSOR=1 
none_decompress_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
none_decompress_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_none_decompress_image_SOURCES)
CLEANFILES += $(nodist_none_decompress_image_SOURCES)
platform_DATA += none_decompress.img
CLEANFILES += none_decompress.img

none_decompress.img: none_decompress.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(none_decompress_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_mips_arc
platform_PROGRAMS += none_decompress.image
none_decompress_image_SOURCES  = boot/mips/startup_raw.S boot/decompressor/none.c 
nodist_none_decompress_image_SOURCES  = ## platform nodist sources
none_decompress_image_LDADD  = -lgcc 
none_decompress_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) -static-libgcc 
none_decompress_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -static-libgcc -Wl,-Ttext,0x8bc00000 
none_decompress_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) -DGRUB_EMBED_DECOMPRESSOR=1 
none_decompress_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
none_decompress_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_none_decompress_image_SOURCES)
CLEANFILES += $(nodist_none_decompress_image_SOURCES)
platform_DATA += none_decompress.img
CLEANFILES += none_decompress.img

none_decompress.img: none_decompress.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(none_decompress_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_mips_qemu_mips
platform_PROGRAMS += none_decompress.image
none_decompress_image_SOURCES  = boot/mips/startup_raw.S boot/decompressor/none.c 
nodist_none_decompress_image_SOURCES  = ## platform nodist sources
none_decompress_image_LDADD  = -lgcc 
none_decompress_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) -static-libgcc 
none_decompress_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -static-libgcc -Wl,-Ttext,0x80100000 
none_decompress_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) -DGRUB_EMBED_DECOMPRESSOR=1 
none_decompress_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
none_decompress_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_none_decompress_image_SOURCES)
CLEANFILES += $(nodist_none_decompress_image_SOURCES)
platform_DATA += none_decompress.img
CLEANFILES += none_decompress.img

none_decompress.img: none_decompress.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(none_decompress_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_i386_pc
platform_PROGRAMS += lzma_decompress.image
lzma_decompress_image_SOURCES  = boot/i386/pc/startup_raw.S 
nodist_lzma_decompress_image_SOURCES  = ## platform nodist sources
lzma_decompress_image_LDADD  = 
lzma_decompress_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
lzma_decompress_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) $(TARGET_IMG_LDFLAGS) $(TARGET_IMG_BASE_LDOPT),0x8200 
lzma_decompress_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
lzma_decompress_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
lzma_decompress_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_lzma_decompress_image_SOURCES)
CLEANFILES += $(nodist_lzma_decompress_image_SOURCES)
platform_DATA += lzma_decompress.img
CLEANFILES += lzma_decompress.img

lzma_decompress.img: lzma_decompress.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(lzma_decompress_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_mips_loongson
platform_PROGRAMS += fwstart.image
fwstart_image_SOURCES  = boot/mips/loongson/fwstart.S 
nodist_fwstart_image_SOURCES  = ## platform nodist sources
fwstart_image_LDADD  = 
fwstart_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
fwstart_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -static-libgcc -lgcc -Wl,-N,-S,-Ttext,0xbfc00000,-Bstatic 
fwstart_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
fwstart_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
fwstart_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fwstart_image_SOURCES)
CLEANFILES += $(nodist_fwstart_image_SOURCES)
platform_DATA += fwstart.img
CLEANFILES += fwstart.img

fwstart.img: fwstart.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(fwstart_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

if COND_mips_loongson
platform_PROGRAMS += fwstart_fuloong2f.image
fwstart_fuloong2f_image_SOURCES  = boot/mips/loongson/fuloong2f.S 
nodist_fwstart_fuloong2f_image_SOURCES  = ## platform nodist sources
fwstart_fuloong2f_image_LDADD  = 
fwstart_fuloong2f_image_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_IMAGE) 
fwstart_fuloong2f_image_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_IMAGE) -static-libgcc -lgcc -Wl,-N,-S,-Ttext,0xbfc00000,-Bstatic 
fwstart_fuloong2f_image_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_IMAGE) 
fwstart_fuloong2f_image_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_IMAGE) 
fwstart_fuloong2f_image_OBJCOPYFLAGS  = $(OBJCOPYFLAGS_IMAGE) -O binary 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_fwstart_fuloong2f_image_SOURCES)
CLEANFILES += $(nodist_fwstart_fuloong2f_image_SOURCES)
platform_DATA += fwstart_fuloong2f.img
CLEANFILES += fwstart_fuloong2f.img

fwstart_fuloong2f.img: fwstart_fuloong2f.image$(EXEEXT)
	if test x$(USE_APPLE_CC_FIXES) = xyes; then   $(MACHO2IMG) $< $@; else   $(OBJCOPY) $(fwstart_fuloong2f_image_OBJCOPYFLAGS) --strip-unneeded -R .note -R .comment -R .note.gnu.build-id -R .reginfo -R .rel.dyn -R .note.gnu.gold-version $< $@; fi
	
endif

libgnulib_a_SOURCES  = 
nodist_libgnulib_a_SOURCES  = 
libgnulib_a_CFLAGS  = 
libgnulib_a_CPPFLAGS  = 
libgnulib_a_CCASFLAGS  = 

if COND_emu
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_i386_pc
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_i386_efi
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_i386_qemu
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_i386_coreboot
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_i386_multiboot
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_i386_ieee1275
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_x86_64_efi
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_mips_loongson
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_sparc64_ieee1275
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_powerpc_ieee1275
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_mips_arc
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_ia64_efi
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_mips_qemu_mips
noinst_LIBRARIES += libgnulib.a
libgnulib_a_SOURCES += gnulib/regex.c 
nodist_libgnulib_a_SOURCES += 
libgnulib_a_CFLAGS += $(AM_CFLAGS) $(CFLAGS_LIBRARY) $(CFLAGS_POSIX) $(CFLAGS_GNULIB) 
libgnulib_a_CPPFLAGS += $(AM_CPPFLAGS) $(CPPFLAGS_LIBRARY) $(CPPFLAGS_POSIX) $(CPPFLAGS_GNULIB) 
libgnulib_a_CCASFLAGS += $(AM_CCASFLAGS) $(CCASFLAGS_LIBRARY) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_libgnulib_a_SOURCES)
CLEANFILES += $(nodist_libgnulib_a_SOURCES)
endif

if COND_emu
bin_PROGRAMS += grub-emu
if COND_MAN_PAGES
man_MANS += grub-emu.1

grub-emu.1: grub-emu
	chmod a+x grub-emu
	PATH=$(builddir):$$PATH pkgdatadir=$(builddir) $(HELP2MAN) --section=1 -i $(top_srcdir)/docs/man/grub-emu.h2m -o $@ grub-emu
	
CLEANFILES += grub-emu.1
endif
grub_emu_SOURCES  = kern/emu/full.c 
nodist_grub_emu_SOURCES  = grub_emu_init.c 
grub_emu_LDADD  = kernel.img$(EXEEXT) $(MODULE_FILES) $(LIBUTIL) $(LIBCURSES) $(LIBSDL) $(LIBUSB) $(LIBPCIACCESS) $(LIBDEVMAPPER) $(LIBZFS) $(LIBNVPAIR) $(LIBGEOM) 
grub_emu_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_PROGRAM) 
grub_emu_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_PROGRAM) 
grub_emu_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_PROGRAM) 
grub_emu_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_PROGRAM) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_grub_emu_SOURCES)
CLEANFILES += $(nodist_grub_emu_SOURCES)
endif

if COND_emu
bin_PROGRAMS += grub-emu-lite
grub_emu_lite_SOURCES  = kern/emu/lite.c 
nodist_grub_emu_lite_SOURCES  = symlist.c 
grub_emu_lite_LDADD  = kernel.img$(EXEEXT) $(LIBUTIL) $(LIBCURSES) $(LIBSDL) $(LIBUSB) $(LIBPCIACCESS) $(LIBDEVMAPPER) $(LIBZFS) $(LIBNVPAIR) $(LIBGEOM) 
grub_emu_lite_CFLAGS  = $(AM_CFLAGS) $(CFLAGS_PROGRAM) 
grub_emu_lite_LDFLAGS  = $(AM_LDFLAGS) $(LDFLAGS_PROGRAM) 
grub_emu_lite_CPPFLAGS  = $(AM_CPPFLAGS) $(CPPFLAGS_PROGRAM) 
grub_emu_lite_CCASFLAGS  = $(AM_CCASFLAGS) $(CCASFLAGS_PROGRAM) 
EXTRA_DIST += 
BUILT_SOURCES += $(nodist_grub_emu_lite_SOURCES)
CLEANFILES += $(nodist_grub_emu_lite_SOURCES)
endif

if COND_emu
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_i386_pc
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_i386_efi
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_i386_qemu
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_i386_coreboot
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_i386_multiboot
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_i386_ieee1275
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_x86_64_efi
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_mips_loongson
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_sparc64_ieee1275
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_powerpc_ieee1275
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_mips_arc
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_ia64_efi
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_mips_qemu_mips
noinst_SCRIPTS += gensyminfo.sh

gensyminfo.sh: gensyminfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gensyminfo.sh
	
CLEANFILES += gensyminfo.sh
dist_noinst_DATA += gensyminfo.sh.in 
endif

if COND_emu
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_i386_pc
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_i386_efi
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_i386_qemu
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_i386_coreboot
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_i386_multiboot
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_i386_ieee1275
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_x86_64_efi
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_mips_loongson
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_sparc64_ieee1275
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_powerpc_ieee1275
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_mips_arc
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_ia64_efi
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_mips_qemu_mips
noinst_SCRIPTS += genmod.sh

genmod.sh: genmod.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x genmod.sh
	
CLEANFILES += genmod.sh
dist_noinst_DATA += genmod.sh.in 
endif

if COND_emu
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_i386_pc
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_i386_efi
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_i386_qemu
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_i386_coreboot
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_i386_multiboot
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_i386_ieee1275
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_x86_64_efi
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_mips_loongson
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_sparc64_ieee1275
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_powerpc_ieee1275
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_mips_arc
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_ia64_efi
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_mips_qemu_mips
noinst_SCRIPTS += modinfo.sh

modinfo.sh: modinfo.sh.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x modinfo.sh
	
CLEANFILES += modinfo.sh
dist_noinst_DATA += modinfo.sh.in 
endif

if COND_emu
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_i386_pc
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_i386_efi
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_i386_qemu
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_i386_coreboot
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_i386_multiboot
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_i386_ieee1275
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_x86_64_efi
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_mips_loongson
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_sparc64_ieee1275
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_powerpc_ieee1275
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_mips_arc
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_ia64_efi
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_mips_qemu_mips
platform_SCRIPTS += gmodule.pl

gmodule.pl: gmodule.pl.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gmodule.pl
	
CLEANFILES += gmodule.pl
dist_noinst_DATA += gmodule.pl.in 
endif

if COND_emu
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_i386_pc
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_i386_efi
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_i386_qemu
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_i386_coreboot
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_i386_multiboot
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_i386_ieee1275
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_x86_64_efi
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_mips_loongson
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_sparc64_ieee1275
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_powerpc_ieee1275
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_mips_arc
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_ia64_efi
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

if COND_mips_qemu_mips
platform_SCRIPTS += gdb_grub

gdb_grub: gdb_grub.in  $(top_builddir)/config.status
	$(top_builddir)/config.status --file=$@:$<
	chmod a+x gdb_grub
	
CLEANFILES += gdb_grub
dist_noinst_DATA += gdb_grub.in 
endif

