####################################################################
####################################################################
############# THIS IS A GENERATED FILE ! DO NOT EDIT ###############
####################################################################
####################################################################
#   $Id$
#
#   Generate the libgcc1.a for m68k.
#
include $(TOP)/config/make.cfg

LIB	:= gcc1

FILES	:= \
	_addsubdf3 \
	_addsubsf3 \
	_divdf3 \
	_divmodsi3 \
	_divsf3 \
	_eqdf2 \
	_eqsf2 \
	_extend \
	_extendsfdf2 \
	_fixdfsi \
	_fixsfsi \
	_floatsidf \
	_floatsisf \
	_gedf2 \
	_gesf2 \
	_gtdf2 \
	_gtsf2 \
	_ledf2 \
	_lesf2 \
	_ltdf2 \
	_ltsf2 \
	_muldf3 \
	_mulsf3 \
	_mulsi3 \
	_nedf2 \
	_negdf2 \
	_negsf2 \
	_nesf2 \
	_normdf \
	_normsf \
	_truncdfsf2 \
	_udivmodsi3

#MM linklibs-gcc1-m68000

#Needed to write this target so it becomes m68k specific
linklibs-$(LIB)-m68000: setup $(LIBDIR)/lib$(LIB).a
	@$(NOP)

AFLAGS = -mc68000

$(OBJDIR)/%.o : %.s
	@$(ECHO) "Assembling $(CURDIR)/$(notdir $<)..."
	@$(IF) $(AS) $(AFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(CURDIR)/$(notdir $<): $(AS) $(AFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(AS) $(AFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

.PHONY : linklibs-gcc1-m68000 linklibs-gcc1-m68000-clean linklibs-gcc1-m68000-quick
#MM
linklibs-gcc1-m68000-quick : linklibs-gcc1-m68000
#MM
linklibs-gcc1-m68000-clean : clean

ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif

ifndef CFLAGS
CFLAGS := $(USER_CFLAGS) $(TARGET_CFLAGS) $(INCLUDES) -I$(AROS_INCLUDES) -D__AROS__ -D__AROS
endif

ifndef AFLAGS
AFLAGS := $(USER_AFLAGS) $(TARGET_AFLAGS) $(INCLUDES) -I$(AROS_INCLUDES) -D__AROS__ -D__AROS
endif

ifndef LDFLAGS
LDFLAGS := $(USER_LDFLAGS) $(TARGET_LDFLAGS)
endif





OBJS := $(foreach f,$(FILES),$(OBJDIR)/$(f).o)
DEPS := $(foreach f,$(FILES),$(OBJDIR)/$(f).d)

linklibs-$(LIB): setup $(LIBDIR)/lib$(LIB).a
	@$(NOP)

$(LIBDIR)/lib$(LIB).a : $(OBJS)
		@$(ECHO) "Creating library $@..."
	@$(AR) $@ $(OBJS)
	@$(RANLIB) $@


$(OBJDIR)/%.o : %.c
		@$(ECHO) "Compiling $(CURDIR)/$(notdir $<)..."
	@$(IF) $(TARGET_CC) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(CURDIR)/$<: $(TARGET_CC) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TARGET_CC) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


$(OBJDIR)/%.d : %.c
		@$(IF) [ ! -d $(@D) ]; then $(MKDIR) $(@D) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@$(MKDEPEND) $(CFLAGS) $< -o $@


setup ::
		@$(FOR) dir in $(OBJDIR) $(LIBDIR) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done


clean ::
	-@$(RM) $(OBJDIR)


# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

# Include these files but only if the current target is neither
# setup nor clean.
ifeq (,$(filter clean% %clean %clean% setup% includes% ,$(TARGET)))
-include $(DEPS)
endif
