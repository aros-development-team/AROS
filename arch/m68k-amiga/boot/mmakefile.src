include $(TOP)/config/make.cfg
#
# Rules to create AROS Kernel for amiga-m68k
#

Q ?= @

#MM- kernel-link-amiga-m68k : general-setup-amiga-m68k

#MM- kernel-link-amiga-m68k : \
#MM     kernel-objs \
#MM     kernel-debug-kobj \
#MM     kernel-amiga-m68k-devs \
#MM     kernel-amiga-m68k-kbd-kobj \
#MM     kernel-amiga-m68k-mouse-kobj \
#MM     kernel-amiga-m68k-amigavideo-kobj \
#MM     kernel-amiga-m68k-uaegfx-kobj \
#MM     kernel-disk-kobj \
#MM     kernel-potgo-kobj \
#MM     kernel-misc-kobj \
#MM     kernel-fs-cdvdfs-kobj \
#MM     workbench-libs-workbench-kobj \
#MM     kernel-bootloader-amiga-m68k-kobj \
#MM     kernel-c-shellcommands-kobj \
#MM     workbench-libs-icon-kobj \
#MM     workbench-libs-gadtools-kobj \
#MM     kernel-partition-kobj \
#MM     kernel-workbook-kobj \
#MM     kernel-amiga-m68k-wbtag-kobj \
#MM     kernel-workbench-devs-amiga-m68k \
#MM     kernel-usb-amiga-m68k \
#MM     kernel-fs-afs-kobj \
#MM     kernel-fs-con-kobj \
#MM     kernel-kernel-kobj \
#MM     kernel-cia-kobj \
#MM     kernel-alerthook-kobj \
#MM     workbench-libs-mathffp-kobj \
#MM     kernel-amiga-m68k-audio-kobj \
#MM     kernel-ata-kobj \
#MM     kernel-shell-kobj \
#MM     kernel-filesystem-kobj \
#MM     kernel-m680x0-kobj \
#MM     linklibs-loadseg

#MM- kernel-workbench-devs-amiga-m68k : workbench-devs-amiga-m68k

USELIBS := amiga arossupport rom arosm autoinit libinit \
	   hiddstubs 
LIBS    := $(addprefix -l,$(USELIBS)) -L$(GENDIR)/lib -lloadseg
DEPLIBS := $(addprefix $(LIBDIR)/lib,$(addsuffix .a,$(USELIBS)))

# Main ROM (0xf80000 - 0xffffff)
FILES=start early debug mmu
AFILES=rom_entry rom_init cpu_detect superstack_swap

# Force rebuilding, so that we always get new date strings
rom_entry.o: FORCE

ext_entry.o: FORCE

# USe -m68000 when compiling .S files, as we will need the
# expanded instruction set to detect alterate CPUs
USER_AFLAGS := -m68060 -DADATE="\"$(shell date "+%d.%m.%Y")\""

# Sadly, we need to consume Chip RAM for the initial SS and the ROM BSS.
# The initial System Stack is located at 0x800-0x1000, but is only
# used until RTF_COLDSTART.
#
# Right before RTF_COLDSTART, a new SS will be allocated from the fastest
# available RAM, and this 0x800-0x1000 area will be ignored.
ROMLOC_ss  := 0x0000800

# The BSS should be located as close as possible to the start of
# MEMF_CHIP memory for the in-ROM version, to maximize the 
# contigous available memory. It must physically abut the MemHeader,
# so that mh->mh_First is *after* the .bss, otherwise krnRomTagScanner
# will not be able to allocate any memory.
#
# This turns out to be:
#
# ChipRamStart + sizeof(MemHeader)
#       0x1000 +       0x20
ROMLOC_bss := 0x0001020

ROMLOC_rom := 0x0f80000

KLIBS   := exec aros dos utility oop expansion mathffp partition debug
KDEVS   := timer input keyboard console trackdisk gameport audio ata
KHNDLRS := con afs amberram
KHIDDS  := hiddclass graphics keyboard mouse amigakbd amigamouse amigavideo uaegfx
KRSRCS  := battclock kernel processor lddemon dosboot cia potgo disk FileSystem misc shell
KHOOKS  :=

KOBJS_rom := $(addprefix $(KOBJSDIR)/,$(addsuffix _library.ko ,$(KLIBS))) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _device.ko  ,$(KDEVS))) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _handler.ko ,$(KHNDLRS))) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _hidd.ko    ,$(KHIDDS))) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _resource.ko,$(KRSRCS))) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _driver.ko  ,$(KDRVRS) )) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _hook.ko    ,$(KHOOKS) ))

OBJS_rom := $(addprefix $(KOBJSDIR)/,$(addsuffix .o,$(AFILES))) \
	    $(addprefix $(KOBJSDIR)/,$(addsuffix .o,$(FILES)))
$(DISTDIR)/aros-amiga-m68k-rom.elf: $(KOBJS_rom) $(OBJS_rom)

# Expansion ROM (0xe00000-0xe7ffff)
FILES   := 
AFILES  := ext_entry

KLIBS   :=  keymap graphics layers intuition gadtools icon workbench 680x0
KDEVS   := 
KHNDLRS := cdrom
KHIDDS  :=
KRSRCS  := shellcommands workbook wbtag
KHOOKS  := alert

ROMLOC_ext := 0xe00000
KOBJS_ext := \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _library.ko ,$(KLIBS)  )) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _device.ko  ,$(KDEVS)  )) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _handler.ko ,$(KHNDLRS))) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _hidd.ko    ,$(KHIDDS) )) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _resource.ko,$(KRSRCS) )) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _driver.ko  ,$(KDRVRS) )) \
	$(addprefix $(KOBJSDIR)/,$(addsuffix _hook.ko    ,$(KHOOKS) ))
OBJS_ext := $(addprefix $(KOBJSDIR)/,$(addsuffix .o,$(AFILES))) \
	    $(addprefix $(KOBJSDIR)/,$(addsuffix .o,$(FILES)))
$(DISTDIR)/aros-amiga-m68k-ext.elf: $(KOBJS_ext) $(OBJS_ext)

#MM kernel-link-amiga-m68k:
kernel-link-amiga-m68k : $(DISTDIR)/aros-amiga-m68k-rom.bin $(DISTDIR)/aros-amiga-m68k-ext.bin

#MM kernel-link-amiga-m68k-quick: 
kernel-link-amiga-m68k-quick : $(DISTDIR)/aros-amiga-m68k-rom.bin $(DISTDIR)/aros-amiga-m68k-ext.bin

$(HOSTGENDIR)/tools/romcheck: romcheck.c
	$(Q)$(HOST_CC) $(DEBUG_CFLAGS) -o $@ $<

$(GENDIR)/%_objs.ld: $(SRCDIR)/$(CURDIR)/mmakefile.src
	$(Q)rm -f $@
	$(Q)for file in $(OBJS_$*) $(KOBJS_$*); do \
		echo "$$file(.rodata .rodata.* .text)" >>$@; \
	done

$(DISTDIR)/aros-amiga-m68k-reloc.elf : $(DEPLIBS) $(SRCDIR)/$(CURDIR)/mmakefile.src \
	$(OBJS_rom) $(KOBJS_rom) \
        $(OBJS_ext) $(KOBJS_ext) \
	$(SRCDIR)/$(CURDIR)/aros.ld \
	$(GENDIR)/rom_objs.ld \
	$(GENDIR)/ext_objs.ld
	@$(MKDIR) $(DISTDIR)
	@$(ECHO) Linking $@...
	$(Q)$(KERNEL_CC) -Wl,-r \
		-static -nostartfiles -nostdlib \
		-Wl,--defsym -Wl,SysBase=0x4 \
		-m68000 \
		-o $@ -Wl,-T -Wl,$(SRCDIR)/$(CURDIR)/aros.ld \
		-L$(LIBDIR) $(LIBS) -lgcc

$(DISTDIR)/aros-amiga-m68k.elf: $(DISTDIR)/aros-amiga-m68k-reloc.elf
	$(Q)$(KERNEL_LD) -o $@ \
	    --section-start .rom=$(ROMLOC_rom) \
	    --section-start .ext=$(ROMLOC_ext) \
	    --section-start .ss=$(ROMLOC_ss) \
	    --section-start .bss=$(ROMLOC_bss) \
	    $<
	$(Q)$(TARGET_OBJDUMP) -h $@ | grep '[rea][oxm][mte]   '

$(DISTDIR)/aros-amiga-m68k-%.bin : $(DISTDIR)/aros-amiga-m68k.elf $(HOSTGENDIR)/tools/romcheck
	$(Q)$(TARGET_OBJCOPY) \
		--output-target binary \
		--only-section=.$* \
		--gap-fill 0xff \
		$(DISTDIR)/aros-amiga-m68k.elf $@
	$(Q)echo -n "$*: "
	$(Q)$(HOSTGENDIR)/tools/romcheck $@

#MM
clean ::
	-$(RM) $(TESTS)

$(KOBJSDIR)/%.o : %.c
	%compile_q cmd="$(KERNEL_CC)" opt="$(CFLAGS) $(USER_CFLAGS) -I$(SRCDIR)/arch/$(CPU)-$(ARCH)/exec -I$(SRCDIR)/rom/exec -I$(BINDIR)/Development/include -I$(GENINCDIR) -I$(SRCDIR)/arch/$(CPU)-$(ARCH)/kernel -I$(SRCDIR)/rom/kernel"

$(KOBJSDIR)/%.o : %.S
	%compile_q cmd="$(KERNEL_CC)" opt="$(CFLAGS) $(AFLAGS) $(USER_AFLAGS) -I$(BINDIR)/Development/include -I$(GENINCDIR) -I$(SRCDIR)/rom/exec -I$(SRCDIR)/arch/$(CPU)-$(ARCH)/kernel -I$(SRCDIR)/rom/kernel"

$(KOBJSDIR)/%.d : %.c
	%mkdepend_q

# Localize symbols, so that we don't get name clashes when linking
#
# .. except for exec.library. Our boot code needs symbols from it
#    (PrepareMoveExecBase, InitKickTags, etc)
%/exec_library.ko: %/exec_library.o
	$(Q)$(CP) $< $@

# .. except for kernel.resource. Our boot code needs symbols from it
#    (krnPrepareExecBase and krnCreateMemHeader)
%/kernel_resource.ko: %/kernel_resource.o
	$(Q)$(CP) $< $@

# Localize symbols for everybody else though!
%.ko: %.o
	$(Q)$(NM_PLAIN) --defined-only $< | cut -d' ' -f3 >$@.sym
	$(Q)$(OBJCOPY) --localize-symbols $@.sym $< $@

DEPS		:= $(foreach f, $(FILES), $(TARGETDIR)/$(f).d)
-include $(DEPS)

## Compressed elf for AROSBootstrap

BOOTDIR := $(BINDIR)/boot

#MM- kernel-link-amiga-m68k: kernel-boot-elf-gz
#MM- kernel-link-amiga-m68k-quick: kernel-boot-elf-gz-quick

#MM kernel-boot-elf-gz:
#MM kernel-boot-elf-gz-quick:
kernel-boot-elf-gz: $(BOOTDIR)/aros.elf.gz
kernel-boot-elf-gz-quick: $(BOOTDIR)/aros.elf.gz

$(BOOTDIR)/aros.elf.gz: $(DISTDIR)/aros-amiga-m68k-reloc.elf \
	$(SRCDIR)/$(CURDIR)/mmakefile.src
	$(Q)$(MKDIR) $(GENDIR)/$(CURDIR)
	$(Q)$(TARGET_OBJCOPY) \
	    --strip-unneeded \
	    $< $(GENDIR)/$(CURDIR)/aros.elf
	$(Q)$(MKDIR) $(BOOTDIR)
	$(Q)gzip -c $(GENDIR)/$(CURDIR)/aros.elf >$@
	$(Q)$(RM) -f $(GENDIR)/$(CURDIR)/aros.elf

%common
