# Helper library for grub-mkconfig
# Copyright (C) 2007,2008,2009  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

transform="@program_transform_name@"

prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@
datadir=@datadir@
sbindir=@sbindir@
pkgdatadir=${datadir}/`echo @PACKAGE_TARNAME@ | sed "${transform}"`

grub_probe=${sbindir}/`echo grub-probe | sed ${transform}`

grub_warn ()
{
  echo "Warning: $@" >&2
}

make_system_path_relative_to_its_root ()
{
  path=$1
  # abort if file doesn't exist
  if test -e $path ; then : ;else
    return 1
  fi

  # canonicalize
  if path=`readlink -f $path` ; then : ; else
    return 1
  fi

  # if not a directory, climb up to the directory containing it
  if test -d $path ; then
    dir=$path
  else
    dir=`echo $path | sed -e "s,/[^/]*$,,g"`
  fi

  num=`stat -c %d $dir`

  # this loop sets $dir to the root directory of the filesystem we're inspecting
  while : ; do
    parent=`readlink -f $dir/..`
    if [ "x`stat -c %d $parent`" = "x$num" ] ; then : ; else
      # $parent is another filesystem; we found it.
      break
    fi
    if [ "x$dir" = "x/" ] ; then
      # / is our root.
      break
    fi
    dir=$parent
  done

  # This function never prints trailing slashes (so that its output can be
  # appended a slash unconditionally).  Each slash in $dir is considered a
  # preceding slash, and therefore the root directory is an empty string.
  if [ "$dir" = "/" ] ; then
    dir=""
  fi

  # XXX: This fails if $dir contains ','.
  path=`echo "$path" | sed -e "s,^$dir,,g"` || return 1

  case "`uname 2>/dev/null`" in
    CYGWIN*)
      # Cygwin: Check if regular or emulated mount.
      if [ -z "$dir" ] || [ "`stat -c %D "$dir/.."`" != 620000 ] ; then
        # Reached some mount point not below /cygdrive.
        # GRUB does not know Cygwin's emulated mounts,
        # convert to Win32 path and remove drive letter.
        path=`cygpath -m "$path" | sed -n 's,^[A-Za-z]:,,p'`
        test ! -z "$path" || return 1
      fi ;;
  esac

  echo "$path"
}

is_path_readable_by_grub ()
{
  path=$1

  # abort if path doesn't exist
  if test -e $path ; then : ;else
    return 1
  fi

  # abort if file is in a filesystem we can't read
  if ${grub_probe} -t fs $path > /dev/null 2>&1 ; then : ; else
    return 1
  fi

  return 0
}

convert_system_path_to_grub_path ()
{
  path=$1

  grub_warn "convert_system_path_to_grub_path() is deprecated.  Use prepare_grub_to_access_device() instead."

  # abort if GRUB can't access the path
  if is_path_readable_by_grub ${path} ; then : ; else
    return 1
  fi

  if drive=`${grub_probe} -t drive $path` ; then : ; else
    return 1
  fi

  if relative_path=`make_system_path_relative_to_its_root $path` ; then : ; else
    return 1
  fi

  echo ${drive}${relative_path}
}

prepare_grub_to_access_device ()
{
  device=$1

  # Abstraction modules aren't auto-loaded.
  abstraction="`${grub_probe} --device ${device} --target=abstraction`"
  for module in ${abstraction} ; do 
    echo "insmod ${module}"
  done

  fs="`${grub_probe} --device ${device} --target=fs`"
  for module in ${fs} ; do
    echo "insmod ${module}"
  done

  # If there's a filesystem UUID that GRUB is capable of identifying, use it;
  # otherwise set root as per value in device.map.
  echo "set root=`${grub_probe} --device ${device} --target=drive`"
  if fs_uuid="`${grub_probe} --device ${device} --target=fs_uuid 2> /dev/null`" ; then
    echo "search --no-floppy --fs-uuid --set ${fs_uuid}"
  fi
}

grub_file_is_not_garbage ()
{
  if test -f "$1" ; then
    case "$1" in
      *.dpkg-dist|*.dpkg-old|*.dpkg-tmp) return 1 ;; # debian dpkg
    esac
  else
    return 1
  fi
  return 0
}

version_test_numeric ()
{
  local a=$1
  local cmp=$2
  local b=$3
  if [ "$a" = "$b" ] ; then
    case $cmp in
      ge|eq|le) return 0 ;;
      gt|lt) return 1 ;;
    esac
  fi
  if [ "$cmp" = "lt" ] ; then
    c=$a
    a=$b
    b=$c
  fi
  if (echo $a ; echo $b) | sort -n | head -n 1 | grep -qx $b ; then
    return 0
  else
    return 1
  fi
}

version_test_gt ()
{
  local a=`echo $1 | sed -e "s/[^-]*-//"`
  local b=`echo $2 | sed -e "s/[^-]*-//"`
  local cmp=gt
  if [ "x$b" = "x" ] ; then
    return 0
  fi
  case $a:$b in
    *.old:*.old) ;;
    *.old:*) a=`echo -n $a | sed -e s/\.old$//` ; cmp=gt ;;
    *:*.old) b=`echo -n $b | sed -e s/\.old$//` ; cmp=ge ;;
  esac
  version_test_numeric $a $cmp $b
  return $?
}

version_find_latest ()
{
  local a=""
  for i in $@ ; do
    if version_test_gt "$i" "$a" ; then
      a="$i"
    fi
  done
  echo "$a"
}
