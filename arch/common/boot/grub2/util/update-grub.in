#! /bin/sh -e

# Generate grub.cfg by inspecting /boot contents.
# Copyright (C) 2006,2007,2008  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

transform="@program_transform_name@"

prefix=@prefix@
exec_prefix=@exec_prefix@
sbindir=@sbindir@
libdir=@libdir@
sysconfdir=@sysconfdir@
grub_prefix=`echo /boot/grub | sed ${transform}`
grub_cfg=${grub_prefix}/grub.cfg
update_grub_dir=${sysconfdir}/grub.d
platform=@platform@

grub_mkdevicemap=${sbindir}/`echo grub-mkdevicemap | sed ${transform}`
grub_probe=${sbindir}/`echo grub-probe | sed ${transform}`

# Usage: usage
# Print the usage.
usage () {
    cat <<EOF
Usage: $0 [OPTION]
Generate /boot/grub/grub.cfg

  -h, --help              print this message and exit
  -v, --version           print the version information and exit
  -y                      ignored for compatibility

Report bugs to <bug-grub@gnu.org>.
EOF
}

# Check the arguments.
for option in "$@"; do
    case "$option" in
    -h | --help)
	usage
	exit 0 ;;
    -v | --version)
	echo "$0 (GNU GRUB ${PACKAGE_VERSION})"
	exit 0 ;;
    -y)
        echo "$0: warning: Ignoring -y option (no longer needed)." >&2
        ;;
    -*)
	echo "Unrecognized option \`$option'" 1>&2
	usage
	exit 1
	;;
    esac
done

# for convert_system_path_to_grub_path(), font_path()
. ${libdir}/grub/update-grub_lib

if [ "x$UID" = "x" ] ; then
  UID=`id -u`
fi

if [ "$UID" != 0 ] ; then
  echo "$0: You must run this as root" >&2
  exit 1
fi

set $grub_mkdevicemap dummy
if test -f "$1"; then
    :
else
    echo "$1: Not found." 1>&2
    exit 1
fi

set $grub_probe dummy
if test -f "$1"; then
    :
else
    echo "$1: Not found." 1>&2
    exit 1
fi

mkdir -p ${grub_prefix}

if test -e ${grub_prefix}/device.map ; then : ; else
  grub-mkdevicemap
fi

# Device containing our userland.  Typically used for root= parameter.
GRUB_DEVICE="`grub-probe --target=device /`"

# Filesystem for the device containing our userland.  Used for stuff like
# choosing Hurd filesystem module.
GRUB_FS="`grub-probe --target=fs / 2> /dev/null || echo unknown`"

# GRUB path to /.  Only used for "set root=".  Not critical.
GRUB_DRIVE="`grub-probe --target=drive /`" || true

# GRUB path to /boot
GRUB_DRIVE_BOOT="`convert_system_path_to_grub_path /boot`"

# GRUB path to /boot/grub
GRUB_DRIVE_BOOT_GRUB="`convert_system_path_to_grub_path /boot/grub`"

if test -f ${sysconfdir}/default/grub ; then
  . ${sysconfdir}/default/grub
fi

# if ${GRUB_TERMINAL} is set, check it has a sane value.  if undefined,
# fallback to our default
case ${platform}:${GRUB_TERMINAL} in
  pc:)				GRUB_TERMINAL=gfxterm ;;
  ieee1275:)			GRUB_TERMINAL=ofconsole ;;
  *:)				GRUB_TERMINAL=console ;;
  pc:console | pc:serial | ieee1275:ofconsole | ieee1275:console | *:gfxterm)
				;;
  *:*)				echo "Invalid terminal \"${GRUB_TERMINAL}\"" >&2 ; exit 1 ;;
esac

# check for terminals that require fonts
case ${GRUB_TERMINAL} in
  gfxterm)
    if path=`font_path` ; then
      GRUB_FONT_PATH="`convert_system_path_to_grub_path ${path}`"
      GRUB_PRELOAD_MODULES="`${GRUB_PRELOAD_MODULES} ${grub_probe} -t abstraction ${path}`"
    else
      # fallback to console
      GRUB_TERMINAL=console
    fi
  ;;
esac

# does our terminal support utf-8 ?
case ${platform}:${GRUB_TERMINAL} in
  *:gfxterm) ;;
  *:*)
    # make sure all our children behave in conformance with ascii..
    export LANG=C
  ;;
esac

# These are defined in this script, export them here so that user can
# override them.
export GRUB_DEVICE GRUB_FS GRUB_DRIVE GRUB_DRIVE_BOOT GRUB_DRIVE_BOOT_GRUB GRUB_FONT_PATH GRUB_PRELOAD_MODULES

# These are optional, user-defined variables.
export GRUB_DEFAULT GRUB_TIMEOUT GRUB_DISTRIBUTOR GRUB_CMDLINE_LINUX GRUB_TERMINAL GRUB_SERIAL_COMMAND

exec > ${grub_cfg}.new
chmod 444 ${grub_cfg}.new

echo "Updating ${grub_cfg} ..." >&2

cat << EOF
#
# DO NOT EDIT THIS FILE
#
# It is automatically generated by $0 using templates
# from ${update_grub_dir} and settings from ${sysconfdir}/default/grub
#
EOF

for i in ${update_grub_dir}/* ; do
  case "$i" in
    # emacsen backup files. FIXME: support other editors
    *~) ;;
    *)
      if grub_file_is_not_garbage "$i" && test -x "$i" ; then
        echo
        echo "### BEGIN $i ###"
        "$i"
        echo "### END $i ###"
      fi
    ;;
  esac
done

# none of the children aborted with error, install the new grub.cfg
mv ${grub_cfg}.new ${grub_cfg}

echo "done" >&2
