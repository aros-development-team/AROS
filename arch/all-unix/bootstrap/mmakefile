# $Id: mmakefile.src 34117 2010-08-13 11:13:30Z sonic $
include $(TOP)/config/make.cfg

EXEDIR  := $(BINDIR)/boot

FILES         := hostinterface hostlib shutdown support
USER_INCLUDES := -I$(SRCDIR)/arch/all-hosted/bootstrap \
		 -I$(SRCDIR)/arch/all-unix/kernel   \
		 -I$(GENINCDIR)


ifeq ($(FILES) ,)
  $(error no files or asmfiles given)
endif

BDID := $(BDID)_
ifneq ($(filter $(TARGET),kernel-bootstrap-hosted-unix),)
BDTARGETID := $(BDID)
endif

ifeq ($(AROS_TARGET_VARIANT),)
#MM- kernel-bootstrap-hosted : kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
#MM- kernel-bootstrap-hosted-linklib : kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
#MM- kernel-bootstrap-hosted-kobj : kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
#MM- kernel-bootstrap-hosted-kobj-quick : kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
#MM- kernel-bootstrap-hosted-quick : kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
else
#MM- kernel-bootstrap-hosted : kernel-bootstrap-hosted-$(ARCH)-$(CPU)-$(AROS_TARGET_VARIANT) kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
#MM- kernel-bootstrap-hosted-linklib : kernel-bootstrap-hosted-$(ARCH)-$(CPU)-$(AROS_TARGET_VARIANT) kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
#MM- kernel-bootstrap-hosted-kobj : kernel-bootstrap-hosted-$(ARCH)-$(CPU)-$(AROS_TARGET_VARIANT) kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
#MM- kernel-bootstrap-hosted-kobj-quick : kernel-bootstrap-hosted-$(ARCH)-$(CPU)-$(AROS_TARGET_VARIANT) kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
#MM- kernel-bootstrap-hosted-quick : kernel-bootstrap-hosted-$(ARCH)-$(CPU)-$(AROS_TARGET_VARIANT) kernel-bootstrap-hosted-$(ARCH)-$(CPU) kernel-bootstrap-hosted-$(ARCH) kernel-bootstrap-hosted-$(CPU)
endif

#MM kernel-bootstrap-hosted-unix : kernel-bootstrap-hosted-includes

ifeq (unix,)
  $(error argument arch has to be non empty for the rule_compile_archspecific macro)
endif

BD_OBJDIR$(BDID)  := $(GENDIR)/arch/all-hosted/bootstrap/arch
BD_COBJS$(BDID)   := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(notdir $(FILES))))
BD_ASMOBJS$(BDID) := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(notdir )))
BD_OBJS$(BDID)    := $(BD_COBJS$(BDID)) $(BD_ASMOBJS$(BDID))
BD_DEPS$(BDID)    := $(addsuffix .d,$(addprefix $(BD_OBJDIR$(BDID))/,$(notdir $(FILES))))

ifeq ($(TARGET),kernel-bootstrap-hosted-unix)
TMP_SRCDIR := $(shell echo $(SRCDIR) | sed 's/^\(.\):\//\/\1\//')
vpath %.c $(addprefix $(TMP_SRCDIR)/$(CURDIR)/,$(dir $(FILES)))
vpath %.s $(addprefix $(TMP_SRCDIR)/$(CURDIR)/,$(dir ))
vpath %.S $(addprefix $(TMP_SRCDIR)/$(CURDIR)/,$(dir ))
endif

$(BD_OBJS$(BDID)) : | $(BD_OBJDIR$(BDID))
GLOB_MKDIRS += $(BD_OBJDIR$(BDID))

#MM
kernel-bootstrap-hosted-unix :: $(BD_OBJS$(BDID))

ifeq ($(findstring kernel,host kernel target),)
  $(error unknown compiler kernel)
endif
ifeq (kernel,target)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_CMD:=$(TARGET_CC)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_IQUOTE:=$(CFLAGS_IQUOTE)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_IQUOTE_END:=$(CFLAGS_IQUOTE_END)
endif
ifeq (kernel,host)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_CMD:=$(HOST_CC)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_IQUOTE:=$(HOST_IQUOTE)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_IQUOTE_END:=$(HOST_IQUOTE_END)
endif
ifeq (kernel,kernel)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_CMD:=$(KERNEL_CC) $(KERNEL_CFLAGS)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_IQUOTE:=$(KERNEL_IQUOTE)
$(BD_COBJS$(BDID)) $(BD_DEPS$(BDID)) : TMP_IQUOTE_END:=$(KERNEL_IQUOTE_END)
endif
ifneq (,)
$(BD_COBJS$(BDID)) : TMP_CFLAGS:=$(CFLAGS) -I$(GENDIR)/arch/all-hosted/bootstrap \
                     -include $(GENDIR)/arch/all-hosted/bootstrap/include/_deflibdefs.h
else
$(BD_COBJS$(BDID)) : TMP_CFLAGS:=$(CFLAGS)
endif
ifeq ($(TARGET),kernel-bootstrap-hosted-unix)
$(BD_OBJDIR$(BDID))/%.o : %.c
	@$(ECHO) "Compiling $<"
	@$(IF) $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(TMP_CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(TMP_CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(TMP_CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
endif

ifeq (,)
$(BD_DEPS$(BDID)) : TMP_DFLAGS:=$(CFLAGS)
else
$(BD_DEPS$(BDID)) : TMP_DFLAGS:=
endif
ifeq ($(TARGET),kernel-bootstrap-hosted-unix)
$(BD_OBJDIR$(BDID))/%.d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(TMP_CMD)" $(MKDEPEND) $(TMP_DFLAGS) -I$(SRCDIR)/$(CURDIR) $< -o $@
endif

$(BD_ASMOBJS$(BDID)) : AFLAGS:=$(AFLAGS)

ifeq ($(TARGET),kernel-bootstrap-hosted-unix)
$(BD_OBJDIR$(BDID))/%.o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
$(BD_OBJDIR$(BDID))/%.o : %.S
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
endif

ifneq ($(BD_DEPS$(BDID)),)
  ifneq (kernel-bootstrap-hosted-unix,)
    ifneq ($(findstring $(TARGET),kernel-bootstrap-hosted-unix),)
      -include $(BD_DEPS$(BDID))
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS$(BDID))
    endif
  endif
endif

# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

include $(SRCDIR)/config/make.tail

BDID := $(BDTARGETID)
