# $Id: mmakefile.src 33939 2010-07-28 10:43:06Z sonic $
include $(TOP)/config/make.cfg

FILES  := bootstrap elfloader32 hostlib debug shutdown
EXEDIR := $(BINDIR)/boot

USER_INCLUDES := -I$(GENINCDIR)

#MM
kernel-bootstrap-unix: $(EXEDIR)/AROSBootstrap.conf


.PHONY : kernel-bootstrap-unix

BD_PROGNAME  := AROSBootstrap
BD_OBJDIR    := $(GENDIR)/$(CURDIR)
BD_TARGETDIR := $(EXEDIR)

BD_FILES     := $(FILES)
BD_ASMFILES  := 
BD_OBJS      := $(addsuffix .o,$(addprefix $(BD_OBJDIR)/,$(BD_FILES) $(BD_ASMFILES)))
BD_DEPS      := $(addsuffix .d,$(addprefix $(BD_OBJDIR)/,$(BD_FILES)))

BD_CFLAGS    := $(CFLAGS)
BD_AFLAGS    := $(AFLAGS)
BD_DFLAGS    := $(BD_CFLAGS)
BD_LDFLAGS   := $(LDFLAGS)

#MM
kernel-bootstrap-unix-quick : kernel-bootstrap-unix

#MM kernel-bootstrap-unix : includes-generate-deps
kernel-bootstrap-unix : $(BD_TARGETDIR)/$(BD_PROGNAME)

ifneq ($(filter $(TARGET),kernel-bootstrap-unix kernel-bootstrap-unix-quick),)

ifeq ($(BD_OBJDIR),)
  TMP_TARGETBASE := %
else
  TMP_TARGETBASE := $(BD_OBJDIR)/$(notdir %)
endif

ifeq ($(findstring kernel,host kernel target),)
  $(error unknown compiler kernel)
endif
ifeq (kernel,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(TARGET_CC)
$(TMP_TARGETBASE).o : TMP_IQUOTE:=$(CFLAGS_IQUOTE)
$(TMP_TARGETBASE).d : TMP_IQUOTE:=$(CFLAGS_IQUOTE)
$(TMP_TARGETBASE).o : TMP_IQUOTE_END:=$(CFLAGS_IQUOTE_END)
$(TMP_TARGETBASE).d : TMP_IQUOTE_END:=$(CFLAGS_IQUOTE_END)
endif
ifeq (kernel,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(HOST_CC)
$(TMP_TARGETBASE).o : TMP_IQUOTE:=$(HOST_IQUOTE)
$(TMP_TARGETBASE).d : TMP_IQUOTE:=$(HOST_IQUOTE)
$(TMP_TARGETBASE).o : TMP_IQUOTE_END:=$(HOST_IQUOTE_END)
$(TMP_TARGETBASE).d : TMP_IQUOTE_END:=$(HOST_IQUOTE_END)
endif
ifeq (kernel,kernel)
$(TMP_TARGETBASE).o : TMP_CMD:=$(KERNEL_CC) $(KERNEL_CFLAGS)
$(TMP_TARGETBASE).d : TMP_CMD:=$(KERNEL_CC) $(KERNEL_CFLAGS)
$(TMP_TARGETBASE).o : TMP_IQUOTE:=$(KERNEL_IQUOTE)
$(TMP_TARGETBASE).d : TMP_IQUOTE:=$(KERNEL_IQUOTE)
$(TMP_TARGETBASE).o : TMP_IQUOTE_END:=$(KERNEL_IQUOTE_END)
$(TMP_TARGETBASE).d : TMP_IQUOTE_END:=$(KERNEL_IQUOTE_END)
endif

ifeq (no,yes)
  $(TMP_TARGETBASE).o : CFLAGS := -nix $(BD_CFLAGS)
else
  $(TMP_TARGETBASE).o : CFLAGS := $(BD_CFLAGS)
endif
$(TMP_TARGETBASE).o : %.c
	@$(ECHO) "Compiling $<"
	@$(IF) $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS),)
  ifeq (no,yes)
    $(TMP_TARGETBASE).d : TMP_DFLAGS:=-nix $(BD_CFLAGS)
  else
    $(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS)
  endif
else
  ifeq (no,yes)
    $(TMP_TARGETBASE).d : TMP_DFLAGS:=-nix $(BD_DFLAGS)
  else
    $(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS)
  endif
endif
$(TMP_TARGETBASE).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(TMP_CMD)" $(MKDEPEND) $(TMP_DFLAGS) -I$(SRCDIR)/$(CURDIR) $< -o $@

ifeq ($(BD_OBJDIR),)
TMP_TARGETS := $(addsuffix .o,$(BD_ASMFILES))
TMP_WILDCARD := %
else
TMP_TARGETS := $(addsuffix .o,$(addprefix $(BD_OBJDIR)/,$(notdir $(BD_ASMFILES))))
TMP_WILDCARD := $(BD_OBJDIR)/%

# Be sure that all .s files are generated
$(TMP_TARGETS) : | $(addsuffix .s,$(BD_ASMFILES))

# Be sure that all .c files are found
TMP_SRCDIR := $(shell echo $(SRCDIR) | sed 's/^\(.\):\//\/\1\//')
TMP_BASEDIRS := $(shell echo $(sort $(dir $(BD_ASMFILES))) | sed 's/\(.\):\//\/\1\//g')
TMP_DIRS := $(foreach dir, $(TMP_BASEDIRS), $(if $(filter /%,$(dir)),$(dir),$(TMP_SRCDIR)/$(CURDIR)/$(dir)))
ifneq ($(TMP_DIRS),)
    TMP_DIRS := $(shell echo $(TMP_DIRS) | sed 's/\(.\):\//\/\1\//g')
    vpath %.s $(TMP_DIRS)
endif

endif

$(TMP_TARGETS) : AFLAGS := $(BD_AFLAGS)
$(TMP_TARGETS) : $(TMP_WILDCARD).o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


TMP_EXTRA_LDFLAGS := 
ifeq (no,yes)
    TMP_EXTRA_LDFLAGS += $(NIX_LDFLAGS)
endif
ifeq (yes,no)
    TMP_EXTRA_LDFLAGS += $(NOSTARTUP_LDFLAGS)
endif
ifeq (no,yes)
    TMP_EXTRA_LDFLAGS += $(DETACH_LDFLAGS)
endif

# Make a list of the lib files this program depends on.
ifneq (dl,)
# In LDFLAGS remove white space between -L and directory
TMP_DIRS := $(subst -L ,-L,$(strip $(BD_LDFLAGS)))
# Filter out only the libdirs and remove -L
TMP_DIRS := $(patsubst -L%,%,$(filter -L%,$(TMP_DIRS)))
# Add trailing /
TMP_DIRS := $(subst //,/,$(addsuffix /,$(TMP_DIRS)))
# Add normal linklib path
TMP_DIRS += $(LIBDIR)/
# add lib and .a to static linklib names
TMP_LIBS := $(addprefix lib,$(addsuffix .a,dl libinit autoinit))
# search for the linklibs in the given path, ignore ones not found
TMP_DEPLIBS := $(foreach lib,$(TMP_LIBS), \
    $(firstword $(wildcard $(addsuffix $(lib),$(TMP_DIRS)))) \
)
else
TMP_DEPLIBS :=
endif

ifeq (kernel,target)
$(BD_TARGETDIR)/$(BD_PROGNAME) : CMD:=$(TARGET_CC)
endif
ifeq (kernel,host)
$(BD_TARGETDIR)/$(BD_PROGNAME) : CMD:=$(HOST_CC)
endif
ifeq (kernel,kernel)
$(BD_TARGETDIR)/$(BD_PROGNAME) : CMD:=$(KERNEL_CC)
endif

$(BD_TARGETDIR)/$(BD_PROGNAME) : OBJS := $(BD_OBJS)
$(BD_TARGETDIR)/$(BD_PROGNAME) : LDFLAGS := $(BD_LDFLAGS) $(TMP_EXTRA_LDFLAGS)
$(BD_TARGETDIR)/$(BD_PROGNAME) : LIBS := $(addprefix -l,dl) $(addprefix -l,)
$(BD_TARGETDIR)/$(BD_PROGNAME) : $(BD_OBJS) $(TMP_DEPLIBS)
	@$(ECHO) "Linking $@..."
	@$(IF) $(CMD) $(LDFLAGS) $(OBJS) -o $@ $(LIBS) 2>&1 > $(GENDIR)/cerrors 2>&1 ; then \
		$(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
				$(ECHO) "$@: $(CMD) $(LDFLAGS) $(OBJS) -o $@ $(LIBS)" >> $(GENDIR)/errors ; \
				$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	   	else \
			$(NOP) ; \
    		fi ; \
	else \
	    $(ECHO) "Link failed: $(CMD) $(LDFLAGS) $(OBJS) -o $@ $(LIBS)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi; \
	$(STRIP) $@

endif

ifneq ($(BD_DEPS),)
  ifneq (kernel-bootstrap-unix kernel-bootstrap-unix-quick,)
    ifneq ($(findstring $(TARGET),kernel-bootstrap-unix kernel-bootstrap-unix-quick),)
      -include $(BD_DEPS)
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS)
    endif
  endif
endif

$(BD_OBJS) $(BD_DEPS) : | $(BD_OBJDIR)
$(BD_TARGETDIR)/$(BD_PROGNAME) : | $(BD_TARGETDIR)
GLOB_MKDIRS += $(BD_OBJDIR) $(BD_TARGETDIR)

kernel-bootstrap-unix-clean : FILES := $(BD_OBJS) $(BD_TARGETDIR)/$(BD_PROGNAME) $(BD_DEPS)
#MM
kernel-bootstrap-unix-clean ::
	@$(ECHO) "Cleaning up for metatarget kernel-bootstrap-unix"
	@$(RM) $(FILES)


$(EXEDIR)/AROSBootstrap.conf: AROSBootstrap.conf
	@$(CP) $^ $@

# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

include $(SRCDIR)/config/make.tail

BDID := $(BDTARGETID)
