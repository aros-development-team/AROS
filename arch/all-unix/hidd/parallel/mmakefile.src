### DO NOT MODIFY!
### THIS MAKEFILE IS MODIFIED TO LINK WITH LINUX LIBRARIES!!!! 

#$Id$
include $(TOP)/config/make.cfg

CC := $(HOST_CC)

USER_CFLAGS := -DAROS_USE_OOP

ILDFLAGS    := -nostartfiles -Xlinker -i -g -d

ifeq ($(ARCH),netbsd)
ILDFLAGS    := -nostartfiles -Xlinker -r -d
endif
ifeq ($(ARCH),openbsd)
ILDFLAGS    := -nostartfiles -Xlinker -r -d
endif

# Sigh, this is needed because libtail.c uses <libdefs.h> not "libdefs.h"
USER_INCLUDES := -I. -I /usr/include

# will be expand to LIBNAME.LIBPOST i.e. parallel.hidd
LIBNAME     := parallel
LIBPOST     := hidd
DESTDIR	    := $(HIDDSDIR)

OBJDIR	    := $(GENDIR)/$(CURDIR)

FILES       := ParallelClass ParallelUnitClass unix_funcs
	       
EXTRA_LIBS  := -L$(LIBDIR) -lunixiocl -lamiga

ifeq ($(FLAVOUR),native)
DEPLIBS := $(LIBDIR)/libhiddparallelstubs.a
else
DEPLIBS := $(LIBDIR)/libhiddparallelstubs.a
endif

LIBS := -lhiddparallelstubs


#Generate the shared object
ifndef LIBPOST
LIBPOST := library
endif
ifndef DESTDIR
DESTDIR	:= $(SLIBDIR)
endif
ifndef SLIB
SLIB := $(DESTDIR)/$(LIBNAME).$(LIBPOST)
endif
ifndef LIB
LIB := $(LIBDIR)/lib$(LIBNAME).a
endif
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := $(OBJDIR)/endtag
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(END_FILE).o
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPS
DEPS := $(foreach f, $(INIT_FILE) $(FILES) $(notdir $(END_FILE)), $(OBJDIR)/$(f).d)
endif

DESTDIRS := $(DESTDIRS) $(DESTDIR)

# Insert collection lib lib$(LIBNAME).a into $(LIBS) for final $(SLIB) target
STARTUP = $(LIBDIR)/startup.o
LIBS = -L/usr/lib -lc -L$(LIBDIR) -l$(LIBNAME) -larossupport -lamiga 
DEPLIBS = $(LIBDIR)/libamiga.a $(LIBDIR)/libarossupport.a $(STARTUP) \
	$(LIBDIR)/libarosm.a 


$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(MKDIR) $(DESTDIR)
	@$(CC) $(ILDFLAGS) $(GENMAP) $(OBJDIR)/$(LIBNAME)lib.map $(SYS_OBJS) $(LIBS) $(ENDFUNC) $(EXTRA_LIBS) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(ECHO) "Checking $@..."
	@$(CHECKUDS) $@ > undefdsyms.list
	@$(IF) $(TEST) -s undefdsyms.list ; then \
	    $(CAT) undefdsyms.list >> $(@F)-x.err ; \
	    $(ECHO) "There are undefined symbols in $@:" ; \
	    $(CAT) undefdsyms.list ; \
	else $(NOP) ; fi
	@$(RM) undefdsyms.list
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

# Collect all functions in a linklib for fast linking:
$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $?
	@$(RANLIB) $@

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h $(EXTRA_CLEAN) $(LIB) $(SLIB)

$(OBJDIR)/unix_funcs.o : unix_funcs.c
	%compile_q

$(OBJDIR)/%.o : %.c
	%compile_q

%libdefs_rule

FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)

%mkfunctable_arch

%mkendtag_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
	%mkdepend_q

# Include these files but only if the current target is neither
# setup nor clean.
ifeq (,$(filter clean% setup% includes% ,$(TARGET)))
-include $(DEPS)
endif



# Allways generate module in Sys:Hidds/

#MM- workbench-hidd-unix : hidd-parallel-unix-module

	
#MM hidd-parallel-unix-linklib : setup includes linklibs kernel-hidd-unix workbench-hidd-parallel-stubs
hidd-parallel-unix-linklib : $(LIB) setup
	@$(NOP)

#MM hidd-parallel-unix-module : setup includes linklibs kernel-hidd-unix workbench-hidd-parallel-stubs
hidd-parallel-unix-module : $(SLIB)
	@$(NOP)

# --- QUICK HACKS BEGIN --- 
# These are hacks for faster execution of "mmake" and "make". Use them
# only if you know set the setup is correct and do not add them as targets
# in other makefiles.
#
# Usage: 
#   mmake AROS.hidd-parallel-quick
#   make -f TOP=/dh1/AROS CURDIR=workbench/hidds/parallel mmakefile hidd-parallel-quick



#MM hidd-parallel-unix-module-quick : kernel-oop-$(ARCH)-$(CPU)
hidd-parallel-module-quick : $(LIB) $(SLIB)
	@$(NOP)

#MM hidd-parallel-unix-includes-quick : hidd-oop-$(ARCH)-$(CPU)
hidd-parallel-unix-includes-quick : setup-includes includes-copy 
	$(NOP)

# --- QUICK HACKS END ---


#MM
clean ::
	-$(RM) $(OBJDIR) *.err $(LIB) *.s


%common
