##begin config
version 3.1
residentpri 127
libbase KernelBase
libbasetype struct KernelBase
options noresident, noautolib
##end config
##begin cdef
#include <aros/types/spinlock_s.h>
#include <aros/kernel.h>
#include <exec/memory.h>
#include <utility/tagitem.h>
#include <utility/hooks.h>

#include <inttypes.h>
#include <stdarg.h>

static inline void __inline_KrnPrintf(APTR __KernelBase, const char *format, ...)
{
    va_list args;

    va_start(args, format);

    AROS_LC2(int, KrnBug,
    	     AROS_LCA(const char *, format, A0),
	     AROS_LCA(va_list, args, A1),
             APTR, __KernelBase, 12, Kernel);

    va_end(args);
}

#define KrnPrintf(...) __inline_KrnPrintf(KernelBase, __VA_ARGS__)

##end cdef
##begin cdefprivate
#include <aros/types/spinlock_s.h>
#include <aros/kernel.h>
#include <kernel_base.h>
##end cdefprivate
##begin functionlist
KRN_SchedType KrnGetScheduler() ()
void KrnSetScheduler(KRN_SchedType sched) (D0)
void KrnCause() ()
void KrnDispatch() ()
void KrnSwitch() ()
void KrnSchedule() ()
void * KrnAddIRQHandler(uint32_t irq, void *handler, void *handlerData, void *handlerData2) (D0, A0, A1, A2)
void KrnRemIRQHandler(void * handle) (A0)
void KrnCli() ()
void KrnSti() ()
struct TagItem *KrnGetBootInfo() ()
int KrnBug(const char *format, va_list args) (A0, A1)
int KrnIsSuper() ()
void * KrnAddExceptionHandler(uint8_t irq, void *handler, void *handlerData, void *handlerData2) (D0, A0, A1, A2)
void KrnRemExceptionHandler(void * handle) (A0)
int KrnMapGlobal(void *virtual, void *physical, uint32_t length, KRN_MapAttr flags) (A0, A1, D0, D1)
int KrnUnmapGlobal(void *virtual, uint32_t length) (A0, D0)
void *KrnCreateContext() ()
void KrnDeleteContext(void *context) (A0)
void *KrnVirtualToPhysical(void *virt) (A0)
void KrnSetProtection(void *address, uint32_t length, KRN_MapAttr flags) (A0, D0, D1)
.skip 3 # These were debug info functions, moved to debug.library
void KrnPutChar(char c) (D0)
int KrnMayGetChar() ()
void *KrnAllocPages(void *addr, uintptr_t length, uint32_t flags) (A0, D0, D1)
void KrnFreePages(void *phy_addr, uintptr_t length) (A0, D0)
intptr_t KrnGetSystemAttr(uint32_t id) (D0)
int KrnFormatStr(void *putch, const char *format, va_list args) (A0, A1, A2)
void KrnInitMemory(struct MemHeader *mh) (A0)
ULONG KrnStatMemoryA(uint32_t flags, struct TagItem *query) (D0, A0)
int KrnObtainInput() ()
void KrnReleaseInput() ()
void KrnDisplayAlert(uint32_t code, const char *text) (D0, A0)
.skip 1 # One LVO is reserved here
void KrnModifyIRQHandler(void *handle, void *handlerData, void *handlerData2) (A0, A1, A2)
ULONG KrnAllocIRQ(ULONG irq_type, ULONG count) (D0, D1)
ULONG KrnModifyIRQA(ULONG irq, struct TagItem *attribs) (D0, A0)
unsigned int KrnGetCPUCount() ()
uint32_t KrnGetCPUNumber() ()
void *KrnAllocCPUMask() ()
void *KrnFreeCPUMask(void *) (A0)
void KrnClearCPUMask(void *) (A0)
void KrnGetCPUMask(uint32_t number, void *) (D0, A0)
BOOL KrnCPUInMask(uint32_t number, void *) (D0, A0)
void KrnScheduleCPU(void *mask) (A0)
.skip 1 # One LVO is reserved here
void KrnSpinInit(spinlock_t *lock) (A0)
int KrnSpinIsLocked(spinlock_t *lock) (A0)
spinlock_t *KrnSpinTryLock(spinlock_t *lock, ULONG mode) (A0, D0)
spinlock_t *KrnSpinLock(spinlock_t *lock, struct Hook *failhook, ULONG mode) (A1, A0, D0)
void KrnSpinUnLock(spinlock_t *lock) (A0)
.skip 1 # One LVO is reserved here for IPI
##end functionlist
