##begin config
basename GFXHW
libbasetype struct IntHIDDGraphicsBase
version 45.4
residentpri 66
classid CLID_HW_Gfx
superclass CLID_HW
classptr_field hdg_csd.gfxhwclass
classdatatype struct HWGfxData
oopbase_field  hdg_csd.cs_OOPBase
seglist_field  hdg_csd.cs_SegList
##end config

##begin cdefprivate
#include <hidd/gfx.h>
#include "gfx_intern.h"
##end cdefprivate

##begin methodlist
.interface Root
New
Dispose
##end methodlist


##begin class
##begin config
basename GFXHIDD
type hidd
initpri 1
classid CLID_Hidd_Gfx
superclass CLID_Hidd
classptr_field hdg_csd.gfxhiddclass
classdatatype struct HiddGfxData
##end config

##begin methodlist
.interface Root
New
Dispose
Get
.interface Hidd_Gfx
NominalDimensions
CreateObject
QueryModeIDs
ReleaseModeIDs
CheckMode
NextModeID
GetMode
GetPixFmt
SetCursorShape
SetCursorPos
SetCursorVisible
SetMode
Show
CopyBox
CopyBoxMasked
ShowImminentReset
ModeProperties
ShowViewPorts
GetSync
GetGamma
SetGamma
QueryHardware3D
GetMaxSpriteSize
NewOverlay
DisposeOverlay
MakeViewPort
CleanViewPort
PrepareViewPorts
DisplayToBMCoords
BMToDisplayCoords
##end methodlist
##end class


##begin class
##begin config
basename BM
type hidd
initpri 1
classid CLID_Hidd_BitMap
superclass CLID_Root
classptr_field hdg_csd.bitmapclass
classdatatype struct HIDDBitMapData
##end config

##begin methodlist
.interface Root
New
Dispose
Get
Set
.interface Hidd_BitMap
SetColors
DrawPixel
DrawLine
DrawRect
FillRect
DrawEllipse
FillEllipse
DrawPolygon
FillPolygon
DrawText
FillText
FillSpan
Clear
PutImage
PutAlphaImage
PutTemplate
PutAlphaTemplate
PutPattern
PutImageLUT
PutTranspImageLUT
GetImage
GetImageLUT
BlitColorExpansion
BytesPerLine
ConvertPixels
FillMemRect8
FillMemRect16
FillMemRect24
FillMemRect32
InvertMemRect
CopyMemBox8
CopyMemBox16
CopyMemBox24
CopyMemBox32
CopyLUTMemBox16
CopyLUTMemBox24
CopyLUTMemBox32
PutMem32Image8
PutMem32Image16
PutMem32Image24
GetMem32Image8
GetMem32Image16
GetMem32Image24
PutMemTemplate8
PutMemTemplate16
PutMemTemplate24
PutMemTemplate32
PutMemPattern8
PutMemPattern16
PutMemPattern24
PutMemPattern32
SetColorMap
MapColor
UnmapPixel
ObtainDirectAccess
ReleaseDirectAccess
BitMapScale
SetRGBConversionFunction
UpdateRect
##end methodlist
##end class


##begin class
##begin config
basename GFXHist
type hidd
initpri 1
classid CLID_Hidd_BMHistogram
superclass CLID_Hidd
classptr_field hdg_csd.bmhistogramclass
classdatatype struct HiddBMHistogramData
##end config

##begin methodlist
.interface Root
New
Dispose
Get
.interface Hidd_BMHistogram
AddColorEntry
FindColorEntry
GetEntryColor
GetEntryUseCount
Sort
##end methodlist
##end class


##begin class
##begin config
basename GC
type hidd
classid CLID_Hidd_GC
superclass CLID_Root
classptr_field hdg_csd.gcclass
classdatatype struct gc_data
##end config

##begin methodlist
.interface Root
New
Set
Get
.interface Hidd_GC
SetClipRect
UnsetClipRect
##end methodlist
##end class


##begin class
##begin config
basename CM
type hidd
classid CLID_Hidd_ColorMap
superclass CLID_Root
classptr_field hdg_csd.colormapclass
classdatatype struct colormap_data
##end config

##begin methodlist
.interface Root
New
Dispose
Get
.interface Hidd_ColorMap
SetColors
GetPixel
GetColor
##end methodlist
##end class


##begin class
##begin config
basename PF
type hidd
superclass CLID_Root
classptr_field hdg_csd.pixfmtclass
classdatatype struct pixfmt_data
##end config

##begin methodlist
.interface Root
New
Get
#.interface PixFmt (is an empty interface needed ?)
##end methodlist
##end class


##begin class
##begin config
basename Sync
type hidd
superclass CLID_Root
classptr_field hdg_csd.syncclass
classdatatype struct sync_data
##end config

##begin methodlist
.interface Root
New
Dispose
Get
Set
#.interface Sync (is an empty interface needed ?)
##end methodlist
##end class


##begin class
##begin config
basename PBM
type hidd
initpri 0
classid CLID_Hidd_PlanarBM
superclass CLID_Hidd_BitMap
classptr_field hdg_csd.planarbmclass
classdatatype struct planarbm_data
##end config

##begin methodlist
.interface Root
New
Dispose
Get
.interface Hidd_BitMap
PutPixel
GetPixel
PutImage
PutImageLUT
GetImageLUT
.interface Hidd_PlanarBM
SetBitMap
GetBitMap
##end methodlist
##end class


##begin class
##begin config
basename CBM
type hidd
initpri 0
classid CLID_Hidd_ChunkyBM
superclass CLID_Hidd_BitMap
classptr_field hdg_csd.chunkybmclass
classdatatype struct chunkybm_data
##end config

##begin methodlist
.interface Root
New
Dispose
Get
Set
.interface Hidd_BitMap
PutPixel
GetPixel
FillRect
PutImage
PutAlphaImage
GetImage
PutImageLUT
PutTemplate
PutPattern
ObtainDirectAccess
ReleaseDirectAccess
##end methodlist
##end class

##begin interface
##begin config
interfaceid   hidd.gfx.driver
interfacename Hidd_Gfx
methodstub    HIDD_Gfx
methodbase    HiddGfxBase
attributebase HiddGfxAttrBase
##end config

##begin attributelist
struct TagItem *MemoryAttribs #   [..G] query information about the gfx devices memory.
struct List *DisplayList #        [..G] Returns a list of Display objects (if supported)
OOP_Object *DisplayDefault #      [..G] Find the primary Display. If DisplayList == NULL, DisplayDefault = the only available display.
BOOL IsWindowed #                 [..G] Whether the HIDD is using host's window system
ULONG DPMSLevel #                 [ISG] DPMS level
struct TagItem * PixFmtTags #     [I..]
struct TagItem * SyncTags #       [I..]
struct TagItem * ModeTags #       [I..] Display modes description
ULONG NumSyncs #                  [..G] The number of different syncs the gfxcard can do
BOOL SupportsHWCursor #           [..G] SupportsHWCursor (obsolete)
BOOL NoFrameBuffer #              [..G] if the hidd does not need a framebuffer
UBYTE HWSpriteTypes #             [..G] Supported types of hardware sprites
ULONG MemorySize #                [..G] Size of video card's memory in bytes
ULONG MemoryClock #               [..G] A video card's memory clock in Hz
STRPTR DriverName #               [..G] A name of driver for CyberGraphX
APTR ActiveCallBack #             [.S.] Display activation callback function
APTR ActiveCallBackData #         [.S.] User data for activation callback
APTR DisplayChangeCallBack #      [.S.] Display paramater change callback function
APTR DisplayChangeCallBackData #  [.S.] User data for display change callback
OOP_Object * DefaultGC #          [..G] Default GC for copy operations
UBYTE FrameBufferType #           [I.G] Framebuffer type
BOOL SupportsGamma #              [..G] Supports gamma correction table
BOOL SupportsDisplayChange #      [..G] Supports the display change callback
##end attributelist

##begin methodlist
VOID NominalDimensions(UWORD *width, UWORD *height, UBYTE *depth);
OOP_Object * CreateObject(OOP_Class *cl, struct TagItem *attrList)
HIDDT_ModeID * QueryModeIDs(struct TagItem *queryTags)
VOID ReleaseModeIDs(HIDDT_ModeID *modeIDs)
HIDDT_ModeID NextModeID(HIDDT_ModeID modeID, OOP_Object **syncPtr, OOP_Object **pixFmtPtr)
BOOL GetMode(HIDDT_ModeID modeID, OOP_Object **syncPtr, OOP_Object **pixFmtPtr)
BOOL CheckMode(HIDDT_ModeID modeID, OOP_Object *sync, OOP_Object *pixFmt)
OOP_Object * GetPixFmt(HIDDT_StdPixFmt stdPixFmt)
BOOL SetCursorShape(OOP_Object *shape, WORD xoffset, WORD yoffset)
BOOL SetCursorPos(WORD x, WORD y)
VOID SetCursorVisible(BOOL visible)
BOOL SetMode(OOP_Object *sync)
OOP_Object *Show(OOP_Object *bitMap, ULONG flags)
VOID CopyBox(OOP_Object *src, WORD srcX, WORD srcY, OOP_Object *dest, WORD destX, WORD destY, UWORD width, UWORD height, OOP_Object *gc)
VOID ShowImminentReset() # Obsolete
ULONG ModeProperties(HIDDT_ModeID modeID, struct HIDD_ModeProperties *props, ULONG propsLen)
ULONG ShowViewPorts(struct HIDD_ViewPortData *Data)
OOP_Object *GetSync(ULONG num)
BOOL GetGamma(UBYTE *Red, UBYTE *Green, UBYTE *Blue)
BOOL SetGamma(UBYTE *Red, UBYTE *Green, UBYTE *Blue)
BOOL QueryHardware3D(OOP_Object *pixFmt)
BOOL GetMaxSpriteSize(ULONG Type, ULONG *Width, ULONG *Height)
OOP_Object * NewOverlay(struct TagItem *attrList)
void DisposeOverlay(OOP_Object *Overlay)
ULONG MakeViewPort(struct HIDD_ViewPortData *Data)
void CleanViewPort(struct HIDD_ViewPortData *Data)
ULONG PrepareViewPorts(struct HIDD_ViewPortData *Data, struct View *view)
BOOL CopyBoxMasked(OOP_Object *src, WORD srcX, WORD srcY, OOP_Object *dest, WORD destX, WORD destY, UWORD width, UWORD height, PLANEPTR mask, OOP_Object *gc)
VOID DisplayToBMCoords(OOP_Object *Target, UWORD DispX, UWORD DispY, UWORD *TargetX, UWORD *TargetY)
VOID BMToDisplayCoords(OOP_Object *Target, UWORD TargetX, UWORD TargetY, UWORD *DispX, UWORD *DispY)
##end methodlist
##end interface

##begin interface
##begin config
interfaceid   hidd.gfx.bitmap
interfacename Hidd_BitMap
methodstub    HIDD_BM
methodbase    HiddBitMapBase
attributebase HiddBitMapAttrBase
##end config

##begin attributelist
OOP_Object *GfxHidd                  # [..G] Pointer to the gfxhidd object this bitmap was created with
WORD LeftEdge                        # [.SG] Left edge position of the bitmap
WORD TopEdge                         # [.SG] Top edge position of the bitmap
UWORD Width                          # [ISG] Bitmap width
UWORD Height                         # [ISG] Bitmap height
UWORD Align                          # [I..] Number of pixels to align bitmap data width to
UWORD Depth                          # [..G] Bitmap depth
.skip 2 # 
BOOL IsLinearMem                     # [..G] Is the bitmap memory contiguous
ULONG BytesPerRow                    # [..G] Number of bytes in a row 
OOP_Object *ColorMap                 # [..G] Colormap of the bitmap
struct BitMap *BMStruct              # [I.G] BitMap object's associated struct BitMap
OOP_Object *Friend                   # [I.G] Friend bitmap.
HIDDT_StdPixFmt StdPixFmt            # [I..] What stdpixel format the bitmap should have.
OOP_Object * PixFmt                  # [..G] This is complete pixfmt of a bitmap
HIDDT_StdPixFmt SpritePixFmt         # [..G] Prefered pixel format attached sprites should have (for vHidd_SpriteType_DirectColor)
HIDDT_ModeID ModeID                  # [I.G] Must be passed on initialization of aHidd_BitMap_Displayable=TRUE bitmaps.
BOOL Displayable                     # [I.G] Bitmap is displayable (default: FALSE)
BOOL Visible                         # [..G] Check if a bitmap is visible
BOOL Focus                           # [.S.] * PRIVATE * When set, the monitor for the display bitmap has been activated.
BOOL FrameBuffer                     # [I..] Allocate framebuffer
BOOL ModeChange                      # [I..] Supports mode ID change
BOOL Compositable                    # [ISG] Can be Displayed via Compositor (Mutually exclusive with Displayable)
.skip 10 # private attribs
OOP_Class *ClassPtr                  # [I..] Only used by subclasses of the gfx
CONST_STRPTR ClassID                 # [I..] Only used by subclasses of the gfx
##end attributelist

##begin methodlist
BOOL SetColors(HIDDT_Color *colors, UWORD firstColor, UWORD numColors)
VOID PutPixel(WORD x, WORD y, HIDDT_Pixel pixel)
VOID DrawPixel(OOP_Object *gc, WORD x, WORD y)
VOID PutImage(OOP_Object *gc, UBYTE *pixels, ULONG modulo, WORD x, WORD y, WORD width, WORD height, HIDDT_StdPixFmt pixFmt)
VOID PutAlphaImage(OOP_Object *gc, UBYTE *pixels, ULONG modulo, WORD x, WORD y, WORD width, WORD height)
VOID PutTemplate(OOP_Object *gc, UBYTE *masktemplate, ULONG modulo, WORD srcx, WORD x, WORD y, WORD width, WORD height, BOOL inverttemplate)
VOID PutAlphaTemplate(OOP_Object *gc, UBYTE *alpha, ULONG modulo, WORD x, WORD y, WORD width, WORD height, BOOL invertalpha)
VOID PutPattern(OOP_Object *gc, UBYTE *pattern, WORD patternsrcx, WORD patternsrcy, WORD patternheight, WORD patterndepth, HIDDT_PixelLUT *patternlut, BOOL invertpattern, UBYTE *mask, ULONG maskmodulo, WORD masksrcx, WORD x, WORD y, WORD width, WORD height)
VOID GetImage(UBYTE *pixels, ULONG modulo, WORD x, WORD y, WORD width, WORD height, HIDDT_StdPixFmt pixFmt)
HIDDT_Pixel GetPixel(WORD x, WORD y)
VOID DrawLine(OOP_Object *gc, WORD x1, WORD y1, WORD x2, WORD y2)
VOID DrawRect(OOP_Object *gc, WORD minX, WORD minY, WORD maxX, WORD maxY)
VOID FillRect(OOP_Object *gc, WORD minX, WORD minY, WORD maxX, WORD maxY)
VOID DrawEllipse(OOP_Object *gc, WORD x, WORD y, WORD rx, WORD ry)
VOID FillEllipse(OOP_Object *gc, WORD x, WORD y, WORD ry, WORD rx)
VOID DrawPolygon(OOP_Object *gc, UWORD n, WORD *coords)
VOID FillPolygon(OOP_Object *gc, UWORD n, WORD *coords)
VOID DrawText(OOP_Object *gc, WORD x, WORD y, STRPTR text, UWORD length)
VOID FillText(OOP_Object *gc, WORD x, WORD y, STRPTR text, UWORD length)
VOID FillSpan() # Obsolete
VOID Clear(OOP_Object *gc)
VOID 	 BlitColorExpansion(OOP_Object *gc, OOP_Object *srcBitMap, WORD srcX, WORD srcY, WORD destX, WORD destY, UWORD width, UWORD height)
HIDDT_Pixel MapColor(HIDDT_Color *color)
VOID UnmapPixel(HIDDT_Pixel pixel, HIDDT_Color *color)
VOID PutImageLUT(OOP_Object *gc, UBYTE *pixels, ULONG modulo, WORD x, WORD y, WORD width, WORD height, HIDDT_PixelLUT *pixlut)
VOID PutTranspImageLUT(OOP_Object *gc, UBYTE *pixels, ULONG modulo, WORD x, WORD y, WORD width, WORD height, HIDDT_PixelLUT *pixlut, UBYTE transparent)
VOID GetImageLUT(UBYTE *pixels, ULONG modulo, WORD x, WORD y, WORD width, WORD height, HIDDT_PixelLUT *pixlut)
ULONG BytesPerLine(HIDDT_StdPixFmt pixFmt, UWORD width)
VOID ConvertPixels(APTR *srcPixels, HIDDT_PixelFormat *srcPixFmt, ULONG srcMod, APTR *dstBuf, HIDDT_PixelFormat *dstPixFmt, ULONG dstMod, UWORD width, UWORD height, HIDDT_PixelLUT *pixlut)
VOID FillMemRect8(APTR dstBuf, WORD minX, WORD minY, WORD maxX, WORD maxY, ULONG dstMod, UBYTE fill)
VOID FillMemRect16(APTR dstBuf, WORD minX, WORD minY, WORD maxX, WORD maxY, ULONG dstMod, UWORD fill)
VOID FillMemRect24(APTR dstBuf, WORD minX, WORD minY, WORD maxX, WORD maxY, ULONG dstMod, ULONG fill)
VOID FillMemRect32(APTR dstBuf, WORD minX, WORD minY, WORD maxX, WORD maxY, ULONG dstMod, ULONG fill)
VOID InvertMemRect(APTR dstBuf, WORD minX, WORD minY, WORD maxX, WORD maxY, ULONG dstMod)
VOID CopyMemBox8(APTR src, WORD srcX, WORD srcY, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID CopyMemBox16(APTR src, WORD srcX, WORD srcY, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID CopyMemBox24(APTR src, WORD srcX, WORD srcY, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID CopyMemBox32(APTR src, WORD srcX, WORD srcY, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID CopyLUTMemBox16(APTR src, WORD srcX, WORD srcY, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod, HIDDT_PixelLUT *pixlut)
VOID CopyLUTMemBox24(APTR src, WORD srcX, WORD srcY, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod, HIDDT_PixelLUT *pixlut)
VOID CopyLUTMemBox32(APTR src, WORD srcX, WORD srcY, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod, HIDDT_PixelLUT *pixlut)
VOID PutMem32Image8(APTR src, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID PutMem32Image16(APTR src, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID PutMem32Image24(APTR src, APTR dst, WORD dstX, WORD dstY, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID GetMem32Image8(APTR src, WORD srcX, WORD srcY, APTR dst, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID GetMem32Image16(APTR src, WORD srcX, WORD srcY, APTR dst, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID GetMem32Image24(APTR src, WORD srcX, WORD srcY, APTR dst, UWORD width, UWORD height, ULONG srcMod, ULONG dstMod)
VOID PutMemTemplate8(OOP_Object *gc, UBYTE *masktemplate, ULONG modulo, WORD srcx, APTR dst, ULONG dstMod, WORD x, WORD y, WORD width, WORD height, BOOL inverttemplate)
VOID PutMemTemplate16(OOP_Object *gc, UBYTE *masktemplate, ULONG modulo, WORD srcx, APTR dst, ULONG dstMod, WORD x, WORD y, WORD width, WORD height, BOOL inverttemplate)
VOID PutMemTemplate24(OOP_Object *gc, UBYTE *masktemplate, ULONG modulo, WORD srcx, APTR dst, ULONG dstMod, WORD x, WORD y, WORD width, WORD height, BOOL inverttemplate)
VOID PutMemTemplate32(OOP_Object *gc, UBYTE *masktemplate, ULONG modulo, WORD srcx, APTR dst, ULONG dstMod, WORD x, WORD y, WORD width, WORD height, BOOL inverttemplate)
VOID PutMemPattern8(OOP_Object *gc, UBYTE *pattern, WORD patternsrcx, WORD patternsrcy, WORD patternheight, WORD patterndepth, HIDDT_PixelLUT *patternlut, BOOL invertpattern, UBYTE *mask, ULONG maskmodulo, WORD masksrcx, APTR dst, ULONG dstMod, WORD x, WORD y, WORD width, WORD height)
VOID PutMemPattern16(OOP_Object *gc, UBYTE *pattern, WORD patternsrcx, WORD patternsrcy, WORD patternheight, WORD patterndepth, HIDDT_PixelLUT *patternlut, BOOL invertpattern, UBYTE *mask, ULONG maskmodulo, WORD masksrcx, APTR dst, ULONG dstMod, WORD x, WORD y, WORD width, WORD height)
VOID PutMemPattern24(OOP_Object *gc, UBYTE *pattern, WORD patternsrcx, WORD patternsrcy, WORD patternheight, WORD patterndepth, HIDDT_PixelLUT *patternlut, BOOL invertpattern, UBYTE *mask, ULONG maskmodulo, WORD masksrcx, APTR dst, ULONG dstMod, WORD x, WORD y, WORD width, WORD height)
VOID PutMemPattern32(OOP_Object *gc, UBYTE *pattern, WORD patternsrcx, WORD patternsrcy, WORD patternheight, WORD patterndepth, HIDDT_PixelLUT *patternlut, BOOL invertpattern, UBYTE *mask, ULONG maskmodulo, WORD masksrcx, APTR dst, ULONG dstMod, WORD x, WORD y, WORD width, WORD height)
OOP_Object * SetColorMap(OOP_Object *colorMap)
BOOL ObtainDirectAccess(UBYTE **addressReturn, ULONG *widthReturn, ULONG *heightReturn, ULONG *bankSizeReturn, ULONG *memSizeReturn)
VOID ReleaseDirectAccess()
VOID BitMapScale(OOP_Object *src, OOP_Object *dst, struct BitScaleArgs * bsa, OOP_Object *gc)
VOID PrivateSet() # Obsolete
HIDDT_RGBConversionFunction SetRGBConversionFunction(HIDDT_StdPixFmt srcPixFmt, HIDDT_StdPixFmt dstPixFmt, HIDDT_RGBConversionFunction function)
VOID UpdateRect(WORD x, WORD y, WORD width, WORD height)
##end methodlist
##end interface

##begin interface
##begin config
interfaceid   hidd.gfx.bmhistogram
interfacename Hidd_BMHistogram
methodstub    HIDD_BMHISTOGRAM
methodbase    HiddBMHistogramBase
attributebase HiddBMHistogramAttrBase
##end config

##begin attributelist
OOP_Object    *BitMap                  # [I..] BitMap object the histogram represents
ULONG         NumEntries               # [..G] no. of entries in the histogram..
##end attributelist

##begin methodlist
APTR AddColorEntry(HIDDT_Color *color, ULONG count)
IPTR FindColorEntry(HIDDT_Color *color, APTR *colentry)
IPTR GetEntryColor(APTR colentry, HIDDT_Color *color)
ULONG GetEntryUseCount(APTR colentry)
VOID Sort(struct TagItem *sorttags)
##end methodlist
##end interface


##begin interface
##begin config
interfaceid hidd.gfx.gc
interfacename Hidd_GC
methodstub    HIDD_GC
methodbase    HiddGCBase
attributebase HiddGCAttrBase
##end config

##begin attributelist
.skip 1                 # [...] IPTR Reserved0
.skip 1                 # [...] IPTR Reserved1
Foreground Foreground   # [.SG] Foreground color
Background Background   # [.SG] Background color
Draw DrawMode           # [.SG] Draw mode 
.skip 1                 # [...] IPTR Reserved2
ULONG ColorMask         # [.SG] Prevents some color bits from changing
Pattern LinePattern     # [.SG] Pattern for line drawing
Pattern LinePatternCnt  # [.SG] Pattern start bit for line drawing
.skip 1                 # [...] IPTR Reserved3
Mode ColorExpansionMode # [.SG] Mode for color expansion 
##end attributelist

##begin methodlist
VOID SetClipRect(WORD x1, WORD y1, WORD x2, WORD y2)
VOID UnsetClipRect()
##end methodlist
##end interface


##begin interface
##begin config
interfaceid hidd.gfx.pixfmt
interfacename Hidd_PixFmt
methodstub    HIDD_PixFmt
methodbase    HiddPixFmtBase
attributebase HiddPixFmtAttrBase
##end config

##begin attributelist
HIDDT_ColorModel ColorModel
ULONG RedShift
ULONG GreenShift
ULONG BlueShift
ULONG AlphaShift
ULONG RedMask
ULONG GreenMask
ULONG BlueMask
ULONG AlphaMask
ULONG Depth
ULONG BitsPerPixel
ULONG BytesPerPixel
HIDDT_StdPixFmt StdPixFmt
ULONG CLUTMask
ULONG CLUTShift
HIDDT_BitMapType BitMapType
ULONG SwapPixelBytes
ULONG CgxPixFmt
##end attributelist
##end interface

##begin interface
##begin config
interfaceid hidd.gfx.bitmap.planarbm
interfacename Hidd_PlanarBM
methodstub    HIDD_PlanarBM
methodbase    HiddPlanarBMBase
attributebase HiddPlanarBMAttrBase
##end config

##begin attributelist
BOOL AllocPlanes
struct BitMap *BitMap
##end attributelist

##begin methodlist
BOOL SetBitMap(struct BitMap *bitMap)
BOOL GetBitMap(struct BitMap *bitMap)
##end methodlist
##end interface

##begin interface
##begin config
interfaceid hidd.gfx.bitmap.chunkybm
interfacename Hidd_ChunkyBM
methodstub    HIDD_ChunkyBM
methodbase    HiddChunkyBMBase
attributebase HiddChunkyBMAttrBase
##end config

##begin attributelist
APTR Buffer
##end attributelist
##end interface

##begin interface
##begin config
interfaceid hidd.gfx.colormap
interfacename Hidd_ColorMap
methodstub    HIDD_CM
methodbase    HiddColorMapBase
attributebase HiddColorMapAttrBase
##end config

##begin attributelist
ULONG NumEntries  # [I.G] Number of colors in the colormap
##end attributelist

##begin methodlist
BOOL SetColors(HIDDT_Color *colors, UWORD firstColor, UWORD numColors, OOP_Object *pixFmt)
HIDDT_Pixel GetPixel(ULONG pixelNo)
BOOL GetColor(ULONG colorNo, HIDDT_Color *colorReturn)
##end methodlist
##end interface

##begin interface
##begin config
interfaceid hidd.gfx.sync
interfacename Hidd_Sync
methodstub    HIDD_Sync
methodbase    HiddSyncBase
attributebase HiddSyncAttrBase
##end config

##begin attributelist
ULONG PixelTime    # [ISG] (obsolete) pixel clock in picoseconds (1E-12 second) 
ULONG LeftMargin   # [ISG] (obsolete)
ULONG RightMargin  # [ISG] (obsolete)
ULONG HSyncLength  # [ISG] (obsolete)
ULONG UpperMargin  # [ISG] (obsolete)
ULONG LowerMargin  # [ISG] (obsolete)
ULONG VSyncLength  # [ISG] (obsolete)
ULONG PixelClock   # [ISG] Pixel clock in Hz
ULONG HDisp        # [I.G] displayed pixels per line
ULONG HSyncStart   # [ISG] time to the start of the horizontal sync
ULONG HSyncEnd     # [ISG] time to the end of the horizontal sync
ULONG HTotal       # [ISG] total time to draw one line + the hsync time
ULONG VDisp        # [I.G] displayed rows
ULONG VSyncStart   # [ISG] rows to the start of the horizontal sync
ULONG VSyncEnd     # [ISG] rows to the end of the horizontal sync
ULONG VTotal       # [ISG] number of rows in the screen includeing vsync
STRPTR Description # [I.G] description
ULONG HMin         # [ISG] minimum acceptable bitmap width
ULONG HMax         # [ISG] maximum acceptable bitmap width
ULONG VMin         # [ISG] minimum acceptable bitmap height
ULONG VMax         # [ISG] maximum acceptable bitmap height
ULONG Flags        # [I.G] mode tags
BOOL Variable      # [I.G] data can be modified
struct MonitorSpec *MonitorSpec # [I.G] MonitorSpec structure
OOP_Object GfxHidd # [I.G] Driver to which the object belongs
ULONG BoardNumber  # [I..] Number of board (for '%b' in description)
##end attributelist
##end interface

##begin interface
##begin config
interfaceid hidd.gfx.overlay
interfacename Hidd_Overlay
##end config

##begin attributelist
ULONG SrcWidth  # [I..] Source width in pixels 
ULONG SrcHeight # [I..] Source height in pixels
ULONG SrcFormat # [I..] Source pixel format
ULONG *Error    # [I..] Points to location where error code will be placed
##end attributelist
##end interface
