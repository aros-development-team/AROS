##begin config
basename	PCI
version		40.0
libbasetype	struct pcibase
classptr_field  psd.pciClass
classid         CLID_Hidd_PCI
superclass      CLID_HW
residentpri	90
oopbase_field   psd.oopBase
seglist_field   psd.segList
##end config

##begin cdefprivate
#include <hidd/pci.h>
#include "pci.h"
##end cdefprivate

##begin interface
##begin config
interfaceid hidd.pci
interfacename Hidd_PCI
methodstub    HIDD_PCI
methodbase    HiddPCIBase
attributebase HiddPCIAttrBase
##end config

##begin attributelist
##end   attributelist

##begin methodlist
VOID AddHardwareDriver(OOP_Class *driverClass)
BOOL RemHardwareDriver(OOP_Class *driverClass)
VOID EnumDevices(struct Hook *callback, const struct TagItem *requirements)
##end   methodlist
##end interface

##begin interface
##begin config
interfaceid   hidd.pci.driver
interfacename Hidd_PCIDriver
methodstub    HIDD_PCIDriver
methodbase    HiddPCIDriverBase
attributebase HiddPCIDriverAttrBase
##end config

##begin attributelist
BOOL DirectBus # [..G] DirectBus shows whether CPUtoPCI and PCItoCPU methods are usable
IPTR IOBase    # [..G] Offset to host IO space
APTR IRQRoutingTable # [..G] Get IRQ routing table for that driver, if available
##end   attributelist

##begin methodlist
UBYTE ReadConfigByte(OOP_Object *device, UBYTE bus, UBYTE dev, UBYTE sub, UWORD reg)
UWORD ReadConfigWord(OOP_Object *device, UBYTE bus, UBYTE dev, UBYTE sub, UWORD reg)
ULONG ReadConfigLong(OOP_Object *device, UBYTE bus, UBYTE dev, UBYTE sub, UWORD reg)
VOID  WriteConfigByte(OOP_Object *device, UBYTE bus, UBYTE dev, UBYTE sub, UWORD reg, UBYTE val)
VOID  WriteConfigWord(OOP_Object *device, UBYTE bus, UBYTE dev, UBYTE sub, UWORD reg, UWORD val)
VOID  WriteConfigLong(OOP_Object *device, UBYTE bus, UBYTE dev, UBYTE sub, UWORD reg, ULONG val)
APTR CPUtoPCI(APTR address)
APTR PCItoCPU(APTR address)
APTR MapPCI(APTR PCIAddress, ULONG Length)
VOID UnmapPCI(APTR CPUAddress, ULONG Length)
APTR AllocPCIMem(ULONG Size)
VOID FreePCIMem(APTR Address)
BOOL AddInterrupt(OOP_Object *device, struct Interrupt *interrupt)
VOID RemoveInterrupt(OOP_Object *device, struct Interrupt *interrupt)
IPTR HasExtendedConfig(UBYTE bus, UBYTE dev, UBYTE sub)
##end  methodlist
##end  interface

##begin interface
##begin config
interfaceid   hidd.pci.device
interfacename Hidd_PCIDevice
methodstub    HIDD_PCIDevice
methodbase    HiddPCIDeviceBase
attributebase HiddPCIDeviceAttrBase
##end config

##begin attributelist
OOP_Object *Driver      # [I.G] Hardware PCI driver that handles this device
UBYTE       Bus         # [I.G] Bus the device is on
UBYTE       Dev         # [I.G] Device number
UBYTE       Sub         # [I.G] Function number
UWORD       VendorID    # [..G] VendorID of device as defined in PCI specs
UWORD       ProductID   # [..G] ProductID
UWORD       RevisionID  # [..G] RevisionID
UBYTE       Interface   # [..G]
UBYTE       Class       # [..G]
UBYTE       SubClass    # [..G]
UWORD       SubsystemVendorID # [..G]
UWORD       SubsystemID       # [..G]
UBYTE       INTLine     # [..G]
UBYTE       IRQLine     # [..G]
IPTR        RomBase     # [.SG] Location of ROM on the PCI bus (if ROM exists)
IPTR        RomSize     # [..G] Size of ROM area
IPTR        Base0       # [.SG] Location of Memory Area 0
IPTR        Size0       # [..G] Size of Memory Area 0
UBYTE       Type0       # [..G]
IPTR        Base1       # [.SG]
IPTR        Size1       # [..G]
UBYTE       Type1       # [..G]
IPTR        Base2       # [.SG]
IPTR        Size2       # [..G]
UBYTE       Type2       # [..G]
IPTR        Base3       # [.SG]
IPTR        Size3       # [..G]
UBYTE       Type3       # [..G]
IPTR        Base4       # [.SG]
IPTR        Size4       # [..G]
UBYTE       Type4       # [..G]
IPTR        Base5       # [.SG]
IPTR        Size5       # [..G]
UBYTE       Type5       # [..G]
BOOL        isIO        # [.SG] Can device access IO space?
BOOL        isMEM       # [.SG] Can device access Mem space?
BOOL        isMaster    # [.SG] Can device work in BusMaster mode?
BOOL        paletteSnoop  # [.SG] Should VGA compatible card snoop the palette?
BOOL        is66MHz     # [..G] Is device 66MHz capable?
CONST_STRPTR ClassDesc    # [..G] String description of device Class
CONST_STRPTR SubClassDesc # [..G] String description of device SubClass
CONST_STRPTR InterfaceDesc # [..G] String description of device Interface
BOOL        isBridge    # [..G] Is the device a PCI-PCI bridge?
UBYTE       SecBus      # [..G] Bus number managed by bridge
IPTR        MemoryBase  # [.SG] PCI bridge will forwart addresses from MemoryBase to
IPTR        MemoryLimit # [.SG] MemoryLimit through 
IPTR        PrefetchableBase # [.SG] like above, regarding the prefetchable memory
IPTR        PrefetchableLimit # [.SG]
IPTR        IOBase            # [.SG] PCI bridge will forward IO accesses from IOBase to IOLimit
IPTR        IOLimit           # [.SG]
BOOL        ISAEnable         # [.SG] Enable ISA-specific IO forwarding
BOOL        VGAEnable         # [.SG] Enable VGA-specific IO/MEM forwarding regardless of limits
BOOL        IRQStatus         # [..G] Get current irq status (does device request irq?)
ULONG       CapabilitiesPresent # [..G] Use this to check if PCI features extra capabilities (such as PM, MSI, PCI-X, PCI-E)
UWORD       CapabilityPowerManagement # [..G] Get offset of Power Management capability area or 0 if not present
UWORD       CapabilityAGP       # [..G] Get offset of AGP capability area or 0 if not present
UWORD       CapabilityVitalProductData # [..G] Get offset of Vital Product Data capability area or 0 if not present
UWORD       CapabilitySlotID # [..G] Get offset of Slot Indentification capability area or 0 if not present
UWORD       CapabilityMSI  # [..G] Get offset of Message Signalled Interrupts capability area or 0 if not present
UWORD CapabilityCPCIHotSwap # [..G] Get offset of CompactPCI HotSwap capability area or 0 if not present
UWORD CapabilityPCIX # [..G] Get offset of PCI-X capability area or 0 if not present
UWORD CapabilityHyperTransport # [..G] Get offset of Hyper Transport capability area or 0 if not present
UWORD CapabilityVendorSpecific # [..G] Get offset of Vendor Specific capability area or 0 if not present
UWORD CapabilityDebugPort # [..G] Get offset of Debug Port capability area or 0 if not present
UWORD CapabilityCPCICRC # [..G] Get offset of CompactPCI Central Resource Control capability area or 0 if not present
UWORD CapabilityHotPlugController # [..G] Get offset of PCI Standard Hot-Plug Controller capability area or 0 if not present
UWORD CapabilitySSVPID # [..G] Get offset of Bridge Subsystem VendorID/ProductID capability area or 0 if not present
UWORD CapabilityAGP3 # [..G] Get offset of AGP3 capability area or 0 if not present
UWORD CapabilityPCIE # [..G] Get offset of PCI Express capability area or 0 if not present
UWORD CapabilityMSIX # [..G] Get offset of MSI-X capability area or 0 if not present
UWORD CapabilityAdvancedFeatures # [..G] Get offset of PCI Advanced Features capability area or 0 if not present
CONST_STRPTR Owner # [..G] Get current owner
IPTR  ExtendedConfig
UWORD ExtendedCapabilityAER # [..G] Get offset of PCIE Advanced Error Handling area or 0 if not present
UWORD ExtendedCapabilityVC # [..G] Get offset of PCIE Virtual Channel area or 0 if not present
UWORD ExtendedCapabilitySerialNumber # [..G] Get offset of PCIE Serial Number area or 0 if not present
UWORD ExtendedCapabilityPowerBudgeting # [..G] Get offset of PCIE Power Budgeting area or 0 if not present
UWORD       ConfigSize
##end   attributelist

##begin methodlist
UBYTE ReadConfigByte(UWORD reg)
UWORD ReadConfigWord(UWORD reg)
ULONG ReadConfigLong(UWORD reg)
VOID  WriteConfigByte(UWORD reg, UBYTE val)
VOID  WriteConfigWord(UWORD reg, UWORD val)
VOID  WriteConfigLong(UWORD reg, ULONG val)
BOOL AddInterrupt(struct Interrupt *interrupt)
VOID RemoveInterrupt(struct Interrupt *interrupt)
CONST_STRPTR Obtain(CONST_STRPTR owner)
VOID Release()
IPTR HasExtendedConfig()
##end   methodlist
##end interface


##begin methodlist
.interface Root
New
Dispose
.interface HW
SetUpDriver
RemoveDriver
.interface Hidd_PCI
AddHardwareDriver
EnumDevices
RemHardwareDriver
##end methodlist


##begin class
##begin config
basename       PCIDrv
type           hidd
superclass     CLID_Hidd
classptr_field psd.pciDriverClass
classid        CLID_Hidd_PCIDriver
classdatatype  struct DrvInstData
##end config

##begin methodlist
.interface Root
New
Get
.interface Hidd_PCIDriver
ReadConfigByte
ReadConfigWord
ReadConfigLong
WriteConfigByte
WriteConfigWord
WriteConfigLong
CPUtoPCI
PCItoCPU
MapPCI
UnmapPCI
AllocPCIMem
FreePCIMem
AddInterrupt
RemoveInterrupt
HasExtendedConfig
##end methodlist
##end class


##begin class
##begin config
basename       PCIDev
type           hidd
superclass     CLID_Root
classptr_field psd.pciDeviceClass
classdatatype  struct DeviceData
##end config

##begin methodlist
.interface Root
New
Get
Set
.interface Hidd_PCIDevice
ReadConfigByte
ReadConfigWord
ReadConfigLong
WriteConfigByte
WriteConfigWord
WriteConfigLong
AddInterrupt
RemoveInterrupt
Obtain
Release
HasExtendedConfig
##end methodlist
##end class
