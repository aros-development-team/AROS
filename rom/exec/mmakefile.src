# $Id$
include $(TOP)/config/make.cfg

# Use OS's own includes over the ones from AROS
OS_INCLUDES := -I. -I$(GENINCDIR)

LIBNAME  := exec
ULIBNAME := Exec

ALL_FUNCTIONS	:= \
	abortio adddevice addhead addintserver addlibrary addmemhandler \
	addmemlist addport addresource addsemaphore addtail addtask alert \
	allocabs allocate allocentry allocmem allocpooled allocsignal \
	alloctrap allocvec attemptsemaphore attemptsemaphoreshared availmem \
	cachecleare cacheclearu cachecontrol cachepostdma cachepredma cause \
	checkio childfree childorphan childstatus childwait closedevice \
	closelibrary coldreboot copymem copymemquick createiorequest \
	createmsgport createpool deallocate debug deleteiorequest \
	deletemsgport deletepool disable dispatch doio enable enqueue \
	exception findname findport findresident findsemaphore findtask \
	forbid freeentry freemem freepooled freesignal freetrap freevec getcc \
	getmsg initcode initresident initsemaphore initstruct insert \
	makefunctions makelibrary obtainquickvector obtainsemaphore \
	obtainsemaphorelist obtainsemaphoreshared oldopenlibrary opendevice \
	openlibrary openresource permit preparecontext procure putmsg rawdofmt \
	rawioinit rawmaygetchar rawputchar releasesemaphore \
	releasesemaphorelist remdevice remhead remintserver remlibrary \
	remmemhandler remove remport remresource remsemaphore remtail remtask \
	replymsg reschedule sendio setexcept setfunction setintvector \
	setsignal setsr settaskpri signal stackswap sumkickdata sumlibrary \
	superstate supervisor switch taggedopenlibrary typeofmem userstate \
	vacate wait waitio waitport

# ***** Native ***************
ifeq ($(FLAVOUR),native)

# Main function for exec.strap. Need this apart as an anchor for the link:
INIT_FILE   := execstrap_init
OSMODULE    := exec.strap
LIB	    := $(LIBDIR)/lib$(LIBNAME).a

# Other support files:
FILES	    :=
FUNCTIONS   := \
	initcode initstruct makelibrary makefunctions findresident	    \
	initresident setintvector addintserver remintserver		    \
	availmem allocentry freeentry typeofmem addmemlist		    \
	addmemhandler remmemhandler insert addhead addtail remove remhead   \
	remtail enqueue findname setsignal allocsignal freesignal addport   \
	remport waitport findport createmsgport deletemsgport putmsg getmsg \
	replymsg doio sendio checkio waitio abortio createiorequest	    \
	deleteiorequest addresource remresource openresource addlibrary     \
	remlibrary oldopenlibrary closelibrary setfunction sumlibrary	    \
	openlibrary taggedopenlibrary adddevice remdevice opendevice	    \
	closedevice findtask rawdofmt allocvec freevec initsemaphore	    \
	attemptsemaphore findsemaphore addsemaphore remsemaphore	    \
	obtainsemaphoreshared attemptsemaphoreshared createpool deletepool  \
	allocpooled freepooled \
	cacheclearu cachepredma cachepostdma \
	disable forbid coldreboot getcc

# ***** Not Native ***************
else

OSMODULE    := $(LIBNAME).library
INIT_FILE   := $(LIBNAME)_init
SYS_FILES   := execfunctions prepareexecbase
FILES	    := traphandler exec_util idletask

FUNCTIONS   := $(ALL_FUNCTIONS)

# ***** END ***************
endif

%prepare_shlib exec $(SHARED_EXEC)
ifeq ("$(SHARED_EXEC)","yes")
SPECIAL_CFLAGS := $(SHARED_CFLAGS)
endif

# Do the magic required for function replacement.
# Keep this value for later
ALL_FILES	:= $(FILES)
FUNCTABLE_SRCS	:= $(foreach f,$(FUNCTIONS),$(f).c)

%prepare_replace rom/exec
%filter_replace FUNCTIONS
%filter_replace FILES

.PHONY : all clean setup

ifeq ($(FLAVOUR),native)
DEPLIBS := arossupport arosc
else
DEPLIBS :=
endif

#MM kernel-exec-linklib : setup includes kernel-exec-$(ARCH)-$(CPU)
kernel-exec-linklib : $(LIB)
	@$(NOP)

#MM kernel-exec-module : setup includes kernel-exec-$(ARCH)-$(CPU)
kernel-exec-module : $(LIB) $(OSMODDIR)/$(OSMODULE)
	@$(NOP)

# The all powerful ROM library generating stuff...
NO_FUNCTABLE := 1
%genromlib_finline hasrt=-hasrt

%asm_rule "$(ALL_FUNCTIONS) $(INIT_FILE) $(END_FILE) $(ALL_FILES)"
%ctoasm_q

%common
%include_deps
