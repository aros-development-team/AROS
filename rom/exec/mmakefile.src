
include $(SRCDIR)/config/aros.cfg

#MM kernel-exec-includes : \
#MM     compiler-includes \
#MM     kernel-exec-includes-$(ARCH)-$(CPU) \
#MM     includes-$(ARCH)-$(CPU)

#MM- core-linklibs : linklibs-exec

ALL_FUNCTIONS := \
	abortio adddevice addhead addintserver addlibrary addmemhandler \
	addmemlist addport addresource addsemaphore addtail addtask alert alertstrings \
	allocabs allocate allocentry allocmem allocpooled allocsignal \
	alloctrap allocvec attemptsemaphore attemptsemaphoreshared availmem \
	cachecleare cacheclearu cachecontrol cachepostdma cachepredma cause \
	checkio childfree childorphan childstatus childwait closedevice \
	closelibrary coldreboot copymem copymemquick createiorequest \
	createmsgport createpool deallocate debug deleteiorequest \
	deletemsgport deletepool disable dispatch doio \
	enable enqueue exception exitintr \
	findname findport findresident findsemaphore findtask findtaskbypid \
	forbid freeentry freemem freepooled freesignal freetrap freevec getcc \
	getmsg initcode initresident initsemaphore initstruct insert \
	makefunctions makelibrary obtainquickvector obtainsemaphore \
	obtainsemaphorelist obtainsemaphoreshared oldopenlibrary opendevice \
	openlibrary openresource permit preparecontext procure putmsg rawdofmt \
	rawioinit rawmaygetchar rawputchar readgayle releasesemaphore \
	releasesemaphorelist remdevice remhead remintserver remlibrary \
	remmemhandler remove remport remresource remsemaphore remtail remtask \
	replymsg reschedule schedule sendio setexcept setfunction setintvector \
	setsignal setsr settaskpri signal stackswap sumkickdata sumlibrary \
	superstate supervisor switch taggedopenlibrary typeofmem userstate \
	vacate wait waitio waitport allocvecpooled freevecpooled newallocentry \
	newaddtask newminlist avl vnewrawdofmt shutdowna useralert \
	addresetcallback remresetcallback doresetcallbacks newcreatetaska

INIT_FILES := exec_init prepareexecbase
FILES	   := alertextra alert_cpu systemalert initkicktags intservers intserver_vblank \
	      memory memory_nommu mungwall semaphores service traphandler \
	      exec_flags exec_debug exec_vlog exec_util exec_locks supervisoralert

%get_archincludes modname=kernel \
    includeflag=TARGET_KERNEL_INCLUDES maindir=rom/kernel

%get_archincludes modname=exec \
    includeflag=TARGET_EXEC_INCLUDES maindir=$(CURDIR)

PRIV_EXEC_INCLUDES = \
    $(TARGET_EXEC_INCLUDES) \
	-I$(SRCDIR)/rom/exec \
	$(TARGET_KERNEL_INCLUDES) \
	-I$(SRCDIR)/rom/kernel

# platform.h can be overriden in arch-specific directory
USER_INCLUDES += $(PRIV_EXEC_INCLUDES) -I$(SRCDIR)/rom/debug
USER_CPPFLAGS := -DAROS_ARCH_$(ARCH)
ifeq ($(AROS_TARGET_CPU),x86_64)
USER_CFLAGS += $(CFLAGS_GENERAL_REGS_ONLY)
endif
ifeq ($(AROS_TARGET_CPU),m68k)
# Make sure we optimize this code for size on m68k..
OPTIMIZATION_CFLAGS := -Os
endif

# Allow to add architecture-specific options
-include $(SRCDIR)/arch/all-$(FAMILY)/exec/make.opts
-include $(SRCDIR)/arch/all-$(ARCH)/exec/make.opts
-include $(SRCDIR)/arch/$(CPU)-$(ARCH)/exec/make.opts
ifneq ($(AROS_TARGET_VARIANT),)
-include $(SRCDIR)/arch/all-$(ARCH)/$(AROS_TARGET_VARIANT)/exec/make.opts
-include $(SRCDIR)/arch/$(CPU)-$(ARCH)/$(AROS_TARGET_VARIANT)/exec/make.opts
endif

# Use customized entry code which declares SysBase suitable
# for load-time linking by the bootstrap.
RESIDENT_BEGIN := $(KICKSTART_BEGIN)

%build_module mmake=kernel-exec \
  modname=exec modtype=library version=$(AROS_TARGET_PLATFORM) archspecific=yes \
  linklibfiles=exec_autoinit files="$(INIT_FILES) $(ALL_FUNCTIONS) $(FILES)"

%common
