##begin config
version 51.3
libbase SysBase
libbasetype struct IntExecBase
libbasetypeextern struct ExecBase
options noresident,noautoinit
##end config

##begin cdef
#include <exec/types.h>
#include <exec/tasks.h>
#include <exec/memory.h>
#include <exec/ports.h>
#include <exec/devices.h>
#include <exec/io.h>
#include <exec/semaphores.h>
#include <exec/interrupts.h>
#include <exec/avl.h>

#include <dos/bptr.h>

#include <stdarg.h>

__BEGIN_DECLS

#ifndef NewRawDoFmt
STRPTR NewRawDoFmt(CONST_STRPTR FormatString, VOID_FUNC PutChProc, APTR PutChData, ...);
#endif

#ifdef __AROS_GIMME_DEPRECATED_STACKSWAP__

#ifdef __GNUC__

#if !defined(__EXEC_LIBAPI__) || (36 <= __EXEC_LIBAPI__)

static inline void __attribute__((__always_inline__)) __inline_Exec_StackSwap(struct StackSwapStruct * __arg1, APTR __SysBase)
{
    AROS_LC1NR(void, StackSwap,
        AROS_LCA(struct StackSwapStruct *,(__arg1),A0),
        struct ExecBase *, (__SysBase), 122, Exec
    );
}

#define StackSwap(arg1) \
    __inline_Exec_StackSwap((arg1), (APTR)SysBase)

#endif /* !defined(__EXEC_LIBAPI__) || (36 <= __EXEC_LIBAPI__) */

#else

#error no StackSwap() support for your compiler 

#endif /* __GNUC__ */

#endif /* __AROS_GIMME_DEPRECATED_STACKSWAP__ */

__END_DECLS

##end cdef

##begin cdefprivate

#include "exec_intern.h"

##end cdefprivate

##begin functionlist
struct ExecBase *open(ULONG version) (D0)
.private
BPTR close() ()
.private
.skip 2
IPTR Supervisor(void *userFunction) (A5)
VOID ExitIntr() ()
.private
VOID Schedule() ()
.private
void Reschedule() ()
VOID Switch() ()
.private
VOID Dispatch() ()
.private
void Exception() ()
void InitCode(ULONG startClass, ULONG version) (D0, D1)
void InitStruct(CONST_APTR initTable, APTR memory, ULONG size) (A1, A2, D0)
struct Library *MakeLibrary(CONST_APTR funcInit, CONST_APTR structInit, ULONG_FUNC libInit, ULONG dataSize, BPTR segList) (A0, A1, A2, D0, D1)
ULONG MakeFunctions(APTR target, CONST_APTR functionArray, CONST_APTR funcDispBase) (A0, A1, A2)
struct Resident *FindResident(const UBYTE *name) (A1)
APTR InitResident(struct Resident *resident, BPTR segList) (A1, D1)
void Alert(ULONG alertNum) (D7)
void Debug(unsigned long flags) (D0)
void Disable() ()
void Enable() ()
void Forbid() ()
void Permit() ()
ULONG SetSR(ULONG newSR, ULONG mask) (D0, D1)
APTR SuperState() ()
void UserState(APTR sysStack) (D0)
struct Interrupt *SetIntVector(ULONG intNumber, struct Interrupt *interrupt) (D0, A1)
void AddIntServer(ULONG intNumber, struct Interrupt *interrupt) (D0, A1)
void RemIntServer(ULONG intNumber, struct Interrupt *interrupt) (D0, A1)
void Cause(struct Interrupt *softint) (A1)
APTR Allocate(struct MemHeader *freeList, IPTR byteSize) (A0, D0)
void Deallocate(struct MemHeader *freeList, APTR memoryBlock, IPTR byteSize) (A0, A1, D0)
APTR AllocMem(IPTR byteSize, ULONG requirements) (D0, D1)
APTR AllocAbs(IPTR byteSize, APTR location) (D0, A1)
void FreeMem(APTR memoryBlock, IPTR byteSize) (A1, D0)
IPTR AvailMem(ULONG attributes) (D1)
struct MemList *AllocEntry(struct MemList *entry) (A0)
void FreeEntry(struct MemList *entry) (A0)
void Insert(struct List *list, struct Node *node, struct Node *pred) (A0, A1, A2)
void AddHead(struct List *list, struct Node *node) (A0, A1)
void AddTail(struct List *list, struct Node *node) (A0, A1)
void Remove(struct Node *node) (A1)
struct Node *RemHead(struct List *list) (A0)
struct Node *RemTail(struct List *list) (A0)
void Enqueue(struct List *list, struct Node *node) (A0, A1)
struct Node *FindName(struct List *list, CONST_STRPTR name) (A0, A1)
APTR AddTask(struct Task *task, APTR initialPC, APTR finalPC) (A1, A2, A3)
void RemTask(struct Task *task) (A1)
struct Task *FindTask(CONST_STRPTR name) (A1)
BYTE SetTaskPri(struct Task *task, LONG priority) (A1, D0)
ULONG SetSignal(ULONG newSignals, ULONG signalSet) (D0, D1)
ULONG SetExcept(ULONG newSignals, ULONG signalSet) (D0, D1)
ULONG Wait(ULONG signalSet) (D0)
void Signal(struct Task *task, ULONG signalSet) (A1, D0)
BYTE AllocSignal(LONG signalNum) (D0)
void FreeSignal(LONG signalNum) (D0)
LONG AllocTrap(long trapNum) (D0)
void FreeTrap(long trapNum) (D0)
void AddPort(struct MsgPort *port) (A1)
void RemPort(struct MsgPort *port) (A1)
void PutMsg(struct MsgPort *port, struct Message *message) (A0, A1)
struct Message *GetMsg(struct MsgPort *port) (A0)
void ReplyMsg(struct Message *message) (A1)
struct Message *WaitPort(struct MsgPort *port) (A0)
struct MsgPort *FindPort(CONST_STRPTR name) (A1)
void AddLibrary(struct Library *library) (A1)
void RemLibrary(struct Library *library) (A1)
struct Library *OldOpenLibrary(UBYTE *libName) (A1)
void CloseLibrary(struct Library *library) (A1)
APTR SetFunction(struct Library *library, LONG funcOffset, APTR newFunction) (A1, A0, D0)
void SumLibrary(struct Library *library) (A1)
void AddDevice(struct Device *device) (A1)
void RemDevice(struct Device *device) (A1)
LONG OpenDevice(CONST_STRPTR devName, IPTR unitNumber, struct IORequest *iORequest, ULONG flags) (A0, D0, A1, D1)
void CloseDevice(struct IORequest *iORequest) (A1)
LONG DoIO(struct IORequest *iORequest) (A1)
void SendIO(struct IORequest *iORequest) (A1)
struct IORequest *CheckIO(struct IORequest *iORequest) (A1)
LONG WaitIO(struct IORequest *iORequest) (A1)
LONG AbortIO(struct IORequest *iORequest) (A1)
void AddResource(APTR resource) (A1)
void RemResource(APTR resource) (A1)
APTR OpenResource(CONST_STRPTR resName) (A1)
void RawIOInit() ()
LONG RawMayGetChar() ()
void RawPutChar(UBYTE chr) (D0)
APTR RawDoFmt(CONST_STRPTR FormatString, APTR DataStream, VOID_FUNC PutChProc, APTR PutChData) (A0, A1, A2, A3)
UWORD GetCC() ()
ULONG TypeOfMem(APTR address) (A1)
ULONG Procure(struct SignalSemaphore *sigSem, struct SemaphoreMessage *bidMsg) (A0, A1)
void Vacate(struct SignalSemaphore *sigSem, struct SemaphoreMessage *bidMsg) (A0, A1)
struct Library *OpenLibrary(CONST_STRPTR libName, ULONG version) (A1, D0)
.version 33
void InitSemaphore(struct SignalSemaphore *sigSem) (A0)
void ObtainSemaphore(struct SignalSemaphore *sigSem) (A0)
void ReleaseSemaphore(struct SignalSemaphore *sigSem) (A0)
ULONG AttemptSemaphore(struct SignalSemaphore *sigSem) (A0)
void ObtainSemaphoreList(struct List *sigSem) (A0)
void ReleaseSemaphoreList(struct List *sigSem) (A0)
struct SignalSemaphore *FindSemaphore(CONST_STRPTR name) (A1)
void AddSemaphore(struct SignalSemaphore *sigSem) (A1)
void RemSemaphore(struct SignalSemaphore *sigSem) (A1)
ULONG SumKickData() ()
void AddMemList(IPTR size, ULONG attributes, LONG pri, APTR base, STRPTR name) (D0, D1, D2, A0, A1)
void CopyMem(CONST_APTR source, APTR dest, IPTR size) (A0, A1, D0)
void CopyMemQuick(CONST_APTR source, APTR dest, IPTR size) (A0, A1, D0)
.version 36
void CacheClearU() ()
void CacheClearE(APTR address, IPTR length, ULONG caches) (A0, D0, D1)
ULONG CacheControl(ULONG cacheBits, ULONG cacheMask) (D0, D1)
APTR CreateIORequest(struct MsgPort *ioReplyPort, ULONG size) (A0, D0)
void DeleteIORequest(APTR iorequest) (A0)
struct MsgPort *CreateMsgPort() ()
void DeleteMsgPort(struct MsgPort *port) (A0)
void ObtainSemaphoreShared(struct SignalSemaphore *sigSem) (A0)
APTR AllocVec(IPTR byteSize, ULONG requirements) (D0, D1)
void FreeVec(APTR memoryBlock) (A1)
APTR CreatePool(ULONG requirements, IPTR puddleSize, IPTR threshSize) (D0, D1, D2)
void DeletePool(APTR poolHeader) (A0)
APTR AllocPooled(APTR poolHeader, IPTR memSize) (A0, D0)
void FreePooled(APTR poolHeader, APTR memory, IPTR memSize) (A0, A1, D0)
ULONG AttemptSemaphoreShared(struct SignalSemaphore *sigSem) (A0)
void ColdReboot() ()
void StackSwap(struct StackSwapStruct *sss) (A0)
.private
void ChildFree(ULONG tid) (D0)
ULONG ChildOrphan(ULONG tid) (D0)
ULONG ChildStatus(ULONG tid) (D0)
IPTR ChildWait(ULONG tid) (D0)
APTR CachePreDMA(APTR address, ULONG *length, ULONG flags) (A0, A1, D0)
.novararg
void CachePostDMA(APTR address, ULONG *length, ULONG flags) (A0, A1, D0)
.novararg
.version 39
void AddMemHandler(struct Interrupt *memHandler) (A1)
void RemMemHandler(struct Interrupt *memHandler) (A1)
ULONG ObtainQuickVector(APTR interruptCode) (A0)
.skip 1 # MorphOS: NewSetFunction()
.skip 1 # MorphOS: NewCreateLibrary()
IPTR NewStackSwap(struct StackSwapStruct *newStack, APTR function, struct StackSwapArgs *args) (A0, A1, A2)
APTR TaggedOpenLibrary(LONG tag) (D0)
ULONG ReadGayle() ()
.version 50
STRPTR VNewRawDoFmt(CONST_STRPTR FormatString, VOID_FUNC PutChProc, APTR PutChData, va_list VaListStream) (A0, A2, A3, A1)
.version 45
void NewMinList(struct MinList *ml) (A0)
.skip 1 # MorphOS: CacheInvalidInstArea(APTR Address, ULONG Size) (A0, D0)
.skip 1 # MorphOS: CacheInvalidDataArea(APTR Address, ULONG Size) (A0, D0)
.skip 1 # MorphOS: CacheFlushDataInstArea(APTR Address, ULONG Size) (A0, D0)
.version 45
struct AVLNode *AVL_AddNode(struct AVLNode **root, struct AVLNode *node, AVLNODECOMP func) (A0, A1, A2)
struct AVLNode *AVL_RemNodeByAddress(struct AVLNode **root, struct AVLNode *node) (A0, A1)
struct AVLNode *AVL_RemNodeByKey(struct AVLNode **root, AVLKey key, AVLKEYCOMP func) (A0, A1, A2)
struct AVLNode *AVL_FindNode(const struct AVLNode *root, AVLKey key, AVLKEYCOMP func) (A0, A1, A2)
struct AVLNode *AVL_FindPrevNodeByAddress(const struct AVLNode *node) (A0)
struct AVLNode *AVL_FindPrevNodeByKey(const struct AVLNode *root, AVLKey key, AVLKEYCOMP func) (A0, A1, A2)
struct AVLNode *AVL_FindNextNodeByAddress(const struct AVLNode *node) (A0)
struct AVLNode *AVL_FindNextNodeByKey(const struct AVLNode *node, AVLKey key, AVLKEYCOMP func) (A0, A1, A2)
struct AVLNode *AVL_FindFirstNode(const struct AVLNode *root) (A0)
struct AVLNode *AVL_FindLastNode(const struct AVLNode *root) (A0)
.version 50
.skip 1 # MorphOS: ULONG NewSetSystemAttrsA(APTR yData, ULONG Size, ULONG Type, struct TagItem *Tags ) (A0, D0, D1, A1)
struct Task *NewCreateTaskA(struct TagItem *tags) (A0)
.skip 1 # MorphOS: NewRawDoFmt()
.skip 1 # MorphOS: APTR AllocateAligned(struct MemHeader *memHeader, ULONG byteSize, ULONG alignSize, ULONG alignOffset) (base,sysv)
.skip 1 # MorphOS: APTR AllocMemAligned(ULONG byteSize, ULONG attributes, ULONG alignSize, ULONG alignOffset) (base,sysv)
.skip 1 # MorphOS: APTR AllocVecAligned(ULONG byteSize, ULONG attributes, ULONG alignSize, ULONG alignOffset) (base,sysv)
.skip 1 # MorphOS: AddExecNotify(struct Hook *hook) (base,sysv)
.skip 1 # MorphOS: RemExecNotify(struct Hook *hook) (base,sysv)
.skip 1 # MorphOS: struct Node *FindExecNode(ULONG type, CONST_STRPTR name) (D0, A0)
.skip 1 # MorphOS: APTR AddExecNodeA(APTR innode, struct TagItem *Tags) (A0, A1)
.skip 1 # MorphOS: APTR AllocVecDMA(ULONG byteSize, ULONG requirements) (D0, D1)
.skip 1 # MorphOS: VOID FreeVecDMA(APTR memoryBlock) (A1)
.skip 1 # MorphOS: APTR AllocPooledAligned(APTR poolHeader, ULONG byteSize, ULONG alignSize, ULONG alignOffset) (base,sysv)
.skip 1 # MorphOS: LONG AddResident(struct Resident *resident) (base,sysv)
struct Task *FindTaskByPID(ULONG processID) (D0)
BOOL AddResetCallback(struct Interrupt *resetCallback) (A0)
void RemResetCallback(struct Interrupt *resetCallback) (A0)
APTR AllocVecPooled(APTR poolHeader, IPTR memSize) (A0, D0)
void FreeVecPooled(APTR poolHeader, APTR memory) (A0, A1)
.skip 1 # MorphOS: void DumpTaskState(struct Task *task) (A0)
.skip 1 # MorphOS: void AddExecNotifyType(struct Hook *hook, LONG Type) (base,sysv)
ULONG ShutdownA(ULONG action) (D0)
.novararg
struct MemList *NewAllocEntry(struct MemList *entry, ULONG *return_flags) (A0, A1)
.skip 1 # MorphOS: ULONG AvailPool(APTR poolHeader, ULONG flags) (base,sysv)
APTR NewAddTask(struct Task *task, APTR initialPC, APTR finalPC, struct TagItem *tagList) (A1, A2, A3, A4)
# MorphOS functions follow:
.skip 1 # void PutMsgHead(struct MsgPort *port, struct Message *message) (base,sysv)
.skip 1 # ULONG NewGetTaskPIDAttrsA(ULONG pid, APTR data, ULONG dataSize, ULONG type, struct TagItem *tags) (D0, A0, D1, D2, A1)
.skip 1 # ULONG NewGetTaskPIDAttrsA(ULONG pid, APTR data, ULONG dataSize, ULONG type, struct TagItem *tags) (D0, A0, D1, D2, A1)
.version 51
LONG AllocTaskStorageSlot() ()
VOID FreeTaskStorageSlot(LONG slot) (D0)
APTR SaveTaskStorage() ()
void RestoreTaskStorage(APTR id) (A0)
BOOL SetTaskStorageSlot(LONG id, IPTR value) (D0, D1)
IPTR GetTaskStorageSlot(LONG id) (D0)
IPTR GetParentTaskStorageSlot(LONG id) (D0)
##end functionlist
