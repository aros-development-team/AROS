##begin config
version 41.11
libbase SysBase
libbasetype struct IntExecBase
libbasetypeextern struct ExecBase
options noresident
##end config

##begin cdef
#include <exec/types.h>
#include <exec/tasks.h>
#include <exec/memory.h>
#include <exec/ports.h>
#include <exec/devices.h>
#include <exec/io.h>
#include <exec/semaphores.h>
#include <exec/interrupts.h>
#include <exec/avl.h>

#include <dos/bptr.h>

#include <stdarg.h>

__BEGIN_DECLS

#ifndef NewRawDoFmt
STRPTR NewRawDoFmt(CONST_STRPTR FormatString, VOID_FUNC PutChProc, APTR PutChData, ...);
#endif

__END_DECLS

##end cdef

##begin cdefprivate

#include "exec_intern.h"

##end cdefprivate

##begin functionlist
struct ExecBase *open(ULONG version) (D0)
.private
BPTR close() ()
.private
.skip 2
ULONG Supervisor(ULONG_FUNC userFunction) (A5)
BOOL PrepareContext(struct Task *task, APTR entryPoint, APTR fallBack, struct TagItem *tagList) (A0, A1, A2, A3)

void Reschedule(struct Task *task) (A0)
void Switch() ()
void Dispatch() ()
void Exception() ()
void InitCode(ULONG startClass, ULONG version) (D0, D1)
void InitStruct(APTR initTable, APTR memory, ULONG size) (A1, A2, D0)
struct Library *MakeLibrary(APTR funcInit, APTR structInit, ULONG_FUNC libInit, ULONG dataSize, BPTR segList) (A0, A1, A2, D0, D1)
ULONG MakeFunctions(APTR target, CONST_APTR functionArray, CONST_APTR funcDispBase) (A0, A1, A2)
struct Resident *FindResident(const UBYTE *name) (A1)
APTR InitResident(struct Resident *resident, BPTR segList) (A1, D1)
void Alert(ULONG alertNum) (D7)
void Debug(unsigned long flags) (D0)
void Disable() ()
void Enable() ()
void Forbid() ()
void Permit() ()
ULONG SetSR(ULONG newSR, ULONG mask) (D0, D1)
APTR SuperState() ()
void UserState(APTR sysStack) (D0)
struct Interrupt *SetIntVector(ULONG intNumber, struct Interrupt *interrupt) (D0, A1)
void AddIntServer(ULONG intNumber, struct Interrupt *interrupt) (D0, A1)
void RemIntServer(ULONG intNumber, struct Interrupt *interrupt) (D0, A1)
void Cause(struct Interrupt *softint) (A1)
APTR Allocate(struct MemHeader *freeList, ULONG byteSize) (A0, D0)
void Deallocate(struct MemHeader *freeList, APTR memoryBlock, ULONG byteSize) (A0, A1, D0)
APTR AllocMem(ULONG byteSize, ULONG requirements) (D0, D1)
APTR AllocAbs(ULONG byteSize, APTR location) (D0, D1)
void FreeMem(APTR memoryBlock, ULONG byteSize) (A1, D0)
ULONG AvailMem(ULONG attributes) (D1)
struct MemList *AllocEntry(struct MemList *entry) (A0)
void FreeEntry(struct MemList *entry) (A0)
void Insert(struct List *list, struct Node *node, struct Node *pred) (A0, A1, A2)
void AddHead(struct List *list, struct Node *node) (A0, A1)
void AddTail(struct List *list, struct Node *node) (A0, A1)
void Remove(struct Node *node) (A1)
struct Node *RemHead(struct List *list) (A0)
struct Node *RemTail(struct List *list) (A0)
void Enqueue(struct List *list, struct Node *node) (A0, A1)
struct Node *FindName(struct List *list, const UBYTE *name) (A0, A1)
APTR AddTask(struct Task *task, APTR initialPC, APTR finalPC) (A1, A2, A3)
void RemTask(struct Task *task) (A1)
struct Task *FindTask(STRPTR name) (A1)
BYTE SetTaskPri(struct Task *task, LONG priority) (A1, D0)
ULONG SetSignal(ULONG newSignals, ULONG signalSet) (D0, D1)
ULONG SetExcept(ULONG newSignals, ULONG signalSet) (D0, D1)
ULONG Wait(ULONG signalSet) (D0)
void Signal(struct Task *task, ULONG signalSet) (A1, D0)
BYTE AllocSignal(LONG signalNum) (D0)
void FreeSignal(LONG signalNum) (D0)
LONG AllocTrap(long trapNum) (D0)
void FreeTrap(long trapNum) (D0)
void AddPort(struct MsgPort *port) (A1)
void RemPort(struct MsgPort *port) (A1)
void PutMsg(struct MsgPort *port, struct Message *message) (A0, A1)
struct Message *GetMsg(struct MsgPort *port) (A0)
void ReplyMsg(struct Message *message) (A1)
struct Message *WaitPort(struct MsgPort *port) (A0)
struct MsgPort *FindPort(STRPTR name) (A1)
void AddLibrary(struct Library *library) (A1)
void RemLibrary(struct Library *library) (A1)
struct Library *OldOpenLibrary(UBYTE *libName) (A1)
void CloseLibrary(struct Library *library) (A1)
APTR SetFunction(struct Library *library, LONG funcOffset, APTR newFunction) (A1, A0, D0)
void SumLibrary(struct Library *library) (A1)
void AddDevice(struct Device *device) (A1)
void RemDevice(struct Device *device) (A1)
BYTE OpenDevice(CONST_STRPTR devName, IPTR unitNumber, struct IORequest *iORequest, ULONG flags) (A0, D0, A1, D1)
void CloseDevice(struct IORequest *iORequest) (A1)
BYTE DoIO(struct IORequest *iORequest) (A1)
void SendIO(struct IORequest *iORequest) (A1)
struct IORequest *CheckIO(struct IORequest *iORequest) (A1)
BYTE WaitIO(struct IORequest *iORequest) (A1)
LONG AbortIO(struct IORequest *iORequest) (A1)
void AddResource(APTR resource) (A1)
void RemResource(APTR resource) (A1)
APTR OpenResource(CONST_STRPTR resName) (A1)
void RawIOInit() ()
LONG RawMayGetChar() ()
void RawPutChar(UBYTE chr) (D0)
APTR RawDoFmt(CONST_STRPTR FormatString, APTR DataStream, VOID_FUNC PutChProc, APTR PutChData) (A0, A1, A2, A3)
UWORD GetCC() ()
ULONG TypeOfMem(APTR address) (A1)
ULONG Procure(struct SignalSemaphore *sigSem, struct SemaphoreMessage *bidMsg) (A0, A1)
void Vacate(struct SignalSemaphore *sigSem, struct SemaphoreMessage *bidMsg) (A0, A1)
struct Library *OpenLibrary(CONST_STRPTR libName, ULONG version) (A1, D0)
void InitSemaphore(struct SignalSemaphore *sigSem) (A0)
void ObtainSemaphore(struct SignalSemaphore *sigSem) (A0)
void ReleaseSemaphore(struct SignalSemaphore *sigSem) (A0)
ULONG AttemptSemaphore(struct SignalSemaphore *sigSem) (A0)
void ObtainSemaphoreList(struct List *sigSem) (A0)
void ReleaseSemaphoreList(struct List *sigSem) (A0)
struct SignalSemaphore *FindSemaphore(STRPTR name) (A1)
void AddSemaphore(struct SignalSemaphore *sigSem) (A1)
void RemSemaphore(struct SignalSemaphore *sigSem) (A0)
ULONG SumKickData() ()
void AddMemList(ULONG size, ULONG attributes, LONG pri, APTR base, STRPTR name) (D0, D1, D2, A0, A1)
void CopyMem(CONST_APTR source, APTR dest, ULONG size) (A0, A1, D0)
void CopyMemQuick(CONST_APTR source, APTR dest, ULONG size) (A0, A1, D0)
void CacheClearU() ()
void CacheClearE(APTR address, ULONG length, ULONG caches) (A0, D0, D1)
ULONG CacheControl(ULONG cacheBits, ULONG cacheMask) (D0, D1)
APTR CreateIORequest(struct MsgPort *ioReplyPort, ULONG size) (A0, D0)
void DeleteIORequest(APTR iorequest) (A0)
struct MsgPort *CreateMsgPort() ()
void DeleteMsgPort(struct MsgPort *port) (A0)
void ObtainSemaphoreShared(struct SignalSemaphore *sigSem) (A0)
APTR AllocVec(ULONG byteSize, ULONG requirements) (D0, D1)
void FreeVec(APTR memoryBlock) (A1)
APTR CreatePool(ULONG requirements, ULONG puddleSize, ULONG threshSize) (D0, D1, D2)
void DeletePool(APTR poolHeader) (A0)
APTR AllocPooled(APTR poolHeader, ULONG memSize) (A0, D0)
void FreePooled(APTR poolHeader, APTR memory, ULONG memSize) (A0, A1, D0)
ULONG AttemptSemaphoreShared(struct SignalSemaphore *sigSem) (A0)
void ColdReboot() ()
void StackSwap(struct StackSwapStruct *sss) (A0)
void ChildFree(APTR tid) (D0)
ULONG ChildOrphan(APTR tid) (D0)
ULONG ChildStatus(APTR tid) (D0)
IPTR ChildWait(APTR tid) (D0)
APTR CachePreDMA(APTR address, ULONG *length, ULONG flags) (A0, A1, D0)
void CachePostDMA(APTR address, ULONG *length, ULONG flags) (A0, A1, D0)
void AddMemHandler(struct Interrupt *memHandler) (A1)
void RemMemHandler(struct Interrupt *memHandler) (A1)
ULONG ObtainQuickVector(APTR interruptCode) (A0)
.skip 2
IPTR NewStackSwap(struct StackSwapStruct *newStack, APTR function, struct StackSwapArgs *args) (A0, A1, A2)
APTR TaggedOpenLibrary(LONG tag) (D0)
ULONG ReadGayle() ()
STRPTR VNewRawDoFmt(CONST_STRPTR FormatString, VOID_FUNC PutChProc, APTR PutChData, va_list VaListStream) (A0, A2, A3, A1)
.skip 1
struct AVLNode *AVL_AddNode(struct AVLNode **root, struct AVLNode *node, AVLNODECOMP func) (A0, A1, A2)
struct AVLNode *AVL_RemNodeByAddress(struct AVLNode **root, struct AVLNode *node) (A0, A1)
struct AVLNode *AVL_RemNodeByKey(struct AVLNode **root, AVLKey key, AVLKEYCOMP func) (A0, A1, A2)
struct AVLNode *AVL_FindNode(const struct AVLNode *root, AVLKey key, AVLKEYCOMP func) (A0, A1, A2)
struct AVLNode *AVL_FindPrevNodeByAddress(const struct AVLNode *node) (A0)
struct AVLNode *AVL_FindPrevNodeByKey(const struct AVLNode *root, AVLKey key, AVLKEYCOMP func) (A0, A1, A2)
struct AVLNode *AVL_FindNextNodeByAddress(const struct AVLNode *node) (A0)
struct AVLNode *AVL_FindNextNodeByKey(const struct AVLNode *node, AVLKey key, AVLKEYCOMP func) (A0, A1, A2)
struct AVLNode *AVL_FindFirstNode(const struct AVLNode *root) (A0)
struct AVLNode *AVL_FindLastNode(const struct AVLNode *root) (A0)
APTR AllocVecPooled(APTR pool, ULONG size) (D0, D1)
void FreeVecPooled(APTR pool, APTR memory) (D0, D1)
BOOL NewAllocEntry(struct MemList *entry, struct MemList **return_entry, ULONG *return_flags) (A0, A1, D0)
APTR NewAddTask(struct Task *task, APTR initialPC, APTR finalPC, struct TagItem *tagList) (A1, A2, A3, A4)
.skip 14
BOOL AddResetCallback(struct Interrupt *resetCallback) (A0)
void RemResetCallback(struct Interrupt *resetCallback) (A0)
.skip 4
ULONG ShutdownA(ULONG action) (D0)
##end functionlist
