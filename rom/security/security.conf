##begin config
version 45.1
libbase secBase
libbasetype struct SecurityBase
libbasetypeextern struct Library
residentpri -121
##end config

##begin cdef
#include <proto/exec.h>

#include <utility/tagitem.h>
#include <exec/tasks.h>
#include <dos/dosextens.h>

#include <libraries/security.h>
#include <libraries/mufs.h>

__BEGIN_DECLS

ULONG secLogin(Tag tag1, ...);
BOOL secSetDefProtection(Tag tag1, ...);
BOOL secCheckPasswdTags(Tag tag1, ...);
ULONG secGetRelationship(struct secExtOwner *user, ULONG owner, Tag tag1, ...);

__END_DECLS

##end cdef

##begin cdefprivate
#include "security_intern.h"
##end cdefprivate

##begin functionlist
ULONG secLogout() ()
ULONG secLoginA(struct TagItem *taglist) (A0)
ULONG secGetTaskOwner(struct Task *task) (D0)
BOOL secPasswd(STRPTR oldpwd, STRPTR newpwd) (A0, A1)
struct secUserInfo *secAllocUserInfo() ()
void secFreeUserInfo(struct secUserInfo *info) (A0)
struct secUserInfo *secGetUserInfo(struct secUserInfo *info, ULONG keytype) (A0, D0)
.skip 1
BOOL secSetDefProtectionA(struct TagItem *taglist) (A0)
ULONG secGetDefProtection(struct Task *task) (D0)
BOOL secSetProtection(STRPTR name, LONG mask) (D1, D2)
BOOL secLimitDOSSetProtection(BOOL flag) (D0)
BOOL secCheckPasswd(struct TagItem *taglist) (A0)
BOOL secFSRendezVous() ()
BPTR secGetPasswdDirLock() ()
BPTR secGetConfigDirLock() ()
struct secExtOwner *secGetTaskExtOwner(struct Task *task) (D0)
void secFreeExtOwner(struct secExtOwner *owner) (A0)
ULONG secGetRelationshipA(struct secExtOwner *user, ULONG owner, struct TagItem *taglist) (D0, D1,A0)
struct secExtOwner *secUserInfo2ExtOwner(struct secUserInfo *info) (A0)
struct secGroupInfo *secAllocGroupInfo() ()
void secFreeGroupInfo(struct secGroupInfo *info) (A0)
struct secGroupInfo *secGetGroupInfo(struct secGroupInfo *info, ULONG keytype) (A0, D0)
BOOL secAddMonitor(struct secMonitor *monitor) (A0)
void secRemMonitor(struct secMonitor *monitor) (A0)
BOOL secKill(struct Task *task) (D0)
BOOL secFreeze(struct Task *task) (D0)
BOOL secUnfreeze(struct Task *task) (D0)
LONG secAccess_Control(ULONG contextflags, APTR context, struct secExtOwner *task, ULONG objectowner, LONG objectprot, LONG access_type) (D1, A1, A2, D2, D3, D4)
struct secExtOwner * secGetPktOwner(struct DosPacket *pkt) (A1)
LONG secGetPktDefProtection(struct DosPacket *pkt) (A1)
LONG secEnumChildren(struct Task * parent, struct Task ** children, LONG size) (A0, A1, D0)
struct secPointers *secLocksecBase() ()
void secUnlocksecBase(struct secPointers *muP) (D0)
UWORD secgetuid() ()
UWORD secgetgid() ()
int secsetuid(UWORD uid) (D0)
int secsetgid(UWORD gid) (D0)
int secseteuid(UWORD uid) (D0)
int secsetegid(UWORD gid) (D0)
int secsetreuid(int ruid, int euid) (D0, D1)
int secgetpgid(int pid) (D0)
ULONG secRegisterHandler(struct plugin_ops * ops) (A0)
void secUnRegisterHandler(struct plugin_ops * ops) (A0)
void secPluginOperationComplete(APTR context, ULONG result) (A0, D0)
BOOL secLoadPlugin(STRPTR name) (A0)
BOOL secUnloadPlugin(STRPTR name) (A0)
APTR secContextLocate(secPluginModule *module, ULONG id, struct Task *caller, ULONG size) (A0, D0, A1, D1)
##end functionlist
