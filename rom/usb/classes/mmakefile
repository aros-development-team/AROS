#   $Id: mmakefile.src  $
include $(TOP)/config/make.cfg

#MM rom-usb-usbclass-includes : \
#MM     rom-usb-poseidon-includes \
#MM     includes-copy
#MM- rom-usb-usbclass : linklibs


# Define metamake targets and their dependencies
#MM- includes-all : rom-usb-usbclass-includes
#MM rom-usb-usbclass : rom-usb-usbclass-includes core-linklibs
#MM rom-usb-usbclass-kobj : rom-usb-usbclass-includes core-linklibs
#MM rom-usb-usbclass-linklib : rom-usb-usbclass-includes
#MM rom-usb-usbclass-quick : rom-usb-usbclass-includes-quick
#MM rom-usb-usbclass-includes : rom-usb-usbclass-makefile rom-usb-usbclass-includes-dirs \
#MM     includes-generate-deps
#MM rom-usb-usbclass-includes-quick
#MM rom-usb-usbclass-includes-dirs
#MM rom-usb-usbclass-makefile
#MM rom-usb-usbclass-funclist
#MM rom-usb-usbclass-clean

# All MetaMake targets defined by this macro
BD_ALLTARGETS := rom-usb-usbclass rom-usb-usbclass-quick rom-usb-usbclass-includes \
    rom-usb-usbclass-includes-quick rom-usb-usbclass-includes-dirs rom-usb-usbclass-clean \
    rom-usb-usbclass-kobj rom-usb-usbclass-funclist

.PHONY : $(BD_ALLTARGETS) rom-usb-usbclass-makefile

ifeq (usbclass,)
$(error using %build_module_skeleton: modname may not be empty)
endif
ifeq (library,)
$(error using %build_module_skeleton: $(MODTYPE) has to be defined with the type of the module)
endif

# Default values for variables and arguments
BD_DEFLINKLIBNAME := usbclass
BD_DEFREFFILE := $(OBJDIR)/usbclass_ALL.ref
BD_DEFDFLAGS := %(cflags)
OBJDIR ?= $(GENDIR)/$(CURDIR)

## Create genmodule include Makefile for the module
##
rom-usb-usbclass-makefile : $(OBJDIR)/Makefile.usbclass


TMP_TARGET := Makefile.usbclass
TMP_DEPS := $(GENMODULE)
TMP_OPTS := 
ifneq (,)
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/
else
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/usbclass.conf
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/usbclass.conf
endif
ifneq (,)
    TMP_OPTS += -s 
endif
ifneq ($(OBJDIR),)
    TMP_OPTS += -d $(OBJDIR)
    TMP_TARGET := $(OBJDIR)/$(TMP_TARGET)
endif

$(TMP_TARGET) : OPTS := $(TMP_OPTS)
$(TMP_TARGET) : MODNAME := usbclass
$(TMP_TARGET) : MODTYPE := library
$(TMP_TARGET) : $(TMP_DEPS)
	@$(GENMODULE) $(OPTS) writemakefile $(MODNAME) $(MODTYPE)

$(OBJDIR)/Makefile.usbclass : | $(OBJDIR)

GLOB_MKDIRS += $(OBJDIR)

# Do not parse these statements if metatarget is not appropriate
ifneq ($(filter $(TARGET),$(BD_ALLTARGETS)),)

include $(OBJDIR)/Makefile.usbclass

BD_DEFMODDIR := $(usbclass_MODDIR)


## include files generation
##
BD_INCDIR    := $(AROSDIR)/$(AROS_DIR_INCLUDE)
BD_LIBDEFSINC := $(OBJDIR)/include/usbclass_libdefs.h
BD_DEFLIBDEFSINC := $(OBJDIR)/include/usbclass_deflibdefs.h

rom-usb-usbclass-includes-quick : rom-usb-usbclass-includes
rom-usb-usbclass-includes : $(addprefix $(GENINCDIR)/,$(usbclass_INCLUDES)) \
    $(addprefix $(BD_INCDIR)/,$(usbclass_INCLUDES)) \
    $(BD_LIBDEFSINC) $(BD_DEFLIBDEFSINC)

ifneq ($(usbclass_INCLUDES),)


ifneq ($(usbclass_INCLUDES),)
TMP_TARGETS := $(usbclass_INCLUDES)

TMP_DEPS := $(GENMODULE)
ifeq ($(usbclass_NEEDREF), yes)
    ifeq ($(BD_DEFREFFILE),)
        $(error reffile needed in rule_genmodule_files but none specified)
    endif
    TMP_OPTS := -r $(BD_DEFREFFILE)
    TMP_DEPS += $(BD_DEFREFFILE)
else
    TMP_OPTS :=
endif
ifneq (,)
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/
else
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/usbclass.conf
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/usbclass.conf
endif
ifneq (,)
    TMP_OPTS += -s 
endif
ifneq ($(OBJDIR)/include,)
    TMP_OPTS += -d $(OBJDIR)/include
    TMP_TARGETS := $(addprefix $(OBJDIR)/include/,$(TMP_TARGETS))
endif

$(TMP_TARGETS) : OPTS := $(TMP_OPTS)
$(TMP_TARGETS) : MODNAME := usbclass
$(TMP_TARGETS) : MODTYPE := library
$(TMP_TARGETS) : $(TMP_DEPS)
	@$(ECHO) "Generating include files"
	@$(GENMODULE) $(OPTS) writeincludes $(MODNAME) $(MODTYPE)
endif


TMP_SRCDIR := $(OBJDIR)/include

$(addprefix $(GENINCDIR)/,$(usbclass_INCLUDES)) : | $(OBJDIR)/usbclass_geninc

$(OBJDIR)/usbclass_geninc : COPYSRCDIR := $(OBJDIR)/include
$(OBJDIR)/usbclass_geninc : TGTDIR := $(GENINCDIR)
$(OBJDIR)/usbclass_geninc : FILES := $(usbclass_INCLUDES)
$(OBJDIR)/usbclass_geninc : $(addprefix $(OBJDIR)/include/,$(usbclass_INCLUDES))
	@for f in $(FILES); do \
	     $(IF) ! $(CMP) -s $(COPYSRCDIR)/$$f $(TGTDIR)/$$f ; then \
	         $(CP) $(COPYSRCDIR)/$$f $(TGTDIR)/$$f ; \
	     fi ; \
	done
	@$(TOUCH) $@


TMP_SRCDIR := $(OBJDIR)/include

$(addprefix $(BD_INCDIR)/,$(usbclass_INCLUDES)) : | $(OBJDIR)/usbclass_incs

$(OBJDIR)/usbclass_incs : COPYSRCDIR := $(OBJDIR)/include
$(OBJDIR)/usbclass_incs : TGTDIR := $(BD_INCDIR)
$(OBJDIR)/usbclass_incs : FILES := $(usbclass_INCLUDES)
$(OBJDIR)/usbclass_incs : $(addprefix $(OBJDIR)/include/,$(usbclass_INCLUDES))
	@for f in $(FILES); do \
	     $(IF) ! $(CMP) -s $(COPYSRCDIR)/$$f $(TGTDIR)/$$f ; then \
	         $(CP) $(COPYSRCDIR)/$$f $(TGTDIR)/$$f ; \
	     fi ; \
	done
	@$(TOUCH) $@


ifneq ($(usbclass_INCLUDES),)
TMP_TARGETS := $(usbclass_INCLUDES)

TMP_DEPS := $(GENMODULE)
TMP_OPTS := 
ifneq (,)
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/
else
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/usbclass.conf
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/usbclass.conf
endif
ifneq (,)
    TMP_OPTS += -s 
endif
ifneq ($(OBJDIR)/dummyinc,)
    TMP_OPTS += -d $(OBJDIR)/dummyinc
    TMP_TARGETS := $(addprefix $(OBJDIR)/dummyinc/,$(TMP_TARGETS))
endif

$(TMP_TARGETS) : OPTS := $(TMP_OPTS)
$(TMP_TARGETS) : MODNAME := usbclass
$(TMP_TARGETS) : MODTYPE := library
$(TMP_TARGETS) : $(TMP_DEPS)
	@$(ECHO) "Generating dummy include files"
	@$(GENMODULE) $(OPTS) writedummy $(MODNAME) $(MODTYPE)
endif

BD_INCDIRS := $(filter-out ./,$(sort $(dir $(usbclass_INCLUDES))))

TMPusbclass_INCDIRS := \
    $(OBJDIR)/include $(addprefix $(OBJDIR)/include/,$(BD_INCDIRS)) \
    $(GENINCDIR) $(addprefix $(GENINCDIR)/,$(BD_INCDIRS)) \
    $(BD_INCDIR) $(addprefix $(BD_INCDIR)/,$(BD_INCDIRS))

rom-usb-usbclass-includes-dirs :: $(TMPusbclass_INCDIRS)

GLOB_MKDIRS += $(TMPusbclass_INCDIRS)


$(addprefix $(OBJDIR)/dummyinc/,$(usbclass_INCLUDES)) : | $(OBJDIR)/dummyinc $(addprefix $(OBJDIR)/dummyinc/,$(BD_INCDIRS))
GLOB_MKDIRS += $(OBJDIR)/dummyinc $(addprefix $(OBJDIR)/dummyinc/,$(BD_INCDIRS))

endif


TMP_TARGET := usbclass_libdefs.h
TMP_DEPS := $(GENMODULE)
TMP_OPTS := 
ifneq (,)
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/
else
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/usbclass.conf
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/usbclass.conf
endif
ifneq (,)
    TMP_OPTS += -s 
endif
ifneq ($(OBJDIR)/include,)
    TMP_OPTS += -d $(OBJDIR)/include
    TMP_TARGET := $(OBJDIR)/include/$(TMP_TARGET)
endif

$(TMP_TARGET) : OPTS := $(TMP_OPTS)
$(TMP_TARGET) : MODNAME := usbclass
$(TMP_TARGET) : MODTYPE := library
$(TMP_TARGET) : $(TMP_DEPS)
	@$(ECHO) "Generating $(notdir $@)"
	@$(GENMODULE) $(OPTS) writelibdefs $(MODNAME) $(MODTYPE)

$(BD_DEFLIBDEFSINC) : FILENAME := $(BD_LIBDEFSINC)
$(BD_DEFLIBDEFSINC) :
	@$(ECHO) "generating $@"
	@$(ECHO) "#define LC_LIBDEFS_FILE \"$(FILENAME)\"" >$@

$(BD_LIBDEFSINC) $(BD_DEFLIBDEFSINC) : | $(OBJDIR)/include
GLOB_MKDIRS += $(OBJDIR)/include

## Generation of the funclist file
##
rom-usb-usbclass-funclist : usbclass.funclist


TMP_TARGET := usbclass.funclist
TMP_DEPS := $(GENMODULE)
TMP_OPTS := 
ifeq ($(BD_DEFREFFILE),)
    $(error reffile needed in rule_genmodule_funclist but none specified)
endif
TMP_OPTS := -r $(BD_DEFREFFILE)
TMP_DEPS += $(BD_DEFREFFILE)
ifneq (,)
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/
else
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/usbclass.conf
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/usbclass.conf
endif
ifneq (,)
    TMP_OPTS += -s 
endif
ifneq (,)
    TMP_OPTS += -d 
    TMP_TARGET := /$(TMP_TARGET)
endif

$(TMP_TARGET) : OPTS := $(TMP_OPTS)
$(TMP_TARGET) : MODNAME := usbclass
$(TMP_TARGET) : MODTYPE := library
$(TMP_TARGET) : $(TMP_DEPS)
	@$(ECHO) "Generating $(notdir $@)"
	@$(GENMODULE) $(OPTS) writefunclist $(MODNAME) $(MODTYPE)


## Extra genmodule src files generation
## 

TMP_TARGETS := $(usbclass_STARTFILES) $(usbclass_ENDFILES) \
	       $(usbclass_LINKLIBFILES)
TMP_TARGETS := $(addsuffix .c,$(TMP_TARGETS)) $(addsuffix .S, $(usbclass_LINKLIBAFILES))

TMP_DEPS := $(GENMODULE)
ifeq ($(usbclass_NEEDREF), yes)
    ifeq ($(BD_DEFREFFILE),)
        $(error reffile needed in rule_genmodule_files but none specified)
    endif
    TMP_OPTS := -r $(BD_DEFREFFILE)
    TMP_DEPS += $(BD_DEFREFFILE)
else
    TMP_OPTS :=
endif
ifneq (,)
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/
else
    TMP_OPTS += -c $(SRCDIR)/$(CURDIR)/usbclass.conf
    TMP_DEPS += $(SRCDIR)/$(CURDIR)/usbclass.conf
endif
ifneq (,)
    TMP_OPTS += -s 
endif
ifneq ($(OBJDIR),)
    TMP_OPTS += -d $(OBJDIR)
    TMP_TARGETS := $(addprefix $(OBJDIR)/,$(TMP_TARGETS))
endif

$(TMP_TARGETS) : OPTS := $(TMP_OPTS)
$(TMP_TARGETS) : MODNAME := usbclass
$(TMP_TARGETS) : MODTYPE := library
$(TMP_TARGETS) : $(TMP_DEPS)
	@$(ECHO) "Generating functable and support files for module $(MODNAME$(BDID))"
ifneq (,lib.conf)
	@$(IF) $(TEST) -f lib.conf; then \
	  $(ECHO) "WARNING !!! $(CURDIR)/lib.conf may probably be removed"; \
	fi
endif
	@$(IF) $(TEST) -f libdefs.h; then \
	  $(ECHO) "WARNING !!! $(CURDIR)/libdefs.h may probably be removed"; \
	fi
	@$(GENMODULE) $(OPTS) writefiles $(MODNAME) $(MODTYPE)

BD_TOCLEAN := $(BD_OBJS) $(BD_DEPS) $(BD_DEFREFFILE) \
    $(BD_REFS) $(BD_MODULE) $(BD_LINKLIB) $(BD_KOBJ) \
    $(OBJDIR)/Makefile.usbclass \
    $(addprefix $(OBJDIR)/include/,$(usbclass_INCLUDES)) \
    $(addprefix $(GENINCDIR)/,$(usbclass_INCLUDES)) \
    $(addprefix $(BD_INCDIR)/,$(usbclass_INCLUDES)) \
    $(OBJDIR)/usbclass_geninc $(OBJDIR)/usbclass_incs \
    $(addsuffix .c,$(BD_LINKLIBFILES)) $(BD_LINKLIBOBJS) $(BD_LIBDEFSINC) \
    $(BD_DEFLIBDEFSINC)
rom-usb-usbclass-clean : FILES := $(BD_TOCLEAN)
rom-usb-usbclass-clean ::
	@$(ECHO) "Cleaning up for module usbclass"
	@$(RM) $(FILES)

endif # $(TARGET) in $(BD_ALLTARGETS)

# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

include $(SRCDIR)/config/make.tail

BDID := $(BDTARGETID)
