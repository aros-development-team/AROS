##begin config
version 4.4
libbase ps
libbasetype struct PsdBase
libbasetypeextern struct Library
residentpri 48
basename psd
copyright Copyright 2002-2009 Chris Hodges
##end config

##begin cdef
#include <exec/types.h>
#include <exec/lists.h>
#include <exec/interrupts.h>
#include <exec/semaphores.h>
#include <exec/devices.h>
#include <exec/io.h>
#include <exec/ports.h>
#include <utility/utility.h>
#include <devices/timer.h>
#include <libraries/poseidon.h>

LONG psdGetAttrs(ULONG type, APTR psdstruct, Tag tag1, ...) __stackparm;
LONG psdSetAttrs(ULONG type, APTR psdstruct, Tag tag1, ...) __stackparm;
APTR psdAddErrorMsg(UWORD level, STRPTR origin, STRPTR fmtstr, IPTR *fmt1, ...) __stackparm;
VOID psdSafeRawDoFmt(STRPTR buf, ULONG len, STRPTR fmtstr, IPTR *fmt1, ...) __stackparm;
APTR psdFindDevice(APTR pd, Tag tag1, ...) __stackparm;
APTR psdClaimAppBinding(Tag tag1, ...) __stackparm;
APTR psdFindInterface(APTR pd, APTR pif, Tag tag1, ...) __stackparm;
APTR psdFindEndpoint(APTR pif, APTR pep, Tag tag1, ...) __stackparm;
STRPTR psdCopyStrFmt(CONST_STRPTR fmtstr, IPTR *fmt1, ...) __stackparm;
APTR psdOpenStream(APTR pep, Tag tag1, ...) __stackparm;
APTR psdHubClaimAppBinding(Tag tag1, ...) __stackparm;
APTR psdFindDescriptor(APTR pd, APTR pdd, Tag tag1, ...) __stackparm;
IPTR psdDoHubMethod(APTR pd, ULONG methodid, IPTR *methoddata1) __stackparm;
APTR psdAllocRTIsoHandler(APTR pep, Tag tag1, ...) __stackparm;
##end cdef

##begin cdefprivate
#include "poseidon_intern.h"
##end cdefprivate

##begin functionlist
APTR psdAllocVec(ULONG size) (D0)
VOID psdFreeVec(APTR memptr) (A1)
VOID psdLockWritePBase() ()
VOID psdLockReadPBase() ()
VOID psdUnlockPBase() ()
STRPTR psdCopyStr(CONST_STRPTR name) (A0)
VOID psdDelayMS(ULONG milli) (D0)
APTR psdAddHardware(STRPTR name, ULONG unit) (A0,D0)
VOID psdRemHardware(APTR phw) (A0)
APTR psdEnumerateHardware(APTR phw) (A0)
APTR psdAllocDevice(APTR phw) (A0)
VOID psdFreeDevice(APTR pd) (A0)
VOID psdLockReadDevice(APTR pd) (A0)
VOID psdLockWriteDevice(APTR pd) (A0)
VOID psdUnlockDevice(APTR pd) (A0)
APTR psdEnumerateDevice(APTR pp) (A1)
APTR psdGetNextDevice(APTR pd) (A0)
LONG psdGetAttrsA(ULONG type, APTR psdstruct, struct TagItem *taglist) (D0,A0,A1)
LONG psdSetAttrsA(ULONG type, APTR psdstruct, struct TagItem *taglist) (D0,A0,A1)
APTR psdAllocPipe(APTR pd, struct MsgPort *mp, APTR pep) (A0,A1,A2)
APTR psdFreePipe(APTR pp) (A1)
VOID psdPipeSetup(APTR pp, UWORD rt, UWORD rq, UWORD val, UWORD idx) (A1,D0,D1,D2,D3)
LONG psdDoPipe(APTR pp, APTR data, ULONG len) (A1,A0,D0)
VOID psdSendPipe(APTR pp, APTR data, ULONG len) (A1,A0,D0)
VOID psdAbortPipe(APTR pp) (A1)
LONG psdWaitPipe(APTR pp) (A1)
ULONG psdGetPipeActual(APTR pp) (A1)
LONG psdGetPipeError(APTR pp) (A1)
STRPTR psdGetStringDescriptor(APTR pp, UWORD idx) (A1,D0)
BOOL psdSetDeviceConfig(APTR pp, UWORD cfgnum) (A1,D0)
APTR psdAddClass(STRPTR name, ULONG version) (A1,D0)
VOID psdRemClass(APTR puc) (A1)
VOID psdClassScan() ()
STRPTR psdNumToStr(UWORD type, LONG idx, STRPTR defstr) (D0,D1,A0)
struct Task * psdSpawnSubTask(STRPTR name, APTR initpc, APTR userdata) (A0,A1,A2)
APTR psdAddErrorMsgA(UWORD level, STRPTR origin, STRPTR fmtstr, IPTR *fmtdata) (D0,A0,A1,A2)
VOID psdRemErrorMsg(APTR pem) (A0)
VOID psdSafeRawDoFmtA(STRPTR buf, ULONG len, CONST_STRPTR fmtstr, IPTR *fmtdata) (A0,D0,A1,A2)
BOOL psdSetAltInterface(APTR pp, APTR pif) (A1,A0)
APTR psdFindDeviceA(APTR pd, struct TagItem *taglist) (A0,A1)
APTR psdClaimAppBindingA(struct TagItem *taglist) (A1)
APTR psdReleaseAppBinding(APTR pab) (A0)
APTR psdAddEventHandler(struct MsgPort *mp, ULONG msgmask) (A1,D0)
VOID psdRemEventHandler(APTR peh) (A0)
VOID psdSendEvent(ULONG ehmt, APTR param1, APTR param2) (D0,A0,A1)
VOID psdReleaseDevBinding(APTR pd) (A0)
VOID psdReleaseIfBinding(APTR pif) (A0)
BOOL psdReadCfg(APTR pic, APTR formdata) (A0,A1)
APTR psdWriteCfg(APTR pic) (A0)
APTR psdFindCfgForm(APTR pic, ULONG formid) (A0,D0)
APTR psdNextCfgForm(APTR pic) (A0)
BOOL psdRemCfgForm(APTR pic) (A0)
APTR psdAddCfgEntry(APTR pic, APTR formdata) (A0,A1)
BOOL psdRemCfgChunk(APTR pic, ULONG chnkid) (A0,D0)
APTR psdGetCfgChunk(APTR pic, ULONG chnkid) (A0,D0)
VOID psdParseCfg() ()
VOID psdUnbindAll() ()
BOOL psdSetClsCfg(STRPTR owner, APTR form) (A0,A1)
APTR psdGetClsCfg(STRPTR owner) (A0)
BOOL psdSetUsbDevCfg(STRPTR owner, STRPTR devid, STRPTR ifid, APTR form) (A0,A2,A3,A1)
APTR psdGetUsbDevCfg(STRPTR owner, STRPTR devid, STRPTR ifid) (A0,A2,A3)
APTR psdFindInterfaceA(APTR pd, APTR pif, struct TagItem *taglist) (A0,A2,A1)
APTR psdFindEndpointA(APTR pif, APTR pep, struct TagItem *taglist) (A0,A2,A1)
STRPTR psdCopyStrFmtA(CONST_STRPTR fmtstr, IPTR *fmtdata) (A0,A1)
BOOL psdSetForcedBinding(STRPTR owner, STRPTR devid, STRPTR ifid) (A2,A0,A1)
STRPTR psdGetForcedBinding(STRPTR devid, STRPTR ifid) (A0,A1)
APTR psdCheckPipe(APTR pp) (A1)
APTR psdOpenStreamA(APTR pep, struct TagItem *taglist) (A0,A1)
VOID psdCloseStream(APTR pps) (A1)
LONG psdStreamRead(APTR pps, APTR buffer, LONG length) (A1,A0,D0)
LONG psdStreamWrite(APTR pps, APTR buffer, LONG length) (A1,A0,D0)
LONG psdStreamFlush(APTR pps) (A1)
LONG psdGetStreamError(APTR pps) (A1)
VOID psdCalculatePower(APTR phw) (A0)
BOOL psdLoadCfgFromDisk(STRPTR filename) (A1)
BOOL psdSaveCfgToDisk(STRPTR filename, BOOL mode) (A1,D0)
VOID psdDebugSemaphores() ()
VOID psdHubClassScan(APTR pd) (A0)
APTR psdHubClaimAppBindingA(struct TagItem *taglist) (A1)
VOID psdHubReleaseDevBinding(APTR pd) (A0)
VOID psdHubReleaseIfBinding(APTR pif) (A0)
APTR psdAllocCfgForm(ULONG formid) (D0)
BOOL psdAddStringChunk(APTR pic, ULONG chunkid, CONST_STRPTR contents) (A0,D0,A1)
BOOL psdMatchStringChunk(APTR pic, ULONG chunkid, CONST_STRPTR contents) (A0,D0,A1)
STRPTR psdGetStringChunk(APTR pic, ULONG chunkid) (A0,D0)

APTR psdFindDescriptorA(APTR pd, APTR pdd, struct TagItem *taglist) (A0,A2,A1)
IPTR psdDoHubMethodA(APTR pd, ULONG methodid, IPTR *methoddata) (A0,D0,A1)
APTR psdAllocRTIsoHandlerA(APTR pep, struct TagItem *taglist) (A0,A1)
VOID psdFreeRTIsoHandler(APTR prt) (A1)
LONG psdStartRTIso(APTR prt) (A1)
LONG psdStopRTIso(APTR prt) (A1)
ULONG psdBorrowLocksWait(struct Task *task, ULONG signals) (A1,D0)
BOOL psdSuspendDevice(APTR pd) (A0)
BOOL psdResumeDevice(APTR pd) (A0)
BOOL psdSuspendBindings(APTR pd) (A0)
BOOL psdResumeBindings(APTR pd) (A0)
##end functionlist
