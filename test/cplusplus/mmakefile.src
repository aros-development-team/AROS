# This mmakefile relies on existing and working C++ compiler. Additionally the build fails on ARM CPU.
# Because of this I did not add it to the build by default.
# This target needs to be built manually.

include $(TOP)/config/make.cfg

# Select target C++ compiler
ifeq ($(TARGET_CXX),)
  TARGET_CXX := $(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros-g++
else
  TARGET_CXX := $(TARGET_CXX) -specs=$(GENDIR)/config/specs
endif

# Remove C-only flags
CXX_FLAGS := $(CFLAGS) -isystem $(AROS_DEVELOPMENT)/include
CXX_FLAGS := $(subst -Wno-pointer-sign,, $(subst -Werror-implicit-function-declaration,, $(CXX_FLAGS)))
CXX_FLAGS := $(subst -fno-exceptions,, $(CXX_FLAGS))

USER_LDFLAGS := -L$(AROS_DEVELOPMENT)/lib

EXEDIR := $(AROS_TESTS)/cplusplus
OBJDIR := $(GENDIR)/$(CURDIR)

FILES := exception headertest

EXES := $(addprefix $(EXEDIR)/,$(notdir $(FILES)))
OBJS := $(addsuffix .o,$(addprefix $(OBJDIR)/,$(notdir $(FILES))))
DEPS := $(addsuffix .d,$(addprefix $(OBJDIR)/,$(notdir $(FILES))))

#MM
test-cxx :: $(EXEDIR) $(EXES)

$(EXEDIR):
	@$(MKDIR) $@

$(EXES) : $(EXEDIR)/% : $(OBJDIR)/%.o
	%link_q cmd=$(TARGET_CXX)

$(OBJDIR$)/%.o : %.cpp
	%compile_q cmd=$(TARGET_CXX) opt="$(CXX_FLAGS) $(TARGET_CFLAGS)"

$(OBJDIR)/%.d : %.cpp
	%mkdepend_q cc=$(TARGET_CXX) flags="$(CXX_FLAGS) $(TARGET_CFLAGS)"

%include_deps depstargets="test-cxx-quick" deps=$(DEPS)

%common