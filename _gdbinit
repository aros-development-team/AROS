handle SIGUSR1 pass noprint nostop

define liblist
    set $lib = SysBase->LibList.lh_Head

    printf "Base     OpenC   Name\n"
    printf "---------------------------------------------------------------\n"
    while ($lib->ln_Succ != 0)
	printf "%08x %5d   %s\n", \
	    $lib, \
	    ((struct Library *)$lib)->lib_OpenCnt, \
	    $lib->ln_Name
	set $lib = $lib->ln_Succ
    end
end
document liblist
List the current libraries in the system
end

define devlist
    set $dev = SysBase->DeviceList.lh_Head
    printf "Base     OpenC   Name\n"
    printf "---------------------------------------------------------------\n"
    while ($dev->ln_Succ != 0)
	printf "%08x %5d   %s\n", \
	    $dev, \
	    ((struct Library *)$dev)->lib_OpenCnt, \
	    $dev->ln_Name
	set $dev = $dev->ln_Succ
    end
end
document devlist
List the current devices in the system
end

define resourcelist
    set $res = SysBase->ResourceList.lh_Head
    printf "Base     Name\n"
    printf "---------------------------------------------------------------\n"
    while ($res->ln_Succ != 0)
	printf "%08x %s\n", $res, $res->ln_Name
	set $res = $res->ln_Succ
    end
end
document resourcelist
List the current resources in the system
end

define residentlist
    set $resp = (struct Resident **)SysBase->ResModules
    set $i = 0

    printf "Address    Pri Flags Vers Type  Name\n"
    printf "--------------------------------------------------------------\n"
    while (($resp)[$i] != 0)
	set $res = ($resp)[$i]
	printf "%08x  %4d    %02x  %3d  %3d  %s\n", \
	    $res, \
	    ((struct Resident *)$res)->rt_Pri, \
	    ((struct Resident *)$res)->rt_Flags, \
	    ((struct Resident *)$res)->rt_Version, \
	    ((struct Resident *)$res)->rt_Type, \
	    ((struct Resident *)$res)->rt_Name
	set $i = $i + 1
    end
end
document residentlist
List the system resident list
end

define taskready
    set $task = (struct Task *)SysBase->TaskReady.lh_Head

    printf "Task     SigWait  SigRecvd StkSize   StkUsed Pri Type Name\n"
    printf "-----------------------------------------------------------------------------\n"
    while ($task->tc_Node.ln_Succ != 0)
	printf "%08x %08x %08x %8d %8d %3d  %3ld %s\n", \
	    $task, \
	    $task->tc_SigWait, \
	    $task->tc_SigRecvd, \
	    $task->tc_SPUpper - $task->tc_SPLower, \
	    $task->tc_SPUpper - $task->tc_SPReg, \
	    $task->tc_Node.ln_Pri, \
	    $task->tc_Node.ln_Type, \
	    $task->tc_Node.ln_Name
	set $task = (struct Task *)$task->tc_Node.ln_Succ
    end
end
document taskready
List of tasks currently ready to run
end

define taskwait
    set $task = (struct Task *)SysBase->TaskWait.lh_Head

    printf "Task     SigWait  SigRecvd StkSize   StkUsed Pri Type Name\n"
    printf "-----------------------------------------------------------------------------\n"
    while ($task->tc_Node.ln_Succ != 0)
	printf "%08x %08x %08x %8d %8d %3d  %3ld %s\n", \
	    $task, \
	    $task->tc_SigWait, \
	    $task->tc_SigRecvd, \
	    $task->tc_SPUpper - $task->tc_SPLower, \
	    $task->tc_SPUpper - $task->tc_SPReg, \
	    $task->tc_Node.ln_Pri, \
	    $task->tc_Node.ln_Type, \
	    $task->tc_Node.ln_Name
	set $task = (struct Task *)$task->tc_Node.ln_Succ
    end
end
document taskwait
List of tasks currently waiting for an event
end

define thistask
    set $task = (struct Task *)SysBase->ThisTask
    printf "Task     SigWait  SigRecvd StkSize   StkUsed Pri Type Name\n"
    printf "-----------------------------------------------------------------------------\n"
    printf "%08x %08x %08x %8d %8d %3d  %3ld %s\n", \
	$task, \
	$task->tc_SigWait, \
	$task->tc_SigRecvd, \
	$task->tc_SPUpper - $task->tc_SPLower, \
	$task->tc_SPUpper - $task->tc_SPReg, \
	$task->tc_Node.ln_Pri, \
	$task->tc_Node.ln_Type, \
	$task->tc_Node.ln_Name
end
document thistask
Print out information about the currently running task.
end

define modlist
    if debug_seglist
        printf "SegList  Module\n"
        printf "---------------------------------------------------------------------\n"

        set $segnode = (struct debug_segnode *)debug_seglist.mlh_Head

        while ($segnode->node.mln_Succ != 0)
            printf "%08x %s\n", $segnode->seglist, $segnode->name

            set $segnode = (struct debug_segnode *)$segnode->node.mln_Succ
        end
    end
end
document modlist
List of all the modules currently loaded in memory
end

define findaddr
    set $cont = 1

    #first search in modules loaded from disk
    printf "Searching in the loaded modules...\n"
    if debug_seglist
        set $segnode = (struct debug_segnode *)debug_seglist.mlh_Head

        while ($segnode->node.mln_Succ != 0) && $cont
            set $nextseg = $segnode->seglist

            while $nextseg && $cont
	        if $arg0 >= $nextseg && $arg0 <= ($nextseg + *((ULONG *)$nextseg - 1) - sizeof(BPTR))
                    printf "Address found in %s, which is loaded at 0x%08x.\nIf this is an executable, its .text section starts at 0x%08x.\n", $segnode->name, $segnode->seglist, $segnode->start_address

                    set $cont = 0
                end

                set $nextseg = *(BPTR *)$nextseg
     	    end

            set $segnode = (struct debug_segnode *)$segnode->node.mln_Succ
        end
    end

    #then in the resident list
    if $cont
        printf "Searching in the resident list...\n"
    end

    set $resp = (struct Resident **)SysBase->ResModules
    set $i = 0

    while (($resp)[$i] != 0) && $cont
	set $res = ($resp)[$i]

        if ($arg0 >= $res) && ($arg0 <= $res->rt_EndSkip)
            printf "Address found in %s, which resides at 0x%08x\n", $res->rt_Name, $res
            set $cont = 0
        end

        set $i = $i + 1
    end

    if $cont
        printf "No matching module for this address\n"
    end
end
document findaddr
-Shows the module that contains the given address
-
-To debug a problem in AROS, do the following:
-
-1. Get a stacktrace with bt or similar.
-2. Use findaddr with such an address to find out in which
-   module it is:
-3. Use add-symbol-file to load that modules symbols.
-4. Now you can run bt (or similar) again and you should see the
-   addresses resolved as symbols.
-
-Example:
-
-0x4058d45b in ?? ()
-
-(gdb) findaddr 0x4058d45b
-
-Searching in the loaded modules...
-Address found in Workbench:contrib/Zune/Libs/muimaster.library, which is loaded at 0x405379a4.
-If this is an executable, its .text section starts at 0x405379b0.
-(gdb) add-symbol-file contrib/Zune/Libs/muimaster.library 0x405379b0
-add symbol table from file "contrib/Zune/Libs/muimaster.library" at
-        .text_addr = 0x405379b0
-(y or n) y
-Reading symbols from contrib/Zune/Libs/muimaster.library...done.
-(gdb) bt
-#0  0x4058d45b in strlen (ptr=0x80 <Address 0x80 out of bounds>) at strlen.c:45
-#1  0x00000000 in lastx.78 ()
end

define printtaglist
    set $list = (struct TagItem *)$arg0

    printf "Tag         Data (Hex)     Data (Dec)\n"
    printf "--------------------------------------\n"

    while $list->ti_Tag != 0
	# Handle the possible control tag...
	if $list->ti_Tag == 1
	    printf "TAG_IGNORE\n"
	else if $list->ti_Tag == 2
	    printf "TAG_MORE    0x08%x\n", $list->ti_Data
	    set $list = (struct TagItem *)$list->ti_Data
	else if $list->ti_Tag == 3
	    printf "TAG_SKIP    %d\n", $list->ti_Data
	    set $list = $list + $list->ti_Tag + 1
	else
	    printf "0x%08x  0x%08x      %9lu\n", $list->ti_Tag, $list->ti_Data, $list->ti_Data
	    set $list = $list + 1
	end
    end
    printf "TAG_DONE\n"
end
document printtaglist
end
    
